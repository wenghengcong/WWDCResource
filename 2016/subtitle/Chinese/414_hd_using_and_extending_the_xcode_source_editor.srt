1
00:00:19,353 --> 00:00:24,992
<c.magenta>Xcode源代码编辑器的使用和扩展</c>


2
00:00:28,262 --> 00:00:29,096
<c.magenta>大家好</c>


3
00:00:29,530 --> 00:00:32,432
<c.magenta>欢迎来到“Xcode</c>
<c.magenta>源代码编辑器的使用与扩展”</c>


4
00:00:32,933 --> 00:00:35,102
<c.magenta>我是Mike 是Xcode工程师</c>


5
00:00:35,269 --> 00:00:37,471
<c.magenta>我是你们和beer bash</c>
<c.magenta>之间的必经之路</c>


6
00:00:39,873 --> 00:00:41,575
<c.magenta>那我们今天要讲的是什么呢？</c>


7
00:00:42,809 --> 00:00:44,011
<c.magenta>嗯我们马上开始</c>


8
00:00:44,077 --> 00:00:46,947
<c.magenta>我将给大家展示XCode 8中</c>
<c.magenta>一些新增的很棒的功能</c>


9
00:00:47,147 --> 00:00:48,315
<c.magenta>但这还不是全部</c>


10
00:00:48,382 --> 00:00:50,551
<c.magenta>我还会给大家展示</c>
<c.magenta>一些非常有帮助的功能</c>


11
00:00:50,617 --> 00:00:53,420
<c.magenta>这些都已经集成在</c>
<c.magenta>今天正运行的Xcode中</c>


12
00:00:53,487 --> 00:00:55,422
<c.magenta>你可能对这些并不了解</c>


13
00:00:55,489 --> 00:00:56,723
<c.magenta>但是我觉得它们非常酷</c>


14
00:00:57,291 --> 00:01:01,228
<c.magenta>我每天都用它们来快速编辑</c>
<c.magenta>和操控Xcode的源代码库</c>


15
00:01:01,895 --> 00:01:05,331
<c.magenta>需要说明的是我这里给大家</c>
<c.magenta>展示的所有东西</c>


16
00:01:05,666 --> 00:01:07,534
<c.magenta>在Xcode中的都是标准集成的</c>


17
00:01:08,135 --> 00:01:11,271
<c.magenta>然后我的同事Chris会到台上来</c>


18
00:01:11,405 --> 00:01:14,141
<c.magenta>教大家如何拓展我们所提供的东西</c>


19
00:01:14,474 --> 00:01:17,110
<c.magenta>并教大家如何进一步</c>
<c.magenta>扩展Xcode源代码编辑器</c>


20
00:01:18,145 --> 00:01:20,147
<c.magenta>你可以编写扩展程序</c>


21
00:01:20,214 --> 00:01:23,183
<c.magenta>让编辑器做一些你经常要它做的事情</c>


22
00:01:23,283 --> 00:01:25,185
<c.magenta>然后你甚至还可以分享这些扩展程序</c>


23
00:01:25,252 --> 00:01:28,222
<c.magenta>给你的朋友同事甚至全世界</c>


24
00:01:28,288 --> 00:01:30,591
<c.magenta>在源代码编辑器中</c>
<c.magenta>你将会注意到的第一个东西</c>


25
00:01:30,657 --> 00:01:34,194
<c.magenta>或者你只要在今天会场上</c>
<c.magenta>抬头环视一下就会看到</c>


26
00:01:34,261 --> 00:01:37,698
<c.magenta>我们新的源代码字体SF mono</c>


27
00:01:38,799 --> 00:01:42,069
<c.magenta>这是mono space对系统字体</c>
<c.magenta>San Francisco的致敬</c>


28
00:01:42,669 --> 00:01:47,841
<c.magenta>我们的字体专家特意设计了适合显示屏</c>
<c.magenta>retina的SF mono字体</c>


29
00:01:48,208 --> 00:01:49,543
<c.magenta>还精心设计了</c>


30
00:01:49,610 --> 00:01:51,945
<c.magenta>程序代码符的各种符号字体</c>


31
00:01:52,012 --> 00:01:54,882
<c.magenta>即便在很小的尺寸上都清晰可辨</c>


32
00:01:55,782 --> 00:01:57,117
<c.magenta>大家将注意到的下一个是</c>


33
00:01:57,184 --> 00:01:59,353
<c.magenta>看我正在编辑器中来回移动的地方</c>


34
00:01:59,987 --> 00:02:03,156
<c.magenta>就是我们对当前编辑行会进行高亮显示</c>


35
00:02:03,223 --> 00:02:05,492
<c.magenta>这样一目了然很快就可以</c>
<c.magenta>定位当前编辑的地方</c>


36
00:02:06,326 --> 00:02:10,531
<c.magenta>每个内置的Xcode主题都有精细的</c>


37
00:02:11,131 --> 00:02:14,401
<c.magenta>人工配置的高亮颜色但也可自定义</c>


38
00:02:14,635 --> 00:02:16,937
<c.magenta>所以你可以按自己喜好</c>
<c.magenta>将它改得尽量醒目</c>


39
00:02:17,004 --> 00:02:20,040
<c.magenta>或者如果你不喜欢这样的</c>
<c.magenta>也可将它设置为完全透明</c>


40
00:02:21,542 --> 00:02:25,479
<c.magenta>你可能已经熟悉我们的注释</c>
<c.magenta>和取消注释的命令</c>


41
00:02:25,546 --> 00:02:26,780
<c.magenta>也就是“/”命令对吧？</c>


42
00:02:27,814 --> 00:02:29,850
<c.magenta>对了我们增加了一个新的命令</c>


43
00:02:30,083 --> 00:02:34,354
<c.magenta>你可以点击选项键并</c>
<c.magenta>使用“/”命令把它调出来</c>


44
00:02:34,788 --> 00:02:35,622
<c.magenta>这样就插入</c>


45
00:02:36,123 --> 00:02:37,391
<c.magenta>一个资料注释</c>


46
00:02:43,797 --> 00:02:44,631
<c.magenta>因此</c>


47
00:02:44,865 --> 00:02:49,603
<c.magenta>这可以直接用于任何</c>
<c.magenta>类函数 类 结构体或它们之上</c>


48
00:02:49,903 --> 00:02:53,073
<c.magenta>你也知道这些东西</c>
<c.magenta>是一种结构性的码位元素</c>


49
00:02:53,574 --> 00:02:54,441
<c.magenta>此外</c>


50
00:02:55,909 --> 00:02:58,078
<c.magenta>大家还会注意到此处这些小占位符</c>


51
00:02:58,145 --> 00:03:00,781
<c.magenta>众所周知这些用来描述你的类函数</c>


52
00:03:00,914 --> 00:03:02,482
<c.magenta>或讨论参数</c>


53
00:03:04,017 --> 00:03:06,687
<c.magenta>throws描述或者大家都知道的</c>


54
00:03:06,753 --> 00:03:08,989
<c.magenta>描述一些有关返回值的重要内容</c>


55
00:03:09,323 --> 00:03:13,193
<c.magenta>真正有价值的是这些片段性的资料</c>


56
00:03:13,293 --> 00:03:16,196
<c.magenta>你在代码中添加的会在快速帮助中出现</c>


57
00:03:16,296 --> 00:03:19,499
<c.magenta>还会在代码完成窗口的底部出现</c>


58
00:03:20,567 --> 00:03:23,070
<c.magenta>还有请注意我们提供了</c>


59
00:03:23,136 --> 00:03:24,605
<c.magenta>新的SF mono字体</c>


60
00:03:24,905 --> 00:03:27,574
<c.magenta>提供了更多选择</c>
<c.magenta>而不仅局限于常规和加粗</c>


61
00:03:28,108 --> 00:03:31,311
<c.magenta>资料注释使用SF mono细体</c>


62
00:03:31,411 --> 00:03:33,814
<c.magenta>而关键字使用SF mono中等</c>


63
00:03:33,881 --> 00:03:36,283
<c.magenta>只是更亮更粗一点</c>


64
00:03:36,350 --> 00:03:39,152
<c.magenta>相对于文件中其它内容都使用</c>
<c.magenta>的SF mono常规字体</c>


65
00:03:40,153 --> 00:03:41,788
<c.magenta>不同于大多数</c>
<c.magenta>其它mono space字体</c>


66
00:03:42,022 --> 00:03:44,658
<c.magenta>我们给SF mono</c>
<c.magenta>配置了完整的磅数表</c>


67
00:03:44,925 --> 00:03:47,227
<c.magenta>从细体到半粗体再到黑体</c>


68
00:03:47,561 --> 00:03:49,429
<c.magenta>我们还引入了斜体差异配置项</c>


69
00:03:50,097 --> 00:03:52,165
<c.magenta>这可以保持每个字符之间的间距</c>


70
00:03:52,232 --> 00:03:55,669
<c.magenta>即便是对需要强调的内容</c>
<c.magenta>进行精准自定义也可胜任</c>


71
00:03:57,771 --> 00:04:00,741
<c.magenta>下面讲下一功能我将展示</c>
<c.magenta>如何跳转到另一个文件</c>


72
00:04:00,807 --> 00:04:04,711
<c.magenta>我通过按下Command</c>
<c.magenta>及Shift O实现快速打开</c>


73
00:04:04,845 --> 00:04:08,549
<c.magenta>并输入几个字符转到</c>
<c.magenta>我的TimerViewController</c>


74
00:04:10,984 --> 00:04:12,653
<c.magenta>大家可能之前见过这个</c>


75
00:04:13,120 --> 00:04:15,055
<c.magenta>这是文档条目菜单</c>


76
00:04:15,822 --> 00:04:18,659
<c.magenta>通过按Control 6</c>
<c.magenta>就可以打开这个菜单</c>


77
00:04:20,060 --> 00:04:22,696
<c.magenta>它拥有所有的类、结构体、枚举、属性</c>


78
00:04:22,896 --> 00:04:24,631
<c.magenta>该文件中所有的东西</c>


79
00:04:25,566 --> 00:04:27,568
<c.magenta>但这并不是最有趣的部分</c>


80
00:04:27,901 --> 00:04:30,838
<c.magenta>你知道吗当这个菜单</c>
<c.magenta>弹出只要你一开始输入</c>


81
00:04:30,904 --> 00:04:33,440
<c.magenta>它就会对项目进行过滤？</c>


82
00:04:34,408 --> 00:04:38,011
<c.magenta>然后你就会注意到此处</c>


83
00:04:38,378 --> 00:04:40,447
<c.magenta>这个小小的“待修正”注释</c>


84
00:04:40,547 --> 00:04:43,784
<c.magenta>实际上就有个小的创可贴图标在上面</c>


85
00:04:44,218 --> 00:04:45,919
<c.magenta>我觉得这很可爱</c>


86
00:04:47,754 --> 00:04:48,589
<c.magenta>接下来...</c>


87
00:04:51,024 --> 00:04:53,193
<c.magenta>转到这儿进入</c>
<c.magenta>my load view 类函数</c>


88
00:04:53,961 --> 00:04:56,496
<c.magenta>在这儿你可以看到</c>
<c.magenta>每个图片都有一种颜色</c>


89
00:04:56,563 --> 00:04:59,099
<c.magenta>我们一直在等设计师为我们提供</c>


90
00:04:59,733 --> 00:05:02,870
<c.magenta>其实我昨晚才弄了这些P&G's</c>


91
00:05:02,936 --> 00:05:05,239
<c.magenta>我把它们放进jogger资源目录</c>


92
00:05:05,772 --> 00:05:07,174
<c.magenta>这样我们就能真正</c>


93
00:05:07,274 --> 00:05:08,442
<c.magenta>在下面的库里看到它们</c>


94
00:05:09,576 --> 00:05:10,978
<c.magenta>这个用于Timer Button</c>


95
00:05:12,012 --> 00:05:15,616
<c.magenta>接下来我要从这儿选择当前行的末尾</c>


96
00:05:15,716 --> 00:05:19,186
<c.magenta>通过按下Control E</c>
<c.magenta>并同时按住Shift键</c>


97
00:05:20,153 --> 00:05:23,423
<c.magenta>我将按下Command</c>
<c.magenta>Space调用代码完成</c>


98
00:05:24,725 --> 00:05:26,226
<c.magenta>现在仔细看</c>


99
00:05:26,360 --> 00:05:29,363
<c.magenta>我要使用代码完成</c>
<c.magenta>窗口直接分配这张图片</c>


100
00:05:30,297 --> 00:05:33,066
<c.magenta>我只需要输入t b就可以获取</c>
<c.magenta>我的Timer Button</c>


101
00:05:34,535 --> 00:05:37,738
<c.magenta>你还会注意到和Xcode 7.3</c>
<c.magenta>一样的代码完成窗口</c>


102
00:05:37,804 --> 00:05:39,940
<c.magenta>现在用了相同的模糊匹配算法</c>


103
00:05:40,174 --> 00:05:42,976
<c.magenta>与快速打开、文档条目菜单</c>


104
00:05:43,177 --> 00:05:45,512
<c.magenta>甚至在资料窗口的新搜索所用算法一样</c>


105
00:05:46,613 --> 00:05:49,550
<c.magenta>在左边你还可以看到图片的预览</c>


106
00:05:49,616 --> 00:05:52,019
<c.magenta>这样你就能知道所选择的是否正确</c>


107
00:05:52,753 --> 00:05:53,587
<c.magenta>接下来...</c>


108
00:05:54,288 --> 00:05:56,423
<c.magenta>在源代码中就在这儿Boom</c>


109
00:05:56,924 --> 00:05:58,025
<c.magenta>这是图文并茂的</c>


110
00:06:04,898 --> 00:06:06,733
<c.magenta>因此库里的的每一张图片</c>


111
00:06:06,800 --> 00:06:09,203
<c.magenta>不管是来自资源目录</c>


112
00:06:09,269 --> 00:06:11,071
<c.magenta>还是仅仅作为项目的参考</c>


113
00:06:11,138 --> 00:06:13,207
<c.magenta>现在都可以从代码完成窗口中看到</c>


114
00:06:13,273 --> 00:06:14,308
<c.magenta>在源代码编辑器中</c>


115
00:06:15,576 --> 00:06:18,846
<c.magenta>接下来让这生效的方式</c>
<c.magenta>就是插入一个Swift特定实体</c>


116
00:06:19,146 --> 00:06:21,548
<c.magenta>在源代码中这对</c>
<c.magenta>Swift编译器是已知的</c>


117
00:06:21,915 --> 00:06:24,852
<c.magenta>而且它解除了对指定</c>
<c.magenta>UIImage图像的调用</c>


118
00:06:25,319 --> 00:06:28,722
<c.magenta>这样你就可以看到所有图片都</c>
<c.magenta>放置有序而不仅仅是名称字符串</c>


119
00:06:29,489 --> 00:06:31,024
<c.magenta>且对颜色也进行了同样处理</c>


120
00:06:31,692 --> 00:06:33,994
<c.magenta>接下来我要从这儿选择当前行的末尾</c>


121
00:06:34,728 --> 00:06:37,764
<c.magenta>并调用代码完成和类型颜色</c>


122
00:06:39,266 --> 00:06:43,237
<c.magenta>当我在此处敲击Return</c>
<c.magenta>会发生什么呢</c>


123
00:06:43,537 --> 00:06:46,573
<c.magenta>大家会注意到我把</c>
<c.magenta>非常整洁的颜色选取器调出来了</c>


124
00:06:48,475 --> 00:06:50,410
<c.magenta>从这儿我只需用向下的方向键</c>


125
00:06:50,677 --> 00:06:54,181
<c.magenta>选择一种颜色就像这样</c>
<c.magenta>就可以选择优雅的绿色</c>


126
00:06:55,782 --> 00:06:58,819
<c.magenta>需要知道很重要的一点是</c>
<c.magenta>所有这些图像和彩色文字</c>


127
00:06:58,886 --> 00:07:01,054
<c.magenta>都是全键盘导航的</c>


128
00:07:01,588 --> 00:07:05,826
<c.magenta>若我在某个文本上按住Shift</c>
<c.magenta>和回退箭头并点击Return</c>


129
00:07:05,893 --> 00:07:07,861
<c.magenta>就会把颜色选取器再次调出来</c>


130
00:07:08,562 --> 00:07:10,964
<c.magenta>而且你知道我还是可以用方向键选择</c>


131
00:07:11,532 --> 00:07:15,702
<c.magenta>但是如果这些弹出来的颜色</c>
<c.magenta>不是你正要找的</c>


132
00:07:15,769 --> 00:07:17,938
<c.magenta>大家看如果这刚好不是我正要找的</c>


133
00:07:18,705 --> 00:07:20,040
<c.magenta>你可以使用最近的颜色</c>


134
00:07:20,107 --> 00:07:22,409
<c.magenta>这也是和Interface</c>
<c.magenta>Builder共享的</c>


135
00:07:22,709 --> 00:07:25,078
<c.magenta>或者你可以点击这儿下面的其他按钮</c>


136
00:07:25,145 --> 00:07:27,447
<c.magenta>它会调出标准的系统颜色面板</c>


137
00:07:28,482 --> 00:07:34,121
<c.magenta>在这种情况中我其实只是想取样</c>
<c.magenta>这种非常优雅的海军蓝就从这个按钮</c>


138
00:07:34,188 --> 00:07:37,357
<c.magenta>因为在我构建它时</c>
<c.magenta>这就和该按钮是绑定的</c>


139
00:07:38,492 --> 00:07:41,061
<c.magenta>但我们此处还是有点小错误</c>


140
00:07:41,662 --> 00:07:44,765
<c.magenta>此处的颜色文本是UIColor</c>


141
00:07:44,831 --> 00:07:49,903
<c.magenta>但我们将其指定的层是cgLayer</c>
<c.magenta>所以应该需要cgColor</c>


142
00:07:50,404 --> 00:07:53,106
<c.magenta>所以我可以很快解决这个问题就像这样</c>


143
00:07:59,313 --> 00:08:02,216
<c.magenta>希望这样已经讲清楚了图像和颜色文本</c>


144
00:08:02,282 --> 00:08:06,620
<c.magenta>实际上都是完整分类和检查的</c>
<c.magenta>在Swift中是实的对象</c>


145
00:08:08,522 --> 00:08:10,490
<c.magenta>我下面想要给大家演示的</c>


146
00:08:11,391 --> 00:08:15,262
<c.magenta>其实并不是一个新功能</c>
<c.magenta>它甚至不是Xcode的功能</c>


147
00:08:16,029 --> 00:08:18,866
<c.magenta>它实际上属于标准的Cocoa</c>
<c.magenta>Text系统的一部分</c>


148
00:08:18,932 --> 00:08:21,201
<c.magenta>从macOS 10.0之前就这样</c>


149
00:08:22,603 --> 00:08:24,171
<c.magenta>这就是查找粘贴板</c>


150
00:08:24,671 --> 00:08:26,373
<c.magenta>大家可能之前没有注意过</c>


151
00:08:26,440 --> 00:08:29,543
<c.magenta>如果你进行了查找</c>
<c.magenta>可能通过选择一些文本</c>


152
00:08:30,110 --> 00:08:35,749
<c.magenta>比如说此处Pause 然后使用</c>
<c.magenta>Command C将其复制到粘贴板</c>


153
00:08:35,816 --> 00:08:38,418
<c.magenta>再使用Command F调出查找框</c>


154
00:08:38,485 --> 00:08:40,687
<c.magenta>然后通过Command V</c>
<c.magenta>将它粘贴其中</c>


155
00:08:41,321 --> 00:08:47,528
<c.magenta>相同的搜索过程</c>
<c.magenta>也会出现在其他应用程序中</c>


156
00:08:48,562 --> 00:08:50,063
<c.magenta>这很奇怪不是吗？</c>


157
00:08:51,031 --> 00:08:51,865
<c.magenta>嗯</c>


158
00:08:53,433 --> 00:08:56,436
<c.magenta>这是因为查找粘贴板是...</c>


159
00:08:56,904 --> 00:09:01,508
<c.magenta>它其实是跨应用程序工作的</c>
<c.magenta>就像众所周知的剪贴板</c>


160
00:09:02,576 --> 00:09:05,979
<c.magenta>它与剪贴板是并存的</c>
<c.magenta>而且两者可以同时存在</c>


161
00:09:06,280 --> 00:09:09,917
<c.magenta>所以实际上就有一个非常酷的技巧</c>
<c.magenta>如果你有一些东西</c>


162
00:09:09,983 --> 00:09:12,853
<c.magenta>想要保留在剪贴板中而不被清除</c>


163
00:09:13,754 --> 00:09:15,455
<c.magenta>但是如果你仍然想要搜索</c>


164
00:09:16,757 --> 00:09:19,092
<c.magenta>比如从这儿开始搜索</c>


165
00:09:19,593 --> 00:09:21,795
<c.magenta>你只需要按下Command E</c>


166
00:09:22,196 --> 00:09:24,898
<c.magenta>就会把它直接推送到查找粘贴板中</c>


167
00:09:25,666 --> 00:09:29,336
<c.magenta>然后这样就可以</c>
<c.magenta>让你点击Command G</c>


168
00:09:29,403 --> 00:09:33,774
<c.magenta>并循环遍历该文件中所有匹配的内容</c>


169
00:09:35,242 --> 00:09:39,279
<c.magenta>现在如果你只是</c>
<c.magenta>想在同一文件中快速查找和替换</c>


170
00:09:39,546 --> 00:09:41,448
<c.magenta>我们也提供一条专门的命令</c>


171
00:09:42,249 --> 00:09:46,019
<c.magenta>如果你按住</c>
<c.magenta>Command Control E</c>


172
00:09:46,620 --> 00:09:48,856
<c.magenta>实际就会对整个范围内的</c>
<c.magenta>全部内容执行编辑</c>


173
00:09:49,223 --> 00:09:51,859
<c.magenta>这样就修改了本文件中</c>
<c.magenta>所有该符号的实例</c>


174
00:09:52,292 --> 00:09:54,895
<c.magenta>所以这里我可以给这个类函数加上ED</c>


175
00:09:54,962 --> 00:09:56,964
<c.magenta>因为started听起来更好一点</c>


176
00:09:57,898 --> 00:09:58,732
<c.magenta>而且...</c>


177
00:10:00,868 --> 00:10:03,971
<c.magenta>这种方法可以大大节约时间</c>
<c.magenta>我自己就经常使用它</c>


178
00:10:05,105 --> 00:10:08,041
<c.magenta>现在如果你想要做的是移动大约几行</c>


179
00:10:08,275 --> 00:10:10,511
<c.magenta>你也不需要剪贴板来完成</c>


180
00:10:10,577 --> 00:10:13,180
<c.magenta>实际上我们提供了</c>
<c.magenta>一条专门的命令来完成这个</c>


181
00:10:13,914 --> 00:10:20,153
<c.magenta>若此处选择几行并按住Command</c>
<c.magenta>Option Bracket</c>


182
00:10:20,687 --> 00:10:24,291
<c.magenta>你会注意到我其实可以移动整个区块</c>


183
00:10:24,358 --> 00:10:27,561
<c.magenta>在if函数和其它类函数</c>
<c.magenta>的里面或外面移动</c>


184
00:10:28,962 --> 00:10:32,566
<c.magenta>它们只是在你的代码里整体挪动</c>


185
00:10:35,169 --> 00:10:36,837
<c.magenta>这确实很棒</c>


186
00:10:36,904 --> 00:10:39,506
<c.magenta>如果你每次只在同一文件中操作</c>


187
00:10:39,706 --> 00:10:42,543
<c.magenta>但若你想在其它文件中进行交叉查找</c>


188
00:10:44,745 --> 00:10:48,115
<c.magenta>例如若我想找出所有的timer实例</c>


189
00:10:49,483 --> 00:10:53,987
<c.magenta>你可以通过按住</c>
<c.magenta>Command F和Shift完成</c>


190
00:10:54,054 --> 00:10:55,389
<c.magenta>实现在整个项目内查找</c>


191
00:10:56,290 --> 00:10:58,091
<c.magenta>这里我就...</c>


192
00:10:58,926 --> 00:11:02,996
<c.magenta>把timer加入到我的查找粘贴板中</c>
<c.magenta>进行搜索的</c>


193
00:11:05,299 --> 00:11:08,802
<c.magenta>这实际上是我最近才被告知的一个特性</c>


194
00:11:09,403 --> 00:11:13,574
<c.magenta>我不需要点击进入</c>
<c.magenta>查找导航框其实就可以开始</c>


195
00:11:13,640 --> 00:11:15,309
<c.magenta>通过上下键选择这些结果</c>


196
00:11:15,742 --> 00:11:17,678
<c.magenta>此处Command G也可以实现</c>


197
00:11:17,945 --> 00:11:20,614
<c.magenta>唯一不同的是</c>
<c.magenta>我仅按住了Control键</c>


198
00:11:20,681 --> 00:11:22,282
<c.magenta>同时按下了Command G</c>


199
00:11:22,783 --> 00:11:25,552
<c.magenta>这样就可以遍历所有的结果</c>


200
00:11:25,786 --> 00:11:27,321
<c.magenta>在所有不同的文件内遍历</c>


201
00:11:28,455 --> 00:11:30,691
<c.magenta>包括Interface</c>
<c.magenta>Builder文档</c>


202
00:11:30,824 --> 00:11:33,227
<c.magenta>以及其中所有的实例和匹配记录</c>


203
00:11:34,995 --> 00:11:37,164
<c.magenta>通过按住Shift可逆向实施</c>


204
00:11:37,264 --> 00:11:38,699
<c.magenta>与Command G效果一样</c>


205
00:11:39,766 --> 00:11:42,870
<c.magenta>所以我不知道我知道有些人其实</c>


206
00:11:43,003 --> 00:11:44,371
<c.magenta>把这些记下来</c>


207
00:11:45,572 --> 00:11:49,877
<c.magenta>但是你真的不需要记</c>
<c.magenta>因为在Xcode中其实就有个地方</c>


208
00:11:49,943 --> 00:11:52,312
<c.magenta>提供了所有这些命令的完整列表</c>


209
00:11:52,579 --> 00:11:53,814
<c.magenta>及其相应的按键</c>


210
00:11:54,281 --> 00:11:56,850
<c.magenta>这就在Xcode参数设置窗口中</c>


211
00:11:58,585 --> 00:12:00,821
<c.magenta>在这儿在按键绑定设置窗格中</c>


212
00:12:01,388 --> 00:12:03,257
<c.magenta>你其实可以进行搜索</c>


213
00:12:03,323 --> 00:12:06,527
<c.magenta>搜索任何涉及到的东西</c>


214
00:12:06,894 --> 00:12:08,629
<c.magenta>你可以查看所有的结果</c>


215
00:12:09,463 --> 00:12:12,666
<c.magenta>还有如果你含糊地重新调用</c>


216
00:12:12,733 --> 00:12:15,035
<c.magenta>可能会有某种显示命令</c>


217
00:12:15,102 --> 00:12:20,140
<c.magenta>你可以按下Command J</c>


218
00:12:20,974 --> 00:12:23,810
<c.magenta>这实际上也就是搜索键盘快捷键</c>


219
00:12:23,944 --> 00:12:25,145
<c.magenta>这确实很强大</c>


220
00:12:25,779 --> 00:12:29,616
<c.magenta>如果你不喜欢我们为Xcode</c>
<c.magenta>所有内置命令而设置的键盘快捷键</c>


221
00:12:29,850 --> 00:12:31,485
<c.magenta>你可以从此处自行设置</c>


222
00:12:33,153 --> 00:12:34,521
<c.magenta>此外……</c>


223
00:12:35,289 --> 00:12:37,057
<c.magenta>如果我们的内置命令不够</c>


224
00:12:37,124 --> 00:12:38,892
<c.magenta>且/或者刚好无法完成</c>


225
00:12:38,959 --> 00:12:42,362
<c.magenta>你经常希望代码编辑器做的事情</c>


226
00:12:42,629 --> 00:12:44,031
<c.magenta>我想邀请Chris上台</c>


227
00:12:44,531 --> 00:12:47,467
<c.magenta>教大家如何添加自定义的命令</c>
<c.magenta>Chris</c>


228
00:12:53,273 --> 00:12:54,107
<c.magenta>谢谢你Mike</c>


229
00:12:57,244 --> 00:12:59,880
<c.magenta>如Mike所说我是Chris</c>
<c.magenta>今天我要向大家展示</c>


230
00:12:59,947 --> 00:13:03,283
<c.magenta>如何通过源代码编辑器扩展Xcode</c>


231
00:13:04,518 --> 00:13:07,955
<c.magenta>现在向大家展示</c>
<c.magenta>如何向源代码编辑器添加个人命令</c>


232
00:13:08,155 --> 00:13:11,024
<c.magenta>使之成为编辑器菜单的一部分</c>


233
00:13:12,025 --> 00:13:14,695
<c.magenta>你的命令可以修改用户的文本</c>


234
00:13:15,195 --> 00:13:17,998
<c.magenta>以及该文本内的选项</c>


235
00:13:18,098 --> 00:13:19,366
<c.magenta>说到运行导航</c>


236
00:13:20,100 --> 00:13:22,669
<c.magenta>与一些其他类型的应用程序扩展不同</c>


237
00:13:23,103 --> 00:13:29,009
<c.magenta>你可以将任何数量的命令作为</c>
<c.magenta>Xcode源代码编辑器的扩展来实现</c>


238
00:13:31,111 --> 00:13:35,582
<c.magenta>我们将Xcode扩展建立在</c>
<c.magenta>应用程序扩展的基础上</c>


239
00:13:35,682 --> 00:13:39,253
<c.magenta>这是我们所有操作系统扩展性的基础</c>


240
00:13:40,554 --> 00:13:43,457
<c.magenta>既然Xcode拓展</c>
<c.magenta>即是应用程序拓展</c>


241
00:13:43,891 --> 00:13:48,962
<c.magenta>各个run函数即在各自进程中</c>
<c.magenta>并能执行所有在该进程内接受的命令</c>


242
00:13:49,029 --> 00:13:54,535
<c.magenta>且不会对Xcode或</c>
<c.magenta>其他扩展造成干扰</c>


243
00:13:55,836 --> 00:14:00,941
<c.magenta>当然作为应用程序扩展</c>
<c.magenta>Xcode扩展也是沙箱型的</c>


244
00:14:01,008 --> 00:14:05,179
<c.magenta>并通过各种权限来</c>
<c.magenta>完成脱离该沙箱所需做的事</c>


245
00:14:06,713 --> 00:14:11,852
<c.magenta>Xcode只能访问Xcode扩展</c>


246
00:14:11,919 --> 00:14:16,456
<c.magenta>以及在运行时所需的文本与元数据</c>


247
00:14:17,224 --> 00:14:18,926
<c.magenta>以此来执行相关操作</c>


248
00:14:19,826 --> 00:14:22,196
<c.magenta>它们无法访问项目结构</c>


249
00:14:22,362 --> 00:14:25,832
<c.magenta>以及磁盘上的用户文件</c>


250
00:14:27,568 --> 00:14:28,969
<c.magenta>为什么我们要这样设计呢？</c>


251
00:14:29,670 --> 00:14:30,571
<c.magenta>当然...</c>


252
00:14:31,004 --> 00:14:31,872
<c.magenta>为了稳定性</c>


253
00:14:32,573 --> 00:14:35,642
<c.magenta>我们希望确保Xcode能尽量稳定</c>


254
00:14:35,709 --> 00:14:37,044
<c.magenta>对我们所有的用户</c>


255
00:14:38,378 --> 00:14:40,280
<c.magenta>以及安全性考虑</c>


256
00:14:40,881 --> 00:14:43,951
<c.magenta>应用程序扩展是我们提供给大家来</c>


257
00:14:44,017 --> 00:14:48,255
<c.magenta>增强操作系统及我们现有工具的方式</c>


258
00:14:48,322 --> 00:14:51,491
<c.magenta>并同时能保持整个系统的完整性</c>


259
00:14:52,559 --> 00:14:55,896
<c.magenta>当然还有运行速度方面的考虑</c>


260
00:14:56,296 --> 00:15:00,534
<c.magenta>应用程序扩展是建立在</c>
<c.magenta>Mach信息与XPC之上的</c>


261
00:15:00,934 --> 00:15:02,236
<c.magenta>并且是完全异步的</c>


262
00:15:02,302 --> 00:15:06,740
<c.magenta>因此它们能快速运行且</c>
<c.magenta>不会降低用户的速度</c>


263
00:15:07,641 --> 00:15:09,643
<c.magenta>还有另一个原因</c>


264
00:15:09,710 --> 00:15:12,513
<c.magenta>我们决定将应用程序扩展</c>


265
00:15:12,579 --> 00:15:14,448
<c.magenta>作为Xcode扩展的基础</c>


266
00:15:15,983 --> 00:15:19,286
<c.magenta>这是为了将它们放到</c>
<c.magenta>Mac APP Store内</c>


267
00:15:27,060 --> 00:15:29,830
<c.magenta>就像所有其他应用程序扩展一样</c>


268
00:15:30,063 --> 00:15:34,168
<c.magenta>Xcode扩展被嵌入到了</c>
<c.magenta>一个主应用程序中</c>


269
00:15:35,135 --> 00:15:37,538
<c.magenta>该主应用程序是一个理想的载体</c>


270
00:15:37,804 --> 00:15:41,041
<c.magenta>来搭载你的扩展偏好或配置信息</c>


271
00:15:41,308 --> 00:15:43,410
<c.magenta>例如为了控制</c>


272
00:15:43,477 --> 00:15:46,580
<c.magenta>用户实际希望从你的拓展中</c>
<c.magenta>能够使用的命令</c>


273
00:15:47,281 --> 00:15:50,551
<c.magenta>并且这也是一个搭载其他任何</c>


274
00:15:50,617 --> 00:15:52,486
<c.magenta>你希望该拓展所提供的UI理想载体</c>


275
00:15:52,786 --> 00:15:56,256
<c.magenta>因为Xcode所能做的是提供有关</c>


276
00:15:56,557 --> 00:15:58,091
<c.magenta>你的各命令的菜单项</c>


277
00:15:59,560 --> 00:16:04,831
<c.magenta>成为了应用程序便能进而实现</c>
<c.magenta>应用程序扩展</c>


278
00:16:05,065 --> 00:16:09,369
<c.magenta>便能在Mac App Store上</c>
<c.magenta>找到Xcode扩展</c>


279
00:16:09,803 --> 00:16:14,041
<c.magenta>当然你还可以登录</c>
<c.magenta>你的应用程序和你的Xcode扩展</c>


280
00:16:14,107 --> 00:16:18,745
<c.magenta>通过你的developer ID</c>
<c.magenta>并对其按照你的意愿进行分配</c>


281
00:16:26,320 --> 00:16:28,055
<c.magenta>现在我们来谈谈关于</c>


282
00:16:28,155 --> 00:16:30,824
<c.magenta>Xcode是如何激活你的扩展的</c>


283
00:16:32,025 --> 00:16:34,595
<c.magenta>为保证最佳性能</c>


284
00:16:34,862 --> 00:16:38,799
<c.magenta>Xcode会查找你的扩展</c>
<c.magenta>并自动将其启动</c>


285
00:16:38,866 --> 00:16:41,668
<c.magenta>在Xcode启动过程的早期</c>


286
00:16:41,735 --> 00:16:43,036
<c.magenta>XCODE扩展生命周期</c>


287
00:16:43,103 --> 00:16:45,272
<c.magenta>在你的用户使用扩展之前</c>


288
00:16:45,939 --> 00:16:50,744
<c.magenta>源代码编辑器扩展并不像</c>
<c.magenta>一些其他类的应用程序扩展</c>


289
00:16:51,011 --> 00:16:53,647
<c.magenta>只能使用一次之后便不能使用了</c>


290
00:16:54,348 --> 00:16:57,184
<c.magenta>实际上Xcode会尽可能将你的扩展</c>


291
00:16:57,251 --> 00:16:59,186
<c.magenta>维持为可用状态</c>


292
00:16:59,253 --> 00:17:02,556
<c.magenta>因此它可以发送任何用户</c>
<c.magenta>想要调用的命令</c>


293
00:17:04,657 --> 00:17:06,894
<c.magenta>现在当你的扩展启动时</c>


294
00:17:07,327 --> 00:17:10,329
<c.magenta>如果它需要即刻进行任何工作</c>


295
00:17:10,464 --> 00:17:14,034
<c.magenta>Xcode将向它发送</c>
<c.magenta>extensionDidFinishLaunching</c>


296
00:17:14,701 --> 00:17:18,539
<c.magenta>对于启动来说只要够快</c>
<c.magenta>那就是一个好的地方</c>


297
00:17:20,641 --> 00:17:24,511
<c.magenta>没错 你需要尽可能地让启动过程够快</c>


298
00:17:24,877 --> 00:17:28,949
<c.magenta>这样一来你的用户就能</c>


299
00:17:29,516 --> 00:17:31,051
<c.magenta>随时使用该扩展</c>


300
00:17:32,886 --> 00:17:34,154
<c.magenta>为了帮你实现这一目标</c>


301
00:17:34,421 --> 00:17:37,191
<c.magenta>Xcode将保证你的扩展与</c>


302
00:17:37,257 --> 00:17:40,027
<c.magenta>其他扩展的启动是异步进行的</c>


303
00:17:40,093 --> 00:17:41,795
<c.magenta>且与Xcode的启动也是异步的</c>


304
00:17:43,931 --> 00:17:45,832
<c.magenta>现在当你的扩展启动时</c>


305
00:17:46,333 --> 00:17:48,635
<c.magenta>Xcode会询问它的指令</c>


306
00:17:48,702 --> 00:17:51,505
<c.magenta>指令可以来自两个地方中的一个</c>


307
00:17:52,906 --> 00:17:55,209
<c.magenta>通过默认函数可以得到一个项</c>


308
00:17:55,275 --> 00:18:00,781
<c.magenta>info.plist文件中</c>
<c.magenta>的NSExtensionAttributes字典类中</c>


309
00:18:01,448 --> 00:18:04,618
<c.magenta>该文件指定了你的扩展中的所有指令</c>


310
00:18:05,586 --> 00:18:07,921
<c.magenta>不过你还可以提供</c>


311
00:18:08,455 --> 00:18:12,526
<c.magenta>关于你的扩展类中的</c>
<c.magenta>commandDefinitions的属性重写</c>


312
00:18:12,826 --> 00:18:16,663
<c.magenta>重写info.plist文件返回值</c>


313
00:18:16,997 --> 00:18:20,100
<c.magenta>因此 若你的扩展拥有指令动态列表</c>


314
00:18:20,200 --> 00:18:22,402
<c.magenta>其中有描述</c>
<c.magenta>因为下载了新的JavaScript</c>


315
00:18:22,469 --> 00:18:24,705
<c.magenta>这些JavaScript实际是用来</c>
<c.magenta>运行那些指令的</c>


316
00:18:24,771 --> 00:18:27,741
<c.magenta>它能提供一个新的集合</c>


317
00:18:31,245 --> 00:18:33,580
<c.magenta>现在一旦Xcode收到你的指令</c>


318
00:18:34,615 --> 00:18:36,517
<c.magenta>它会给每个扩展分配</c>


319
00:18:36,817 --> 00:18:41,755
<c.magenta>扩展所对应的编辑器菜单的子菜单</c>
<c.magenta>在用户编辑源代码时</c>


320
00:18:43,457 --> 00:18:46,026
<c.magenta>并按字母顺序列出扩展名</c>


321
00:18:46,093 --> 00:18:47,895
<c.magenta>就像在finder中一样</c>


322
00:18:47,961 --> 00:18:50,531
<c.magenta>所以对用户而言</c>
<c.magenta>它们都在稳定的地方中</c>


323
00:18:50,597 --> 00:18:51,865
<c.magenta>从自身运行到Xcode运行</c>


324
00:18:52,733 --> 00:18:56,069
<c.magenta>然而因为指令的顺序通常很重要</c>


325
00:18:56,136 --> 00:18:58,839
<c.magenta>而且通常传递大量语义</c>


326
00:18:59,840 --> 00:19:04,411
<c.magenta>Xcode将保留你所发出指令的顺序</c>


327
00:19:05,112 --> 00:19:08,248
<c.magenta>并将该顺序在菜单中排列出来</c>


328
00:19:09,716 --> 00:19:10,984
<c.magenta>现在来谈谈指令调用</c>


329
00:19:11,485 --> 00:19:15,189
<c.magenta>当然 用户可以从你的菜单项中</c>
<c.magenta>选择指令</c>


330
00:19:16,190 --> 00:19:19,760
<c.magenta>也可以通过个人设置的快捷键来实现</c>


331
00:19:21,328 --> 00:19:27,234
<c.magenta>你的指令对象将被实例化</c>
<c.magenta>并发送调用指令和回调指令</c>


332
00:19:28,535 --> 00:19:32,206
<c.magenta>调用指令打包所有</c>


333
00:19:32,773 --> 00:19:34,975
<c.magenta>这些命令执行所需的数据和元数据</c>


334
00:19:36,643 --> 00:19:40,747
<c.magenta>当工作完成 指令将使用回调程序</c>


335
00:19:41,114 --> 00:19:43,150
<c.magenta>来告诉Xcode 工作完成</c>


336
00:19:43,517 --> 00:19:46,186
<c.magenta>让我们看看实际的API</c>


337
00:19:47,754 --> 00:19:49,723
<c.magenta>我们有个简单的协议</c>


338
00:19:49,790 --> 00:19:52,292
<c.magenta>你所有的命令类都需要符合它</c>


339
00:19:53,427 --> 00:19:58,799
<c.magenta>如我所说它已进行了一次调用和</c>
<c.magenta>completionHandler回调</c>


340
00:20:01,101 --> 00:20:04,571
<c.magenta>并且该调用仅携带一些简单的数据</c>


341
00:20:05,372 --> 00:20:07,174
<c.magenta>且具有一个</c>
<c.magenta>commandIdentifier</c>


342
00:20:07,674 --> 00:20:11,512
<c.magenta>该commandIdentifier在</c>
<c.magenta>info.plist文件内或命令定义数组内进行设置的</c>


343
00:20:13,046 --> 00:20:15,549
<c.magenta>而且这能使你区分多个</c>


344
00:20:15,816 --> 00:20:18,051
<c.magenta>受控于同一命令类的命令</c>


345
00:20:18,785 --> 00:20:22,322
<c.magenta>毕竟其中涉及很多命令</c>
<c.magenta>特别是对于编辑源代码而言</c>


346
00:20:22,389 --> 00:20:24,625
<c.magenta>而它们之间的区别却很小</c>


347
00:20:24,892 --> 00:20:29,530
<c.magenta>大家可能希望通过</c>
<c.magenta>同一个命令类来执行多个任务</c>


348
00:20:29,763 --> 00:20:32,766
<c.magenta>并仅处理各任务中的若干不同特定实例</c>


349
00:20:33,100 --> 00:20:37,070
<c.magenta>该标识可让大家找出</c>


350
00:20:37,237 --> 00:20:38,438
<c.magenta>用户调用的命令</c>


351
00:20:40,374 --> 00:20:41,775
<c.magenta>我们还提供了一个属性</c>


352
00:20:41,842 --> 00:20:46,446
<c.magenta>你可将cancellationHandler</c>
<c.magenta>设置为“开启”</c>


353
00:20:47,014 --> 00:20:52,252
<c.magenta>若用户取消了你的命令 那么</c>
<c.magenta>cancellationHandler即被调用</c>


354
00:20:53,420 --> 00:20:56,590
<c.magenta>并且如果你的指令</c>
<c.magenta>花费时间过长它也会被调用</c>


355
00:20:56,790 --> 00:21:00,360
<c.magenta>我们将会在演示部分对其进行</c>
<c.magenta>略微深入的讲解</c>


356
00:21:01,828 --> 00:21:05,532
<c.magenta>最后当然调用过程也包含</c>


357
00:21:05,632 --> 00:21:07,601
<c.magenta>有关用户使用的文本缓存</c>


358
00:21:09,236 --> 00:21:11,471
<c.magenta>该Source Text由</c>


359
00:21:11,572 --> 00:21:14,842
<c.magenta>另一个目标实例一</c>
<c.magenta>XCSourceTextBuffer来表示</c>


360
00:21:15,843 --> 00:21:19,379
<c.magenta>除文本之外　还有许多元数据</c>


361
00:21:20,247 --> 00:21:22,449
<c.magenta>我们给大家一个统一的类型标识</c>


362
00:21:22,916 --> 00:21:26,253
<c.magenta>让Xcode认为</c>
<c.magenta>文本包含的文件是对应的</c>


363
00:21:26,653 --> 00:21:30,123
<c.magenta>如此大家就可以使用Swift源代码</c>


364
00:21:31,225 --> 00:21:36,830
<c.magenta>XML数据ObjC++ 头文件等</c>
<c.magenta>各种文本格式进行编写</c>


365
00:21:37,998 --> 00:21:42,936
<c.magenta>我们还为该文件提供了</c>
<c.magenta>Xcode的缩进设置</c>


366
00:21:43,370 --> 00:21:46,440
<c.magenta>所以当你在文件内对文本进行变更时</c>


367
00:21:46,773 --> 00:21:50,010
<c.magenta>你依然遵循用户期望Xcode做的事</c>


368
00:21:50,077 --> 00:21:51,578
<c.magenta>当它缩进该文件时</c>


369
00:21:52,513 --> 00:21:55,082
<c.magenta>因为tabWidth</c>
<c.magenta>indentationWidth</c>


370
00:21:55,148 --> 00:21:58,752
<c.magenta>及是否使用TabsForIndentation间</c>
<c.magenta>存在微妙的相互作用关系</c>


371
00:21:59,453 --> 00:22:02,856
<c.magenta>为此我们还提供了大量</c>
<c.magenta>有关它们如何协同工作的详细信息</c>


372
00:22:03,223 --> 00:22:04,691
<c.magenta>大家可在头文件查阅该信息</c>


373
00:22:06,059 --> 00:22:08,662
<c.magenta>因此我鼓励大家找出该头文件</c>


374
00:22:08,729 --> 00:22:10,898
<c.magenta>并确切了解它们是如何相互协同的</c>


375
00:22:14,368 --> 00:22:19,806
<c.magenta>现在我们提供用户通过两种不同方式</c>
<c.magenta>正在使用的文本</c>


376
00:22:20,607 --> 00:22:24,111
<c.magenta>如果你需要将该文本处理为单数据流</c>


377
00:22:24,611 --> 00:22:26,813
<c.magenta>即通过管道将其输送到一个命令行工具</c>


378
00:22:27,481 --> 00:22:28,749
<c.magenta>你大概会希望使用</c>


379
00:22:28,882 --> 00:22:30,250
<c.magenta>completeBuffer</c>


380
00:22:30,517 --> 00:22:32,819
<c.magenta>该缓存代表用户正在使用的文本</c>


381
00:22:32,986 --> 00:22:35,122
<c.magenta>代表作为单一字符串的整个文件</c>


382
00:22:37,090 --> 00:22:42,062
<c.magenta>然而如果你仅需要对文本进行微小变更</c>


383
00:22:42,429 --> 00:22:46,266
<c.magenta>那该方法的效率会很低</c>
<c.magenta>因为你的扩展需将</c>


384
00:22:46,333 --> 00:22:48,635
<c.magenta>所有的缓存发回Xcode</c>


385
00:22:49,970 --> 00:22:54,141
<c.magenta>因为我们为之提供了可变数组属性</c>


386
00:22:55,375 --> 00:22:58,045
<c.magenta>其中包含文件中的文本行</c>


387
00:22:58,178 --> 00:23:01,615
<c.magenta>我们发现当采用源代码编写工具时</c>


388
00:23:01,982 --> 00:23:06,954
<c.magenta>实际上采用行与列抽象化要远优于</c>


389
00:23:07,020 --> 00:23:11,091
<c.magenta>仅使用单一而庞大的文本缓冲区</c>


390
00:23:12,092 --> 00:23:14,394
<c.magenta>并且通过成为可变数组</c>


391
00:23:14,862 --> 00:23:19,633
<c.magenta>还可以让Xcode</c>
<c.magenta>实际追踪你进行的变更</c>


392
00:23:19,833 --> 00:23:24,071
<c.magenta>所以我们只需要发回</c>
<c.magenta>个别你所进行的更改</c>


393
00:23:24,171 --> 00:23:26,473
<c.magenta>不需要发回整个缓存</c>


394
00:23:27,074 --> 00:23:31,578
<c.magenta>这确实能提高编辑扩展的性能</c>


395
00:23:34,281 --> 00:23:38,051
<c.magenta>除了提供文件中的文本行</c>


396
00:23:38,151 --> 00:23:43,056
<c.magenta>我们还为文件中的选项提供了可变数组</c>


397
00:23:43,423 --> 00:23:45,559
<c.magenta>总会有至少一个选项</c>


398
00:23:45,626 --> 00:23:48,395
<c.magenta>要么是用户的插入点要么是选项</c>


399
00:23:48,862 --> 00:23:52,666
<c.magenta>因为Xcode编辑器是构建在</c>
<c.magenta>Cocoa Text系统之上的</c>


400
00:23:53,133 --> 00:23:55,335
<c.magenta>所以我们同样支持多重选项</c>


401
00:23:55,802 --> 00:23:57,804
<c.magenta>如果你想要改变选项</c>


402
00:23:58,071 --> 00:24:00,707
<c.magenta>你要做的就是改变该可变数组</c>


403
00:24:03,010 --> 00:24:07,214
<c.magenta>且该数组中存在的都是</c>
<c.magenta>SourceTextRange对象</c>


404
00:24:07,681 --> 00:24:11,451
<c.magenta>调用SourceTextRange</c>
<c.magenta>替换NSRange</c>


405
00:24:11,518 --> 00:24:13,887
<c.magenta>因为我们真的相信</c>


406
00:24:14,021 --> 00:24:17,558
<c.magenta>我们提供的行与列抽象</c>


407
00:24:18,158 --> 00:24:21,061
<c.magenta>对于大多数文本编辑来说是最好的方法</c>


408
00:24:22,129 --> 00:24:26,600
<c.magenta>这就是为什么源区域能替代</c>
<c.magenta>一个位置和一段长度</c>


409
00:24:27,000 --> 00:24:29,903
<c.magenta>成为实际起点与终点的原因</c>


410
00:24:30,504 --> 00:24:34,942
<c.magenta>那些位置都在行抽象</c>
<c.magenta>与列抽象中得到表示</c>


411
00:24:38,078 --> 00:24:41,081
<c.magenta>我将向大家演示如何创建</c>


412
00:24:41,315 --> 00:24:43,917
<c.magenta>个人Xcode扩展</c>


413
00:24:45,285 --> 00:24:46,653
<c.magenta>我先到演示机这边</c>


414
00:24:47,855 --> 00:24:48,755
<c.magenta>然后...</c>


415
00:24:49,523 --> 00:24:51,692
<c.magenta>我把笔记本放在这儿</c>


416
00:24:52,559 --> 00:24:57,965
<c.magenta>给我留下深刻印象的</c>
<c.magenta>是刚才Mike关于</c>


417
00:24:58,031 --> 00:25:01,268
<c.magenta>Swift文本 Swift色彩</c>
<c.magenta>和图像文字的描述</c>


418
00:25:02,002 --> 00:25:04,705
<c.magenta>我真的很想在我自己的代码中使用它们</c>


419
00:25:05,105 --> 00:25:06,640
<c.magenta>因此我觉得我该</c>


420
00:25:06,707 --> 00:25:09,376
<c.magenta>创建一个新的源编辑器扩展</c>


421
00:25:09,710 --> 00:25:15,115
<c.magenta>它可以自动将任何UIImage</c>
<c.magenta>或UIColor的使用方法转变为</c>


422
00:25:15,315 --> 00:25:17,150
<c.magenta>相应的Swift文字</c>


423
00:25:18,352 --> 00:25:20,487
<c.magenta>我只需创建一个新的Xcode项目</c>


424
00:25:21,588 --> 00:25:24,157
<c.magenta>以及一个新的OS X应用程序</c>


425
00:25:24,658 --> 00:25:26,593
<c.magenta>毕竟我的应用扩展</c>


426
00:25:26,660 --> 00:25:30,163
<c.magenta>和Xcode扩展都得在</c>
<c.magenta>应用程序内部执行</c>


427
00:25:30,898 --> 00:25:35,569
<c.magenta>然后创建这个</c>
<c.magenta>并把它命名为Chris文字</c>


428
00:25:38,805 --> 00:25:44,411
<c.magenta>然后赋予一个叫做</c>
<c.magenta>com.example的组织标识符</c>


429
00:25:45,812 --> 00:25:48,916
<c.magenta>点击“下一步”然后我把它放在桌面上</c>


430
00:25:50,050 --> 00:25:51,818
<c.magenta>现在我已经创建了我的项目</c>


431
00:25:52,619 --> 00:25:55,088
<c.magenta>我要向其添加一个新的目标</c>


432
00:25:56,523 --> 00:26:00,327
<c.magenta>且添加一个OS X应用程序扩展目标</c>


433
00:26:00,561 --> 00:26:02,196
<c.magenta>你可以看到</c>


434
00:26:02,262 --> 00:26:06,500
<c.magenta>新的Xcode源代码编辑器扩展模板</c>
<c.magenta>就在该列表的末尾</c>


435
00:26:09,970 --> 00:26:11,939
<c.magenta>然后我把它命名为...</c>


436
00:26:13,907 --> 00:26:16,009
<c.magenta>Chris Convert to Literals...</c>


437
00:26:17,110 --> 00:26:17,978
<c.magenta>搞定</c>


438
00:26:18,912 --> 00:26:20,314
<c.magenta>当我点击Finish时</c>


439
00:26:21,114 --> 00:26:24,518
<c.magenta>Xcode就会提出供激活目标的建议</c>


440
00:26:24,585 --> 00:26:26,486
<c.magenta>就像其他应用扩展一样</c>


441
00:26:26,687 --> 00:26:27,955
<c.magenta>然后点击接受</c>


442
00:26:29,256 --> 00:26:32,593
<c.magenta>现在让我们来看看Xcode</c>
<c.magenta>为我生成的代码</c>


443
00:26:35,229 --> 00:26:36,897
<c.magenta>在这个转换为文字的组别里</c>


444
00:26:37,431 --> 00:26:41,702
<c.magenta>Xcode添加了一个类</c>
<c.magenta>这个类表示我的扩展本身</c>


445
00:26:42,069 --> 00:26:45,973
<c.magenta>这只符合XCSourceEditor扩展协议</c>


446
00:26:46,707 --> 00:26:51,678
<c.magenta>并且它还为类函数和属性添加了模板</c>


447
00:26:52,112 --> 00:26:55,215
<c.magenta>如果我想重写的话我可以对其取消注释</c>


448
00:26:55,415 --> 00:26:57,117
<c.magenta>并提供自己的实现</c>


449
00:26:57,584 --> 00:26:58,752
<c.magenta>但现在我还不想这么做</c>


450
00:26:58,819 --> 00:27:01,121
<c.magenta>我认为没必要让它来执行</c>
<c.magenta>这个特定的项目</c>


451
00:27:02,489 --> 00:27:04,358
<c.magenta>我们来看下一个文件</c>


452
00:27:05,659 --> 00:27:07,928
<c.magenta>在下一个文件SourceEditorCommand中</c>


453
00:27:08,195 --> 00:27:10,864
<c.magenta>有我的第一个命令类</c>


454
00:27:12,432 --> 00:27:15,769
<c.magenta>正如我向你们展示的那样</c>
<c.magenta>它符合XCSourceEditor命令</c>


455
00:27:16,370 --> 00:27:20,274
<c.magenta>并且仅在vocation类函数</c>
<c.magenta>控制下单独执行</c>


456
00:27:22,676 --> 00:27:26,313
<c.magenta>现在让我们看一看Xcode创建的</c>
<c.magenta>info.plist文件</c>


457
00:27:27,981 --> 00:27:31,018
<c.magenta>你可以看到在我的扩展属性中</c>


458
00:27:31,752 --> 00:27:36,190
<c.magenta>Xcode添加一组</c>
<c.magenta>XCSourceEditorCommandDefinitions</c>


459
00:27:36,390 --> 00:27:38,258
<c.magenta>这是一个字典数组</c>


460
00:27:40,027 --> 00:27:43,330
<c.magenta>该字典为命令指定了需要实例化的类</c>


461
00:27:44,431 --> 00:27:46,667
<c.magenta>要使用的标识符</c>


462
00:27:48,202 --> 00:27:51,505
<c.magenta>以及命令应具备的菜单项名称</c>


463
00:27:53,073 --> 00:27:57,911
<c.magenta>我把它的名称改为</c>
<c.magenta>ConverttoSwiftLiterals</c>


464
00:27:58,946 --> 00:27:59,947
<c.magenta>然后接受</c>


465
00:28:01,415 --> 00:28:05,919
<c.magenta>将镜头缩小 返回到命令界面</c>


466
00:28:09,656 --> 00:28:13,694
<c.magenta>现在我要作个小弊因为代码已经写好了</c>


467
00:28:15,095 --> 00:28:18,432
<c.magenta>我使用代码片段把</c>
<c.magenta>已经写好的代码嵌进去了</c>


468
00:28:21,034 --> 00:28:26,507
<c.magenta>我把这称为Chris Demon</c>
<c.magenta>大家可以看到实际上代码并不是很多</c>


469
00:28:28,809 --> 00:28:32,980
<c.magenta>所以我只需循环文件中所有的行</c>


470
00:28:34,815 --> 00:28:40,587
<c.magenta>如果该行中存在一个</c>
<c.magenta>UIColor或UIImage调用</c>


471
00:28:41,288 --> 00:28:45,659
<c.magenta>我仅使用对应的</c>
<c.magenta>Swift字面语法去替代它</c>


472
00:28:47,127 --> 00:28:50,464
<c.magenta>然后如果行已经改变了</c>


473
00:28:51,298 --> 00:28:54,635
<c.magenta>那我就得替换行数组中的行了</c>


474
00:28:54,968 --> 00:28:57,437
<c.magenta>我并不是替换数组中的每一个行</c>


475
00:28:58,005 --> 00:29:00,374
<c.magenta>我当然不是修改整个缓存区</c>


476
00:29:00,641 --> 00:29:04,478
<c.magenta>我只修改实际需要修改的行</c>


477
00:29:05,412 --> 00:29:08,382
<c.magenta>而且我还对修改的行保持追踪</c>


478
00:29:09,216 --> 00:29:13,120
<c.magenta>因此之后我还可以构造</c>


479
00:29:13,187 --> 00:29:16,223
<c.magenta>一组选择来表示那些行</c>


480
00:29:18,392 --> 00:29:19,626
<c.magenta>我设置了那些选项</c>


481
00:29:20,394 --> 00:29:22,696
<c.magenta>之后仅需调用我的完成处理程序</c>


482
00:29:22,763 --> 00:29:25,165
<c.magenta>让Xcode知道我的命令已完成</c>


483
00:29:25,766 --> 00:29:29,102
<c.magenta>我在建议的程序列表中</c>
<c.magenta>见到了Xcode</c>


484
00:29:31,805 --> 00:29:34,575
<c.magenta>如果我点击运行大家认为会发生什么</c>


485
00:29:35,142 --> 00:29:37,511
<c.magenta>当然除了建立我的扩展程序之外</c>


486
00:29:39,746 --> 00:29:40,581
<c.magenta>你可以看到</c>


487
00:29:40,647 --> 00:29:46,220
<c.magenta>我们为大家开发了另一个</c>
<c.magenta>Xcode实例来测试大家的扩展程序</c>


488
00:29:48,422 --> 00:29:52,693
<c.magenta>我们实际还提供一点视觉差别</c>


489
00:29:52,759 --> 00:29:54,628
<c.magenta>我们在dock里将图标变得更黑</c>


490
00:29:55,195 --> 00:29:58,532
<c.magenta>并且对“欢迎来到Xcode”</c>
<c.magenta>窗口内的图标也加黑</c>


491
00:29:59,066 --> 00:30:00,868
<c.magenta>清晰明了</c>


492
00:30:01,468 --> 00:30:05,939
<c.magenta>你会清楚地知道这个Xcode</c>
<c.magenta>正在对一个扩展进行测试</c>


493
00:30:08,709 --> 00:30:10,978
<c.magenta>我现打开Mike的Jogger项目</c>


494
00:30:11,078 --> 00:30:14,615
<c.magenta>因为我注意到有些</c>
<c.magenta>UIImage和UIColor</c>


495
00:30:14,681 --> 00:30:15,949
<c.magenta>还没有转换</c>


496
00:30:17,684 --> 00:30:20,387
<c.magenta>大家可以另外看到一种情况</c>


497
00:30:20,988 --> 00:30:23,323
<c.magenta>我们在活动视图的顶部对UI进行修改</c>


498
00:30:23,390 --> 00:30:24,925
<c.magenta>以此来特别说明</c>


499
00:30:25,192 --> 00:30:28,996
<c.magenta>Xcode正在测试一个扩展</c>


500
00:30:31,398 --> 00:30:35,669
<c.magenta>Mike给我留下了一些真正想要的</c>
<c.magenta>UIImage和UIColor实例</c>


501
00:30:35,736 --> 00:30:38,005
<c.magenta>我认为作为字符会更好看</c>


502
00:30:38,805 --> 00:30:41,275
<c.magenta>所以我查看一下编辑菜单</c>


503
00:30:41,975 --> 00:30:44,244
<c.magenta>看到了Chris Convert</c>
<c.magenta>to Literals扩展</c>


504
00:30:44,878 --> 00:30:47,381
<c.magenta>还看到了Convert to</c>
<c.magenta>Swift Literals命令</c>


505
00:30:48,882 --> 00:30:50,751
<c.magenta>现在如果我返回我最初的Xcode</c>


506
00:30:51,652 --> 00:30:54,521
<c.magenta>然后设置一个断点在这下面</c>


507
00:30:57,090 --> 00:30:59,226
<c.magenta>如果我现在实际运行我的命令...</c>


508
00:31:02,696 --> 00:31:04,164
<c.magenta>你会发现什么也没有</c>


509
00:31:04,398 --> 00:31:06,967
<c.magenta>因为在断点处就停止了命令</c>


510
00:31:07,034 --> 00:31:08,602
<c.magenta>在第一个Xcode调试程序中</c>


511
00:31:09,336 --> 00:31:12,539
<c.magenta>所以你其实可以把Xcode调试器</c>


512
00:31:12,773 --> 00:31:16,343
<c.magenta>和需承载的LLDB的所有资源</c>
<c.magenta>都用于调试你的扩展程序</c>


513
00:31:18,212 --> 00:31:20,180
<c.magenta>我继续演示</c>


514
00:31:22,916 --> 00:31:27,254
<c.magenta>我们把这里的断点删除</c>


515
00:31:28,889 --> 00:31:31,124
<c.magenta>如果返回就可以看到</c>


516
00:31:31,358 --> 00:31:35,329
<c.magenta>Xcode对所有我改变的行</c>
<c.magenta>都进行了强调正如我告诉它的一样</c>


517
00:31:35,863 --> 00:31:38,966
<c.magenta>以上便是所有关于使用新</c>
<c.magenta>Swift字符格式进行转换的内容</c>


518
00:31:47,608 --> 00:31:51,178
<c.magenta>现在来谈谈我实际希望</c>
<c.magenta>在非常常规的环境下进行的操作</c>


519
00:31:52,279 --> 00:31:55,816
<c.magenta>这很容易　我可以很快完成</c>


520
00:31:56,216 --> 00:31:59,786
<c.magenta>只需对我的新命令添加一个密钥绑定</c>


521
00:32:00,621 --> 00:32:03,090
<c.magenta>在Key Bindings界面下的</c>
<c.magenta>Xcode偏好选择中进行操作</c>


522
00:32:03,423 --> 00:32:07,194
<c.magenta>搜索我的命令名称</c>
<c.magenta>我记得是以Chris开头</c>


523
00:32:07,995 --> 00:32:10,998
<c.magenta>这就是Xcode的</c>
<c.magenta>Key Binding</c>


524
00:32:11,131 --> 00:32:15,302
<c.magenta>我把它命名为command</c>
<c.magenta>option control/</c>


525
00:32:15,369 --> 00:32:16,770
<c.magenta>便于记住是吧？</c>


526
00:32:21,642 --> 00:32:23,010
<c.magenta>现在我们来看幻灯片</c>


527
00:32:24,978 --> 00:32:26,380
<c.magenta>来说说...</c>


528
00:32:26,780 --> 00:32:28,715
<c.magenta>一些我很关心的事</c>


529
00:32:28,782 --> 00:32:32,653
<c.magenta>当使用Xcode扩展时</c>
<c.magenta>你会感受其速度之快</c>


530
00:32:34,054 --> 00:32:37,291
<c.magenta>那是因为文本编辑是用户同步进行的</c>


531
00:32:37,925 --> 00:32:41,061
<c.magenta>用户们只想把他们的手放在键盘上</c>


532
00:32:41,161 --> 00:32:43,263
<c.magenta>不停地操作</c>


533
00:32:43,363 --> 00:32:46,066
<c.magenta>即使调用你的扩展</c>


534
00:32:47,668 --> 00:32:50,671
<c.magenta>你的扩展也不应该阻止</c>


535
00:32:50,771 --> 00:32:53,941
<c.magenta>用户操作的连续性</c>


536
00:32:56,510 --> 00:32:58,979
<c.magenta>现在为了防止</c>


537
00:32:59,046 --> 00:33:03,650
<c.magenta>在你的扩展和用户之间</c>
<c.magenta>发生竞态条件 Xcode会锁定那些</c>


538
00:33:03,851 --> 00:33:05,853
<c.magenta>用户工作时产生的文件变化</c>


539
00:33:05,986 --> 00:33:07,387
<c.magenta>在用户调用扩展时</c>


540
00:33:10,958 --> 00:33:13,560
<c.magenta>幸运的是大家不必担心</c>


541
00:33:13,627 --> 00:33:17,431
<c.magenta>如何协调大家所造成的</c>
<c.magenta>改变以及来自用户的改变</c>


542
00:33:20,067 --> 00:33:21,935
<c.magenta>从另一方面讲这意味着...</c>


543
00:33:22,803 --> 00:33:27,574
<c.magenta>如果你的扩展时间过长</c>
<c.magenta>我们认为几秒钟就算过长</c>


544
00:33:27,841 --> 00:33:30,110
<c.magenta>从用户锁定到开始编辑文件这段时间</c>


545
00:33:30,611 --> 00:33:31,478
<c.magenta>那么...</c>


546
00:33:32,479 --> 00:33:33,313
<c.magenta>我们该怎么办？</c>


547
00:33:34,481 --> 00:33:37,651
<c.magenta>我们允许用户取消该命令</c>


548
00:33:38,719 --> 00:33:42,489
<c.magenta>我们会提供一个取消指令的按键标示</c>


549
00:33:43,657 --> 00:33:45,759
<c.magenta>我想系统正在尝试告诉我</c>


550
00:33:45,826 --> 00:33:47,761
<c.magenta>这张幻灯片在这的时间太长了</c>


551
00:33:49,296 --> 00:33:51,732
<c.magenta>我们来关掉它然后继续</c>


552
00:33:54,101 --> 00:33:57,137
<c.magenta>Xcode能为</c>
<c.magenta>我们的用户保证快速操作</c>


553
00:33:57,638 --> 00:34:00,807
<c.magenta>通过早早地启动扩展并尽可能长时间地</c>


554
00:34:01,108 --> 00:34:02,843
<c.magenta>使其保持激活状态</c>


555
00:34:03,010 --> 00:34:05,479
<c.magenta>所以一旦调用它们就能发送命令</c>


556
00:34:07,514 --> 00:34:11,485
<c.magenta>正如我们前面讨论过的</c>
<c.magenta>通过使用行数组</c>


557
00:34:11,685 --> 00:34:16,889
<c.magenta>来确保各位的扩展数据传输</c>
<c.magenta>在性能方面得到优化</c>


558
00:34:18,425 --> 00:34:21,195
<c.magenta>当用户需要取消一个命令</c>


559
00:34:21,661 --> 00:34:24,931
<c.magenta>可以点击Xcode界面的取消符号</c>


560
00:34:25,165 --> 00:34:27,067
<c.magenta>当用户点击取消</c>


561
00:34:27,234 --> 00:34:28,435
<c.magenta>他们可以继续操作</c>


562
00:34:29,503 --> 00:34:32,940
<c.magenta>现在...你的扩展任会接收</c>


563
00:34:33,206 --> 00:34:35,708
<c.magenta>取消命令并仍然需要对它做出反应</c>


564
00:34:36,409 --> 00:34:37,945
<c.magenta>但是用户不关心这点</c>


565
00:34:39,813 --> 00:34:41,114
<c.magenta>当然有几个方法</c>


566
00:34:41,181 --> 00:34:43,917
<c.magenta>你的扩展也可以对</c>
<c.magenta>Xcode的运行有所帮助</c>


567
00:34:45,819 --> 00:34:48,922
<c.magenta>你的扩展可以尽可能快地启动</c>


568
00:34:48,989 --> 00:34:51,692
<c.magenta>你的扩展得为用户</c>


569
00:34:52,926 --> 00:34:54,594
<c.magenta>执行你的命令做好准备</c>


570
00:34:54,661 --> 00:34:58,632
<c.magenta>你可以在我们所有的</c>
<c.magenta>异步编程模式下使用GCD</c>


571
00:34:58,699 --> 00:35:03,170
<c.magenta>以确保你最大可能利用用户的系统</c>


572
00:35:03,237 --> 00:35:05,973
<c.magenta>并尽可能快地返回Xcode</c>


573
00:35:07,641 --> 00:35:08,942
<c.magenta>当然...</c>


574
00:35:09,776 --> 00:35:13,647
<c.magenta>如果没必要</c>
<c.magenta>你可以避免更换所有的文本缓存</c>


575
00:35:15,516 --> 00:35:19,486
<c.magenta>最后就像我说的</c>
<c.magenta>你需要快速处理取消指令</c>


576
00:35:20,787 --> 00:35:24,725
<c.magenta>因为在你的指令完成取消之前</c>


577
00:35:24,791 --> 00:35:27,327
<c.magenta>它对用户而言都是不可用的</c>


578
00:35:29,997 --> 00:35:33,934
<c.magenta>今天Mike向大家展示了许多关于</c>


579
00:35:34,001 --> 00:35:35,469
<c.magenta>Xcode源代码编辑器的</c>
<c.magenta>出色的新特性</c>


580
00:35:35,536 --> 00:35:38,338
<c.magenta>比如我们能够添加文档注释</c>


581
00:35:38,605 --> 00:35:42,876
<c.magenta>以及在Code Completion中</c>
<c.magenta>支持Swift color和Swift image字符</c>


582
00:35:43,277 --> 00:35:46,313
<c.magenta>还展示了一些添加的最新功能</c>


583
00:35:46,380 --> 00:35:50,517
<c.magenta>这些功能已经添加进了</c>
<c.magenta>Xcode7.3 比如模糊代码完成</c>


584
00:35:51,151 --> 00:35:54,855
<c.magenta>我向大家展示了Xcode源代码</c>
<c.magenta>编辑器扩展是如何工作的</c>


585
00:35:55,289 --> 00:35:57,257
<c.magenta>以及如何创建它们</c>


586
00:35:57,824 --> 00:36:00,794
<c.magenta>我已迫不及待地想看到</c>
<c.magenta>各位通过我们的新API作出的成就</c>


587
00:36:01,995 --> 00:36:04,164
<c.magenta>大家可以获得更多可用的信息</c>


588
00:36:04,231 --> 00:36:08,035
<c.magenta>在我们 WWDC 16 网站页面上</c>


589
00:36:09,603 --> 00:36:13,440
<c.magenta>还可以收看一些相关课程的视频</c>


590
00:36:13,941 --> 00:36:19,112
<c.magenta>特别说明Optimizing App</c>
<c.magenta>Startup Time不适用于应用</c>


591
00:36:19,179 --> 00:36:21,081
<c.magenta>它仅适用于应用扩展</c>


592
00:36:21,148 --> 00:36:23,650
<c.magenta>因为它搭载了大量相同的技术</c>


593
00:36:24,518 --> 00:36:26,553
<c.magenta>我们对Xcode的介绍也非常棒</c>


594
00:36:26,620 --> 00:36:28,956
<c.magenta>适合于想要了解</c>
<c.magenta>Xcode开发环境动态的人</c>


595
00:36:29,022 --> 00:36:32,626
<c.magenta>当你实现扩展时</c>
<c.magenta>用户们会为此充满期待</c>


596
00:36:33,160 --> 00:36:36,430
<c.magenta>最后我们有些前些年推出的节目</c>


597
00:36:36,496 --> 00:36:39,366
<c.magenta>讨论应用扩展意味着什么</c>


598
00:36:39,466 --> 00:36:41,802
<c.magenta>以及实现它们的最佳方法</c>


599
00:36:43,136 --> 00:36:46,807
<c.magenta>我们今晚也会参加这个盛会因此...</c>


600
00:36:47,741 --> 00:36:49,543
<c.magenta>感谢光临 WWDC 大会</c>


601
00:36:49,610 --> 00:36:52,746
<c.magenta>若有任何疑问 可以届时向我们提问</c>

