1
00:00:06,516 --> 00:00:14,500
[ 音乐 ]


2
00:00:21,516 --> 00:00:25,566
[ 掌声 ]


3
00:00:26,066 --> 00:00:27,066
>> 大家早上好


4
00:00:27,196 --> 00:00:28,476
非常感谢大家能够


5
00:00:28,476 --> 00:00:29,216
参加开发者大会


6
00:00:29,266 --> 00:00:30,446
我叫 Sara Radi


7
00:00:30,446 --> 00:00:31,636
是 Apple 本地化团队的一名


8
00:00:31,636 --> 00:00:33,576
软件工程师


9
00:00:33,576 --> 00:00:34,746
今天我会和我的同事


10
00:00:34,746 --> 00:00:36,526
Vivian 和 Chris 一起


11
00:00:36,526 --> 00:00:37,996
来谈谈使用 Xcode 10 以后的


12
00:00:37,996 --> 00:00:39,646
新的本地化工作流程


13
00:00:41,146 --> 00:00:42,486
首先我想跟大家一起


14
00:00:42,486 --> 00:00:44,136
快速回顾下


15
00:00:44,136 --> 00:00:45,906
在 Xcode 10 之前的


16
00:00:45,906 --> 00:00:47,486
本地化工作流程


17
00:00:48,926 --> 00:00:50,856
然后我会介绍 Xcode 本地化目录


18
00:00:50,856 --> 00:00:52,486
这将是一个全新的模板


19
00:00:52,486 --> 00:00:54,786
用于在 Xcode 10 上


20
00:00:54,786 --> 00:00:56,706
导入和导出


21
00:00:56,706 --> 00:00:57,556
你的本地化文件


22
00:00:58,446 --> 00:01:00,026
最后 Chris 将讨论


23
00:01:00,026 --> 00:01:02,276
如何使用目标定义文件


24
00:01:02,376 --> 00:01:03,906
来本地化 Siri 捷径


25
00:01:03,936 --> 00:01:05,936
该文件也是我们今年


26
00:01:06,026 --> 00:01:07,546
在 Xcode 10 中引入的


27
00:01:07,756 --> 00:01:08,646
一种新的文件格式


28
00:01:10,036 --> 00:01:11,536
让我们开始快速


29
00:01:11,566 --> 00:01:12,576
概述一下


30
00:01:15,236 --> 00:01:17,666
在 Xcode 10 之前


31
00:01:17,716 --> 00:01:19,166
如果你有一个包含


32
00:01:19,166 --> 00:01:20,996
App 支持的


33
00:01:20,996 --> 00:01:22,676
本地化的项目


34
00:01:22,716 --> 00:01:24,276
我们将在项目中查找


35
00:01:24,276 --> 00:01:25,696
字符基串的本地化资源


36
00:01:26,176 --> 00:01:27,746
这些字符串可以在源代码


37
00:01:27,746 --> 00:01:29,026
故事板文件


38
00:01:29,116 --> 00:01:30,546
字符串文件


39
00:01:30,546 --> 00:01:32,186
或字符串字典中定义


40
00:01:32,786 --> 00:01:34,466
我们识别了这些资源后


41
00:01:34,466 --> 00:01:36,426
我们就从中


42
00:01:36,476 --> 00:01:38,786
提取字符串


43
00:01:38,786 --> 00:01:39,766
并以 XLIFF 格式导出它们


44
00:01:40,386 --> 00:01:42,556
XLIFF 是一个行业标准


45
00:01:42,556 --> 00:01:44,296
大多数本地化从业者


46
00:01:44,296 --> 00:01:45,056
都已经非常熟悉了


47
00:01:45,636 --> 00:01:46,536
这些就是你要


48
00:01:46,586 --> 00:01:48,246
发出去翻译的


49
00:01:49,936 --> 00:01:51,546
在你的 XLIFF 文件


50
00:01:51,546 --> 00:01:54,216
翻译完成后 作为导入文件


51
00:01:54,216 --> 00:01:55,356
我们将它们添加到


52
00:01:55,356 --> 00:01:57,596
你的 Xcode 项目的


53
00:01:57,596 --> 00:01:59,346
可本地化资源中


54
00:01:59,346 --> 00:02:01,036
其中包含 XLIFF 文件中的新翻译


55
00:02:01,646 --> 00:02:03,576
这个流程现在变得非常简单


56
00:02:06,386 --> 00:02:08,216
XLIFF 格式


57
00:02:08,216 --> 00:02:10,536
为开发者提供了极大的好处


58
00:02:11,136 --> 00:02:12,916
首先它可以帮助你


59
00:02:13,266 --> 00:02:14,726
将本地化工作从代码中抽离出来


60
00:02:14,766 --> 00:02:16,396
这样就不必在源代码中


61
00:02:16,596 --> 00:02:18,886
进行任何的语言假设


62
00:02:20,266 --> 00:02:21,776
XLIFF 文件同时保留了


63
00:02:21,836 --> 00:02:23,896
开发者语言和


64
00:02:23,896 --> 00:02:25,736
翻译本地化的内容


65
00:02:25,736 --> 00:02:27,306
以便本地化人员


66
00:02:27,306 --> 00:02:28,696
可以在你提供的


67
00:02:28,946 --> 00:02:31,096
XLIFF 文件中


68
00:02:31,096 --> 00:02:32,006
直接翻译


69
00:02:32,836 --> 00:02:35,246
除此之外 XLIFF


70
00:02:35,246 --> 00:02:37,096
是一个非常好的工具


71
00:02:37,096 --> 00:02:38,736
它将来自不同资源


72
00:02:38,736 --> 00:02:40,406
和不同文件类型的字符串


73
00:02:40,486 --> 00:02:41,926
合并到一个文档中


74
00:02:41,926 --> 00:02:43,556
而不是交付


75
00:02:43,556 --> 00:02:45,186
多个文件类型


76
00:02:45,436 --> 00:02:46,536
并对其进行记录


77
00:02:48,506 --> 00:02:50,466
但是 XLIFF 没有


78
00:02:50,466 --> 00:02:52,126
为本地化人员提供


79
00:02:52,126 --> 00:02:53,846
视觉环境和


80
00:02:53,906 --> 00:02:55,046
功能性的上下文


81
00:02:56,296 --> 00:02:57,806
它不提供资源数据


82
00:02:57,806 --> 00:02:59,786
比如项目中的素材


83
00:02:59,886 --> 00:03:01,326
例如故事板文件


84
00:03:01,326 --> 00:03:02,956
将非常有助于


85
00:03:02,956 --> 00:03:05,416
本地化人员


86
00:03:05,416 --> 00:03:06,356
想象你的 UI 在


87
00:03:06,356 --> 00:03:07,496
开发语言中的布局


88
00:03:08,176 --> 00:03:11,336
它也不提供关于


89
00:03:11,336 --> 00:03:14,956
XLIFF 的自定义元数据


90
00:03:15,326 --> 00:03:16,826
最后 我们现在生成的


91
00:03:16,826 --> 00:03:18,336
XLIFF 文件没有大小


92
00:03:18,456 --> 00:03:20,146
和长度属性的限制


93
00:03:20,146 --> 00:03:21,836
而知晓限制对本地化人员


94
00:03:21,836 --> 00:03:23,646
大有好处


95
00:03:24,066 --> 00:03:25,586
如果给定的字符串显示


96
00:03:25,586 --> 00:03:26,986
在 Watch/iPhone/iPad 屏幕上


97
00:03:26,986 --> 00:03:28,636
本地化人员会


98
00:03:28,636 --> 00:03:31,596
自主选择翻译的长度


99
00:03:33,606 --> 00:03:36,136
为什么上下文


100
00:03:36,136 --> 00:03:37,116
对你的本地化人员而言十分重要呢


101
00:03:37,166 --> 00:03:40,226
如果我们来看下


102
00:03:40,226 --> 00:03:43,026
之后要给大家演示的 


103
00:03:43,026 --> 00:03:44,646
一个旅游 App 的例子


104
00:03:44,646 --> 00:03:47,196
如果你看到导航栏


105
00:03:47,326 --> 00:03:48,746
右边的 “Book” 按钮


106
00:03:48,746 --> 00:03:51,366
我们这些


107
00:03:51,366 --> 00:03:53,856
坐在房间里的人


108
00:03:53,856 --> 00:03:55,346
都十分清楚


109
00:03:55,346 --> 00:03:56,626
“book” 指的是某些


110
00:03:56,716 --> 00:03:58,796
和旅行相关的东西


111
00:03:58,796 --> 00:04:00,626
因为我们面前有


112
00:04:00,626 --> 00:04:02,106
相应的视觉环境


113
00:04:02,166 --> 00:04:04,026
时间 日期


114
00:04:04,106 --> 00:04:05,666
游客数目和价格


115
00:04:07,036 --> 00:04:08,726
但是如果你给你的本地化人员


116
00:04:08,896 --> 00:04:11,136
发送一个 XLIFF 文件


117
00:04:11,136 --> 00:04:12,616
他们唯一看到的


118
00:04:12,746 --> 00:04:14,196
就是字符串 “Book”


119
00:04:14,196 --> 00:04:16,046
没有我们之前看到


120
00:04:16,046 --> 00:04:17,526
视觉上下文


121
00:04:17,856 --> 00:04:20,666
所以 “Book” 可以指


122
00:04:20,666 --> 00:04:21,356
两个完全不同的东西


123
00:04:21,935 --> 00:04:23,936
它可以是名词 指读书的书


124
00:04:23,936 --> 00:04:26,726
也可以是动词


125
00:04:26,726 --> 00:04:28,966
指预定酒店房间


126
00:04:28,966 --> 00:04:33,246
机票或旅行的这个动作


127
00:04:33,846 --> 00:04:35,446
我问我们的俄语翻译


128
00:04:35,446 --> 00:04:36,936
他是否能帮我翻译


129
00:04:36,936 --> 00:04:38,386
“Book” 这个词


130
00:04:38,386 --> 00:04:39,936
没有任何额外的上下文


131
00:04:39,936 --> 00:04:42,176
他想出了所有


132
00:04:42,176 --> 00:04:43,426
这些不同的选择


133
00:04:43,786 --> 00:04:45,756
因此如果不给他


134
00:04:45,756 --> 00:04:47,186
提供额外的上下文


135
00:04:47,186 --> 00:04:48,756
他将很难决定在


136
00:04:48,976 --> 00:04:50,586
UI 中为俄罗斯用户


137
00:04:50,586 --> 00:04:52,266
显示哪个义项


138
00:04:53,516 --> 00:04:55,266
上下文对于


139
00:04:55,306 --> 00:04:57,166
本地化人员来讲


140
00:04:57,166 --> 00:04:58,976
在决定所使用的翻译长度时也十分重要


141
00:04:59,046 --> 00:05:02,436
我们来看一下这个例子


142
00:05:02,436 --> 00:05:04,646
这有一个短语


143
00:05:04,646 --> 00:05:06,196
“预订确认”


144
00:05:06,396 --> 00:05:08,416
用英文显示在


145
00:05:08,686 --> 00:05:10,446
Watch 屏幕上就很合适


146
00:05:10,446 --> 00:05:12,716
但是在法语中却是截断的


147
00:05:13,956 --> 00:05:15,256
首先 截断了


148
00:05:15,256 --> 00:05:16,536
在 UI 中看起来


149
00:05:16,536 --> 00:05:18,846
不是很妥当


150
00:05:18,846 --> 00:05:20,366
有时候截断甚至会


151
00:05:20,366 --> 00:05:21,996
改变单词的意思


152
00:05:22,436 --> 00:05:24,556
甚至会冒犯你的用户


153
00:05:24,936 --> 00:05:26,736
它可以很有趣


154
00:05:26,736 --> 00:05:28,576
就像在这个例子中


155
00:05:28,576 --> 00:05:30,896
它的意思根本不是


156
00:05:30,896 --> 00:05:31,926
你的预订已经被确认


157
00:05:31,926 --> 00:05:34,826
而是说这个预订很蠢 完全不是我想要的字样


158
00:05:35,756 --> 00:05:39,626
因此我们认为


159
00:05:39,626 --> 00:05:40,976
为了向客户或本地化人员


160
00:05:40,976 --> 00:05:43,386
带来高质量的


161
00:05:43,666 --> 00:05:45,016
本地化内容


162
00:05:45,526 --> 00:05:46,426
提供上下文非常重要


163
00:05:47,476 --> 00:05:49,156
现在我想介绍一下


164
00:05:49,456 --> 00:05:51,416
Xcode 本地化目录


165
00:05:51,606 --> 00:05:53,506
这是一种在 Xcode 10 中


166
00:05:53,506 --> 00:05:55,646
导入和导出


167
00:05:55,646 --> 00:05:58,596
本地化内容的新格式


168
00:05:59,286 --> 00:06:01,606
什么是 Xcode 本地化目录


169
00:06:02,146 --> 00:06:04,666
它是一种具有


170
00:06:04,666 --> 00:06:07,806
.xcloc 扩展的新型本地化工具


171
00:06:08,746 --> 00:06:11,246
由 Xcode 中的


172
00:06:11,246 --> 00:06:13,056
导出本地化命令生成


173
00:06:13,056 --> 00:06:14,316
和 XLIFF 文件


174
00:06:14,316 --> 00:06:16,106
在 Xcode 10 之前的


175
00:06:16,386 --> 00:06:17,596
导出命令相同


176
00:06:18,126 --> 00:06:20,396
和导入本地化


177
00:06:20,396 --> 00:06:21,606
命令合并


178
00:06:22,736 --> 00:06:24,546
本地化目录主要是


179
00:06:24,546 --> 00:06:27,126
支持所有


180
00:06:27,206 --> 00:06:29,826
可本地化的素材


181
00:06:29,986 --> 00:06:32,076
这意味着在


182
00:06:32,076 --> 00:06:34,296
Xcode 项目中


183
00:06:34,296 --> 00:06:36,076
所有可本地化的素材


184
00:06:36,126 --> 00:06:37,686
本地化目录都支持


185
00:06:37,686 --> 00:06:39,376
不仅仅是


186
00:06:39,756 --> 00:06:40,496
字符串文件


187
00:06:41,516 --> 00:06:45,976
[ 掌声 ]


188
00:06:46,476 --> 00:06:47,946
本地化目录的


189
00:06:47,946 --> 00:06:50,236
另一个重要特性


190
00:06:50,596 --> 00:06:52,236
是它为本地化者


191
00:06:52,476 --> 00:06:54,806
提供了附加的


192
00:06:54,806 --> 00:06:55,566
上下文信息


193
00:06:57,256 --> 00:07:00,086
我们在 XLIFF 格式之上


194
00:07:00,086 --> 00:07:01,106
构建了 Xcode 本地化目录


195
00:07:02,026 --> 00:07:03,416
我们来看一下


196
00:07:03,416 --> 00:07:05,696
先前的的示例


197
00:07:05,826 --> 00:07:07,206
那么我们所有的字符串


198
00:07:07,206 --> 00:07:09,416
基本可本地化资源


199
00:07:09,416 --> 00:07:11,726
都将以 XLIFF 格式提取


200
00:07:11,796 --> 00:07:13,406
并且你在项目中标记为


201
00:07:13,406 --> 00:07:16,116
可本地化的任何其他内容


202
00:07:16,116 --> 00:07:17,906
都受本地化目录支持


203
00:07:17,906 --> 00:07:21,006
并以 xcloc 形式 以及包含


204
00:07:21,756 --> 00:07:23,326
字符串的 XLIFF 文件


205
00:07:23,356 --> 00:07:24,336
的形式导出


206
00:07:25,416 --> 00:07:27,066
我们来仔细看看


207
00:07:27,066 --> 00:07:29,706
本地化目录里面的内容


208
00:07:30,226 --> 00:07:33,156
在你的 xcloc 中


209
00:07:33,156 --> 00:07:36,536
可以找到一个 contents.json 文件


210
00:07:36,536 --> 00:07:38,656
其中包含有关导出的


211
00:07:38,656 --> 00:07:40,486
本地化目录的元数据


212
00:07:40,906 --> 00:07:43,286
里面有诸如


213
00:07:43,286 --> 00:07:45,106
App 开发语言的信息


214
00:07:45,106 --> 00:07:47,806
导出的本地化


215
00:07:47,806 --> 00:07:50,006
目录的目标语言信息


216
00:07:50,746 --> 00:07:52,046
还有有关生成该


217
00:07:52,046 --> 00:07:53,416
本地化目录的


218
00:07:53,416 --> 00:07:54,506
工具的信息


219
00:07:54,506 --> 00:07:55,846
在这种情况下


220
00:07:55,846 --> 00:07:57,436
它就是 Xcode


221
00:07:57,436 --> 00:07:58,756
你可以找到 Xcode 的


222
00:07:58,756 --> 00:07:59,936
版本号和构建版本号等信息


223
00:08:00,596 --> 00:08:02,536
它还有导出的


224
00:08:02,536 --> 00:08:05,426
本地化目录的版本号


225
00:08:06,356 --> 00:08:09,166
接下来在生成的 xcloc 中


226
00:08:09,986 --> 00:08:12,696
你会看到本地化内容目录


227
00:08:13,136 --> 00:08:14,876
本地化内容包含


228
00:08:14,976 --> 00:08:16,436
项目中所有


229
00:08:16,436 --> 00:08:18,886
可本地化的资源


230
00:08:18,886 --> 00:08:20,816
这是本地化人员


231
00:08:20,816 --> 00:08:23,326
工作的主要目录


232
00:08:24,836 --> 00:08:26,986
因此正如我所提到的那样


233
00:08:26,986 --> 00:08:29,736
在本地化内容中


234
00:08:29,736 --> 00:08:32,096
你会看到一个 XLIFF 文档


235
00:08:32,145 --> 00:08:34,456
其中包含所有项目本地化字符串


236
00:08:34,456 --> 00:08:36,606
以及可本地化的非字符串


237
00:08:36,806 --> 00:08:38,826
素材（如图像）


238
00:08:38,826 --> 00:08:40,265
如果你想要本地化这些内容


239
00:08:40,996 --> 00:08:42,246
这些素材将与


240
00:08:42,246 --> 00:08:44,176
本地化目录中的 Xcode 项目


241
00:08:44,246 --> 00:08:46,276
归进相同的


242
00:08:46,356 --> 00:08:48,616
文件系统层次结构中


243
00:08:49,786 --> 00:08:51,956
你的本地化人员


244
00:08:52,066 --> 00:08:54,306
还可以使用本地化内容


245
00:08:54,486 --> 00:08:57,016
来覆盖针对某种语言


246
00:08:57,016 --> 00:08:58,726
的任何资源


247
00:08:58,726 --> 00:09:00,336
例如界面构建文件


248
00:09:00,826 --> 00:09:05,206
接下来 在本地化目录中


249
00:09:05,206 --> 00:09:07,176
我们生成一个源内容目录


250
00:09:07,246 --> 00:09:08,976
这主要是为


251
00:09:08,976 --> 00:09:11,356
上下文提供的


252
00:09:12,156 --> 00:09:14,336
源内容包含用于


253
00:09:14,606 --> 00:09:16,336
生成本地化内容的素材


254
00:09:16,336 --> 00:09:18,056
用故事板举个例子


255
00:09:18,156 --> 00:09:19,576
会有助于本地化人员


256
00:09:19,576 --> 00:09:23,096
了解到你的用户界面


257
00:09:23,096 --> 00:09:24,366
是如何布置在


258
00:09:24,366 --> 00:09:25,366
开发语言中的


259
00:09:25,366 --> 00:09:27,486
以便决定


260
00:09:27,486 --> 00:09:28,416
翻译的长度


261
00:09:29,366 --> 00:09:30,816
即使你的


262
00:09:30,856 --> 00:09:34,166
本地化字符串来自源代码


263
00:09:34,466 --> 00:09:36,086
我们也不会在源内容中


264
00:09:36,186 --> 00:09:37,086
生成你的源代码


265
00:09:38,016 --> 00:09:41,686
主要为上下文提供的素材


266
00:09:41,686 --> 00:09:43,546
也将被归入相同的


267
00:09:43,546 --> 00:09:44,956
文件系统层次结构中


268
00:09:44,956 --> 00:09:46,316
即你的本地化目录


269
00:09:46,316 --> 00:09:48,616
中的 Xcode 项目


270
00:09:48,616 --> 00:09:50,026
正如我所提到的


271
00:09:50,026 --> 00:09:51,776
这主要是为上下文提供的


272
00:09:51,776 --> 00:09:53,566
即使你的本地化人员


273
00:09:53,566 --> 00:09:55,956
在导入中更改你的源上下文


274
00:09:55,956 --> 00:09:58,026
Xcode 也会忽略它们


275
00:09:58,026 --> 00:10:00,246
不会将这些资源导回


276
00:10:00,766 --> 00:10:01,936
到你的项目中


277
00:10:03,116 --> 00:10:05,726
最后在本地化目录中


278
00:10:05,726 --> 00:10:07,166
你将找到一个 Notes 目录


279
00:10:07,166 --> 00:10:09,426
这主要是为


280
00:10:09,426 --> 00:10:11,646
本地化人员


281
00:10:11,646 --> 00:10:13,766
提供任何附加的


282
00:10:13,766 --> 00:10:15,946
上下文信息


283
00:10:16,816 --> 00:10:18,546
比如说 它可以是


284
00:10:18,626 --> 00:10:21,486
来自 UI 附件的


285
00:10:21,486 --> 00:10:22,046
屏幕快照数据


286
00:10:22,976 --> 00:10:25,176
可以是自述文件或电影


287
00:10:25,176 --> 00:10:28,016
解释有关你的 App


288
00:10:28,016 --> 00:10:30,276
的信息或任何你认为


289
00:10:30,276 --> 00:10:31,476
对本地化人员


290
00:10:31,476 --> 00:10:34,026
非常重要的信息


291
00:10:34,576 --> 00:10:35,476
这就是 Xcode


292
00:10:35,476 --> 00:10:37,286
本地化目录结构


293
00:10:37,996 --> 00:10:40,026
我们也一直


294
00:10:40,026 --> 00:10:42,156
致力于更新 Xcode


295
00:10:42,156 --> 00:10:42,836
构建命令行工具


296
00:10:43,206 --> 00:10:45,196
现在在导出中


297
00:10:45,196 --> 00:10:46,966
我们生成一个 Xcode 本地化目录


298
00:10:47,456 --> 00:10:49,086
在导入时


299
00:10:49,086 --> 00:10:51,406
导入命令向后兼容


300
00:10:51,596 --> 00:10:53,386
如果你仍使用


301
00:10:53,386 --> 00:10:54,626
旧的 XLIFF 文件


302
00:10:54,626 --> 00:10:55,946
仍然可以将它们重新导入你的项目中


303
00:10:56,016 --> 00:10:58,226
或者你可以导入


304
00:10:58,506 --> 00:11:00,436
新的本地化目录


305
00:11:01,306 --> 00:11:03,126
就是这样


306
00:11:03,126 --> 00:11:04,736
下面请 Vivian


307
00:11:04,736 --> 00:11:06,046
给大家演示一下


308
00:11:06,046 --> 00:11:07,126
本地化目录


309
00:11:07,176 --> 00:11:12,916
非常感谢 [ 掌声 ]


310
00:11:13,416 --> 00:11:13,976
>> 谢谢你 Sara


311
00:11:19,036 --> 00:11:20,776
是这样 我们一直在研究


312
00:11:20,776 --> 00:11:23,226
一个旅行 App


313
00:11:23,226 --> 00:11:25,246
这个 App 的特别之处在于


314
00:11:25,246 --> 00:11:27,506
它是第一个让你计划到


315
00:11:27,506 --> 00:11:28,256
其他星球度假的 App


316
00:11:28,866 --> 00:11:30,256
所以我们称之为度假行星


317
00:11:30,546 --> 00:11:33,966
我们来看一下 在启动画面上


318
00:11:33,966 --> 00:11:35,626
有这个可爱的标志


319
00:11:35,666 --> 00:11:37,706
还有 App 的名称


320
00:11:37,706 --> 00:11:38,996
点按这里 打开浏览


321
00:11:40,116 --> 00:11:41,146
我们可以预定航班


322
00:11:41,276 --> 00:11:43,816
预定探险和巡航


323
00:11:44,046 --> 00:11:45,546
或者整个假期


324
00:11:45,666 --> 00:11:46,806
咱们去火星吧


325
00:11:49,106 --> 00:11:50,406
现在我需要选择


326
00:11:50,406 --> 00:11:52,536
到火星上的哪个地方去


327
00:11:52,536 --> 00:11:53,966
我觉得可以试一试


328
00:11:53,966 --> 00:11:55,106
NASA 好奇号漫游者


329
00:11:55,106 --> 00:11:56,416
那就去 Gale Creator 吧


330
00:11:56,936 --> 00:11:59,946
肯定得在会议之后去


331
00:12:00,816 --> 00:12:03,686
我们去一个月吧


332
00:12:03,686 --> 00:12:05,236
乘坐一艘非常快的宇宙飞船


333
00:12:05,236 --> 00:12:07,546
我要带 Sara 和 Chris 一起去


334
00:12:07,546 --> 00:12:08,706
所以一共是三个旅行者


335
00:12:09,726 --> 00:12:11,636
总之会是一次非常便宜的火星之旅


336
00:12:12,956 --> 00:12:14,256
这是大家之前看到的


337
00:12:14,256 --> 00:12:15,046
那个 “Book” 按钮


338
00:12:15,956 --> 00:12:17,656
很好 我们的预订已经确认


339
00:12:18,276 --> 00:12:20,106
当然 地球上想要


340
00:12:20,106 --> 00:12:21,806
去访问火星的人


341
00:12:21,806 --> 00:12:23,656
有些人的 iOS


342
00:12:23,656 --> 00:12:26,096
设备语言不是英文


343
00:12:26,436 --> 00:12:27,336
所以我们需要


344
00:12:27,336 --> 00:12:29,166
本地化这个 App


345
00:12:29,166 --> 00:12:32,756
我们进入 Xcode


346
00:12:32,756 --> 00:12:34,626
我只需要


347
00:12:34,626 --> 00:12:36,866
选择我的项目


348
00:12:36,866 --> 00:12:38,286
在 Info 下面


349
00:12:38,286 --> 00:12:40,796
本地化 点按加号


350
00:12:40,796 --> 00:12:42,526
我们首先添加法语来试试看


351
00:12:44,666 --> 00:12:47,086
我的故事板默认是


352
00:12:47,086 --> 00:12:48,756
可本地化的


353
00:12:48,756 --> 00:12:49,586
所以它们已经被选中了


354
00:12:50,076 --> 00:12:51,356
有一个可本地化的


355
00:12:51,476 --> 00:12:53,306
字符串词典


356
00:12:53,306 --> 00:12:54,406
我也标记了可本地化


357
00:12:54,586 --> 00:12:55,916
我只需要点按完成（Finish）


358
00:12:56,046 --> 00:12:59,656
这时 Xcode 已经在


359
00:12:59,686 --> 00:13:01,696
我的项目中创建了 fr.lproj


360
00:13:01,696 --> 00:13:04,106
并且通过故事板创建了


361
00:13:04,556 --> 00:13:06,586
带有我的英文字符串


362
00:13:06,586 --> 00:13:08,446
拷贝的字符串文件


363
00:13:09,796 --> 00:13:12,936
还拷贝了我的图像


364
00:13:12,936 --> 00:13:14,506
因为我没有标记它可本地化


365
00:13:14,736 --> 00:13:17,866
所以需要我们来选择在右边 点按本地化（Localize）


366
00:13:18,096 --> 00:13:19,696
这个文件中的语言


367
00:13:19,696 --> 00:13:21,516
之间没有内容共享


368
00:13:21,706 --> 00:13:23,396
所以我需要把它变成英语


369
00:13:23,876 --> 00:13:25,436
因为那是我默认的开发语言


370
00:13:26,346 --> 00:13:29,296
点按本地化（Localize）并勾选法语


371
00:13:29,296 --> 00:13:30,246
制作副本


372
00:13:31,316 --> 00:13:32,276
好了就是这样


373
00:13:33,466 --> 00:13:35,556
现在我准备


374
00:13:35,556 --> 00:13:36,456
导出本地化


375
00:13:37,336 --> 00:13:39,926
我选择我的项目


376
00:13:39,926 --> 00:13:42,246
到编辑器


377
00:13:42,246 --> 00:13:43,136
导出本地化


378
00:13:44,296 --> 00:13:45,396
把它命名为


379
00:13:45,396 --> 00:13:46,916
vacationplanetloc


380
00:13:46,916 --> 00:13:48,356
就不用打出本地化几个字了


381
00:13:49,196 --> 00:13:50,606
然后连按我要


382
00:13:50,606 --> 00:13:54,036
导出的法语 并点按存储（Save）


383
00:13:55,156 --> 00:13:57,116
现在 Xcode 为我生成了


384
00:13:57,116 --> 00:13:58,986
Xcode 本地化目录


385
00:13:58,986 --> 00:14:03,006
可以在访达中查看


386
00:14:03,236 --> 00:14:05,126
好的那我们开始吧


387
00:14:05,866 --> 00:14:07,556
这是我的法语 Xcode


388
00:14:07,556 --> 00:14:09,206
本地化目录


389
00:14:09,396 --> 00:14:10,596
扩展名为 .xcloc


390
00:14:11,596 --> 00:14:13,406
就像 Sara 说的那样


391
00:14:13,976 --> 00:14:15,886
有我的 Xcode 


392
00:14:15,886 --> 00:14:17,106
本地化目录


393
00:14:17,106 --> 00:14:18,196
的元数据 contents.json


394
00:14:19,386 --> 00:14:21,106
接下来是本地化内容


395
00:14:21,296 --> 00:14:23,866
在这里有一个 XLIFF


396
00:14:23,866 --> 00:14:25,936
和 Xcode 9 一样


397
00:14:26,586 --> 00:14:29,686
你可以看到这里有


398
00:14:29,686 --> 00:14:33,556
我所有的字符串


399
00:14:33,556 --> 00:14:34,586
在这里我们可以看到


400
00:14:34,586 --> 00:14:36,646
红色突出显示未翻译的英文副本


401
00:14:37,146 --> 00:14:42,436
和我的项目文件层次结构类似的


402
00:14:42,436 --> 00:14:44,996
本地化内容中有图标图像


403
00:14:45,586 --> 00:14:48,456
接下来我们来看源内容


404
00:14:49,126 --> 00:14:50,836
同样仿照


405
00:14:50,836 --> 00:14:52,676
Xcode 项目的文件层次结构


406
00:14:53,346 --> 00:14:55,666
底层有故事板文件


407
00:14:55,666 --> 00:14:56,996
还有信息 plist


408
00:14:56,996 --> 00:14:58,716
字符串的英文


409
00:14:58,886 --> 00:15:00,986
代码中定义的字符串的 


410
00:15:01,036 --> 00:15:02,356
localizable.strings


411
00:15:03,056 --> 00:15:05,246
可本地化的字符串字典和


412
00:15:05,246 --> 00:15:06,976
图像的英文版本


413
00:15:07,826 --> 00:15:09,806
所以 Xcode 本地化目录的


414
00:15:09,806 --> 00:15:11,556
最后一部分是


415
00:15:11,556 --> 00:15:12,366
Notes 文件夹


416
00:15:12,896 --> 00:15:14,486
Xcode 不会在这里


417
00:15:14,486 --> 00:15:17,906
放置任何东西


418
00:15:17,906 --> 00:15:20,106
但昨天我运行了 XCUI 测试


419
00:15:20,106 --> 00:15:22,556
这是一个非常简单的创建屏幕快照的方法


420
00:15:23,886 --> 00:15:26,086
所有的屏幕快照都保存为


421
00:15:26,576 --> 00:15:28,196
测试的附件


422
00:15:28,576 --> 00:15:29,606
所以我们可以回头看看


423
00:15:29,606 --> 00:15:32,236
测试结果


424
00:15:32,806 --> 00:15:35,756
例如我在这里添加了


425
00:15:35,906 --> 00:15:37,436
启动画面


426
00:15:37,436 --> 00:15:38,386
作为附件


427
00:15:38,926 --> 00:15:40,866
就是这样


428
00:15:41,376 --> 00:15:42,976
在访达中


429
00:15:42,976 --> 00:15:45,856
把它们拷贝到


430
00:15:45,856 --> 00:15:47,306
Notes 文件夹中


431
00:15:47,426 --> 00:15:48,986
选择在访达中显示（Show in Finder）


432
00:15:50,146 --> 00:15:52,266
显示包内容


433
00:15:52,526 --> 00:15:53,576
查看附件


434
00:15:54,366 --> 00:15:55,146
就在这儿


435
00:15:56,556 --> 00:16:00,746
拷贝并粘贴


436
00:16:02,766 --> 00:16:04,046
我认为这个 Travel Details


437
00:16:04,046 --> 00:16:05,276
会特别有用


438
00:16:05,276 --> 00:16:06,626
因为它有麻烦的


439
00:16:06,626 --> 00:16:09,646
“Book” 按钮


440
00:16:09,916 --> 00:16:11,866
现在我准备将我的整个


441
00:16:11,866 --> 00:16:14,166
Xcode 本地化目录


442
00:16:14,166 --> 00:16:16,306
发送给我的本地化人员


443
00:16:16,856 --> 00:16:19,986
现在最棒的是


444
00:16:19,986 --> 00:16:21,796
他们非常快 已经完成了


445
00:16:21,796 --> 00:16:23,016
所以我们可以继续


446
00:16:23,016 --> 00:16:23,896
导入这些翻译


447
00:16:24,356 --> 00:16:26,946
只要回到 我的项目


448
00:16:28,196 --> 00:16:29,776
确保我选择了该项目


449
00:16:30,716 --> 00:16:32,136
和以前一样


450
00:16:32,836 --> 00:16:34,736
转到编辑器


451
00:16:34,736 --> 00:16:35,536
这次选择 Import Localizations


452
00:16:36,736 --> 00:16:38,476
所以我要选择


453
00:16:38,476 --> 00:16:40,566
Return to Xcode Localization Catalog.


454
00:16:41,406 --> 00:16:42,056
点按打开


455
00:16:42,556 --> 00:16:45,256
现在我得到一个


456
00:16:45,256 --> 00:16:46,776
与 Xcode 9 相同的


457
00:16:46,916 --> 00:16:48,486
对比视图


458
00:16:48,486 --> 00:16:49,766
它显示了有关我的


459
00:16:49,886 --> 00:16:50,366
字符串的所有警告 错误和更改


460
00:16:50,906 --> 00:16:52,616
所以在这里 这只是警告我


461
00:16:52,616 --> 00:16:54,116
我没有为 infoplist.strings 


462
00:16:54,116 --> 00:16:55,606
做任何翻译


463
00:16:56,016 --> 00:16:57,696
但没关系 我没有要求这些翻译


464
00:16:57,696 --> 00:16:59,066
所以我就


465
00:16:59,066 --> 00:17:00,166
忽略这个警告


466
00:17:00,706 --> 00:17:03,156
我也可以检查有什么变化


467
00:17:03,156 --> 00:17:04,096
所以在这里


468
00:17:04,215 --> 00:17:05,406
如果我们看故事板


469
00:17:05,406 --> 00:17:07,496
可以看到


470
00:17:07,915 --> 00:17:09,616
真正的法语翻译


471
00:17:09,616 --> 00:17:10,726
来替换字符串中的英文副本


472
00:17:12,175 --> 00:17:13,726
所以我只要点按导入 就像那样


473
00:17:15,296 --> 00:17:16,786
我的字符串和


474
00:17:16,786 --> 00:17:18,746
非字符串资源


475
00:17:18,746 --> 00:17:20,616
的所有翻译都在


476
00:17:20,616 --> 00:17:21,976
我的项目的正确位置


477
00:17:22,516 --> 00:17:28,726
[ 掌声 ]


478
00:17:29,226 --> 00:17:30,836
好的 我们再检查一下


479
00:17:31,616 --> 00:17:32,736
我将对一些文件


480
00:17:32,736 --> 00:17:33,696
进行抽查


481
00:17:33,696 --> 00:17:35,866
好的 main.strings


482
00:17:35,906 --> 00:17:37,256
看着是法语


483
00:17:37,256 --> 00:17:38,356
其实我不会讲法语


484
00:17:39,456 --> 00:17:40,866
检查一下图像


485
00:17:41,076 --> 00:17:42,776
也是法语


486
00:17:42,776 --> 00:17:44,966
好 让我们再用法语


487
00:17:44,966 --> 00:17:47,216
运行一下这个 App


488
00:17:47,216 --> 00:17:48,896
确保一切都没问题


489
00:17:49,346 --> 00:17:51,496
我要选择


490
00:17:51,496 --> 00:17:53,996
活动模式（Active Scheme）


491
00:17:53,996 --> 00:17:54,826
再选择编辑模式（Edit Scheme）


492
00:17:56,046 --> 00:17:58,636
将 App 语言设置为法语


493
00:17:58,636 --> 00:18:00,696
将 App 国家或地区


494
00:18:00,696 --> 00:18:02,106
设置为法国


495
00:18:02,756 --> 00:18:04,506
现在我准备好运行了


496
00:18:05,516 --> 00:18:07,646
先停止英语运行


497
00:18:08,576 --> 00:18:11,216
稍等一小会儿


498
00:18:11,216 --> 00:18:12,796
我们应该可以得到


499
00:18:12,796 --> 00:18:13,456
一个法语的 App


500
00:18:14,056 --> 00:18:16,566
好的到目前为止看起来不错


501
00:18:16,566 --> 00:18:18,376
我只需要快速浏览一下


502
00:18:18,376 --> 00:18:19,126
这样我就可以查看 “Book” 按钮


503
00:18:20,156 --> 00:18:21,796
好的浏览一下


504
00:18:21,796 --> 00:18:22,636
我们再回到火星


505
00:18:22,986 --> 00:18:24,166
我真的很喜欢 Gale Creator


506
00:18:24,746 --> 00:18:25,626
真棒


507
00:18:26,056 --> 00:18:27,866
那个 “Book” 按钮翻译对了


508
00:18:27,866 --> 00:18:28,996
我把这部分的屏幕快照


509
00:18:28,996 --> 00:18:31,306
也包括进去 可能真的很有帮助


510
00:18:31,986 --> 00:18:33,886
如果我们查看一下日期


511
00:18:34,736 --> 00:18:36,396
我不需要给我的


512
00:18:36,396 --> 00:18:38,616
翻译们发送月份列表


513
00:18:39,086 --> 00:18:40,976
而是直接用


514
00:18:40,976 --> 00:18:42,426
日期选择器


515
00:18:42,506 --> 00:18:43,986
然后使用格式化程序


516
00:18:43,986 --> 00:18:45,436
就能免费获得这些本地化内容


517
00:18:46,816 --> 00:18:48,376
同样 通过使用格式化程序的


518
00:18:48,376 --> 00:18:50,236
价格模板


519
00:18:50,266 --> 00:18:51,596
可以得到正确的数字格式


520
00:18:51,706 --> 00:18:53,116
和欧元价格


521
00:18:54,436 --> 00:18:56,676
所以无论是字符串


522
00:18:56,876 --> 00:18:58,886
还是非字符串


523
00:18:58,886 --> 00:19:01,466
这都是一种简易转换为法语的方法


524
00:19:01,466 --> 00:19:02,806
就像我只用 


525
00:19:02,806 --> 00:19:04,406
Xcode 9 中的


526
00:19:04,586 --> 00:19:05,246
字符串资源一样


527
00:19:05,576 --> 00:19:07,126
最后 让我们


528
00:19:07,166 --> 00:19:08,876
回到幻灯片


529
00:19:08,876 --> 00:19:11,836
结束对 Xcode 本地化目录的讨论


530
00:19:12,516 --> 00:19:19,266
[ 掌声 ]


531
00:19:19,766 --> 00:19:21,906
好的我们已经介绍了


532
00:19:21,906 --> 00:19:23,686
Xcode 本地化目录作为


533
00:19:23,686 --> 00:19:26,346
Xcode 的新的本地化


534
00:19:26,346 --> 00:19:28,746
导出和导入标准


535
00:19:29,856 --> 00:19:31,286
为你的翻译人员


536
00:19:31,286 --> 00:19:33,146
提供了更多的灵活性


537
00:19:33,146 --> 00:19:34,676
并允许你方便地提供


538
00:19:34,676 --> 00:19:37,036
更多的视觉和功能背景


539
00:19:37,036 --> 00:19:38,326
以更好地帮助他们


540
00:19:38,326 --> 00:19:40,346
第一次就做出


541
00:19:40,466 --> 00:19:41,316
高质量的翻译


542
00:19:41,876 --> 00:19:44,366
它增加了文件类型支持


543
00:19:44,406 --> 00:19:45,926
因此你可以像使用基于


544
00:19:45,926 --> 00:19:47,876
字符串的资源那样


545
00:19:48,206 --> 00:19:49,696
轻松地导出和导入


546
00:19:49,696 --> 00:19:51,216
非字符串资源


547
00:19:51,826 --> 00:19:54,766
我们还更新了 Xcode 构建版本


548
00:19:54,886 --> 00:19:56,796
以使用 Xcode 本地化目录


549
00:19:56,796 --> 00:19:59,076
提供持续支持


550
00:20:00,116 --> 00:20:02,176
如果你现在有


551
00:20:02,176 --> 00:20:04,256
本地化的内容


552
00:20:04,256 --> 00:20:05,736
不要担心


553
00:20:05,736 --> 00:20:07,026
当 Xcode 和 Xcode 构建


554
00:20:07,026 --> 00:20:09,556
都向后兼容时


555
00:20:09,556 --> 00:20:11,256
你仍然可以导入这些 XLIFFs 文件


556
00:20:12,496 --> 00:20:14,606
好了 现在我把场地交给 Chris


557
00:20:14,606 --> 00:20:16,556
他会和你们谈谈


558
00:20:16,556 --> 00:20:18,756
如何通过本地化目标


559
00:20:18,756 --> 00:20:20,056
定义文件来


560
00:20:20,056 --> 00:20:21,616
创建 Siri 捷径


561
00:20:22,516 --> 00:20:27,796
[ 掌声 ]


562
00:20:28,296 --> 00:20:29,186
>> 谢谢你 Vivian


563
00:20:29,686 --> 00:20:30,796
这可真棒


564
00:20:31,366 --> 00:20:32,306
我非常期待


565
00:20:32,306 --> 00:20:33,146
此次的火星之旅


566
00:20:33,706 --> 00:20:36,526
我将向你们展示如何


567
00:20:36,726 --> 00:20:38,656
通过本地化你的目标


568
00:20:38,746 --> 00:20:41,306
定义来本地化 Siri 捷径


569
00:20:41,766 --> 00:20:44,886
你的目标定义是


570
00:20:44,886 --> 00:20:46,546
在 Xcode 中的


571
00:20:46,646 --> 00:20:47,996
目标定义文件中创建的


572
00:20:48,716 --> 00:20:50,146
这些都是你用来


573
00:20:50,146 --> 00:20:51,876
为 Siri 捷径


574
00:20:51,876 --> 00:20:52,886
定义的自定义目标


575
00:20:53,516 --> 00:20:54,916
它们只是具有目标定义


576
00:20:54,916 --> 00:20:57,166
扩展名的文件


577
00:20:57,166 --> 00:20:59,406
在 Xcode 中具有自定义编辑器


578
00:21:00,186 --> 00:21:02,626
我们设计它们是为了


579
00:21:02,626 --> 00:21:04,796
利用基础本地化


580
00:21:05,386 --> 00:21:07,036
所以当你翻译你的目标时


581
00:21:07,036 --> 00:21:08,816
你没有很多不同的


582
00:21:08,816 --> 00:21:10,256
目标定义文件


583
00:21:10,256 --> 00:21:13,096
每种语言一个


584
00:21:13,096 --> 00:21:15,226
你只需要使用字符串文件


585
00:21:15,226 --> 00:21:17,376
来本地化你的


586
00:21:17,376 --> 00:21:18,486
目标定义中的字符串


587
00:21:19,396 --> 00:21:22,626
当然 我们也支持


588
00:21:22,786 --> 00:21:25,876
stringsdict 文件


589
00:21:25,876 --> 00:21:28,236
用于各种情况


590
00:21:28,236 --> 00:21:29,796
如复数规则和


591
00:21:29,796 --> 00:21:30,446
可变宽度字符串


592
00:21:31,936 --> 00:21:33,636
如果你还没看过


593
00:21:33,746 --> 00:21:35,176
我强烈建议你


594
00:21:35,176 --> 00:21:36,776
去看看昨天大会的


595
00:21:36,776 --> 00:21:38,606
Siri 捷径的介绍


596
00:21:38,606 --> 00:21:40,336
它可以用于流媒体


597
00:21:40,336 --> 00:21:43,916
现在让我们


598
00:21:44,226 --> 00:21:46,256
快速浏览一下 目标定义编辑器


599
00:21:46,806 --> 00:21:47,986
这里我们有一个


600
00:21:47,986 --> 00:21:49,396
度假星球 App 的


601
00:21:49,456 --> 00:21:53,286
目标定义


602
00:21:53,286 --> 00:21:54,736
我们有一个


603
00:21:54,736 --> 00:21:55,376
预定度假的目标


604
00:21:56,336 --> 00:21:57,496
当然 你想在你的目标中


605
00:21:57,496 --> 00:21:58,726
本地化的


606
00:21:58,726 --> 00:22:01,056
内容有标题和


607
00:22:01,056 --> 00:22:02,886
目标本身的描述


608
00:22:03,206 --> 00:22:05,836
但是大部分你将要


609
00:22:05,836 --> 00:22:07,656
为你的目标定义


610
00:22:07,656 --> 00:22:09,756
本地化的


611
00:22:09,856 --> 00:22:13,036
是从目标参数组成的


612
00:22:13,346 --> 00:22:15,346
快捷类型


613
00:22:15,866 --> 00:22:18,816
当然 当一个目标被调用时


614
00:22:18,816 --> 00:22:20,836
它也会产生一个响应


615
00:22:20,836 --> 00:22:22,846
这些响应也可以通过


616
00:22:22,846 --> 00:22:25,676
响应模板进行定制


617
00:22:25,796 --> 00:22:27,576
这些响应模板的


618
00:22:27,666 --> 00:22:29,266
本地化方式与


619
00:22:29,266 --> 00:22:31,076
你的快捷方式


620
00:22:31,076 --> 00:22:33,836
类型完全相同


621
00:22:33,936 --> 00:22:35,436
现在让我们更深入地


622
00:22:35,436 --> 00:22:37,116
了解一个目标的实际结构


623
00:22:37,116 --> 00:22:38,816
以及它内部的


624
00:22:38,816 --> 00:22:39,196
可本地化结构


625
00:22:40,376 --> 00:22:42,426
目标实际上是


626
00:22:42,426 --> 00:22:43,776
具有各种类型的


627
00:22:43,776 --> 00:22:45,136
参数的集合


628
00:22:45,696 --> 00:22:46,866
它们可以有整数


629
00:22:47,106 --> 00:22:49,486
或昨天你们看到的字符串类型


630
00:22:49,486 --> 00:22:50,776
它们也支持


631
00:22:50,776 --> 00:22:53,916
自定义对象


632
00:22:53,916 --> 00:22:55,776
它们支持在目标定义中


633
00:22:55,776 --> 00:22:57,776
定义的枚举类型


634
00:22:58,256 --> 00:23:02,036
这些参数被组合成


635
00:23:02,036 --> 00:23:04,706
不同的快捷方式


636
00:23:04,706 --> 00:23:09,016
有一个可读性很强的标题


637
00:23:09,586 --> 00:23:13,816
当然 响应也是属性的集合


638
00:23:13,816 --> 00:23:15,506
这些属性具有


639
00:23:15,746 --> 00:23:17,846
容易理解的类型


640
00:23:18,126 --> 00:23:20,976
比如字符串或整数


641
00:23:21,226 --> 00:23:23,786
还可以具有


642
00:23:23,786 --> 00:23:24,636
枚举类型


643
00:23:25,226 --> 00:23:27,456
当你本地化


644
00:23:27,456 --> 00:23:29,156
你的目标定义时


645
00:23:29,156 --> 00:23:31,826
最需要本地化的是你的快捷方式


646
00:23:31,826 --> 00:23:34,666
类型和响应模板


647
00:23:35,026 --> 00:23:36,516
主要来说


648
00:23:36,516 --> 00:23:37,756
我们今天要讨论的是


649
00:23:37,886 --> 00:23:39,276
如何本地化你的


650
00:23:39,276 --> 00:23:42,096
快捷方式类型


651
00:23:42,096 --> 00:23:43,786
因为本地化相应模板的方式


652
00:23:43,786 --> 00:23:44,606
完全相同


653
00:23:45,196 --> 00:23:48,066
所以这里是我们的


654
00:23:48,066 --> 00:23:50,036
度假星球 App 的一个例子


655
00:23:50,396 --> 00:23:52,036
这是预订旅行的快捷方式


656
00:23:52,036 --> 00:23:56,296
这种类型的旅行


657
00:23:56,296 --> 00:23:57,946
实际上有一个


658
00:23:57,986 --> 00:24:00,316
占位符用于枚举


659
00:24:00,846 --> 00:24:03,096
此枚举允许你


660
00:24:03,186 --> 00:24:04,776
预订航班或


661
00:24:04,816 --> 00:24:06,396
预订邮轮


662
00:24:06,396 --> 00:24:07,486
或者预定假期


663
00:24:07,816 --> 00:24:10,216
当 Xcode 本地化


664
00:24:10,486 --> 00:24:12,336
你的目标定义文件时


665
00:24:12,466 --> 00:24:13,646
当你按下 Vivian 给你的


666
00:24:13,646 --> 00:24:14,876
本地化按钮时


667
00:24:15,776 --> 00:24:18,116
Xcode 会为这个


668
00:24:18,606 --> 00:24:22,046
枚举中的部分


669
00:24:22,046 --> 00:24:25,886
生成一个字符串


670
00:24:26,356 --> 00:24:30,066
因为我们选择了


671
00:24:30,136 --> 00:24:31,926
特定的词


672
00:24:31,926 --> 00:24:32,706
所以它恰好起作用


673
00:24:34,336 --> 00:24:36,786
因为我们的模板上


674
00:24:36,786 --> 00:24:38,676
写着 “预订航班”


675
00:24:38,676 --> 00:24:41,316
使用不定冠词


676
00:24:41,686 --> 00:24:44,106
我们可以


677
00:24:44,106 --> 00:24:46,106
或 “预订一种类型”


678
00:24:46,106 --> 00:24:47,986
使用不定冠词


679
00:24:47,986 --> 00:24:49,606
我们可以预订航班 预订邮轮 或预订度假套餐


680
00:24:49,646 --> 00:24:51,326
因为他们都以辅音开头


681
00:24:51,526 --> 00:24:53,186
因为这是英语的规则


682
00:24:53,696 --> 00:24:55,966
但是如果我为我的


683
00:24:56,286 --> 00:24:57,946
列举增加了一个


684
00:24:57,946 --> 00:24:59,966
新的值来代表预定一次探险 比如说火星


685
00:25:02,316 --> 00:25:05,136
Xcode 只是在它的


686
00:25:05,136 --> 00:25:06,656
字符串文件中生成


687
00:25:07,786 --> 00:25:10,996
"Book a expedition" 


688
00:25:10,996 --> 00:25:12,546
这实际上不是很合乎语法


689
00:25:13,516 --> 00:25:14,746
幸运的是


690
00:25:14,746 --> 00:25:16,266
这些字符串文件是


691
00:25:16,266 --> 00:25:19,956
由明确定义的 ID 和稳定 ID 来控制的


692
00:25:20,346 --> 00:25:21,926
因此你可以直接进入字符串文件


693
00:25:21,926 --> 00:25:24,996
并对其进行更改


694
00:25:24,996 --> 00:25:26,466
以使其符合语法


695
00:25:27,826 --> 00:25:29,586
英语并不是唯一


696
00:25:29,586 --> 00:25:31,416
一种具有这种语法


697
00:25:31,416 --> 00:25:32,476
一致性的语言


698
00:25:33,116 --> 00:25:34,396
当然不同的语言


699
00:25:34,476 --> 00:25:35,596
有不同的


700
00:25:35,596 --> 00:25:36,036
语法一致性


701
00:25:36,276 --> 00:25:37,686
法语的话 你需要做


702
00:25:37,686 --> 00:25:39,776
同样的事


703
00:25:40,176 --> 00:25:41,626
你需要让冠词的词性


704
00:25:41,686 --> 00:25:44,006
和它所指的


705
00:25:44,006 --> 00:25:48,046
名词的词性一致


706
00:25:48,336 --> 00:25:50,486
现在让我们快速


707
00:25:50,486 --> 00:25:51,856
看一个更复杂的例子


708
00:25:52,716 --> 00:25:57,736
这里有一个快捷方式


709
00:25:57,736 --> 00:26:00,106
用于为一些人


710
00:26:00,246 --> 00:26:01,526
预订假期 


711
00:26:01,526 --> 00:26:03,706
同样 在生成字符串


712
00:26:03,706 --> 00:26:05,546
文件 Xcode 时


713
00:26:06,246 --> 00:26:08,106
它会将模板与


714
00:26:08,106 --> 00:26:08,866
枚举值组合在一起


715
00:26:09,326 --> 00:26:10,876
但是 它不会为


716
00:26:10,876 --> 00:26:13,056
每个可能的整数


717
00:26:13,086 --> 00:26:15,016
生成一个字符串


718
00:26:16,256 --> 00:26:18,716
相反 它会在


719
00:26:18,716 --> 00:26:20,066
字符串中


720
00:26:20,066 --> 00:26:21,756
保留一个占位符


721
00:26:21,756 --> 00:26:24,866
由快捷方式系统在运行时替换


722
00:26:25,186 --> 00:26:29,446
再说一遍 这看起来


723
00:26:29,446 --> 00:26:30,376
应该是合理的


724
00:26:30,456 --> 00:26:32,986
对吧 上面写着


725
00:26:32,986 --> 00:26:35,536
为一些人订一个假期


726
00:26:35,656 --> 00:26:36,566
或者订一个航班


727
00:26:37,066 --> 00:26:41,076
在我们的字符串文件中


728
00:26:41,076 --> 00:26:42,716
我们得到了生成的 ID 和字符串


729
00:26:42,716 --> 00:26:44,226
上面写的是


730
00:26:44,226 --> 00:26:46,376
为一些人预订一次巡航


731
00:26:46,606 --> 00:26:48,666
这个占位符仍然在那里


732
00:26:49,196 --> 00:26:51,526
然而当我为自己去


733
00:26:51,526 --> 00:26:53,796
预订一艘游轮去庆祝


734
00:26:53,796 --> 00:26:57,386
伟大的 WWDC 时


735
00:26:57,386 --> 00:26:59,206
真正的快捷方式是


736
00:26:59,206 --> 00:27:01,666
“预订一个人的游轮”


737
00:27:01,666 --> 00:27:04,696
这句英语


738
00:27:04,696 --> 00:27:05,796
在语法上不合规范


739
00:27:07,146 --> 00:27:08,936
但是 这些文件


740
00:27:09,046 --> 00:27:11,796
也支持字符串词典（stringsdict）文件


741
00:27:11,796 --> 00:27:14,116
因此你可以做


742
00:27:14,116 --> 00:27:16,746
所有你需要的多元化


743
00:27:16,856 --> 00:27:18,766
并让系统为你处理它


744
00:27:20,426 --> 00:27:23,076
在字符串词典（stringsdict）文件中


745
00:27:23,076 --> 00:27:26,706
我们有字典本身


746
00:27:26,706 --> 00:27:29,156
由我在字符串文件中


747
00:27:29,336 --> 00:27:31,196
展示的那个字符串进行键控


748
00:27:31,566 --> 00:27:33,506
你可以使用它


749
00:27:33,506 --> 00:27:37,196
也可以使用 ID 作为关键


750
00:27:37,196 --> 00:27:40,676
然后我们又生成了


751
00:27:40,676 --> 00:27:42,576
另一个字符串


752
00:27:42,576 --> 00:27:44,906
它实际上会在用户界面中显示出来


753
00:27:46,376 --> 00:27:48,366
在这里 我们指的是


754
00:27:48,366 --> 00:27:50,656
另一个变量它可以


755
00:27:50,656 --> 00:27:52,816
根据英语的复数规则


756
00:27:52,816 --> 00:27:55,976
来代替此变量


757
00:27:56,046 --> 00:27:57,956
或另一个变量


758
00:27:58,466 --> 00:28:02,156
要了解关于 


759
00:28:02,156 --> 00:28:04,276
stringsdict 文件的


760
00:28:04,276 --> 00:28:05,826
更多信息


761
00:28:05,826 --> 00:28:08,076
可以查看我们的分会


762
00:28:08,076 --> 00:28:09,876
从去年开始 在 WWDC App 中


763
00:28:09,876 --> 00:28:10,566
使用 Xcode 9 进行本地化


764
00:28:12,936 --> 00:28:15,096
如果我现在去


765
00:28:15,096 --> 00:28:17,536
预订我的邮轮


766
00:28:17,536 --> 00:28:19,646
这个操作系统会说


767
00:28:19,646 --> 00:28:22,026
哦 我为一个人进行预订


768
00:28:22,496 --> 00:28:24,866
所以我们用一个人的情况


769
00:28:24,866 --> 00:28:25,936
得到一个恰当的语法短语


770
00:28:26,836 --> 00:28:28,946
同样的 如果我想为


771
00:28:28,946 --> 00:28:30,836
我们所有人预订一次邮轮之旅


772
00:28:31,186 --> 00:28:33,186
你知道 毕竟我不是


773
00:28:33,186 --> 00:28:37,506
这里唯一的一个


774
00:28:37,626 --> 00:28:39,646
系统会说 “为三个人预订一次邮轮之旅”


775
00:28:40,166 --> 00:28:45,676
现在我们来聊聊


776
00:28:45,676 --> 00:28:47,366
在代码中创建的目标


777
00:28:48,446 --> 00:28:49,826
如果你正在代码中


778
00:28:49,826 --> 00:28:52,106
创建一个目标来


779
00:28:52,806 --> 00:28:55,216
将其捐赠给系统


780
00:28:55,216 --> 00:28:57,786
那么这并不一定是显示快捷方式的地方


781
00:28:58,076 --> 00:29:00,136
在将来的某个时刻


782
00:29:00,206 --> 00:29:01,576
可以根据用户的操作


783
00:29:01,576 --> 00:29:02,776
显示这些内容


784
00:29:04,246 --> 00:29:07,106
我们有一个新的 API


785
00:29:07,106 --> 00:29:09,316
来创建一个延迟的


786
00:29:09,316 --> 00:29:12,516
可本地化字符串


787
00:29:12,516 --> 00:29:13,946
它将在字符串呈现给


788
00:29:13,946 --> 00:29:15,306
用户的地方进行本地化


789
00:29:16,006 --> 00:29:19,376
这是必要的


790
00:29:19,446 --> 00:29:21,226
因为向系统提供目标


791
00:29:21,226 --> 00:29:23,136
实际上是在告诉系统


792
00:29:23,216 --> 00:29:25,026
嘿 用户在我的 App 中


793
00:29:25,026 --> 00:29:27,696
执行了一些操作


794
00:29:27,696 --> 00:29:29,886
你可能会在


795
00:29:29,886 --> 00:29:31,896
其他时候再次提供它们


796
00:29:33,026 --> 00:29:35,506
幸运的是 这个 API 


797
00:29:35,506 --> 00:29:37,346
非常容易使用


798
00:29:37,746 --> 00:29:39,976
它只是一个添加到


799
00:29:39,976 --> 00:29:42,396
nsstring 的调用


800
00:29:42,436 --> 00:29:43,776
你可以使用它来包装


801
00:29:43,776 --> 00:29:45,856
要分配给你在代码中


802
00:29:45,856 --> 00:29:49,366
创建的目标的字符串


803
00:29:50,056 --> 00:29:52,786
让我们快速讨论


804
00:29:52,786 --> 00:29:53,376
一下我们所看到的


805
00:29:54,146 --> 00:29:56,216
我们已经看到


806
00:29:56,216 --> 00:29:58,076
Xcode 将你的快捷方式类型


807
00:29:58,246 --> 00:30:00,126
与在目标定义中


808
00:30:00,126 --> 00:30:01,556
生成字符串文件时


809
00:30:01,556 --> 00:30:02,976
定义的枚举组合在一起


810
00:30:03,146 --> 00:30:08,106
你可以使用字符串


811
00:30:08,166 --> 00:30:10,356
和 stringsdict 文件


812
00:30:10,356 --> 00:30:11,106
本地化你的快捷方式


813
00:30:11,586 --> 00:30:14,796
如果你在代码中创建


814
00:30:14,886 --> 00:30:16,836
一个目标捐给系统


815
00:30:16,916 --> 00:30:18,716
通知用户操作的系统


816
00:30:18,716 --> 00:30:19,986
可能会重复


817
00:30:19,986 --> 00:30:23,066
你可以使用延迟局部目标字符串


818
00:30:23,066 --> 00:30:26,616
结束字符串以这样一种方式


819
00:30:26,616 --> 00:30:28,236
它将局部呈现


820
00:30:28,236 --> 00:30:29,476
给用户的时候


821
00:30:29,476 --> 00:30:31,526
不是在你的


822
00:30:31,526 --> 00:30:33,626
App 中创建的那个


823
00:30:33,626 --> 00:30:35,416
因此 如果用户在捐赠


824
00:30:35,416 --> 00:30:37,546
该目标的过程中


825
00:30:37,546 --> 00:30:39,196
更改了手机的语言


826
00:30:39,196 --> 00:30:40,996
并且显示了快捷方式


827
00:30:41,146 --> 00:30:43,976
则仍然会遵循用户的手机语言


828
00:30:44,546 --> 00:30:49,566
现在 当你在


829
00:30:49,616 --> 00:30:51,566
stringsdict 文件中定义字符串时


830
00:30:51,566 --> 00:30:53,876
它们实际上在运行时会被优先选择


831
00:30:54,626 --> 00:30:56,046
这意味着你可以在


832
00:30:56,046 --> 00:30:58,266
所有不需要复数规则


833
00:30:58,266 --> 00:31:00,246
的情况下


834
00:31:00,246 --> 00:31:01,636
在你的字符串文件中


835
00:31:01,636 --> 00:31:04,506
执行大部分本地化操作


836
00:31:04,506 --> 00:31:06,416
然后你可以提供一个


837
00:31:06,466 --> 00:31:08,336
字符串文件或


838
00:31:08,336 --> 00:31:10,666
与你的目标定义名称


839
00:31:10,666 --> 00:31:13,656
相同的字符串文件来覆盖


840
00:31:14,276 --> 00:31:16,996
当你创建


841
00:31:16,996 --> 00:31:18,956
stringsdict 文件时


842
00:31:19,316 --> 00:31:21,966
你可以使用字符串本身


843
00:31:21,966 --> 00:31:23,836
或者字符串 ID


844
00:31:23,836 --> 00:31:26,296
Xcode 在你的字符串文件中


845
00:31:26,296 --> 00:31:29,276
指定为键


846
00:31:29,346 --> 00:31:30,936
作为本地化的


847
00:31:31,036 --> 00:31:32,456
字符串键和字符串


848
00:31:32,456 --> 00:31:34,556
在某种程度上


849
00:31:34,556 --> 00:31:35,536
你决定在你的目标定义中做些改变


850
00:31:36,056 --> 00:31:39,926
现在请回 Vivian


851
00:31:39,926 --> 00:31:41,896
来告诉大家


852
00:31:41,896 --> 00:31:43,126
我们该如何操作


853
00:31:43,126 --> 00:31:44,976
这整个过程是如何在 Xcode 中工作的


854
00:31:45,516 --> 00:31:50,846
[ 掌声 ]


855
00:31:51,346 --> 00:31:51,966
>> 谢谢 Chris


856
00:32:02,956 --> 00:32:05,656
一旦你去了一次火星


857
00:32:05,656 --> 00:32:06,936
你可能会想


858
00:32:06,936 --> 00:32:08,656
去第二次 第三次


859
00:32:08,656 --> 00:32:10,506
因为这些旅行真的很便宜


860
00:32:10,506 --> 00:32:11,636
就像我们看到的那样


861
00:32:12,716 --> 00:32:14,036
如果我们的 App 能给


862
00:32:14,036 --> 00:32:16,086
这些频繁旅行的人


863
00:32:16,206 --> 00:32:18,486
作出额外的旅行建议


864
00:32:18,486 --> 00:32:20,596
并提供下一次假期的快捷方式 那就太棒了


865
00:32:20,846 --> 00:32:22,706
考虑到这一点


866
00:32:22,706 --> 00:32:25,036
我为我们的项目添加了一个目标定义


867
00:32:25,146 --> 00:32:28,606
我们来看一下


868
00:32:29,166 --> 00:32:30,756
这是我们的目标定义


869
00:32:31,456 --> 00:32:33,136
有一个定制的目标


870
00:32:33,246 --> 00:32:35,946
叫做 “Book Item”


871
00:32:36,666 --> 00:32:40,026
有标题 有描述


872
00:32:40,026 --> 00:32:41,566
下面是实际的建议


873
00:32:42,106 --> 00:32:45,386
所以它是旅行者的


874
00:32:45,546 --> 00:32:46,756
一种类型


875
00:32:46,806 --> 00:32:47,736
就像 Chris 说的那样


876
00:32:47,736 --> 00:32:49,436
这是参数的组合


877
00:32:50,516 --> 00:32:52,836
所以我们可以看到


878
00:32:52,836 --> 00:32:57,406
旅行者是一个整数


879
00:32:57,406 --> 00:32:59,026
类型是在这里的


880
00:32:59,026 --> 00:33:01,376
enum 中定义的


881
00:33:01,376 --> 00:33:03,146
所以我们可以看到它可以是一次飞行


882
00:33:03,146 --> 00:33:03,956
一次巡航 一个整套假期 或者一次探险


883
00:33:05,136 --> 00:33:06,776
现在 如果我们的用户


884
00:33:06,776 --> 00:33:08,186
继续提供建议并


885
00:33:08,186 --> 00:33:09,636
预订另一次旅行


886
00:33:09,636 --> 00:33:10,916
我们需要给他们一些反馈


887
00:33:11,446 --> 00:33:13,196
因此我们有一个回应


888
00:33:13,376 --> 00:33:15,226
关于我们是否可以


889
00:33:15,226 --> 00:33:17,226
预订他们的旅行


890
00:33:17,226 --> 00:33:18,616
只有成功或失败的信息


891
00:33:19,196 --> 00:33:20,446
这同样是


892
00:33:20,446 --> 00:33:22,156
参数的组合


893
00:33:22,726 --> 00:33:25,276
当然 既然我们有面向


894
00:33:25,276 --> 00:33:27,226
用户的字符串


895
00:33:27,226 --> 00:33:28,036
我们需要对它们进行本地化


896
00:33:28,316 --> 00:33:28,956
现在就开始吧


897
00:33:29,686 --> 00:33:31,786
就像我对图像所做的一样


898
00:33:31,786 --> 00:33:34,316
我只要到这里 点按本地化


899
00:33:35,286 --> 00:33:36,986
现在目标定义文件


900
00:33:36,986 --> 00:33:38,126
将会像界面构建版本（interface builder）


901
00:33:38,196 --> 00:33:39,796
文件一样 我们在 strings 文件中有一个


902
00:33:39,796 --> 00:33:41,766
目标定义和


903
00:33:41,766 --> 00:33:43,686
所有的翻译


904
00:33:43,786 --> 00:33:45,456
我想把它放在底部


905
00:33:46,626 --> 00:33:47,576
点按本地化


906
00:33:48,396 --> 00:33:51,676
好的 我想看一下法语


907
00:33:52,766 --> 00:33:54,476
在这一点上


908
00:33:54,476 --> 00:33:56,846
Xcode 为法语翻译


909
00:33:56,846 --> 00:33:58,916
创建了一个字符串文件


910
00:34:00,106 --> 00:34:01,086
就在这儿


911
00:34:01,086 --> 00:34:03,496
好的 大家可以看到


912
00:34:03,496 --> 00:34:06,426
当我滚动的时候


913
00:34:06,426 --> 00:34:08,516
它有所有可能的字符串


914
00:34:08,516 --> 00:34:09,916
给定在枚举中定义的


915
00:34:09,916 --> 00:34:12,156
参数的可能值


916
00:34:13,045 --> 00:34:14,556
这很好 因为我


917
00:34:14,556 --> 00:34:16,456
不会说法语


918
00:34:16,456 --> 00:34:18,386
但我从幻灯片上知道


919
00:34:18,456 --> 00:34:19,416
航班和邮轮有


920
00:34:19,416 --> 00:34:20,735
不同的词性


921
00:34:20,735 --> 00:34:22,045
它们需要


922
00:34:22,045 --> 00:34:25,096
不同形式的冠词


923
00:34:25,356 --> 00:34:27,306
但我还是可以


924
00:34:27,306 --> 00:34:29,686
解决一些语法问题的


925
00:34:29,686 --> 00:34:30,916
这些是英文的


926
00:34:31,176 --> 00:34:34,926
一个人和一个


927
00:34:35,266 --> 00:34:36,106
探险队的例子


928
00:34:36,585 --> 00:34:38,436
为此 我需要 或者说


929
00:34:38,436 --> 00:34:40,275
至少要修正复数情况


930
00:34:40,676 --> 00:34:41,946
我要添加一个和


931
00:34:41,946 --> 00:34:44,146
目标定义同名的


932
00:34:44,146 --> 00:34:45,216
stringsdict 文件


933
00:34:46,406 --> 00:34:48,186
到我的项目这里


934
00:34:48,676 --> 00:34:49,936
创建新文件


935
00:34:51,146 --> 00:34:52,366
我将使用 Xcode 9 中


936
00:34:52,366 --> 00:34:55,116
添加的 stringsdict 模板


937
00:34:56,696 --> 00:34:57,406
点按下一步（Next）


938
00:34:58,516 --> 00:34:59,746
好的 这是非常重要的部分


939
00:34:59,746 --> 00:35:01,776
我要确保我的名字准确无误


940
00:35:03,096 --> 00:35:04,196
目标 好的


941
00:35:06,676 --> 00:35:11,386
创建 现在我不需要


942
00:35:11,386 --> 00:35:13,116
进入我的法语字符串文件


943
00:35:13,186 --> 00:35:15,186
来找到我的目标的 ID


944
00:35:15,946 --> 00:35:17,876
我可以进入


945
00:35:17,876 --> 00:35:19,776
目标定义文件


946
00:35:19,776 --> 00:35:21,186
因为它们是唯一的


947
00:35:21,906 --> 00:35:23,956
我可以直接从这里拷贝


948
00:35:24,026 --> 00:35:29,076
拷贝 然后粘贴


949
00:35:29,306 --> 00:35:33,966
然后回到 stringsdict


950
00:35:35,286 --> 00:35:39,306
好的 你可以在这里看到


951
00:35:39,306 --> 00:35:40,346
Xcode 在粘贴时为我格式化了参数


952
00:35:40,346 --> 00:35:44,316
这已经为 Siri 捷径


953
00:35:44,616 --> 00:35:45,906
做好了准备


954
00:35:46,766 --> 00:35:48,496
好了 现在我准备好


955
00:35:48,496 --> 00:35:49,966
要填我的


956
00:35:49,966 --> 00:35:50,906
复数字典了


957
00:35:50,906 --> 00:35:52,566
我只需要一个和另一个


958
00:35:52,566 --> 00:35:53,956
因为我用的是英语


959
00:35:53,956 --> 00:35:55,226
所以我有单数和复数


960
00:35:56,256 --> 00:35:57,796
但是就像任何一个好的烹饪节目一样


961
00:35:57,796 --> 00:35:59,106
我已经准备好了完成的文件


962
00:35:59,206 --> 00:36:00,386
我把它换进去


963
00:36:00,886 --> 00:36:04,446
好的 跟它说再见吧


964
00:36:04,446 --> 00:36:08,396
我们去找


965
00:36:08,466 --> 00:36:18,006
最后一个 好了 


966
00:36:18,526 --> 00:36:21,586
是的 Xcode


967
00:36:21,586 --> 00:36:23,716
我想拷贝一份 好了


968
00:36:24,316 --> 00:36:25,866
好的 我们来看一下


969
00:36:28,376 --> 00:36:30,496
我们来看一个同时


970
00:36:30,496 --> 00:36:32,166
解决两个问题的例子


971
00:36:33,816 --> 00:36:35,906
如果我们查一下 “Book Expedition”


972
00:36:36,646 --> 00:36:38,266
这里的字符串是


973
00:36:38,266 --> 00:36:42,016
“Book a Expedition”


974
00:36:42,016 --> 00:36:43,006
但在复数字典里


975
00:36:43,006 --> 00:36:46,056
我这里有一个人


976
00:36:46,056 --> 00:36:47,256
或其他人数的人


977
00:36:47,666 --> 00:36:50,166
我在这里所做的


978
00:36:50,166 --> 00:36:52,406
是修正了不定冠词的适用情况


979
00:36:52,406 --> 00:36:53,596
所以字符串实际显示


980
00:36:53,596 --> 00:36:54,556
我们将使用 an


981
00:36:55,746 --> 00:36:58,486
好的 所以我有我的手机上


982
00:36:58,486 --> 00:36:59,746
运行的 App 的完成版本


983
00:36:59,806 --> 00:37:00,816
我们通过它


984
00:37:00,816 --> 00:37:01,976
来检查创建的快捷方式


985
00:37:06,576 --> 00:37:08,466
我只想和以前一样


986
00:37:08,466 --> 00:37:09,686
去那个地方


987
00:37:09,686 --> 00:37:10,856
我真的很喜欢 Gale Creator


988
00:37:11,726 --> 00:37:14,386
浏览 火星 Gale Creator


989
00:37:14,386 --> 00:37:17,386
我们不要只去一天


990
00:37:17,386 --> 00:37:20,716
我们要去 这就行了


991
00:37:21,136 --> 00:37:22,286
好的 这次我要独自一人去


992
00:37:22,286 --> 00:37:23,466
因为我想


993
00:37:23,466 --> 00:37:24,396
检查一下一个人的情况


994
00:37:25,516 --> 00:37:28,216
好了 当我点按 “Book” 时


995
00:37:28,216 --> 00:37:30,326
实际上创建了快捷方式


996
00:37:30,326 --> 00:37:30,986
并捐赠了它


997
00:37:31,406 --> 00:37:32,796
所以现在我们可以去看看它


998
00:37:33,236 --> 00:37:35,756
可以通过


999
00:37:35,896 --> 00:37:39,126
设置 Siri 搜索来找到


1000
00:37:39,516 --> 00:37:42,066
就这样 预订一场


1001
00:37:42,066 --> 00:37:43,396
一个人的冒险


1002
00:37:45,516 --> 00:37:50,986
[ 掌声 ]


1003
00:37:51,486 --> 00:37:54,156
好的 这对英语来说很好 我修好了它


1004
00:37:54,256 --> 00:37:55,236
但我仍然需要将其


1005
00:37:55,236 --> 00:37:57,066
本地化为法语


1006
00:37:57,176 --> 00:37:58,646
最重要的是


1007
00:37:58,756 --> 00:38:00,296
它与第一个演示一样简单


1008
00:38:00,296 --> 00:38:02,606
所以我们可以回到 Xcode


1009
00:38:03,646 --> 00:38:05,756
好的 我要确保我将我的


1010
00:38:05,756 --> 00:38:07,196
字符串词本地化


1011
00:38:07,196 --> 00:38:08,316
因为我还没有这样做


1012
00:38:08,506 --> 00:38:09,476
英语 是的


1013
00:38:10,136 --> 00:38:11,066
检查法语


1014
00:38:11,596 --> 00:38:12,866
否则它不会被导出


1015
00:38:14,046 --> 00:38:15,846
好的 现在我只需


1016
00:38:15,846 --> 00:38:16,726
再次选择我的项目


1017
00:38:17,716 --> 00:38:18,486
去编辑器


1018
00:38:19,266 --> 00:38:20,776
导出为本地化


1019
00:38:21,616 --> 00:38:22,906
我打算称这个


1020
00:38:22,906 --> 00:38:25,046
假期计划为 loc2


1021
00:38:25,046 --> 00:38:26,386
因为它是第二轮本地化


1022
00:38:27,506 --> 00:38:28,896
仔细检查 是的


1023
00:38:28,896 --> 00:38:30,966
我选择的还是法语 点按保存


1024
00:38:31,976 --> 00:38:33,566
现在 Xcode 创建另一个


1025
00:38:33,566 --> 00:38:35,076
Xcode 本地化目录


1026
00:38:35,076 --> 00:38:37,766
我们来看看它


1027
00:38:42,556 --> 00:38:45,176
检查一下本地化的内容


1028
00:38:45,246 --> 00:38:47,776
如果我们看一下 XLIFF


1029
00:38:47,776 --> 00:38:50,126
可以看到红色突出显示的


1030
00:38:50,126 --> 00:38:51,626
是目标定义中的


1031
00:38:51,626 --> 00:38:54,576
所有新字符串


1032
00:38:54,636 --> 00:38:56,066
但我们也有第一次


1033
00:38:56,066 --> 00:38:57,326
导入的所有翻译


1034
00:38:57,516 --> 00:38:59,116
所以你可以有一个


1035
00:38:59,116 --> 00:39:00,566
增量本地化的过程


1036
00:39:00,566 --> 00:39:02,186
在这个过程中


1037
00:39:02,186 --> 00:39:03,546
你开发好了 App 


1038
00:39:03,606 --> 00:39:05,796
获得本地化版本


1039
00:39:05,796 --> 00:39:07,136
然后对版本 2 进行了一些调整


1040
00:39:07,136 --> 00:39:09,386
当你输出另一轮本地化时


1041
00:39:09,386 --> 00:39:10,176
不会丢失任何东西


1042
00:39:10,706 --> 00:39:13,466
这也适用于


1043
00:39:13,466 --> 00:39:15,066
非字符串资源


1044
00:39:15,436 --> 00:39:16,926
这里有我的图像的


1045
00:39:16,926 --> 00:39:18,536
法语版本


1046
00:39:19,896 --> 00:39:21,936
棒极了 所以我可以开发我的 App


1047
00:39:22,226 --> 00:39:24,236
继续本地化 继续工作


1048
00:39:24,296 --> 00:39:26,236
这一切都像第一次一样简单


1049
00:39:26,236 --> 00:39:29,056
它涵盖了我的字符串


1050
00:39:29,056 --> 00:39:30,426
我的非字符串资源


1051
00:39:30,426 --> 00:39:31,876
和我的目标定义


1052
00:39:31,876 --> 00:39:33,366
以便我可以


1053
00:39:33,426 --> 00:39:35,176
建议其它的火星旅行


1054
00:39:36,076 --> 00:39:37,736
好的我们重新交给


1055
00:39:37,736 --> 00:39:38,806
Chris 由他来进行


1056
00:39:38,806 --> 00:39:40,976
最终的总结


1057
00:39:41,516 --> 00:39:46,500
[ 掌声 ]


1058
00:39:50,476 --> 00:39:52,136
>> 再次谢谢你 Vivian


1059
00:39:53,146 --> 00:39:54,066
这可真棒


1060
00:39:54,726 --> 00:39:56,316
我真的很期待这些旅行


1061
00:39:58,076 --> 00:40:00,806
正如你所看到的


1062
00:40:00,806 --> 00:40:02,856
Xcode 本地化目录


1063
00:40:02,856 --> 00:40:04,246
是我们用于本地化的 


1064
00:40:04,246 --> 00:40:05,126
Xcode 的新标准


1065
00:40:05,636 --> 00:40:08,806
这些支持你项目中的


1066
00:40:08,806 --> 00:40:11,686
所有可本地化资源


1067
00:40:11,686 --> 00:40:13,946
而不仅仅是基于


1068
00:40:13,946 --> 00:40:14,966
字符串的资源


1069
00:40:15,376 --> 00:40:17,086
而且更为灵活


1070
00:40:17,316 --> 00:40:20,476
可以为本地化人员


1071
00:40:20,596 --> 00:40:22,186
提供上下文


1072
00:40:22,246 --> 00:40:23,596
无论是从测试中


1073
00:40:23,596 --> 00:40:26,036
放入屏幕快照还是


1074
00:40:26,036 --> 00:40:27,646
放入自述文件或


1075
00:40:27,646 --> 00:40:29,196
如何使用 App 的电影


1076
00:40:29,196 --> 00:40:30,986
都可以为本地化人员提供


1077
00:40:30,986 --> 00:40:33,796
所需的上下文以确保


1078
00:40:33,796 --> 00:40:35,786
第一次翻译就可以达到相应的准确率


1079
00:40:36,926 --> 00:40:39,176
你也看到 Siri 捷径


1080
00:40:39,176 --> 00:40:41,546
很容易通过本地化


1081
00:40:41,616 --> 00:40:42,956
你的目标定义文件


1082
00:40:42,996 --> 00:40:46,126
进行本地化


1083
00:40:46,126 --> 00:40:48,766
这些文件使用字符串文件


1084
00:40:48,766 --> 00:40:51,676
进行基本本地化


1085
00:40:51,676 --> 00:40:52,936
并且你可以在适当的地方


1086
00:40:52,936 --> 00:40:54,476
使用 stringsdict 文件来处理


1087
00:40:54,686 --> 00:40:56,666
各种语言的


1088
00:40:56,666 --> 00:41:01,026
复数规则


1089
00:41:01,026 --> 00:41:02,796
当你创建代码捐赠目标时


1090
00:41:02,906 --> 00:41:05,236
可以使用延迟


1091
00:41:05,286 --> 00:41:06,926
本地化目标字符串


1092
00:41:06,926 --> 00:41:09,116
以确保从捐赠目标


1093
00:41:09,116 --> 00:41:10,986
创建的快捷方式


1094
00:41:10,986 --> 00:41:13,986
在向用户显示时


1095
00:41:13,986 --> 00:41:15,506
进行本地化


1096
00:41:15,506 --> 00:41:17,196
而不是在你 


1097
00:41:17,196 --> 00:41:18,966
捐赠它的时候


1098
00:41:19,496 --> 00:41:21,766
若要了解更多信息


1099
00:41:21,766 --> 00:41:23,866
请访问在 WWDC 网站


1100
00:41:23,936 --> 00:41:24,646
可以看到我们的会议页面


1101
00:41:26,476 --> 00:41:28,166
感谢大家能够参与 WWDC


1102
00:41:28,166 --> 00:41:29,796
希望大家可以


1103
00:41:29,796 --> 00:41:31,966
好好享受此次盛会


1104
00:41:32,516 --> 00:41:40,820
[ 掌声 ]

