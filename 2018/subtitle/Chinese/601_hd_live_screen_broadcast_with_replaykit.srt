1
00:00:17,985 --> 00:00:21,421 line:0
（REPLAYKIT直播功能）


2
00:00:26,693 --> 00:00:32,165 line:-2
早上好 欢迎来到
ReplayKit直播功能演讲


3
00:00:32,900 --> 00:00:35,969 line:-2
我是Alexander
很高兴能在这里


4
00:00:36,036 --> 00:00:39,273 line:-1
为大家讲述ReplayKit概念


5
00:00:39,339 --> 00:00:40,974 line:-1
及今年ReplayKit新增特性


6
00:00:42,543 --> 00:00:44,912 line:-1
内容很多 现在开始吧


7
00:00:47,381 --> 00:00:52,419 line:-2
ReplayKit框架可实时抓取
app的屏幕 影像


8
00:00:52,486 --> 00:00:56,590 line:-1
以及声音内容 也可以录制视频


9
00:00:56,890 --> 00:00:59,893 line:-1
方便用户编辑或分享


10
00:01:01,562 --> 00:01:04,230 line:-1
ReplayKit也支持直播


11
00:01:05,732 --> 00:01:08,669 line:-1
对于生成内容的app 比如游戏


12
00:01:09,536 --> 00:01:13,407 line:-2
ReplayKit可以提供工具
实现录制音频


13
00:01:13,607 --> 00:01:17,110 line:-2
和可视化内容
通过使用第三方直播软件


14
00:01:18,745 --> 00:01:20,414 line:-1
对于播放app


15
00:01:20,480 --> 00:01:23,917 line:-2
ReplayKit可以接收
从其他app


16
00:01:23,984 --> 00:01:27,187 line:-1
或整个iOS系统中抓取的内容


17
00:01:27,788 --> 00:01:32,793 line:-2
然后编码并流传输至服务器
无需更换设备


18
00:01:36,563 --> 00:01:41,001 line:-2
ReplayKit传输的内容
都是高质量且低延迟


19
00:01:41,368 --> 00:01:44,137 line:-1
性能开销低 更好用


20
00:01:44,838 --> 00:01:49,643 line:-2
同时它可以保护用户隐私
只有用户同意后


21
00:01:49,710 --> 00:01:52,679 line:-1
才能录制或开启直播


22
00:01:52,746 --> 00:01:57,351 line:-1
并且显著标明截取内容的时间点


23
00:02:02,222 --> 00:02:04,224 line:-1
今天我的演讲主题是


24
00:02:05,025 --> 00:02:06,994 line:-1
ReplayKit的直播功能


25
00:02:07,561 --> 00:02:11,398 line:-1
简单概述之后 我会讲app内播放


26
00:02:11,598 --> 00:02:15,836 line:-2
和iOS系统播放
之后我会讲到


27
00:02:15,903 --> 00:02:19,206 line:-2
一个新的API
叫做系统播放选择器


28
00:02:20,774 --> 00:02:23,911 line:-1
这个API可以直接


29
00:02:24,111 --> 00:02:26,079 line:-1
从直播app中开启播放


30
00:02:28,615 --> 00:02:30,117 line:-1
随后我们将讨论


31
00:02:30,184 --> 00:02:33,554 line:-1
如何实现播放扩展


32
00:02:33,720 --> 00:02:36,890 line:-2
以及这个新的API
能发挥哪些作用


33
00:02:39,293 --> 00:02:40,394 line:-1
我们还会讲述


34
00:02:40,460 --> 00:02:45,065 line:-1
如何保护app的内容不被截取


35
00:02:48,602 --> 00:02:51,138 line:-1
首先简述下直播的概念


36
00:02:54,208 --> 00:02:58,445 line:-2
我说过ReplayKit
可以将app的屏幕


37
00:02:58,512 --> 00:03:02,115 line:-2
视频和音频内容
传输到第三方播放平台


38
00:03:03,150 --> 00:03:08,922 line:-2
可直接从iOS或tvOS设备操作
iOS上还能够使用


39
00:03:10,023 --> 00:03:14,361 line:-2
麦克风或相机
提供音频或视频评述


40
00:03:15,128 --> 00:03:17,731 line:-1
所有内容都绝对安全


41
00:03:17,831 --> 00:03:20,200 line:-1
只能在你所使用的服务器上获取


42
00:03:23,570 --> 00:03:26,406 line:-2
无论是录制游戏视频到
Mobcrush或YouTube


43
00:03:26,907 --> 00:03:29,076 line:-1
在WebEx视频通话中分享屏幕


44
00:03:29,843 --> 00:03:32,279 line:-2
用TeamViewer
获取客户支持服务


45
00:03:32,813 --> 00:03:35,682 line:-2
还是在Facebook上
上传绘图app


46
00:03:36,450 --> 00:03:38,919 line:-1
都需要使用ReplayKit技术


47
00:03:40,153 --> 00:03:42,055 line:-2
（REPLAYKIT对比
REPLAYKIT 2）


48
00:03:42,122 --> 00:03:44,725 line:-1
以前ReplayKit的直播


49
00:03:45,125 --> 00:03:47,794 line:-1
是在app中操作 用户通过app


50
00:03:48,061 --> 00:03:49,563 line:-1
开始或停止直播


51
00:03:50,831 --> 00:03:54,301 line:-2
app直接对话
ReplayKit API


52
00:03:54,768 --> 00:03:58,705 line:-2
ReplayKit本身包含
直播扩展


53
00:03:59,139 --> 00:04:03,043 line:-1
可提供来自app的影像或音频内容


54
00:04:04,077 --> 00:04:07,514 line:-2
扩展会将媒体编码
并流传输到服务器


55
00:04:08,015 --> 00:04:10,751 line:-1
这就是app内播放


56
00:04:13,921 --> 00:04:17,423 line:-1
ReplayKit 2的新功能是


57
00:04:17,925 --> 00:04:21,595 line:-1
将系统作为一个整体实现直播


58
00:04:22,763 --> 00:04:26,266 line:-1
工作原理是用户启动直播


59
00:04:26,767 --> 00:04:28,202 line:-1
并在控制中心里


60
00:04:28,735 --> 00:04:31,205 line:-1
开始或停止播放


61
00:04:33,273 --> 00:04:37,544 line:-2
这会开启系统级
ReplayKit 2直播程序


62
00:04:38,345 --> 00:04:40,247 line:-1
音频视频样本同样是


63
00:04:40,314 --> 00:04:42,583 line:-1
通过扩展上传至服务器


64
00:04:43,383 --> 00:04:46,119 line:-1
这就是两者在概念上的区分


65
00:04:48,255 --> 00:04:52,025 line:-1
那么我们先从app内播放讲起


66
00:04:53,360 --> 00:04:55,696 line:-1
app内播放中 你的app


67
00:04:55,762 --> 00:04:57,931 line:-1
或游戏会提供


68
00:04:58,699 --> 00:05:00,801 line:-1
玩游戏时直接录制的内容


69
00:05:03,604 --> 00:05:08,609 line:-2
游戏通过调用ReplayKit
API开始或停止直播


70
00:05:10,043 --> 00:05:13,580 line:-1
同样它可以作为播放视图控制器


71
00:05:13,647 --> 00:05:16,550 line:-1
让用户自主选择平台


72
00:05:18,318 --> 00:05:19,419 line:-1
与此同时


73
00:05:21,021 --> 00:05:25,025 line:-1
播放app提供的播放扩展


74
00:05:25,859 --> 00:05:29,196 line:-1
让ReplayKit代表游戏完成


75
00:05:29,763 --> 00:05:31,765 line:-1
用户注册


76
00:05:31,999 --> 00:05:36,570 line:-1
上传直播内容至服务器


77
00:05:37,504 --> 00:05:40,574 line:-2
这是我们原先使用
ReplayKit直播的方法


78
00:05:41,508 --> 00:05:43,377 line:-1
这个我们之前讲过


79
00:05:43,443 --> 00:05:46,513 line:-1
如果你的app需要精细地控制


80
00:05:46,580 --> 00:05:50,050 line:-2
直播的开始和结束
欲了解更多信息


81
00:05:50,117 --> 00:05:53,820 line:-2
可以观看
“ReplayKit直播”演讲


82
00:05:55,789 --> 00:05:56,957 line:-1
是几年前的视频


83
00:05:59,059 --> 00:06:00,994 line:-1
但是今天我们要讲的


84
00:06:01,061 --> 00:06:03,697 line:-1
是iOS系统播放


85
00:06:04,431 --> 00:06:07,835 line:-1
如果要播放所有屏幕上的活动


86
00:06:08,302 --> 00:06:09,736 line:-1
和所有音频


87
00:06:10,470 --> 00:06:12,873 line:-1
我们不再从app中开启播放


88
00:06:12,940 --> 00:06:17,010 line:-1
通过暂停app开始或停止播放


89
00:06:19,046 --> 00:06:22,950 line:-2
例如 本场演讲是在控制中心内
开始或停止


90
00:06:23,016 --> 00:06:25,886 line:-1
这是系统级活动且持续运行


91
00:06:26,320 --> 00:06:28,555 line:-1
不会因为用户从主屏幕切换到app


92
00:06:29,156 --> 00:06:31,058 line:-1
或在不同app之间切换而终止


93
00:06:32,359 --> 00:06:35,495 line:-2
所有这些都在iOS 11
及更高版本中实现


94
00:06:35,896 --> 00:06:38,832 line:-2
这就是我们去年
引入的ReplayKit 2


95
00:06:41,168 --> 00:06:43,136 line:-1
这是个游戏 假设你正在玩


96
00:06:43,804 --> 00:06:47,574 line:-1
你想开始录制并播放


97
00:06:49,343 --> 00:06:51,111 line:-1
那么下拉控制中心


98
00:06:51,178 --> 00:06:54,214 line:-1
点击这个录屏按键


99
00:06:55,282 --> 00:07:00,220 line:-2
就看到选择器
可以选择录制游戏视频


100
00:07:00,521 --> 00:07:04,791 line:-1
也可以选择一个播放平台


101
00:07:05,025 --> 00:07:06,693 line:-1
将内容传输至该平台


102
00:07:08,729 --> 00:07:10,964 line:-1
完成后 回到游戏


103
00:07:12,099 --> 00:07:13,967 line:-1
现在游戏跟平台就连在一起了


104
00:07:14,568 --> 00:07:18,672 line:-1
播放扩展接收录屏文件样本


105
00:07:18,739 --> 00:07:21,108 line:-1
将视频流上传至后台


106
00:07:21,608 --> 00:07:24,478 line:-1
通过网页浏览器中的播放器


107
00:07:24,545 --> 00:07:27,681 line:-1
或其他流媒体渠道


108
00:07:29,249 --> 00:07:32,519 line:-2
就可以随时随地
在自己的设备上观看直播


109
00:07:36,290 --> 00:07:39,893 line:-1
这就是如何开启iOS系统播放


110
00:07:40,294 --> 00:07:43,797 line:-1
那么这种播放的有趣之处


111
00:07:43,864 --> 00:07:46,667 line:-1
就在于我说过的不间断播放


112
00:07:47,034 --> 00:07:49,469 line:-1
不受app切换干扰


113
00:07:50,103 --> 00:07:53,073 line:-1
我这是在主屏幕上进行播放


114
00:07:53,140 --> 00:07:55,976 line:-1
那么我主屏幕上的活动都被播放出来


115
00:07:57,611 --> 00:08:02,883 line:-2
如果这时打开另一个app
这个app也进入直播


116
00:08:03,617 --> 00:08:05,719 line:-1
这才是核心所在


117
00:08:05,786 --> 00:08:08,555 line:-1
这种播放本身就是系统级活动


118
00:08:08,822 --> 00:08:11,491 line:-1
你可以回到控制中心停止播放


119
00:08:11,725 --> 00:08:14,895 line:-1
或者点击上方的状态栏


120
00:08:14,962 --> 00:08:17,397 line:-1
打开控制中心停止播放


121
00:08:19,466 --> 00:08:23,170 line:-1
另外如果我切换横屏


122
00:08:23,570 --> 00:08:25,939 line:-1
它也可以支持


123
00:08:27,941 --> 00:08:31,378 line:-1
横屏竖屏 可以随意切换


124
00:08:31,545 --> 00:08:33,113 line:-1
就像app间切换一样


125
00:08:38,217 --> 00:08:42,089 line:-1
iOS系统播放是我们去年发布的


126
00:08:42,556 --> 00:08:46,493 line:-1
之后收到了许多很好的反馈和改进


127
00:08:47,194 --> 00:08:50,898 line:-2
现在我们的直播API
用于多种app


128
00:08:50,964 --> 00:08:55,636 line:-1
比如通讯、媒体和房屋


129
00:08:56,103 --> 00:08:58,872 line:-1
资讯台、教育以及社交


130
00:09:01,441 --> 00:09:03,644 line:-1
同时我们也收到许多反馈


131
00:09:04,044 --> 00:09:09,283 line:-1
比如在控制中心找不到播放界面


132
00:09:10,651 --> 00:09:14,855 line:-1
为了方便用户直接在app中编辑


133
00:09:15,956 --> 00:09:18,659 line:-1
今年我们的目标是帮助你


134
00:09:18,725 --> 00:09:21,395 line:-1
将iOS系统播放融入app


135
00:09:22,029 --> 00:09:25,232 line:-1
因此就要隆重介绍系统播放选择器


136
00:09:28,836 --> 00:09:30,571 line:-1
回到刚才的图


137
00:09:33,006 --> 00:09:34,274 line:-1
我们要添加的


138
00:09:35,209 --> 00:09:39,580 line:-1
是将这两种线性流程结合在一起


139
00:09:42,482 --> 00:09:46,687 line:-1
这种结合让app也能够


140
00:09:46,920 --> 00:09:49,590 line:-1
启动iOS系统播放


141
00:09:50,657 --> 00:09:54,394 line:-1
因此app可以跟控制中心一样


142
00:09:55,562 --> 00:09:59,066 line:-1
开始并持续播放


143
00:09:59,132 --> 00:10:01,001 line:-1
不会因切换app


144
00:10:02,002 --> 00:10:04,338 line:-1
或退回主屏幕而停止


145
00:10:05,205 --> 00:10:08,108 line:-1
从app中开始的直播


146
00:10:08,775 --> 00:10:13,947 line:-1
可以在控制中心停止 反之亦然


147
00:10:14,014 --> 00:10:17,050 line:-1
从控制中心的直播 回到app后


148
00:10:17,317 --> 00:10:18,685 line:-1
可以一键停止


149
00:10:22,322 --> 00:10:26,460 line:-1
因此系统播放选择器使得用户能够


150
00:10:27,127 --> 00:10:31,198 line:-1
直接在app中启动iOS系统播放


151
00:10:31,565 --> 00:10:35,235 line:-1
在我们提供的界面上一键完成


152
00:10:35,736 --> 00:10:39,006 line:-1
这是将在iOS 12实现的新功能


153
00:10:41,542 --> 00:10:43,243 line:0
下面来举个例子


154
00:10:44,511 --> 00:10:49,650 line:0
这是样本app Fox 2
app上方添加了这个按键


155
00:10:51,852 --> 00:10:54,221 line:-1
当我点击这个播放选择器按键


156
00:10:54,788 --> 00:10:57,524 line:-1
你看到的界面与之前


157
00:10:57,591 --> 00:11:01,128 line:-1
在控制中心看到的一样


158
00:11:02,629 --> 00:11:06,733 line:-1
然后选择播放平台开始直播


159
00:11:08,502 --> 00:11:09,770 line:-1
现在回到app


160
00:11:09,837 --> 00:11:12,105 line:-1
直播就已经在那个平台开始了


161
00:11:13,073 --> 00:11:17,578 line:-1
全世界人民都可以观看我的直播


162
00:11:20,681 --> 00:11:22,316 line:-1
怎么做到的？


163
00:11:23,717 --> 00:11:28,622 line:-2
这是个新类名
RPSystemBroadcastPickerView


164
00:11:29,056 --> 00:11:34,428 line:-2
它只是用户界面的子类
可以添加到app里


165
00:11:34,494 --> 00:11:39,466 line:-2
在界面构建器设为一个类名
或自定义类界面


166
00:11:40,868 --> 00:11:42,569 line:-1
或通过编程实现


167
00:11:43,103 --> 00:11:48,542 line:-2
你只需要创建一个实例
RPSystemBroadcastPickerView


168
00:11:48,809 --> 00:11:50,777 line:-1
添加到界面层级


169
00:11:53,514 --> 00:11:58,051 line:-1
这是播放选择器最简单的使用方法


170
00:11:59,720 --> 00:12:04,858 line:-1
我知道在座各位都是直播平台开发者


171
00:12:05,893 --> 00:12:07,561 line:-1
最后通过这个新的API


172
00:12:08,095 --> 00:12:12,332 line:-1
用户可以直接从app中开始直播


173
00:12:12,599 --> 00:12:15,369 line:-1
再也不需要提供全套的教程


174
00:12:15,435 --> 00:12:17,771 line:-1
比如如何启用录屏、如何设置


175
00:12:18,005 --> 00:12:20,807 line:-2
如何找到自己的
或控制中心列出的平台


176
00:12:21,842 --> 00:12:26,013 line:-1
但是你可能会希望选择器只显示


177
00:12:26,346 --> 00:12:29,449 line:-1
你平台的播放扩展


178
00:12:31,084 --> 00:12:36,690 line:-2
ReplayKit提供的API
就可如你所愿


179
00:12:38,091 --> 00:12:41,395 line:-1
它只是界面的一个属性


180
00:12:41,762 --> 00:12:45,999 line:-1
你要做的只是通过程序包标识


181
00:12:46,066 --> 00:12:48,435 line:-1
标记播放扩展


182
00:12:48,902 --> 00:12:53,273 line:-2
然后分配给
preferredExtension界面属性


183
00:12:56,276 --> 00:12:59,213 line:-1
这是代码样本


184
00:13:00,747 --> 00:13:03,283 line:-1
属性设置


185
00:13:03,350 --> 00:13:04,818 line:-1
应当在界面修正之后


186
00:13:04,885 --> 00:13:07,821 line:-1
与代码样本唯一的区别是


187
00:13:07,888 --> 00:13:10,591 line:-1
你需要替换字符串


188
00:13:10,657 --> 00:13:13,260 line:-2
com.your-app.
broadcast.extension


189
00:13:13,627 --> 00:13:15,362 line:-1
这是扩展的捆绑ID


190
00:13:17,965 --> 00:13:21,535 line:-1
这张图表中 我想要强调


191
00:13:23,237 --> 00:13:25,839 line:-1
在app中创建的选择器界面


192
00:13:26,440 --> 00:13:29,576 line:-2
这个界面只是快捷键
可以跳转到


193
00:13:29,776 --> 00:13:31,778 line:-1
选择器的系统界面


194
00:13:32,145 --> 00:13:35,415 line:-1
控制中心也可打开


195
00:13:36,750 --> 00:13:39,953 line:-1
选择器本身属于系统


196
00:13:40,020 --> 00:13:45,192 line:-1
app不占有直播的任何部分


197
00:13:45,259 --> 00:13:50,631 line:-2
因此也不可通过编程
开始或停止系统播放


198
00:13:53,333 --> 00:13:54,635 line:-2
（开发REPLAYKIT 2
播放扩展）


199
00:13:54,701 --> 00:13:58,839 line:-2
那么你要做的是
将iOS系统播放加入app


200
00:13:59,406 --> 00:14:02,142 line:-1
新的API十分简单


201
00:14:02,509 --> 00:14:06,113 line:-2
在此次演讲结束之前
你就能完成app


202
00:14:08,081 --> 00:14:10,450 line:-1
接下来 我们将过程演示一遍


203
00:14:10,884 --> 00:14:12,686 line:-1
给播放扩展开发者看


204
00:14:13,387 --> 00:14:17,191 line:-1
然后讨论如何使用播放扩展


205
00:14:17,491 --> 00:14:22,229 line:-2
以及当app同时提供扩展
和选择器的时候


206
00:14:22,496 --> 00:14:23,664 line:-1
有哪些用处


207
00:14:25,899 --> 00:14:27,467 line:-1
再回到刚才那张图


208
00:14:27,534 --> 00:14:30,604 line:-1
我们现在来看播放扩展页面


209
00:14:30,871 --> 00:14:34,308 line:-1
我想向你们展示系统播放的路径


210
00:14:36,777 --> 00:14:39,680 line:-1
（播放APP和扩展）


211
00:14:39,746 --> 00:14:42,950 line:-1
首先 先讲播放app


212
00:14:43,483 --> 00:14:47,487 line:-1
然后是播放扩展以及在直播中


213
00:14:48,322 --> 00:14:50,791 line:-1
它们各自的工作


214
00:14:53,227 --> 00:14:55,429 line:-1
先安装播放扩展


215
00:14:55,729 --> 00:14:58,165 line:-1
与包含扩展的app一起安装


216
00:14:58,665 --> 00:14:59,933 line:-2
比如你安装了
Facebook


217
00:15:00,133 --> 00:15:02,903 line:-2
你也要安装
Facebook播放扩展


218
00:15:04,204 --> 00:15:09,376 line:-1
播放扩展和app


219
00:15:09,877 --> 00:15:13,013 line:-2
是独立的二进制文件
有各自的运行程序


220
00:15:13,747 --> 00:15:18,886 line:-1
这些程序由用户直接调用


221
00:15:19,119 --> 00:15:20,888 line:-1
彼此独立


222
00:15:21,955 --> 00:15:25,759 line:-2
通常你们需要使用app
允许用户登录


223
00:15:25,826 --> 00:15:27,528 line:-1
或注册你们的服务


224
00:15:28,595 --> 00:15:33,734 line:-1
现在app安装了播放选择器API


225
00:15:34,134 --> 00:15:38,005 line:-1
你就可以让用户先输入一些信息


226
00:15:38,071 --> 00:15:41,108 line:-1
再将直播发到Facebook


227
00:15:44,745 --> 00:15:46,079 line:-1
播放扩展


228
00:15:47,247 --> 00:15:50,551 line:-2
以上就是所有实际的工作
前提是直播所需的


229
00:15:50,717 --> 00:15:53,353 line:-1
所有程序都已具备


230
00:15:55,656 --> 00:16:00,527 line:-2
扩展会接收
ReplayKit编辑过的样本


231
00:16:01,028 --> 00:16:04,898 line:-1
app原生音频


232
00:16:05,132 --> 00:16:08,602 line:-1
录屏视频或麦克风录音


233
00:16:08,669 --> 00:16:12,005 line:-1
然后编码并上传至平台


234
00:16:12,072 --> 00:16:14,074 line:-1
可根据喜好使用任何技术


235
00:16:14,141 --> 00:16:15,742 line:-1
（播放上传扩展）


236
00:16:15,809 --> 00:16:17,244 line:-1
（播放扩展模板）


237
00:16:17,311 --> 00:16:20,814 line:-1
为了方便你开发新的播放平台


238
00:16:21,148 --> 00:16:23,483 line:-1
我们提供Xcode模板


239
00:16:24,785 --> 00:16:28,388 line:-1
只要将扩展添加至使用该模板的项目


240
00:16:28,455 --> 00:16:30,090 line:-1
就一切就绪了


241
00:16:30,991 --> 00:16:33,193 line:-1
现在看看如何编码吧


242
00:16:35,562 --> 00:16:39,633 line:-2
在使用Xcode模板
在项目中创建扩展时


243
00:16:39,933 --> 00:16:41,869 line:-2
你会看到一个
SampleHandler类名


244
00:16:43,737 --> 00:16:46,673 line:-1
在这里添加代码用来控制


245
00:16:46,840 --> 00:16:48,809 line:-1
播放中的各种活动


246
00:16:49,977 --> 00:16:51,378 line:-1
同样你需要安装


247
00:16:51,445 --> 00:16:54,448 line:-1
这个功能以处理导入的音视频样本


248
00:16:55,682 --> 00:16:58,085 line:-1
（播放周期）


249
00:16:58,151 --> 00:17:01,488 line:-1
这就是播放周期图示


250
00:17:03,357 --> 00:17:07,694 line:-1
各个状态为设置、启动、开始


251
00:17:08,795 --> 00:17:10,163 line:-1
处理和停止


252
00:17:11,732 --> 00:17:12,933 line:-1
（登录和播放设置）


253
00:17:13,000 --> 00:17:16,737 line:-1
左边的绿色方块代表的状态是


254
00:17:17,503 --> 00:17:20,073 line:-1
你的播放扩展还未运行


255
00:17:20,674 --> 00:17:23,544 line:-1
此时你的app可以


256
00:17:23,609 --> 00:17:26,180 line:-1
获取用户的登录信息


257
00:17:26,346 --> 00:17:31,084 line:-2
然后使用共享的密钥串
将登录信息传输至扩展


258
00:17:31,818 --> 00:17:35,122 line:-1
或者你还是可以让用户输入


259
00:17:35,189 --> 00:17:36,857 line:-1
Facebook上的信息


260
00:17:38,792 --> 00:17:41,828 line:-1
然后传至扩展 无论以何种方法


261
00:17:43,864 --> 00:17:45,933 line:-1
一旦用户开启直播


262
00:17:46,600 --> 00:17:49,269 line:-1
无论在控制中心或app里面


263
00:17:49,336 --> 00:17:51,071 line:-1
只要安装了播放选择器


264
00:17:52,472 --> 00:17:55,676 line:-1
ReplayKit会启动扩展程序


265
00:17:55,976 --> 00:17:58,745 line:-2
创建SampleHandler
类名的实例


266
00:17:59,813 --> 00:18:01,982 line:-1
这时候


267
00:18:02,282 --> 00:18:05,752 line:-2
你可以覆盖SampleHandler
默认的初始设定


268
00:18:06,587 --> 00:18:08,889 line:-1
编写适用于直播的程式


269
00:18:08,956 --> 00:18:11,558 line:-1
不要直接关联媒体样本的处理


270
00:18:12,659 --> 00:18:16,530 line:-2
举例来说
你可以获取登录信息


271
00:18:16,697 --> 00:18:20,934 line:-2
通过这个密钥串
并在平台上创建直播环节


272
00:18:22,069 --> 00:18:23,804 line:-1
（直播开始）


273
00:18:23,871 --> 00:18:25,272 line:-1
一旦程序启动


274
00:18:25,339 --> 00:18:28,275 line:-2
且SampleHandler
实例已经存在


275
00:18:30,744 --> 00:18:34,381 line:-1
扩展得知ReplayKit将提供


276
00:18:34,448 --> 00:18:39,653 line:-2
音视频样本
通过broadcastStarted函数


277
00:18:40,721 --> 00:18:45,926 line:-1
在此函数中 可以创建媒体引擎


278
00:18:45,993 --> 00:18:50,130 line:-1
或其他活动以接收样本


279
00:18:50,197 --> 00:18:53,300 line:-1
并实时编码 然后上传至服务器


280
00:18:54,535 --> 00:18:56,303 line:-1
（媒体样本处理）


281
00:18:56,370 --> 00:18:58,205 line:-1
直播正在运行的时候


282
00:19:00,174 --> 00:19:03,477 line:-2
ReplayKit会提供
原始音视频样本


283
00:19:04,044 --> 00:19:08,115 line:-1
扩展要做的是编码并上传至直播平台


284
00:19:08,348 --> 00:19:10,717 line:-1
根据偏好 可使用任何技术


285
00:19:12,853 --> 00:19:15,856 line:-2
ReplayKit为扩展提供
三种样本


286
00:19:15,923 --> 00:19:18,025 line:-1
（直播上传扩展）


287
00:19:18,258 --> 00:19:20,561 line:-1
录屏视频样本


288
00:19:21,228 --> 00:19:23,363 line:-1
app音频样本


289
00:19:24,064 --> 00:19:27,768 line:-1
和麦克风音频样本


290
00:19:28,268 --> 00:19:32,539 line:-2
扩展将所有这些编码
并上传至直播平台


291
00:19:35,542 --> 00:19:37,878 line:-1
所有扩展处理的内容


292
00:19:37,945 --> 00:19:39,780 line:-1
是由一个函数控制


293
00:19:40,547 --> 00:19:42,316 line:-1
叫做processSampleBuffer


294
00:19:42,950 --> 00:19:47,154 line:-2
该函数接收单个
CMSampleBuffer


295
00:19:47,487 --> 00:19:48,755 line:-1
以及该缓冲类型


296
00:19:49,890 --> 00:19:53,093 line:-2
你要做的就是对媒体样本
进行编码并上传


297
00:19:53,560 --> 00:19:55,529 line:-1
这段代码样本展示了


298
00:19:55,596 --> 00:19:58,565 line:-2
如何使用Video Toolbox
对视频编码


299
00:19:59,733 --> 00:20:02,736 line:-2
我们建议使用
Video Toolbox


300
00:20:02,970 --> 00:20:06,440 line:-1
因为它提供的硬件可以加速编码


301
00:20:06,507 --> 00:20:10,511 line:-1
这对我们来说十分重要


302
00:20:10,777 --> 00:20:13,881 line:-1
因为扩展的内存限制


303
00:20:13,947 --> 00:20:15,582 line:-1
低于app的内存


304
00:20:16,984 --> 00:20:19,086 line:-1
（处理app信息）


305
00:20:19,152 --> 00:20:24,725 line:-2
在你对视频编码
并流传输至直播平台时


306
00:20:25,626 --> 00:20:29,763 line:-1
全世界的观众都可以观看你的直播


307
00:20:31,498 --> 00:20:33,700 line:-1
但前提是他们要能够找到你的直播


308
00:20:34,968 --> 00:20:39,072 line:-2
假设有人喜欢玩
以及看别人玩愤怒的小鸟


309
00:20:39,606 --> 00:20:42,309 line:-2
那么你的网页或app中
就要单独设置区域


310
00:20:42,743 --> 00:20:46,079 line:-2
让他们能找到
有关这个游戏的所有直播


311
00:20:47,915 --> 00:20:50,617 line:-1
为了实现这一目的


312
00:20:50,918 --> 00:20:52,753 line:-1
你需要在视频流中添加


313
00:20:52,819 --> 00:20:56,323 line:-1
有关这个游戏直播的信息


314
00:20:58,158 --> 00:21:01,562 line:-2
为此ReplayKit提供一个
API函数


315
00:21:01,795 --> 00:21:04,565 line:-2
叫做broadcastAnnotated
WithapplicationInfo


316
00:21:04,631 --> 00:21:07,367 line:-1
一旦玩家开始游戏


317
00:21:08,602 --> 00:21:12,840 line:-2
愤怒的小鸟发送样本
ReplayKit通知扩展


318
00:21:13,473 --> 00:21:16,009 line:-1
游戏开始并提供词库


319
00:21:16,076 --> 00:21:18,245 line:-1
详细说明启动的app信息


320
00:21:20,981 --> 00:21:25,752 line:-2
比如 你可以使用
ReplayKit定义的密钥


321
00:21:25,819 --> 00:21:29,623 line:-2
RPApplicationInfo
BundleIdentifierKey


322
00:21:29,690 --> 00:21:31,892 line:-1
获取游戏的捆绑包ID


323
00:21:31,959 --> 00:21:34,461 line:-1
作为元数据传输给流


324
00:21:35,896 --> 00:21:38,832 line:-1
（处理播放完成）


325
00:21:40,300 --> 00:21:43,136 line:-1
用户停止直播时 无论以何种方式


326
00:21:44,271 --> 00:21:47,541 line:-2
ReplayKit使用的函数为
broadcastFinished


327
00:21:47,808 --> 00:21:50,677 line:-1
来告诉扩展直播已经结束


328
00:21:50,744 --> 00:21:54,448 line:-2
不会再有新的样本
传输至SampleHandler


329
00:21:55,949 --> 00:21:58,185 line:-1
这个函数中 你需要


330
00:21:58,252 --> 00:22:00,888 line:-1
结束上传缓存视频


331
00:22:00,954 --> 00:22:05,893 line:-1
释放媒体引擎或其他需要释放的内容


332
00:22:07,160 --> 00:22:09,129 line:-1
（处理登录）


333
00:22:10,464 --> 00:22:15,068 line:-1
这个就是直播的一般周期


334
00:22:15,669 --> 00:22:18,572 line:-1
我这里还要再补充一点


335
00:22:20,407 --> 00:22:21,308 line:-1
如上讨论


336
00:22:23,410 --> 00:22:25,579 line:-1
任何设置直播所需的活动


337
00:22:26,213 --> 00:22:28,382 line:-1
都在app中进行


338
00:22:29,316 --> 00:22:32,653 line:-1
你可以获取用户登录app的信息


339
00:22:32,719 --> 00:22:36,657 line:-1
或app中直播的名称


340
00:22:38,125 --> 00:22:41,929 line:-2
我们也为此标记一个状态
就是左边绿色的方块


341
00:22:42,996 --> 00:22:47,534 line:-1
但是有些情况下 直播开始了


342
00:22:48,101 --> 00:22:51,071 line:-1
扩展却缺少内容 无法进行播放


343
00:22:51,471 --> 00:22:54,474 line:-1
比如 登录程序失败


344
00:22:55,375 --> 00:23:00,047 line:-2
或某些东西缺失
我现在告诉大家如何处理


345
00:23:02,282 --> 00:23:06,753 line:-2
ReplayKit提供的API
让扩展可以通知用户


346
00:23:07,654 --> 00:23:09,223 line:-1
直播无法开启


347
00:23:09,489 --> 00:23:12,759 line:-1
并提供某种解决方案


348
00:23:14,828 --> 00:23:19,600 line:-1
工作原理是扩展调用API函数


349
00:23:19,666 --> 00:23:25,305 line:-2
ReplayKit终止程序
并向用户报错


350
00:23:27,107 --> 00:23:30,878 line:-1
扩展提供运行失败的原因


351
00:23:31,278 --> 00:23:34,615 line:-2
这个例子中
报错信息来自Mobcrush


352
00:23:34,681 --> 00:23:37,050 line:-1
原因是用户未登录


353
00:23:39,686 --> 00:23:43,257 line:-1
接下来用户点击底部回到app


354
00:23:44,057 --> 00:23:46,693 line:-1
ReplayKit启动app


355
00:23:46,760 --> 00:23:50,163 line:-1
你要做的是以某种方式处理这个情况


356
00:23:50,230 --> 00:23:52,666 line:-2
比如显示用户界面
让用户登录或注册


357
00:23:53,000 --> 00:23:55,202 line:-1
之后直播就可以正常运行


358
00:23:57,538 --> 00:24:01,175 line:-2
我们之前看过这个代码片段
broadcastStarted


359
00:24:01,508 --> 00:24:04,378 line:-1
这里我要展示的是你如何处理


360
00:24:04,444 --> 00:24:05,712 line:-1
当用户未登录时


361
00:24:06,313 --> 00:24:09,750 line:-2
这里有个函数
finishBroadcastWithError


362
00:24:10,884 --> 00:24:15,389 line:-1
你要做的是提供用户信息词库


363
00:24:15,455 --> 00:24:20,294 line:-2
说明失败原因 然后
ReplayKit将用这个字符串


364
00:24:20,727 --> 00:24:23,163 line:-1
并在程序终止后 显示该字符串


365
00:24:26,533 --> 00:24:29,603 line:-1
（开发直播扩展）


366
00:24:29,670 --> 00:24:30,838 line:-1
好了


367
00:24:32,873 --> 00:24:35,375 line:-1
现在看看如何开发直播扩展


368
00:24:36,610 --> 00:24:39,713 line:-1
如你所见 过程简单直白


369
00:24:41,548 --> 00:24:43,750 line:-1
app控制直播设置


370
00:24:44,618 --> 00:24:46,987 line:-1
然后将信息递给扩展


371
00:24:50,691 --> 00:24:52,759 line:-1
直播开始后


372
00:24:52,826 --> 00:24:56,063 line:-1
收取并编码媒体样本


373
00:24:57,231 --> 00:25:00,133 line:-1
同时获取屏幕上的app信息


374
00:25:00,200 --> 00:25:03,136 line:-1
观众就可以找到你的直播了


375
00:25:05,305 --> 00:25:08,542 line:-1
今天我想讲最后一点


376
00:25:10,544 --> 00:25:13,480 line:-1
就是保护app内容


377
00:25:15,115 --> 00:25:19,353 line:-2
你的app可能会显示一些
你并不想被用户


378
00:25:20,220 --> 00:25:23,023 line:-1
录屏或直播的内容


379
00:25:24,258 --> 00:25:28,295 line:-1
这同时适用于音频和可视化内容


380
00:25:30,030 --> 00:25:34,301 line:-1
有个API能告诉你内容是否被抓取


381
00:25:34,735 --> 00:25:37,704 line:-1
这个API由UIKit框架提供


382
00:25:38,672 --> 00:25:42,609 line:-2
我讲的就是UIScreen的属性
称为Captured


383
00:25:43,944 --> 00:25:46,246 line:-1
你可以通过注册来接收通知


384
00:25:46,313 --> 00:25:49,249 line:-1
在该属性值被改变的时候


385
00:25:49,683 --> 00:25:54,021 line:-1
停止音频回放或隐藏视觉内容


386
00:25:54,521 --> 00:25:55,689 line:-1
在录制开始的时候


387
00:25:57,090 --> 00:26:00,260 line:-1
还有个特殊情况需要特别注意


388
00:26:00,327 --> 00:26:02,529 line:-1
就是隔空播放投屏


389
00:26:03,664 --> 00:26:06,400 line:-1
我来展示你们可以如何处理


390
00:26:06,466 --> 00:26:09,503 line:-1
通过这个代码样本通知处理程序


391
00:26:10,237 --> 00:26:13,473 line:-1
基本来说 在投屏的情况下


392
00:26:13,707 --> 00:26:15,576 line:-1
屏幕数量一般多于一个


393
00:26:15,843 --> 00:26:20,080 line:-2
Screens这个数组
包含的值大于1


394
00:26:20,147 --> 00:26:23,951 line:-2
那么即使isCaptured
返回值为yes


395
00:26:24,117 --> 00:26:25,986 line:-1
在投屏的时候


396
00:26:26,720 --> 00:26:30,357 line:-1
这一步检查也可以保证回放继续


397
00:26:34,228 --> 00:26:38,298 line:-1
以上就是屏幕直播及其运行原理


398
00:26:38,498 --> 00:26:39,499 line:-1
总结来说


399
00:26:40,667 --> 00:26:42,736 line:-1
ReplayKit提供高级API


400
00:26:42,803 --> 00:26:45,572 line:-1
让你可以直播一个app的内容


401
00:26:46,173 --> 00:26:48,709 line:-1
或屏幕上的所有活动内容


402
00:26:50,110 --> 00:26:53,413 line:-2
iOS 12中
我们提供一个API


403
00:26:53,914 --> 00:26:58,252 line:-2
或一种启动系统直播的方法
可直接从app中操作


404
00:27:00,020 --> 00:27:03,891 line:-1
实际上需要你去编码的是直播扩展


405
00:27:04,157 --> 00:27:06,960 line:-1
它承担了视频编码的全部实际工作


406
00:27:09,029 --> 00:27:13,133 line:-2
同样我们还讨论了
如何保护app的内容


407
00:27:17,604 --> 00:27:20,541 line:0
这个演讲的链接可以提供更多信息


408
00:27:21,108 --> 00:27:25,078 line:0
今天晚些时候还有个
ReplayKit实验室


409
00:27:25,145 --> 00:27:27,047 line:0
下午3点在技术实验室5


410
00:27:27,314 --> 00:27:30,284 line:0
如果有任何问题和意见
请来找我们


411
00:27:30,350 --> 00:27:31,585 line:0
我们希望听到你的反馈


412
00:27:33,854 --> 00:27:36,857 line:-1
谢谢大家今天来到这里


413
00:27:36,924 --> 00:27:40,060 line:-1
我们很开心能告诉你这个新方法


414
00:27:40,627 --> 00:27:42,462 line:-1
在iOS中实现直播


415
00:27:42,529 --> 00:27:46,033 line:-2
也很期待看到
使用这个功能的测试app


416
00:27:46,600 --> 00:27:47,801 line:-1
所以大家尽管尝试


417
00:27:48,569 --> 00:27:52,105 line:-2
使用Xcode模板
创建第一个直播扩展


418
00:27:52,372 --> 00:27:57,744 line:-2
或打开现有的app
添加播放选择器


419
00:27:58,245 --> 00:28:02,249 line:-2
让直播从iOS到你的平台
都在今天实现


420
00:28:02,749 --> 00:28:03,584 line:-1
谢谢

