1
00:00:17,818 --> 00:00:21,421 line:0
嗨 我是Eric Dudiak
Xcode团队的工程师


2
00:00:21,722 --> 00:00:25,092 line:0
今天我们将讨论Xcode中的
源代码控制工作流


3
00:00:25,893 --> 00:00:28,629 line:0
现在开发app需要对源代码


4
00:00:28,695 --> 00:00:30,397 line:0
和项目进行大量修改


5
00:00:30,464 --> 00:00:31,765 line:0
为了帮助管理那些更改


6
00:00:31,832 --> 00:00:34,101 line:0
Xcode提供了
许多源代码控制工具


7
00:00:36,036 --> 00:00:38,071 line:-1
今天我们来看看其中的一些工具


8
00:00:38,705 --> 00:00:40,207 line:-1
首先我们将看看


9
00:00:40,274 --> 00:00:43,177 line:-2
如何使用源代码控制
来创建你的第一个项目


10
00:00:43,243 --> 00:00:44,578 line:-1
（创建一个新的存储库）


11
00:00:44,645 --> 00:00:45,612 line:-1
（更改并查看更改）


12
00:00:45,679 --> 00:00:48,415 line:-2
接下来我们将研究
如何使用源代码控制


13
00:00:48,482 --> 00:00:49,483 line:-1
更改项目并查看更改


14
00:00:50,717 --> 00:00:51,785 line:-1
（主机和共享存储库）


15
00:00:51,852 --> 00:00:54,888 line:-2
我们还将研究如何托管
并与团队共享存储库


16
00:00:54,955 --> 00:00:57,391 line:-1
包括同步更改


17
00:00:58,292 --> 00:00:59,259 line:-1
（解决和避免冲突）


18
00:00:59,326 --> 00:01:02,329 line:-1
我们将简要介绍如何解决和避免冲突


19
00:01:03,430 --> 00:01:06,767 line:0
最后我们将快速看一下
下拉请求和分叉


20
00:01:06,834 --> 00:01:07,868 line:0
（下拉请求和分叉）


21
00:01:09,136 --> 00:01:12,806 line:-2
那么首先让我们看看如何
使用Git创建一个新项目


22
00:01:12,873 --> 00:01:14,741 line:-1
Git是业界标准的源代码管理系统


23
00:01:14,808 --> 00:01:16,844 line:-1
支持并包含在Xcode中


24
00:01:16,910 --> 00:01:18,712 line:-1
（一个新项目）


25
00:01:19,413 --> 00:01:23,050 line:-2
使用Git的第一步是
设置你的作者姓名和电子邮件


26
00:01:23,550 --> 00:01:25,552 line:-1
这将在Git提交中识别你


27
00:01:25,619 --> 00:01:30,057 line:-2
并使你很容易识别
谁在团队中进行了哪些更改


28
00:01:30,824 --> 00:01:34,161 line:-1
支持在源代码管理选项卡的


29
00:01:34,895 --> 00:01:37,631 line:-2
Git选项下的首选项中
快速设置此选项


30
00:01:41,101 --> 00:01:43,237 line:-1
在用Xcode创建新项目时


31
00:01:43,537 --> 00:01:45,973 line:-1
你还可以选择创建Git存储库


32
00:01:47,875 --> 00:01:49,977 line:-1
在新项目的保存操作期间


33
00:01:50,043 --> 00:01:54,448 line:-2
你只需选中这里显示的框
Xcode就会自动创建一个


34
00:01:55,382 --> 00:01:58,819 line:-2
现在让我们看看它的作用
和Git存储库是什么


35
00:02:00,320 --> 00:02:02,990 line:-2
你可能已经熟悉了
典型的Xcode项目


36
00:02:03,490 --> 00:02:05,826 line:-1
这里用磁盘上的一个文件夹表示


37
00:02:06,493 --> 00:02:09,263 line:-1
它包括你的源文件和类似的东西


38
00:02:09,329 --> 00:02:10,364 line:-1
（我的项目）


39
00:02:10,430 --> 00:02:13,500 line:-2
现在当你选中该框
以创建一个Git存储库时


40
00:02:14,401 --> 00:02:16,270 line:-1
你将得到一个.Git文件夹


41
00:02:17,204 --> 00:02:19,806 line:-1
它代表了你的项目的存储库


42
00:02:19,873 --> 00:02:21,441 line:-1
并且通常会对你隐藏


43
00:02:23,177 --> 00:02:27,948 line:-2
现在它被放入你的项目文件夹中
使其成为一个工作副本


44
00:02:30,484 --> 00:02:33,487 line:-2
在Xcode中创建一个新存储库
首先会发生的事是


45
00:02:34,121 --> 00:02:36,056 line:-1
整个项目的副本都是


46
00:02:36,123 --> 00:02:39,226 line:-1
在某个时间点生成并快照的


47
00:02:40,127 --> 00:02:42,396 line:-1
你的项目的这个快照称为“提交”


48
00:02:44,665 --> 00:02:47,434 line:-1
（一个提交）


49
00:02:47,868 --> 00:02:50,337 line:-2
Xcode中的每个提交
都有一个唯一标识符


50
00:02:51,705 --> 00:02:53,707 line:-1
当你对我们的项目源代码进行更改时


51
00:02:53,774 --> 00:02:54,875 line:-1
你可以创建提交


52
00:02:54,942 --> 00:02:57,945 line:-1
在项目的整个期间内会做更多的快照


53
00:02:58,345 --> 00:03:01,348 line:-2
在创建这些更改提交时
你将看到那些更改


54
00:03:04,785 --> 00:03:07,654 line:-1
这些快照组成了你的项目的历史


55
00:03:08,722 --> 00:03:11,658 line:-2
当你做更多的提交时
它们就形成了一个时间线


56
00:03:14,061 --> 00:03:17,631 line:-1
这些信息构成了你的存储库


57
00:03:19,833 --> 00:03:22,769 line:-2
既然已经从概念上讨论了
它是如何工作的


58
00:03:22,836 --> 00:03:27,140 line:-2
那么就让我们来看看如何进行更改
并在Xcode中轻松地跟踪它们


59
00:03:27,207 --> 00:03:28,976 line:-1
（进行更改）


60
00:03:29,042 --> 00:03:32,980 line:-2
最简单的方法之一是
使用源代码管理更改栏


61
00:03:33,514 --> 00:03:36,950 line:-2
它突出显示了更改代码时
你所更改的代码行


62
00:03:38,752 --> 00:03:40,687 line:-1
当你稍后回来时


63
00:03:40,754 --> 00:03:43,323 line:-2
更改栏能使你很容易看到
你在文件中何处进行了更改


64
00:03:44,124 --> 00:03:48,695 line:0
随着更改的进行
更改栏突出显示了经过修改的文件行


65
00:03:51,698 --> 00:03:55,235 line:-2
在大型文件中 它也使你
能够快速地在更改之间切换


66
00:03:55,569 --> 00:03:59,706 line:-2
实际上你可以在Xcode中的
导航菜单中快速切换


67
00:04:01,675 --> 00:04:03,343 line:-1
除了更改栏之外


68
00:04:03,410 --> 00:04:06,013 line:-1
你还将在项目导航器中看到状态标志


69
00:04:06,079 --> 00:04:08,949 line:-2
告诉你自上次提交以来
哪些文件发生了更改


70
00:04:10,884 --> 00:04:11,952 line:-1
（提交）


71
00:04:12,019 --> 00:04:15,355 line:-2
既然我们已经做了一些更改
现在让我们讨论一下如何提交


72
00:04:15,989 --> 00:04:17,724 line:-1
这些是你项目的快照


73
00:04:17,791 --> 00:04:21,060 line:-1
你可以稍后引用


74
00:04:21,128 --> 00:04:24,531 line:-2
让我们简要地看看如何
在Xcode中创建这些提交


75
00:04:27,067 --> 00:04:30,704 line:-2
现在我们看到你可以很容易地
看到你在项目中所做的更改


76
00:04:31,338 --> 00:04:34,908 line:-2
现在当你准备将这些更改
记录到你的存储库时


77
00:04:35,275 --> 00:04:37,811 line:-2
请使用源代码管理菜单
来创建一个提交


78
00:04:44,218 --> 00:04:48,055 line:-1
提交表将显示项目中当前的所有更改


79
00:04:48,622 --> 00:04:51,558 line:-2
它们会给我们展示一个并排比较
以供你参考


80
00:04:51,925 --> 00:04:53,460 line:-2
提交中
你可选择包括哪些文件


81
00:04:53,861 --> 00:04:57,197 line:-1
甚至包括哪些特定的更改


82
00:04:58,599 --> 00:05:00,634 line:-1
选择适当的更改后


83
00:05:01,101 --> 00:05:03,971 line:-1
输入一条消息来记录更改的原因


84
00:05:04,538 --> 00:05:08,008 line:-1
这条消息可以使你


85
00:05:08,075 --> 00:05:09,476 line:-2
回头查看更改时
很容易理解这些更改的原因


86
00:05:10,978 --> 00:05:12,012 line:-1
（查看历史记录）


87
00:05:12,079 --> 00:05:15,949 line:-2
现在我们已经做了几个提交
让我们来谈谈如何查看它们


88
00:05:16,550 --> 00:05:18,485 line:-1
你可能需要参考它们


89
00:05:18,552 --> 00:05:22,689 line:-2
以更好地理解你的代码和项目
是如何随着时间的推移发生变化的


90
00:05:23,223 --> 00:05:25,659 line:-1
这对于发现在项目中引入代码的


91
00:05:25,726 --> 00:05:29,329 line:-2
时间线以及
为什么要进行特定的更改是有用的


92
00:05:30,030 --> 00:05:32,499 line:-2
Xcode提供了几种
查看此历史的方法


93
00:05:35,068 --> 00:05:36,637 line:-1
首先是比较模式


94
00:05:36,703 --> 00:05:39,006 line:-1
我们在提交表中看到了这一点


95
00:05:39,573 --> 00:05:42,776 line:-1
允许你查看项目中的每个文件


96
00:05:42,843 --> 00:05:44,311 line:-2
因为它通过这种方式
随着时间的推移而发生了变化


97
00:05:45,612 --> 00:05:49,950 line:-2
要访问它 请使用工具栏中的
版本编辑器模式 见此处


98
00:05:52,986 --> 00:05:54,655 line:-1
单击并保持选择器


99
00:05:54,955 --> 00:05:57,991 line:-1
将使你跳转到版本编辑器的特定模式


100
00:06:01,562 --> 00:06:04,231 line:-1
比较模式提供了


101
00:06:04,298 --> 00:06:05,566 line:-1
源代码更改的并排视图


102
00:06:06,033 --> 00:06:09,002 line:-2
它允许你在两个时间点之间
对文件进行比较


103
00:06:10,370 --> 00:06:11,872 line:0
在比较模式中


104
00:06:12,206 --> 00:06:14,808 line:0
你可以使用底部的跳转栏


105
00:06:15,108 --> 00:06:17,244 line:0
来更改正在查看的文件的版本


106
00:06:19,446 --> 00:06:22,449 line:-1
接下来是版本编辑器的作者视图


107
00:06:23,283 --> 00:06:26,086 line:-1
在工具栏中以同样的方式访问它


108
00:06:29,756 --> 00:06:34,494 line:-1
作者视图按照对文件中的特定行


109
00:06:34,561 --> 00:06:36,363 line:-2
最新更改的作者
将代码进行分组


110
00:06:37,497 --> 00:06:41,101 line:-1
它显示提交的作者、消息和日期


111
00:06:42,035 --> 00:06:43,770 line:-1
有关提交的其他信息


112
00:06:44,137 --> 00:06:46,240 line:-1
可以通过单击其中一个切片来查看


113
00:06:48,041 --> 00:06:52,012 line:-2
最后可以看到
对文件所做的每一项更改的日志


114
00:06:52,746 --> 00:06:56,216 line:-2
就像作者视图和比较模式一样
可以从工具栏访问它


115
00:06:59,820 --> 00:07:03,724 line:-2
源代码管理日志可以查看
文件的整个历史记录


116
00:07:03,790 --> 00:07:08,495 line:-2
这样在文件整个历史记录中
就能看到是谁以及为什么进行了更改


117
00:07:09,930 --> 00:07:13,133 line:-2
现在有时你需要一种方法
来查看使用源代码管理进行的更改


118
00:07:13,200 --> 00:07:16,803 line:-1
不仅仅是一个文件 而是整个项目


119
00:07:17,571 --> 00:07:20,574 line:-2
为了看到这一点
可以选择源代码管理器


120
00:07:21,642 --> 00:07:23,377 line:-1
作为Xcode中的第二导航器


121
00:07:27,147 --> 00:07:31,285 line:-1
源代码管理器通过列出分支和标签


122
00:07:31,351 --> 00:07:33,253 line:-1
来提供整个存储库的视图


123
00:07:34,421 --> 00:07:36,557 line:-1
分支是组成项目的单个历史流


124
00:07:36,623 --> 00:07:39,893 line:-1
例如当前的开发工作


125
00:07:40,661 --> 00:07:43,630 line:-2
当你启动一个新项目时
你将只有一个分支


126
00:07:43,997 --> 00:07:45,399 line:-1
通常名为Master


127
00:07:46,600 --> 00:07:50,304 line:-2
选择它 将显示该分支的历史
在这里可以看到


128
00:07:51,672 --> 00:07:52,806 line:-1
在这个历史记录视图中


129
00:07:53,307 --> 00:07:56,643 line:-2
你可以看到历史记录被标记为
紫色标记


130
00:07:57,277 --> 00:08:00,347 line:-2
标记是项目中
一些特别重要的点的书签


131
00:08:00,414 --> 00:08:03,350 line:-1
例如已发布的版本


132
00:08:04,818 --> 00:08:08,388 line:-2
有关分支 查看历史记录
和标记的更多信息


133
00:08:09,156 --> 00:08:13,260 line:-2
请参见2017年WWDC
“GitHub”演讲


134
00:08:13,327 --> 00:08:15,929 line:-2
和Xcode 9中
新的源代码控制工作流


135
00:08:21,134 --> 00:08:22,069 line:-1
（托管）


136
00:08:22,135 --> 00:08:25,105 line:-2
既然我们已经看到了
将项目置于源代码管理之下的好处


137
00:08:25,172 --> 00:08:27,541 line:-2
那么让我们来看看
如何将项目推向下一个层次


138
00:08:29,543 --> 00:08:31,078 line:-1
到目前为止我们已经看到了


139
00:08:31,144 --> 00:08:34,648 line:-2
当一个项目只在你的机器上
由Git在本地管理时会发生什么


140
00:08:35,549 --> 00:08:38,719 line:-2
但是在许多情况下
你需要将副本存储在服务器上


141
00:08:39,419 --> 00:08:41,154 line:-1
这提供了一个异地备份


142
00:08:41,221 --> 00:08:45,492 line:-2
以及从一台机器到另一台机器
同步你的更改的方法


143
00:08:46,593 --> 00:08:50,430 line:-1
这也是Xcode项目中协作的基础


144
00:08:54,301 --> 00:08:58,071 line:-2
Xcode适用于任何
支持托管Git存储库的服务器


145
00:08:58,705 --> 00:09:02,676 line:-2
在这些情况下
这些特性仅限于标准的Git操作


146
00:09:02,743 --> 00:09:06,747 line:-2
如推拉
而且不需要登录账号


147
00:09:07,281 --> 00:09:09,650 line:-1
你只需根据需要进行身份验证即可


148
00:09:11,518 --> 00:09:16,089 line:-2
Xcode还支持许多常见托管
解决方案 例如GitHub


149
00:09:16,623 --> 00:09:19,059 line:-2
BitBucket
和GitLab.com


150
00:09:19,927 --> 00:09:22,896 line:-2
有了这些服务
它还支持其他特性


151
00:09:23,297 --> 00:09:25,532 line:-1
例如搜索要克隆的存储库


152
00:09:25,899 --> 00:09:29,503 line:-2
以及直接从Xcode
在服务器上创建新的存储库


153
00:09:30,737 --> 00:09:33,140 line:-1
除了这些服务的云版本之外


154
00:09:33,640 --> 00:09:35,576 line:-1
Xcode还支持


155
00:09:35,676 --> 00:09:39,613 line:-2
在大型团队使用前提下的
自托管版本和企业版本


156
00:09:42,349 --> 00:09:44,785 line:-2
因此让我们来看看
添加这些托管帐户中的一个


157
00:09:46,119 --> 00:09:47,888 line:-1
可以从Xcode首选项中的


158
00:09:47,955 --> 00:09:51,825 line:-1
账户首选项窗格添加此帐户类型


159
00:09:54,261 --> 00:09:58,131 line:-2
你只需使用你的用户名
和密码登录到帐户


160
00:09:58,632 --> 00:09:59,967 line:-1
就像在网站上一样


161
00:10:00,434 --> 00:10:02,503 line:-1
如果你正在登录到一个自托管版本


162
00:10:03,136 --> 00:10:06,106 line:-1
你将有机会


163
00:10:06,173 --> 00:10:07,407 line:-1
为要连接的特定服务器提供URL


164
00:10:09,710 --> 00:10:13,046 line:-2
现在Xcode被签署到
托管的源代码控制帐户中


165
00:10:13,447 --> 00:10:15,883 line:-2
我们可以开始将
我们的更改发送到服务器


166
00:10:16,216 --> 00:10:18,018 line:-1
并从中获得其他更改


167
00:10:19,586 --> 00:10:22,155 line:-2
但是在我们开始在Xcode中
推拉代码之前


168
00:10:22,990 --> 00:10:24,858 line:-1
让我们花一点时间来讨论


169
00:10:24,925 --> 00:10:28,695 line:-2
Git和这些托管解决方案
如何处理安全性


170
00:10:28,762 --> 00:10:30,230 line:-1
（安全）


171
00:10:32,199 --> 00:10:33,967 line:-1
在连接服务器时


172
00:10:34,034 --> 00:10:36,470 line:-1
Git支持保护更改的两种主要方法


173
00:10:36,870 --> 00:10:42,309 line:-2
第一种 HTTPS
与大多数网站的安全方式相同


174
00:10:43,143 --> 00:10:45,512 line:-1
它是基于证书来信任服务器


175
00:10:45,879 --> 00:10:49,116 line:-2
并使用用户名和密码
对你进行用户身份验证


176
00:10:50,517 --> 00:10:54,555 line:-2
另一个方法是SSH
它的工作方式略有不同


177
00:10:54,788 --> 00:10:56,890 line:-1
特别是对于这些托管解决方案的情况


178
00:10:58,091 --> 00:11:02,729 line:-1
通常 Git的SSH连接


179
00:11:02,796 --> 00:11:04,464 line:-1
是使用在每台机器上生成的


180
00:11:05,265 --> 00:11:07,434 line:-1
公钥和私钥对来保护的


181
00:11:08,535 --> 00:11:12,506 line:-2
然后将这一对的公共部分
上传到托管站点


182
00:11:13,240 --> 00:11:16,844 line:-2
这意味着每台机器
都很容易拥有一套钥匙


183
00:11:16,910 --> 00:11:18,946 line:-1
甚至每个服务都有一个


184
00:11:19,413 --> 00:11:23,317 line:-2
这样就可以比密码更容易
管理和撤销它们


185
00:11:25,118 --> 00:11:29,389 line:-2
Xcode可以帮助你轻松地
完成SSH的这些设置步骤


186
00:11:30,057 --> 00:11:34,461 line:-2
当你登录一个帐户
但尚未在本地创建SSH密钥对时


187
00:11:34,862 --> 00:11:36,763 line:-1
Xcode将提供创建一对


188
00:11:38,298 --> 00:11:42,803 line:-2
SSH密钥的私有部分
应由传递短语保护


189
00:11:43,737 --> 00:11:48,175 line:-2
这增加了一个额外的安全层
并防止它被使用


190
00:11:48,242 --> 00:11:51,912 line:-2
即使在其他人获得你的
私钥副本的情况下也是如此


191
00:11:54,248 --> 00:11:58,418 line:-2
一旦创建了密钥对
Xcode还可以


192
00:11:58,485 --> 00:12:02,155 line:-2
将密钥的公共部分
直接上传到托管站点


193
00:12:03,323 --> 00:12:08,262 line:-2
完成公钥上传后
Xcode除了通过HTTPS之外


194
00:12:08,328 --> 00:12:12,799 line:-2
还可以通过SSH协议
将Git数据安全地传输到服务器


195
00:12:13,400 --> 00:12:16,603 line:-2
这也意味着我们现在可以
在服务器上创建新的存储库


196
00:12:16,904 --> 00:12:18,172 line:-1
并克隆现有的存储库


197
00:12:18,639 --> 00:12:20,007 line:-1
所以让我们来看看这个


198
00:12:21,708 --> 00:12:24,478 line:-1
如果我们回到本地唯一的存储库


199
00:12:24,978 --> 00:12:27,114 line:-1
我们现在可以为它创建一个新的遥控


200
00:12:27,714 --> 00:12:32,085 line:-1
这是托管站点上存储库的完整副本


201
00:12:32,352 --> 00:12:35,222 line:-1
从“上下文菜单”中的


202
00:12:35,656 --> 00:12:38,892 line:-1
“源代码管理器”执行此操作


203
00:12:41,094 --> 00:12:43,964 line:-2
然后我们有一些
取决于主机站点的选择


204
00:12:44,398 --> 00:12:47,334 line:-1
根据我们对这个项目的具体需求


205
00:12:47,768 --> 00:12:50,170 line:-2
我们可以选择将它变为
公开的或私密的


206
00:12:51,104 --> 00:12:53,073 line:-1
然后可以与其他开发人员共享它


207
00:12:53,140 --> 00:12:54,708 line:-1
或者跨计算机同步


208
00:12:55,509 --> 00:12:59,046 line:-2
当你想下载一个
已经托管在服务器上的项目时


209
00:12:59,112 --> 00:13:01,882 line:-2
比如在一台新机器上
或者加入一个团队时


210
00:13:02,349 --> 00:13:05,519 line:-2
你可以在克隆窗口中
浏览和搜索一个存储库


211
00:13:06,253 --> 00:13:09,623 line:-2
在Xcode的
源代码控制菜单中访问这个存储库


212
00:13:13,360 --> 00:13:15,929 line:-1
如果你已经有了用于存储库的URL


213
00:13:15,996 --> 00:13:18,131 line:-1
则你可以直接在搜索字段中输入它


214
00:13:18,498 --> 00:13:22,336 line:-2
此外Xcode中支持的所有托管
解决方案都提供了通过其网站上的


215
00:13:22,402 --> 00:13:26,406 line:-2
一个按钮直接在Xcode中
克隆项目的选项


216
00:13:27,908 --> 00:13:30,844 line:0
有关使用托管服务


217
00:13:30,911 --> 00:13:35,148 line:0
包括创建远程存储库
和各种克隆工作流的其他信息


218
00:13:35,516 --> 00:13:38,685 line:0
请参阅2017年WWDC演讲


219
00:13:39,052 --> 00:13:42,155 line:0
GitHub和Xcode 9中
新的源代码控制工作流


220
00:13:45,526 --> 00:13:49,062 line:-1
现在我们有了项目的本地和远程副本


221
00:13:49,530 --> 00:13:51,865 line:-1
我们需要确保它们保持同步


222
00:13:52,900 --> 00:13:58,071 line:-2
在Git中
这是通过所谓的拉和推操作来完成的


223
00:13:58,138 --> 00:13:59,640 line:-1
（拉和推）


224
00:14:00,340 --> 00:14:03,110 line:-1
当你在本地提交一个或多个更改后


225
00:14:03,510 --> 00:14:06,113 line:-1
你会想要将它们推送并上传到服务器


226
00:14:06,847 --> 00:14:09,216 line:-2
这可以在提交时直接完成
就在提交表中


227
00:14:10,150 --> 00:14:14,588 line:-2
或者也可以
在Xcode源代码控制菜单中完成


228
00:14:17,891 --> 00:14:21,495 line:-2
推送表允许你准确地
选择要推送到哪个分支


229
00:14:21,895 --> 00:14:26,767 line:-2
也允许你在推送过程中
包含你在本地创建的标记


230
00:14:29,469 --> 00:14:33,707 line:-2
现在当与他人合作时
通常需要在本地获得他们的更改


231
00:14:34,474 --> 00:14:38,045 line:-2
为此你需要执行Git中
称为“拉”的操作


232
00:14:38,512 --> 00:14:41,582 line:-2
类似地 这可以从
源代码控制菜单中完成


233
00:14:44,151 --> 00:14:49,590 line:-2
现在Xcode提供了两个拉的选项
要么是使用Git默认的合并


234
00:14:50,057 --> 00:14:53,060 line:-1
要么Xcode可以使用变基操作


235
00:14:53,727 --> 00:14:55,462 line:-2
这些在Git中
工作方式略有不同


236
00:14:55,796 --> 00:14:57,097 line:-1
让我们来看一下


237
00:14:58,198 --> 00:14:59,466 line:-1
（上游变更 我的变更）


238
00:14:59,533 --> 00:15:02,269 line:0
在这里我们将查看提交的概念时间表


239
00:15:02,636 --> 00:15:05,639 line:0
如果你已经进行了本地更改
而其他人也在你工作期间


240
00:15:05,706 --> 00:15:09,610 line:0
进行了更改
那么你将不得不在推送之前进行拉取


241
00:15:10,377 --> 00:15:13,881 line:0
在这种情况下你的工作绿色显示


242
00:15:13,947 --> 00:15:17,150 line:0
已经偏离了你同事的工作
这里用蓝色显示


243
00:15:20,087 --> 00:15:25,192 line:-2
为了纠正这个问题你将在Git中
有两个选项：合并和变基


244
00:15:25,959 --> 00:15:27,127 line:-1
让我们看看这两个


245
00:15:28,061 --> 00:15:30,731 line:-2
那么在这个场景中
你有两个更改要推送


246
00:15:30,797 --> 00:15:31,732 line:0
三个需要拉取


247
00:15:32,399 --> 00:15:35,869 line:-1
在合并时在你和同事的提交之后


248
00:15:36,336 --> 00:15:38,739 line:-2
通过创建一个新提交
并表明应该如何处理


249
00:15:39,173 --> 00:15:41,642 line:-1
偏离之后 这个问题就得到了解决


250
00:15:42,643 --> 00:15:45,846 line:-2
由于现在提交已经统一
并发回到一个分支


251
00:15:46,113 --> 00:15:49,783 line:-2
它就可以被推到服务器
并在所有机器上同步


252
00:15:51,185 --> 00:15:53,287 line:-1
变基拉取的工作方式有点不同


253
00:15:53,353 --> 00:15:56,924 line:-2
它不是创建一个新的合并提交
而是将本地更改放在一边


254
00:15:56,990 --> 00:16:00,127 line:-1
然后在你刚刚拉取的更改之后重放


255
00:16:00,194 --> 00:16:01,895 line:-1
（拉取合并 拉取变基）


256
00:16:01,962 --> 00:16:05,065 line:-1
这可以使回顾历史变得更加简单


257
00:16:05,432 --> 00:16:08,735 line:-1
因为历史中没有合并、提交或偏离


258
00:16:10,304 --> 00:16:11,205 line:-1
（冲突）


259
00:16:11,271 --> 00:16:14,274 line:-1
有时在拉取时你已经进行了本地提交


260
00:16:14,341 --> 00:16:18,312 line:-2
改了与其他人
正在相同的位置进行的更改


261
00:16:18,912 --> 00:16:21,448 line:-1
这可能会导致Git中所谓的冲突


262
00:16:21,882 --> 00:16:25,118 line:-2
在这种冲突中
不清楚如何让这两个更改同时存在


263
00:16:28,422 --> 00:16:32,092 line:-2
Xcode允许你
在拉取或合并分支时解决冲突


264
00:16:32,960 --> 00:16:36,363 line:-2
Xcode将显示一个
与提交表类似的表


265
00:16:36,430 --> 00:16:39,299 line:-2
其中包含接受你的更改
或接受其他更改的选项


266
00:16:40,033 --> 00:16:44,171 line:-1
也可以手动编辑文件


267
00:16:44,238 --> 00:16:46,373 line:-2
若有更好方法组合工作
也可同时进行这两个更改


268
00:16:48,775 --> 00:16:52,813 line:-2
在本例中 我们看到两个用户
在同一行上都做了更改


269
00:16:53,780 --> 00:16:56,650 line:-1
本地更改似乎是最新的


270
00:16:56,717 --> 00:16:59,887 line:-2
因此解决这个问题的最简单的方法是
采用剩下的更改


271
00:17:01,421 --> 00:17:04,625 line:-2
现在随着所有冲突都解决了
拉取可以继续下去


272
00:17:05,626 --> 00:17:08,862 line:-2
如果这是一个合并拉取
那么冲突将立即解决


273
00:17:08,929 --> 00:17:11,330 line:-1
且该解决方案将存储在合并提交中


274
00:17:12,699 --> 00:17:14,468 line:-1
如果我们正在执行拉取变基


275
00:17:14,968 --> 00:17:18,571 line:-1
则可能需要多次来解决一组冲突


276
00:17:18,638 --> 00:17:23,010 line:-2
因为每个单独的提交都会在
你的同事更改的基础上被重放


277
00:17:23,844 --> 00:17:25,746 line:-1
在这种情况下解决信息


278
00:17:26,280 --> 00:17:30,117 line:-2
就存储在原始提交中
就好像它从未发生过一样


279
00:17:31,451 --> 00:17:33,954 line:-1
现在由于冲突的解决可能有点烦人


280
00:17:34,021 --> 00:17:36,957 line:-1
所以预测冲突


281
00:17:37,024 --> 00:17:39,326 line:-1
并避免冲突的发生是非常有用的


282
00:17:40,427 --> 00:17:44,765 line:-2
在Xcode
“源代码管理首选项”中


283
00:17:44,831 --> 00:17:47,768 line:-2
可以选择显示“变更栏”
以显示同事在推送更改时所做的更改


284
00:17:50,737 --> 00:17:54,408 line:-2
这使得很容易判断文件的
哪个部分过时了


285
00:17:54,942 --> 00:17:57,978 line:-2
这些更改是每间隔10分钟内
就可以从服务器获取


286
00:18:00,280 --> 00:18:03,383 line:-2
在这里我们看到了
以前看到过的“更改栏”


287
00:18:04,084 --> 00:18:07,821 line:-1
当上游的更改正在显示时会变成红色


288
00:18:07,888 --> 00:18:11,058 line:-1
以表示我们的同事在哪里进行更改


289
00:18:11,725 --> 00:18:14,628 line:-1
意味着必须解决冲突


290
00:18:14,695 --> 00:18:16,396 line:-1
才能重新整合本地更改


291
00:18:17,064 --> 00:18:21,034 line:-2
在许多情况下在对已经进行
上游更改的文件进行更改之前


292
00:18:21,101 --> 00:18:22,903 line:-1
可以更容易地将其拉取出来


293
00:18:24,705 --> 00:18:29,176 line:0
有关冲突提交的一些细节可以通过
单击“更改栏”来查看


294
00:18:32,346 --> 00:18:34,815 line:-1
Xcode支持的所有托管解决方案


295
00:18:34,882 --> 00:18:39,520 line:-2
还支持另外两个常见的工作流：
拉取请求和分叉


296
00:18:40,187 --> 00:18:42,356 line:-1
它们基于Git的概念和特性


297
00:18:42,723 --> 00:18:44,625 line:-1
但与Git的特性集不同


298
00:18:45,826 --> 00:18:48,629 line:-1
拉取请求是进行代码评审的一种方法


299
00:18:48,695 --> 00:18:49,763 line:-1
（拉取请求）


300
00:18:49,830 --> 00:18:54,434 line:-2
通常最好的做法是在一个分支上
做一个项目的所有破坏性的工作


301
00:18:54,501 --> 00:18:57,371 line:-1
这是一个独立的提交历史记录行


302
00:18:57,437 --> 00:19:00,307 line:-1
它与项目的其他历史记录是分开的


303
00:19:01,408 --> 00:19:02,876 line:-1
就像在拉取时一样


304
00:19:03,277 --> 00:19:06,313 line:-2
在一个分支上完成的工作
将与代码的主要分支不同


305
00:19:06,547 --> 00:19:11,151 line:-2
因此合并对于解决任何冲突
和重新整合工作都是必要的


306
00:19:12,252 --> 00:19:14,488 line:-1
拉取请求 在这里以黄色显示


307
00:19:15,155 --> 00:19:17,057 line:-2
是一种方法
它可以查看需要合并的内容


308
00:19:17,724 --> 00:19:20,827 line:-1
并允许其他个人对该工作进行评论


309
00:19:21,328 --> 00:19:24,264 line:-2
通常这将意味着
在合并和集成分支之前


310
00:19:24,398 --> 00:19:26,099 line:-1
要对分支进行额外的更改


311
00:19:26,967 --> 00:19:29,837 line:-2
由于拉取请求是
建立在Git的分支模型上


312
00:19:29,903 --> 00:19:32,372 line:-1
所以在审查时 你可以始终


313
00:19:32,439 --> 00:19:35,742 line:-2
在Xcode的源代码控制导航器中
本地检查该分支


314
00:19:36,677 --> 00:19:40,881 line:-2
这使你可以在本地机器上
构建和测试工作


315
00:19:41,415 --> 00:19:43,417 line:-1
然后批准它并将其合并回主分支


316
00:19:44,952 --> 00:19:48,188 line:-1
分叉利用了Git的分布式特性


317
00:19:48,255 --> 00:19:49,156 line:-1
（分叉）


318
00:19:49,223 --> 00:19:51,592 line:-1
就像存储库的服务器副本


319
00:19:51,658 --> 00:19:56,029 line:-2
和计算机上的本地副本
是同一存储库的两个副本一样


320
00:19:56,630 --> 00:20:00,567 line:-2
你可以在同一服务器上
创建存储库的多个副本


321
00:20:02,236 --> 00:20:07,207 line:-1
当存在一个严格管理的规范副本时


322
00:20:07,274 --> 00:20:10,210 line:-1
例如大型开源项目 这通常是有用的


323
00:20:11,044 --> 00:20:14,047 line:-1
分叉对于在不破坏主副本的情况下


324
00:20:14,114 --> 00:20:16,049 line:-1
进行实验性更改是很有用的


325
00:20:16,817 --> 00:20:20,721 line:-2
当有许多因素时
这可能比一个分支更有用


326
00:20:20,787 --> 00:20:23,690 line:-2
因为每个分叉都可以
有自己的命名分支


327
00:20:23,757 --> 00:20:26,927 line:-1
从而最小化主存储库中的噪声


328
00:20:27,794 --> 00:20:31,331 line:-2
就像本地副本一样
分叉可以与主副本同步


329
00:20:31,832 --> 00:20:36,303 line:-2
这通常是以PR的形式进行的
也是拉取请求得到其名字的地方


330
00:20:36,837 --> 00:20:41,975 line:-2
Xcode和Git允许在本地
存储库上设置多个远程处理程序


331
00:20:42,442 --> 00:20:45,245 line:-1
因此你可以从机器上的


332
00:20:45,612 --> 00:20:47,447 line:-1
同一份本地副本中同步主和分叉


333
00:20:50,050 --> 00:20:53,654 line:-2
这涵盖了在Xcode中
使用源代码控制和Git的基本知识


334
00:20:53,720 --> 00:20:54,688 line:-1
（总结）


335
00:20:54,755 --> 00:20:57,624 line:-2
我们已经看到了如何在本地
使用Git来管理你的项目


336
00:20:58,258 --> 00:21:01,428 line:-2
我们已经了解了如何
在你的项目中进行和查看更改


337
00:21:02,296 --> 00:21:05,632 line:-1
我们还了解了如何托管存储库


338
00:21:05,699 --> 00:21:07,201 line:-1
以及在与团队合作时如何同步更改


339
00:21:07,434 --> 00:21:11,705 line:-2
在同步这些更改时
如何解决甚至避免冲突


340
00:21:12,272 --> 00:21:15,742 line:-2
最后我们简要介绍了一些
附加的托管功能


341
00:21:15,809 --> 00:21:17,744 line:-1
比如拉取请求和分叉


342
00:21:19,613 --> 00:21:23,217 line:-2
有关此演讲的更多信息请访问
developer.apple.com


343
00:21:24,785 --> 00:21:25,686 line:-1
谢谢大家

