1
00:00:16,717 --> 00:00:20,387 line:0
（为全球观众创建app
演讲201）


2
00:00:20,454 --> 00:00:23,090 line:0
早上好 哇 谢谢


3
00:00:27,194 --> 00:00:28,495 line:-1
非常感谢


4
00:00:28,562 --> 00:00:31,465 line:-1
再次欢迎来到WWDC


5
00:00:32,399 --> 00:00:33,400 line:-1
我叫Joaquim


6
00:00:33,467 --> 00:00:35,569 line:-1
我想 我不必再介绍我自己了


7
00:00:36,136 --> 00:00:39,339 line:-2
Karan、Dongyuan
和我很高兴最终能和你们谈谈


8
00:00:39,406 --> 00:00:40,474 line:-1
国际化


9
00:00:40,908 --> 00:00:42,442 line:-1
那么 我们要讨论什么呢？


10
00:00:42,509 --> 00:00:44,778 line:-2
我将做一个简短的介绍
就像我开始做的那样


11
00:00:44,845 --> 00:00:49,016 line:-2
我们还将做一些深入研究
来如何使你app的布局具有适应性


12
00:00:49,416 --> 00:00:52,920 line:-2
另外 还将涉及一些
关于文本的非常有趣的讨论


13
00:00:54,755 --> 00:00:56,957 line:-1
那么 为什么这很重要呢？


14
00:00:57,257 --> 00:00:59,126 line:-1
这适用于每一个app


15
00:00:59,226 --> 00:01:01,195 line:-1
国际化是一个重要的概念


16
00:01:01,395 --> 00:01:02,863 line:-1
我们将仔细研究其中的细节


17
00:01:02,930 --> 00:01:05,299 line:-1
为什么它适用于每一个app


18
00:01:05,364 --> 00:01:07,334 line:-1
不论你支持哪种语言的设置


19
00:01:08,936 --> 00:01:10,137 line:0
再者


20
00:01:10,204 --> 00:01:12,206 line:0
这是为了让更多的人来了解它


21
00:01:12,272 --> 00:01:15,042 line:-2
它使每个人
都能了解和使用你的app


22
00:01:15,609 --> 00:01:18,612 line:-2
不论他们说的是哪种语言
或者他们居住在哪个国家


23
00:01:18,912 --> 00:01:20,447 line:-1
或者他们是在哪个国家成长的


24
00:01:20,848 --> 00:01:22,816 line:-1
需要注意的是


25
00:01:22,883 --> 00:01:23,984 line:-1
后两者也可能有区别


26
00:01:24,084 --> 00:01:26,353 line:-1
这是一个值得记住的事情


27
00:01:28,355 --> 00:01:32,125 line:-1
因此 国际化涵盖了广泛的主题


28
00:01:32,192 --> 00:01:34,561 line:-2
甚至 它也可能
涵盖了你的app的每个方面


29
00:01:35,362 --> 00:01:36,830 line:-1
如果你对这个话题还不熟悉


30
00:01:37,464 --> 00:01:38,966 line:-1
思考这问题的最佳方式也许是


31
00:01:39,032 --> 00:01:43,504 line:-2
把国际化
最好作为一个持续的过程来应用


32
00:01:43,871 --> 00:01:46,740 line:-2
这个讨论
应当贯穿于你的app的每个阶段


33
00:01:47,474 --> 00:01:51,879 line:0
无论是它的最初开始阶段
设计阶段 还是完成阶段


34
00:01:51,945 --> 00:01:54,047 line:0
甚至是在App Store
发布它的节阶段都应如此


35
00:01:54,448 --> 00:01:57,351 line:-2
像你的App Store
截图甚至你的app名字


36
00:01:57,584 --> 00:02:00,587 line:-1
都应该在国际背景下公开讨论


37
00:02:03,023 --> 00:02:06,226 line:-2
就像我之前说过的
这涵盖了各种各样的话题


38
00:02:08,794 --> 00:02:11,598 line:-2
在Apple 我们有
很多关于这方面的第一手经验


39
00:02:11,932 --> 00:02:14,635 line:-1
因此 我们估计超过70%的客户


40
00:02:14,701 --> 00:02:16,270 line:-1
是在美国以外的


41
00:02:16,670 --> 00:02:19,373 line:-2
这意味着
当人们下载你的app时


42
00:02:19,773 --> 00:02:22,743 line:-2
他们希望
这个app能是你所偏好的语言


43
00:02:23,043 --> 00:02:25,579 line:-1
不仅如此 还要注意到任何可能


44
00:02:25,646 --> 00:02:28,182 line:-1
与他们的区域设置相关的任何细节


45
00:02:30,217 --> 00:02:33,820 line:-1
我们支持38种不同的书写语言


46
00:02:33,887 --> 00:02:38,759 line:-1
以及更多的键盘和输入方法


47
00:02:38,825 --> 00:02:40,494 line:-1
供人们打字和输入


48
00:02:40,994 --> 00:02:41,995 line:-1
这对你来说意味着


49
00:02:42,062 --> 00:02:44,932 line:-1
你有一个可以开始的坚实基础


50
00:02:45,265 --> 00:02:49,436 line:-2
我们的每个API
都支持这些语言和输入方法


51
00:02:49,837 --> 00:02:51,538 line:-2
这意味着
你可立即开始用这些工具


52
00:02:51,605 --> 00:02:54,575 line:-1
你将开始为你的app


53
00:02:54,641 --> 00:02:57,611 line:-1
提供非常好的国际支持


54
00:03:00,614 --> 00:03:04,484 line:-2
因此 例如 这可能涉及到
需要提交日期和时间


55
00:03:05,185 --> 00:03:07,821 line:-2
如果我不谈日期和时间
这就不是国际性话题了


56
00:03:07,888 --> 00:03:09,323 line:-2
但是思考一下
这个问题很重要 对吧？


57
00:03:09,890 --> 00:03:12,693 line:-1
因为全世界的人都有不同的期望


58
00:03:13,260 --> 00:03:16,496 line:-2
这是葡萄牙的东圣贝托
这是一个可爱的火车站


59
00:03:17,297 --> 00:03:19,700 line:-2
但我今天关注的重点
与其说是火车站


60
00:03:20,033 --> 00:03:23,570 line:-1
倒不如说是火车站里时间的表现方式


61
00:03:23,637 --> 00:03:27,040 line:-2
如果你去那里你会发现
一切都是以24小时制表达的


62
00:03:27,608 --> 00:03:30,344 line:-1
这是真的 不仅仅在火车站是这样


63
00:03:30,410 --> 00:03:33,347 line:-1
在许多国家 这是非常司空见惯的事


64
00:03:34,581 --> 00:03:36,350 line:-1
因此 你的app应该知道这些


65
00:03:36,517 --> 00:03:39,553 line:-1
并根据区域来显示时间


66
00:03:40,020 --> 00:03:41,655 line:-2
通过DateFormatter
你可以完成这个任务


67
00:03:41,722 --> 00:03:44,057 line:-2
这是一组我们提供的API
它可让你完成这任务


68
00:03:44,324 --> 00:03:46,426 line:-1
它真的可以为你完成所有繁琐的任务


69
00:03:49,363 --> 00:03:50,964 line:-1
另一个例子是日历


70
00:03:51,031 --> 00:03:53,934 line:-1
世界各地有许多不同的日历系统


71
00:03:54,201 --> 00:03:56,537 line:-1
另外 还必须注意到


72
00:03:56,603 --> 00:03:59,339 line:-1
许多人每天使用不止一种日历系统


73
00:03:59,406 --> 00:04:02,442 line:-2
他们可能会利用其中一个日历系统
用于宗教或节日活动


74
00:04:03,010 --> 00:04:04,211 line:-1
另一个日历系统用于商业活动


75
00:04:04,645 --> 00:04:06,513 line:-1
他们都有一些不同的特点 例如：


76
00:04:06,747 --> 00:04:08,415 line:-1
闰月和闰年


77
00:04:08,782 --> 00:04:11,251 line:-1
不同的天数和不同的月份数


78
00:04:11,518 --> 00:04:14,588 line:-1
因此 要准确地了解这些


79
00:04:14,922 --> 00:04:16,890 line:-1
并要知道如何恰当地表达这些信息


80
00:04:16,957 --> 00:04:19,326 line:-1
这也就是说要在国际上有所了解


81
00:04:20,327 --> 00:04:24,665 line:-1
这是一个iOS日历app的例子


82
00:04:24,731 --> 00:04:26,466 line:-1
在公历的顶部显示中国农历


83
00:04:27,000 --> 00:04:29,136 line:-2
我们在日历和
DateFormatter中


84
00:04:29,203 --> 00:04:32,005 line:-2
提供了一组API
可以帮助你实现这一点


85
00:04:34,474 --> 00:04:37,077 line:0
我们也可以讨论一下单位和测量


86
00:04:37,344 --> 00:04:42,015 line:0
无论是公制还是英制


87
00:04:42,382 --> 00:04:45,719 line:0
或者是摄氏温度或华氏温度


88
00:04:46,386 --> 00:04:47,421 line:0
你的app应该了解


89
00:04:47,487 --> 00:04:49,690 line:0
它们在这些区域相应的默认值


90
00:04:49,923 --> 00:04:52,860 line:0
并可以根据用户的偏好来加以变化


91
00:04:55,696 --> 00:04:58,332 line:-2
不仅如此 不管是对于单位
甚至还是对于数字本身


92
00:04:58,532 --> 00:04:59,633 line:-1
都应当这样


93
00:04:59,700 --> 00:05:01,134 line:-1
它涵盖了很多方面


94
00:05:01,201 --> 00:05:04,338 line:-1
从十进制分隔符到千位分隔符


95
00:05:04,671 --> 00:05:08,942 line:-1
甚至是用来表示和表达的所有数字


96
00:05:09,409 --> 00:05:10,777 line:-1
这些都会在不同的区域间发生改变


97
00:05:11,378 --> 00:05:15,015 line:-2
如果你使用数字格式器的话
你的app会免费得到这个功能


98
00:05:15,616 --> 00:05:18,385 line:-1
这不仅对保持一致性很重要


99
00:05:18,452 --> 00:05:19,853 line:-1
而且也是可以理解的


100
00:05:22,789 --> 00:05:26,994 line:-2
文本也是另一个伟大的话题
它有许多不同的方面


101
00:05:27,327 --> 00:05:30,030 line:-1
根据你成长过程中学习和书写的


102
00:05:30,097 --> 00:05:32,232 line:-1
一种或多种语言


103
00:05:32,599 --> 00:05:34,635 line:-1
以及这些语言脚本的书写方法


104
00:05:35,169 --> 00:05:36,703 line:-1
你可能会认为 有些属性


105
00:05:36,770 --> 00:05:40,607 line:-2
在其他脚本书写中和其他语言中
是完全不变的


106
00:05:40,908 --> 00:05:42,609 line:-1
但这可能并不一定成立


107
00:05:43,277 --> 00:05:46,246 line:-2
一个例子 可能是明显的例子
就是脚本的方向


108
00:05:46,313 --> 00:05:48,682 line:-2
有些语言
比如阿拉伯语和希伯来语</b


109
00:05:49,049 --> 00:05:52,085 line:-2
在这个例子中 乌尔都语
是从右到左书写和阅读的


110
00:05:52,152 --> 00:05:54,488 line:-1
这和英语完全不同


111
00:05:54,688 --> 00:05:56,123 line:-1
可能与你已习惯的完全不同


112
00:05:56,957 --> 00:05:58,125 line:-1
更进一步说


113
00:05:59,193 --> 00:06:03,163 line:-2
很多书籍 比如大部分用
中文和日文出版的传统古典书籍


114
00:06:03,463 --> 00:06:05,866 line:-1
都是从右向左垂直书写排列的


115
00:06:06,433 --> 00:06:08,101 line:-1
因此 了解这些格式


116
00:06:08,468 --> 00:06:12,039 line:-1
了解呈现这些格式的上下文


117
00:06:12,105 --> 00:06:14,041 line:-1
并根据这些格式调整布局


118
00:06:14,107 --> 00:06:15,909 line:-1
会是你的app的一个重要方面


119
00:06:16,343 --> 00:06:20,514 line:-2
TextKit和CoreText
文本框架旁边的Ryu框架


120
00:06:20,948 --> 00:06:23,050 line:-1
可以帮助你确保在每一种情况下


121
00:06:23,116 --> 00:06:24,751 line:-1
都做正确的事情


122
00:06:28,222 --> 00:06:31,225 line:-2
我们再进一步来谈论
甚至是名字之类的事情


123
00:06:31,892 --> 00:06:32,893 line:-1
根据你成长的地方


124
00:06:32,960 --> 00:06:35,162 line:-2
你可能会有
第一个名、中间名和姓


125
00:06:35,696 --> 00:06:38,899 line:-1
或者是在你的名字之前的家庭姓氏


126
00:06:39,867 --> 00:06:43,570 line:-2
同样 知道如何呈现这些内容
甚至询问用户关于这些内容的问题


127
00:06:43,904 --> 00:06:45,506 line:0
可能是app的一个关键部分


128
00:06:45,906 --> 00:06:48,909 line:0
在这一点上
用户期望你做对事情


129
00:06:49,309 --> 00:06:52,946 line:0
并且了解格式化名称的细节和复杂性


130
00:06:53,680 --> 00:06:56,016 line:0
我们有这个API
人名组件格式化程序


131
00:06:56,316 --> 00:06:57,317 line:0
可帮助你做这件事情


132
00:07:00,187 --> 00:07:04,625 line:-2
好吧 所以在所有这些概念中
同样重要的是要注意…


133
00:07:06,093 --> 00:07:08,595 line:-2
你的许多用户
可能每天不止说一种语言


134
00:07:08,662 --> 00:07:11,131 line:-1
并用它进行交流


135
00:07:11,565 --> 00:07:13,133 line:-1
无论是因为他们迁移到别的国家


136
00:07:13,200 --> 00:07:15,335 line:-1
或者还是仅仅因为这个地区本身


137
00:07:15,636 --> 00:07:17,204 line:-1
使用的是不止一种语言


138
00:07:18,772 --> 00:07:20,374 line:-1
更进一步来说


139
00:07:22,142 --> 00:07:24,344 line:-2
即使你的app
只支持一种语言


140
00:07:24,845 --> 00:07:27,481 line:-2
你的客户也很可能
在使用你的app


141
00:07:27,548 --> 00:07:31,518 line:-2
以自己的母语
来发布和使用其中的内容


142
00:07:32,085 --> 00:07:36,089 line:-1
所以不管你的app支持什么语言


143
00:07:36,356 --> 00:07:40,227 line:-1
在整app的设计和实现过程中


144
00:07:40,427 --> 00:07:42,996 line:-2
这些都是非常重要的话题
需要认真地加以考虑


145
00:07:45,999 --> 00:07:48,101 line:-2
如果你第一次听说这些东西
不要担心


146
00:07:48,569 --> 00:07:49,570 line:-1
就像我之前说过的


147
00:07:49,903 --> 00:07:53,540 line:-2
我们有一组非常好的API
能帮你完成所有繁重的任务


148
00:07:53,607 --> 00:07:55,375 line:-1
并能处理好所有这些不同的方面


149
00:07:55,442 --> 00:07:59,346 line:-2
并且知道不同语言和区域之间的
所有不同的细节


150
00:07:59,847 --> 00:08:03,250 line:-2
关于Formatter API
这些就是我讲过的一些例子


151
00:08:03,884 --> 00:08:06,687 line:-2
我们也有一些很棒的演讲
来详细介绍


152
00:08:06,753 --> 00:08:09,323 line:-2
如何为你的app
来定制这些事情


153
00:08:13,093 --> 00:08:15,796 line:-1
因此让我们开始深入探讨布局


154
00:08:15,963 --> 00:08:18,632 line:-1
和一些与国际化相关的目标


155
00:08:19,066 --> 00:08:20,968 line:-1
尤其是当涉及到适应性布局的时候


156
00:08:23,203 --> 00:08:26,373 line:-1
因为实际上适应性布局的核心目标是


157
00:08:26,440 --> 00:08:29,943 line:-1
是要呈现各种不同的信息


158
00:08:30,878 --> 00:08:33,981 line:-2
当你将你的app
应用到其他语言时


159
00:08:34,780 --> 00:08:36,416 line:-1
你最有可能遇到的是


160
00:08:36,482 --> 00:08:38,986 line:-2
这些翻译出来内容的长度
将会有所不同


161
00:08:39,052 --> 00:08:40,953 line:-1
根据不同的语言


162
00:08:41,020 --> 00:08:42,289 line:-1
它们可能会更短或更长


163
00:08:42,356 --> 00:08:45,926 line:-2
这是你的设计和布局
应当加以考虑来适应的


164
00:08:45,993 --> 00:08:48,028 line:-2
（布局——较长或较短的
文本方向性）


165
00:08:48,095 --> 00:08:50,097 line:-1
除此之外 还有方向性


166
00:08:50,163 --> 00:08:51,298 line:-1
就像我之前提到的


167
00:08:51,965 --> 00:08:54,268 line:-1
因为有些语言是用从右到左书写的


168
00:08:54,635 --> 00:08:56,637 line:-1
所以它就需要一些设计上的考虑


169
00:08:56,937 --> 00:08:58,906 line:-1
不仅是你的app中有文本


170
00:08:59,173 --> 00:09:01,141 line:-1
也包括你呈现信息的方式


171
00:09:01,375 --> 00:09:03,677 line:-1
尤其是横向流动的信息


172
00:09:04,011 --> 00:09:08,482 line:-2
以及一般的流动应该如何适应
脚本和书写的方向


173
00:09:10,517 --> 00:09:11,985 line:-1
（布局基础）


174
00:09:12,052 --> 00:09:15,055 line:-2
从自动布局出发
能帮助你完成这一切工作


175
00:09:15,155 --> 00:09:17,057 line:-1
你可能听说过自动布局


176
00:09:17,591 --> 00:09:20,994 line:-2
这是一项强大的技术
是我们布局引擎的核心


177
00:09:21,662 --> 00:09:25,465 line:-2
自动布局
它不是用来描述控件和标签的


178
00:09:26,066 --> 00:09:28,068 line:-1
显式框架或位置


179
00:09:28,836 --> 00:09:32,005 line:-2
而是用来描述
这些窗口之间的约束或关系的


180
00:09:32,272 --> 00:09:35,142 line:-2
因此也就是用来描述它们之间
是如何彼此定位的


181
00:09:35,409 --> 00:09:37,945 line:-2
以及它们时间
是如何彼此相互变化的


182
00:09:40,113 --> 00:09:42,115 line:-1
在这个基于约束的系统上


183
00:09:42,416 --> 00:09:45,018 line:-1
我们有了引导和跟踪约束的概念


184
00:09:45,853 --> 00:09:47,221 line:-1
它的意思是


185
00:09:47,287 --> 00:09:50,424 line:-2
它本质上描述了
在英语这样的语言中


186
00:09:50,691 --> 00:09:51,959 line:-1
从左向右的属性


187
00:09:52,426 --> 00:09:55,929 line:-2
而在阿拉伯语和希伯来语
这样的语言中 它们分别自动地


188
00:09:56,263 --> 00:09:58,065 line:-1
从右边和左边来计算


189
00:09:58,599 --> 00:10:02,202 line:-2
这意味着通过自动布局
你可以创建这些自适应的布局


190
00:10:02,402 --> 00:10:06,139 line:-1
这些布局取决于书写方向


191
00:10:06,206 --> 00:10:09,910 line:-2
而不需要为任何一个书写方向
编写特殊的代码


192
00:10:13,947 --> 00:10:15,382 line:-1
另一个很好的起点是


193
00:10:15,449 --> 00:10:17,851 line:-1
使用我们在用户界面框架中提供的


194
00:10:17,918 --> 00:10:20,087 line:-1
高级组件和文件柜


195
00:10:20,153 --> 00:10:24,358 line:-2
因为它们使用了所有这些概念
并且知道如何进行自适应


196
00:10:25,058 --> 00:10:27,861 line:-2
UIKit AppKit中提供的
CollectionViews


197
00:10:27,928 --> 00:10:29,663 line:-2
和StackViews
就是一些示例


198
00:10:30,230 --> 00:10:34,268 line:-2
你可以仅仅通过它们
创建非常复杂的布局


199
00:10:34,668 --> 00:10:37,471 line:-2
甚至可以将它们相互嵌入
甚至可以用它们


200
00:10:37,538 --> 00:10:38,539 line:-1
创建整个app布局


201
00:10:39,907 --> 00:10:42,109 line:-2
看一个
StackView本身的例子


202
00:10:42,910 --> 00:10:44,912 line:-2
我可在Stack View中
水平排列它们


203
00:10:44,978 --> 00:10:48,715 line:-2
这样在左边 有城市名称
右边有时间


204
00:10:49,149 --> 00:10:52,386 line:-2
这可以放到
水平Stack View中


205
00:10:52,452 --> 00:10:55,322 line:-1
因为在英语中 这是从左向右流动


206
00:10:55,722 --> 00:10:57,391 line:-2
而且因为
我在使用Stack View


207
00:10:58,725 --> 00:11:01,695 line:-2
如果我用希伯来语运行我的app
这就是我要得到的结果


208
00:11:01,762 --> 00:11:04,364 line:-1
因为这些信息会自动适应


209
00:11:04,565 --> 00:11:06,767 line:-2
因为Stack View
意识到这些概念


210
00:11:06,900 --> 00:11:08,535 line:-1
并且使用了引擎下的自动布局


211
00:11:10,971 --> 00:11:12,873 line:-2
如果你想了解更多
关于自动布局的知识


212
00:11:12,940 --> 00:11:16,009 line:-2
以及如何根据不同的
书写方向调整app的


213
00:11:16,076 --> 00:11:17,644 line:-1
详细信息的话


214
00:11:17,711 --> 00:11:20,347 line:-2
那么下面这些也是你需要了解的
一些很好的起点


215
00:11:24,218 --> 00:11:27,454 line:-2
因此当涉及到你app中的
文本和内容时


216
00:11:28,055 --> 00:11:30,924 line:-2
其关键目标
显然也是最重要的建议就是


217
00:11:30,991 --> 00:11:33,927 line:-1
不要假设固定宽度


218
00:11:34,328 --> 00:11:36,797 line:-2
如果你不假设固定宽度
你就有了一个很好的起点


219
00:11:36,864 --> 00:11:40,167 line:-1
这让你的app


220
00:11:40,234 --> 00:11:42,536 line:-1
不仅可以水平地适应不同长度的变化


221
00:11:42,603 --> 00:11:45,772 line:-1
而且甚至可以让你的标签竖直生长


222
00:11:45,839 --> 00:11:48,041 line:-1
并在必要的时候适应多行


223
00:11:48,709 --> 00:11:50,777 line:-2
这是你在app中
和app设计中


224
00:11:50,844 --> 00:11:51,912 line:-1
所必须要决定的事情


225
00:11:52,246 --> 00:11:53,847 line:-1
你想优先考虑什么


226
00:11:53,914 --> 00:11:57,818 line:-1
以便能够允许你的app发展和使用


227
00:11:57,885 --> 00:12:00,521 line:-2
（文本长度——文本长度变化
扩展和增长——自动布局）


228
00:12:00,587 --> 00:12:03,757 line:-2
如果你的标签和控件
要么在我前面提到的


229
00:12:03,824 --> 00:12:06,393 line:-2
这些高级组件的
Stack Views中


230
00:12:06,460 --> 00:12:10,497 line:-2
要么使用自动布局本身进行定位
那么这项工作基本上已经为你完成了


231
00:12:10,564 --> 00:12:12,566 line:-1
你已经允许你的标签生长了


232
00:12:12,833 --> 00:12:16,103 line:-2
你的控件可以接收
需要接收的内容


233
00:12:16,670 --> 00:12:19,206 line:-2
随后的工作就是
优先考虑如何让它们


234
00:12:19,540 --> 00:12:22,075 line:-1
相互之间彼此成长的问题


235
00:12:24,311 --> 00:12:25,312 line:-1
（测试）


236
00:12:25,379 --> 00:12:27,948 line:-2
所以说这真是太伟大了
假设你已经完成了所有这些


237
00:12:28,015 --> 00:12:30,284 line:-2
那么确切地说
你如何确保你的app


238
00:12:30,350 --> 00:12:32,219 line:-1
在自适应布局方面


239
00:12:32,286 --> 00:12:36,490 line:-2
正在检查所有正确的盒子呢？
并对所有这些东西做出响应呢？


240
00:12:36,990 --> 00:12:38,225 line:-1
好消息是Xcode


241
00:12:38,292 --> 00:12:40,460 line:-1
提供了许多特性供你测试使用


242
00:12:40,827 --> 00:12:43,630 line:-2
不仅如此
它还可以让你尽早进行测试


243
00:12:43,697 --> 00:12:46,333 line:-1
并在app开发的早期


244
00:12:46,400 --> 00:12:47,801 line:-1
快速发现这些问题


245
00:12:48,602 --> 00:12:50,237 line:-1
伪语言就是一个例子


246
00:12:50,370 --> 00:12:51,638 line:-1
伪语言非常了不起


247
00:12:52,306 --> 00:12:54,942 line:-2
尤其是当你还没有为你的app
添加语言支持时


248
00:12:55,008 --> 00:12:56,977 line:-1
所以你可以在Xcode中


249
00:12:57,277 --> 00:13:00,581 line:-1
使用伪语言运行你的app


250
00:13:00,948 --> 00:13:04,618 line:-2
这就改变了你的app的
布局和文本的一些细节


251
00:13:05,185 --> 00:13:07,554 line:-1
一个例子是有界字符串伪语言


252
00:13:07,821 --> 00:13:10,057 line:-1
会在你显示的每个UI字符串的


253
00:13:10,123 --> 00:13:12,492 line:-1
开头和结尾添加几个字符


254
00:13:13,026 --> 00:13:17,264 line:-1
然后你可以确保你的app内容中


255
00:13:17,331 --> 00:13:19,499 line:-1
没有任何截断或意外的剪切


256
00:13:19,566 --> 00:13:20,734 line:-1
所以这是非常有用的


257
00:13:20,801 --> 00:13:23,837 line:-2
我们还有其它更多的伪语言
可以帮助你解决问题


258
00:13:26,106 --> 00:13:27,608 line:-1
特别是对于自动布局


259
00:13:28,175 --> 00:13:31,778 line:-2
我们在Xcode中
内置了自动布局警告


260
00:13:31,845 --> 00:13:35,015 line:-1
Xcode可以告诉你接口构建中


261
00:13:35,082 --> 00:13:36,683 line:-1
常见的反模式


262
00:13:37,217 --> 00:13:39,653 line:-1
这可能是固定宽度的约束


263
00:13:39,853 --> 00:13:42,322 line:-1
或者是控件或标签上的约束太少


264
00:13:42,689 --> 00:13:45,692 line:-1
可能会在运行时带来问题


265
00:13:45,759 --> 00:13:47,227 line:-1
特别是在其他语言中


266
00:13:50,597 --> 00:13:53,100 line:-1
现在我想请Dongyuan上台


267
00:13:53,166 --> 00:13:55,669 line:0
他会给你们演示所有这些


268
00:13:55,936 --> 00:13:58,038 line:0
非常感谢
祝你们度过愉快的一周


269
00:13:58,305 --> 00:13:59,840 line:0
谢谢 Dongyuan？


270
00:14:00,874 --> 00:14:01,975 line:0
谢谢 Joaquim


271
00:14:02,042 --> 00:14:05,612 line:0
（演示——DONGYUAN LIU
国际化软件工程师）


272
00:14:09,416 --> 00:14:10,417 line:-1
嗨 我是Dongyuan


273
00:14:11,018 --> 00:14:13,420 line:-2
让我向你展示
Joaquim提到的一些技术


274
00:14:13,487 --> 00:14:16,089 line:-2
以及在现实世界中
需要避免的一些常见陷阱


275
00:14:17,257 --> 00:14:19,226 line:-2
这是一个名为
“度假星球”的app


276
00:14:19,526 --> 00:14:22,129 line:-2
它是第一家
星际旅行代理商


277
00:14:23,197 --> 00:14:26,333 line:-2
它不仅可以让你预订
去其他国家的旅行


278
00:14:26,400 --> 00:14:29,303 line:-2
而且正如你在表格中看到的
还有其他的行星


279
00:14:30,437 --> 00:14:34,107 line:-1
所以我想去月球好几次了


280
00:14:34,374 --> 00:14:35,609 line:-1
这次我可以实现了


281
00:14:36,844 --> 00:14:39,313 line:-1
这是月球上所有可以找到的地点


282
00:14:39,646 --> 00:14:41,281 line:-1
以及它们与地球的距离


283
00:14:42,182 --> 00:14:44,484 line:-2
让我选择
像克拉维于斯基地这样的地点


284
00:14:45,752 --> 00:14:47,821 line:-1
这是我们的旅行详细信息页面


285
00:14:48,856 --> 00:14:50,691 line:-1
往返一次似乎很便宜


286
00:14:50,958 --> 00:14:52,426 line:-1
所以我要买更多的票


287
00:14:54,027 --> 00:14:55,128 line:-1
我们买三张吧


288
00:14:56,263 --> 00:14:57,297 line:-1
我们走吧


289
00:14:58,732 --> 00:15:02,202 line:-2
正如你所看到的 因为
我们用英语设计和开发了这个app


290
00:15:02,636 --> 00:15:04,538 line:-1
我们的布局在英语中运行很好


291
00:15:05,172 --> 00:15:09,176 line:-2
然而我们仍然希望
它能够适应其他语言


292
00:15:09,877 --> 00:15:12,379 line:-1
因为我们还处于开发周期的早期阶段


293
00:15:12,546 --> 00:15:14,314 line:-1
我们还没有本地化这个app


294
00:15:14,781 --> 00:15:17,117 line:-2
我们可以使用
Xcode中的伪语言


295
00:15:17,818 --> 00:15:20,888 line:-1
为此我将转到当前方案


296
00:15:21,522 --> 00:15:22,589 line:-1
点击编辑方案


297
00:15:23,590 --> 00:15:27,327 line:-2
在方案编辑器中
我有一个app语言选择器


298
00:15:28,262 --> 00:15:32,366 line:0
我可以选择一个伪语言
比如有界字符串伪语言


299
00:15:33,534 --> 00:15:37,738 line:-2
它对于暴露出来的潜在的
剪切或截断问题非常有用


300
00:15:38,772 --> 00:15:40,774 line:-1
让我们在这个配置中运行这个app


301
00:15:42,643 --> 00:15:43,644 line:-1
你可以看倒


302
00:15:43,944 --> 00:15:46,246 line:-2
这个伪语言
在每个UI字符串的开头和结尾


303
00:15:46,313 --> 00:15:48,749 line:-1
都添加了一些特殊字符


304
00:15:49,449 --> 00:15:51,285 line:-1
我们这里的标签行仍然很好


305
00:15:51,718 --> 00:15:53,620 line:0
但是浏览按钮被截断了


306
00:15:54,254 --> 00:15:55,355 line:0
我们来解决这个问题


307
00:15:57,491 --> 00:16:02,062 line:-2
当我选择浏览按钮时
我可以看到Xcode中有一个警告


308
00:16:05,199 --> 00:16:07,835 line:-1
警告显示我们有一个固定的宽度约束


309
00:16:08,068 --> 00:16:09,403 line:-1
这可能会导致剪切


310
00:16:10,871 --> 00:16:13,874 line:-2
如果我想知道更多的信息
我可以点击“i”按钮


311
00:16:14,641 --> 00:16:19,213 line:-2
我将通过单击警告标志
来解决这个问题


312
00:16:19,947 --> 00:16:21,081 line:-1
这里有三个选项


313
00:16:21,148 --> 00:16:24,618 line:-2
我将选择第一个
它只是用来移除约束的


314
00:16:24,685 --> 00:16:27,254 line:-1
以便在有更多内容时按钮可以变宽


315
00:16:27,888 --> 00:16:28,889 line:-1
好的


316
00:16:29,857 --> 00:16:31,425 line:-1
好的 没有其他布局问题


317
00:16:32,860 --> 00:16:34,895 line:-2
我将向你展示一个
非常简单的方法来验证


318
00:16:34,962 --> 00:16:36,663 line:-1
我刚才所做的更改


319
00:16:37,664 --> 00:16:40,734 line:-1
我要到右上角的助理编辑器


320
00:16:40,901 --> 00:16:42,035 line:-1
这里的中间按钮


321
00:16:44,271 --> 00:16:47,641 line:-2
在这里我可以选择预览和
Main.storyboard


322
00:16:48,675 --> 00:16:53,080 line:-1
预览窗格允许你在不运行app时


323
00:16:53,213 --> 00:16:55,449 line:-1
以多种屏幕大小和不同语言查看布局


324
00:16:56,617 --> 00:16:57,918 line:-1
在右下角


325
00:16:58,218 --> 00:17:02,256 line:-2
我将选择刚才使用的
有界字符串伪语言


326
00:17:04,156 --> 00:17:07,394 line:-2
太好了
因为我们不再有固定宽度的约束


327
00:17:07,627 --> 00:17:10,631 line:-2
我们的浏览按钮现在可以
容纳稍微长一点的字符串了


328
00:17:12,499 --> 00:17:15,801 line:0
另一个非常有用的伪语言
是双长度伪语言


329
00:17:16,369 --> 00:17:19,406 line:0
它用于验证你的布局是否
与字符串长度较长的语言


330
00:17:19,473 --> 00:17:23,644 line:0
如德语、芬兰语或俄语相匹配


331
00:17:24,310 --> 00:17:26,946 line:0
它们有时比英语长两倍


332
00:17:27,614 --> 00:17:28,949 line:0
我们来看看是否可行


333
00:17:30,717 --> 00:17:32,519 line:-1
现在浏览器按钮仍然正常


334
00:17:32,653 --> 00:17:35,222 line:-2
但是我们的标签行
被屏幕边界所限制而剪掉了


335
00:17:36,256 --> 00:17:37,391 line:-1
当我选择标签时


336
00:17:37,658 --> 00:17:40,360 line:-1
我可以看到我们只有一个中心X约束


337
00:17:40,561 --> 00:17:43,463 line:-1
我们没有任何前导或尾随空间约束


338
00:17:43,730 --> 00:17:45,432 line:-1
这样标签就会溢出


339
00:17:46,300 --> 00:17:49,703 line:-2
让我们添加一个前导空间约束
来解决这个问题


340
00:17:50,504 --> 00:17:52,372 line:-1
我按住控制键


341
00:17:53,207 --> 00:17:55,075 line:-2
从标签拖动
一直到它的概述


342
00:17:55,542 --> 00:17:57,644 line:-1
选择引导空间到安全区域


343
00:17:59,780 --> 00:18:02,950 line:-1
我可以选择约束来适应它的值


344
00:18:03,817 --> 00:18:07,054 line:-2
让我们写一些合理的东西在这里边部
比如 20


345
00:18:09,523 --> 00:18:13,493 line:-1
我可以立即看到我的标签不再被剪切


346
00:18:14,294 --> 00:18:16,363 line:-1
然而它仍然被截断了


347
00:18:16,930 --> 00:18:20,501 line:-2
这是一个我们想向我们的所有客户
显示的非常重要的信息


348
00:18:20,868 --> 00:18:21,869 line:-1
这并不是理想的


349
00:18:22,803 --> 00:18:24,071 line:-1
不需要截断


350
00:18:24,438 --> 00:18:27,741 line:-2
我可以允许标签
在需要的时候包装成多行


351
00:18:28,709 --> 00:18:30,310 line:-1
在这里当我选择标签时


352
00:18:31,011 --> 00:18:33,947 line:-2
我可以看到
我们有一行的属性设置为1


353
00:18:34,481 --> 00:18:37,184 line:-1
这意味着我们只允许标签为一行


354
00:18:38,118 --> 00:18:39,820 line:-1
如果我把这个值改为零


355
00:18:41,355 --> 00:18:44,825 line:0
我可以允许标签
在必要的时候换成任意数量的行


356
00:18:47,461 --> 00:18:51,665 line:-2
我可以看到我的标签现在
这个双长度的伪语言中是三行


357
00:18:52,866 --> 00:18:54,701 line:-1
如果我把语言转换回英语


358
00:18:55,502 --> 00:18:58,939 line:-2
我的标签仍然是一行
这正是我们所期望的


359
00:19:00,340 --> 00:19:02,843 line:0
我还鼓励你
在这里检查Add按钮


360
00:19:04,077 --> 00:19:06,680 line:0
在这里你可以选择不同尺寸的屏幕


361
00:19:07,481 --> 00:19:10,150 line:0
我鼓励你在最小的设备上
检查你的布局


362
00:19:10,217 --> 00:19:11,218 line:0
比如 iPhone SE


363
00:19:11,552 --> 00:19:14,421 line:0
因为剪裁和截断更有可能发生在


364
00:19:14,488 --> 00:19:15,756 line:0
较小的设备上


365
00:19:17,691 --> 00:19:20,827 line:-2
现在我想知道我们的布局
是否能够适应从右到左的语言


366
00:19:20,894 --> 00:19:22,062 line:-1
如阿拉伯语或希伯来语


367
00:19:22,896 --> 00:19:24,198 line:-1
正如我前面所说的


368
00:19:24,264 --> 00:19:26,767 line:-1
我们还没有这些语言的本地化


369
00:19:27,568 --> 00:19:29,503 line:-1
我们可以运行另一个伪语言


370
00:19:30,404 --> 00:19:34,875 line:-2
让我们再次打开方案编辑器
这次是在app语言中


371
00:19:35,642 --> 00:19:38,145 line:-1
我将选择从右到左的伪语言


372
00:19:39,546 --> 00:19:41,315 line:-1
并在模拟器中运行app


373
00:19:44,718 --> 00:19:46,520 line:0
（构建成功）


374
00:19:48,488 --> 00:19:49,756 line:0
好吧 浏览


375
00:19:50,924 --> 00:19:52,092 line:-1
正如你在这里所看到的


376
00:19:52,326 --> 00:19:57,931 line:-2
我们的表格现在从右向左流动
而不需要我们做任何更改


377
00:19:58,565 --> 00:20:02,503 line:-2
因为我们使用了
UITableView和


378
00:20:03,170 --> 00:20:05,305 line:-2
其它标准的UIKit组件
这个系统为我们做了艰苦的工作


379
00:20:05,973 --> 00:20:08,542 line:-1
所有的标题都在右边


380
00:20:08,609 --> 00:20:10,577 line:-1
这是从右到左的引领边


381
00:20:11,144 --> 00:20:14,414 line:-2
这里的军人臂章是在左侧
也就是尾部


382
00:20:15,549 --> 00:20:17,684 line:-1
这次我要去木星


383
00:20:18,952 --> 00:20:21,255 line:-1
你可能注意到


384
00:20:21,321 --> 00:20:24,525 line:-1
后退按钮现在右上角而不是左上角


385
00:20:25,259 --> 00:20:28,161 line:-2
这对于
从右到左的语言来说是很自然的


386
00:20:29,129 --> 00:20:31,098 line:-1
让我们在木星上选择一个位置


387
00:20:32,566 --> 00:20:35,469 line:-1
这是我们的旅行详情页面


388
00:20:35,936 --> 00:20:37,371 line:-1
一切似乎都很好


389
00:20:37,437 --> 00:20:39,706 line:-1
除了步进器和旅行者标签之外


390
00:20:40,474 --> 00:20:43,610 line:-1
第一个问题是步进器应该在尾侧


391
00:20:43,677 --> 00:20:45,379 line:-1
也就是从右侧到左边到左边


392
00:20:46,079 --> 00:20:48,081 line:-1
旅行者的标签应该在前面


393
00:20:48,148 --> 00:20:49,483 line:-1
在这里的右边


394
00:20:50,017 --> 00:20:53,687 line:-1
而且旅行者标签上也有不必要的空格


395
00:20:54,788 --> 00:20:56,657 line:-1
让我们在那个接口构建器中修复它


396
00:21:00,027 --> 00:21:02,362 line:-1
让我找到我们的故障区单元…


397
00:21:03,363 --> 00:21:04,598 line:-1
它在这里 好的


398
00:21:05,465 --> 00:21:06,667 line:-1
放大一点


399
00:21:06,733 --> 00:21:08,368 line:-1
（旅行细节）


400
00:21:09,603 --> 00:21:10,704 line:-1
（旅行者）


401
00:21:10,771 --> 00:21:13,373 line:-1
当我选择旅行者标签和步进器时


402
00:21:13,807 --> 00:21:15,909 line:-1
我可以看到它们没有限制


403
00:21:16,109 --> 00:21:17,110 line:-1
这不太好


404
00:21:17,678 --> 00:21:19,980 line:-1
当然Xcode对此有一个警告


405
00:21:21,181 --> 00:21:22,783 line:-1
因此 解决这问题的一种方法是


406
00:21:22,850 --> 00:21:25,586 line:-1
为旅行者添加一个前导空间限制


407
00:21:25,819 --> 00:21:28,021 line:-1
并为步进器添加一个尾随空间约束


408
00:21:28,856 --> 00:21:31,825 line:-1
前导和尾随将转换为左右语言


409
00:21:31,992 --> 00:21:33,293 line:-1
对于从右向左的语言


410
00:21:34,094 --> 00:21:37,164 line:-2
但是这里我将向你展示
一种更简单的方法


411
00:21:37,598 --> 00:21:39,399 line:-1
即使用UIStackView


412
00:21:39,900 --> 00:21:43,237 line:-2
一个使用在引擎盖下
自动布局的高级容器视图


413
00:21:44,004 --> 00:21:47,207 line:-2
通过使用Stack View
我可以从右到左自由获得支持


414
00:21:48,408 --> 00:21:49,877 line:-1
让我选择这两个视图


415
00:21:50,777 --> 00:21:54,915 line:0
然后点击右下角的嵌入按钮
这里 在右下角


416
00:21:56,216 --> 00:21:57,251 line:0
选择Stack View


417
00:21:59,019 --> 00:22:01,421 line:-2
现在我的两个视图在
UIStackView中


418
00:22:01,955 --> 00:22:05,425 line:-2
剩下的惟一事情就是向
Stack View本身添加约束


419
00:22:06,894 --> 00:22:10,697 line:-2
我要选择Stack View
点击添加约束按钮


420
00:22:11,932 --> 00:22:13,567 line:-1
这里输入四个0


421
00:22:13,800 --> 00:22:16,537 line:-2
因为我希望
Stack View尽可能地填充


422
00:22:16,603 --> 00:22:17,771 line:-1
表视图单元格


423
00:22:18,505 --> 00:22:21,508 line:-1
我喜欢在这里选择对边距的约束


424
00:22:21,942 --> 00:22:24,411 line:-2
因为我想要
Stack View的默认边距


425
00:22:24,578 --> 00:22:28,048 line:-1
我想要前缘与单元分隔符对齐


426
00:22:28,482 --> 00:22:29,850 line:0
并添加四个约束


427
00:22:30,784 --> 00:22:31,818 line:-1
那就这样吧


428
00:22:32,753 --> 00:22:34,922 line:-1
我要验证我的改变


429
00:22:37,057 --> 00:22:38,592 line:0
（构建成功）


430
00:22:39,193 --> 00:22:40,194 line:0
是的 浏览


431
00:22:41,361 --> 00:22:43,163 line:-1
这次我想去拜访地球


432
00:22:44,598 --> 00:22:48,135 line:-2
我想去葡萄牙的里斯本
去看看Joaquim


433
00:22:49,570 --> 00:22:50,571 line:-1
走吧


434
00:22:51,238 --> 00:22:52,239 line:-1
现在你可以看到


435
00:22:52,506 --> 00:22:56,643 line:-2
因为我们的旅行标签和步进器
现在UIStackView中


436
00:22:57,044 --> 00:22:58,679 line:-1
我们可自由获得从左到右的支持


437
00:22:59,546 --> 00:23:00,647 line:-1
预订这次旅行吧


438
00:23:00,714 --> 00:23:02,182 line:-1
（你的预订已确认）


439
00:23:02,249 --> 00:23:03,250 line:-1
太好了


440
00:23:06,086 --> 00:23:08,055 line:0
现在让我总结一下我们所讨论的内容


441
00:23:08,121 --> 00:23:09,189 line:0
（演示）


442
00:23:13,327 --> 00:23:16,129 line:-2
为了让我们的app布局
更适合全球用户


443
00:23:16,563 --> 00:23:18,498 line:-1
有几个简单的步骤


444
00:23:18,899 --> 00:23:22,336 line:-2
尽可能使用Stack View
之类的高级容器


445
00:23:22,703 --> 00:23:24,872 line:-2
因为它们
为你做了大量繁重工作


446
00:23:25,439 --> 00:23:27,541 line:-1
相信 它们使用起来更容易


447
00:23:28,408 --> 00:23:31,078 line:-2
为了更好地控制
请记住使用自动布局


448
00:23:31,311 --> 00:23:33,647 line:-1
并确保使用前导和尾随约束


449
00:23:33,947 --> 00:23:36,183 line:-1
以便你能够适应从右到左的语言


450
00:23:36,950 --> 00:23:39,386 line:-2
对于早期测试的
甚至没有本地化的app


451
00:23:39,853 --> 00:23:42,823 line:-2
你可以使用
Xcode方案编辑器中的伪语言


452
00:23:43,490 --> 00:23:46,927 line:-2
请不要忽略接口构建器中的
自动布局警告


453
00:23:47,160 --> 00:23:50,430 line:-1
它们对于避免


454
00:23:50,497 --> 00:23:51,965 line:-2
剪切 截断和重叠
问题非常有用


455
00:23:52,432 --> 00:23:54,468 line:0
现在请Karan上台来讨论文本


456
00:23:54,535 --> 00:23:56,203 line:0
（布局）


457
00:23:57,204 --> 00:23:58,205 line:-1
谢谢 Dongyuan


458
00:23:59,373 --> 00:24:00,474 line:-1
大家早上好


459
00:24:00,941 --> 00:24:02,242 line:-1
让我们来谈谈文本


460
00:24:04,645 --> 00:24:07,714 line:-2
在Apple
高质量的排版体验


461
00:24:07,781 --> 00:24:09,917 line:-1
是我们设计过程的一个关键部分


462
00:24:11,185 --> 00:24:13,954 line:-1
对我们来说


463
00:24:14,288 --> 00:24:18,258 line:-2
文本在屏幕上的样子
和设计都很重要


464
00:24:19,293 --> 00:24:23,263 line:-2
以及它被翻译成其他语言的方式
也是非常重要的


465
00:24:26,733 --> 00:24:29,770 line:-1
现在让我向你介绍一些关键的方面


466
00:24:29,837 --> 00:24:32,172 line:-2
当我们将自己的app
本地化为其他语言


467
00:24:32,239 --> 00:24:33,340 line:-1
我们要记住这些关键方面


468
00:24:33,574 --> 00:24:35,742 line:-1
以及你如何利用这些东西


469
00:24:35,809 --> 00:24:38,412 line:-2
使你的app在其他语言中
看起来很棒


470
00:24:41,148 --> 00:24:43,517 line:-1
现在我要讲三个主题


471
00:24:43,917 --> 00:24:46,153 line:-1
用语言和脚本建立一些基础


472
00:24:46,253 --> 00:24:49,056 line:-1
然后深入到字体和样式


473
00:24:49,923 --> 00:24:51,491 line:-1
现在让我们来谈谈语言和脚本


474
00:24:51,558 --> 00:24:53,260 line:-1
（文本——语言和脚本）


475
00:24:54,595 --> 00:24:56,363 line:-1
什么是脚本？


476
00:24:56,430 --> 00:24:58,065 line:-1
当我谈到脚本时


477
00:24:58,131 --> 00:25:00,200 line:-2
不是指Bash脚本或
Python脚本


478
00:25:00,901 --> 00:25:04,905 line:-1
我说的是一种语言的书写方式


479
00:25:05,005 --> 00:25:06,440 line:-1
也就是书写系统


480
00:25:06,507 --> 00:25:08,475 line:-1
你用来写一种语言的字母


481
00:25:08,942 --> 00:25:10,744 line:-1
这些是我们支持的


482
00:25:10,811 --> 00:25:12,412 line:-1
从左到右书写的脚本


483
00:25:14,181 --> 00:25:16,750 line:-1
我们也有从右到左书写的脚本


484
00:25:18,819 --> 00:25:21,555 line:-2
要注意的是
所有这些脚本的关键


485
00:25:21,622 --> 00:25:22,990 line:-1
是它们是多语言的


486
00:25:23,423 --> 00:25:27,160 line:-2
因此每个脚本都支持
用它编写的各种语言


487
00:25:27,728 --> 00:25:29,162 line:-1
正如你所看到的


488
00:25:29,229 --> 00:25:32,833 line:-2
这里的拉丁语脚本
支持从英语到越南语的所有一切


489
00:25:33,867 --> 00:25:35,736 line:-1
其他脚本也是如此


490
00:25:36,069 --> 00:25:37,938 line:-1
例如 西里尔文脚本也支持


491
00:25:38,005 --> 00:25:39,540 line:-1
各种不同的语言


492
00:25:40,340 --> 00:25:42,643 line:-1
如果你看从右到左的脚本


493
00:25:42,943 --> 00:25:44,678 line:-1
我们看到的是阿拉伯语脚本


494
00:25:44,745 --> 00:25:46,480 line:-2
而不是阿拉伯语
是阿拉伯语脚本


495
00:25:46,547 --> 00:25:48,081 line:-1
支持多种不同的语言


496
00:25:48,148 --> 00:25:51,218 line:-2
比如阿拉伯语和波斯语
乌尔都语等等


497
00:25:52,419 --> 00:25:56,657 line:-2
你在屏幕上看到的 是的
有很多视觉变化


498
00:25:57,157 --> 00:25:58,759 line:-1
但这可不是为了作秀


499
00:25:58,825 --> 00:26:00,460 line:-1
当你开发app和不同的脚本时


500
00:26:00,527 --> 00:26:02,529 line:-1
实际上是有很多的含义的


501
00:26:02,596 --> 00:26:06,099 line:-2
因为有些概念
并不像其他概念那样容易


502
00:26:06,166 --> 00:26:07,334 line:-1
在脚本之间映射


503
00:26:07,401 --> 00:26:09,203 line:-1
我来举几个例子


504
00:26:11,505 --> 00:26:12,773 line:-1
让我们来谈谈字体


505
00:26:13,907 --> 00:26:16,677 line:-2
在这里你可以看到
英文版的健康app


506
00:26:17,110 --> 00:26:19,613 line:-1
你会看到很多标签


507
00:26:21,081 --> 00:26:23,150 line:-2
你在加泰罗尼亚语中
看到了同样的app


508
00:26:25,886 --> 00:26:28,722 line:-2
最后
你在越南语中看到了同样的app


509
00:26:29,489 --> 00:26:33,427 line:-1
现在我想提醒大家注意的是


510
00:26:33,493 --> 00:26:35,762 line:-1
屏幕上所有的文本


511
00:26:35,829 --> 00:26:38,599 line:-2
都用我们的系统字体呈现
San Francisco


512
00:26:39,466 --> 00:26:41,602 line:-1
我想让你注意的另一件事是


513
00:26:41,668 --> 00:26:43,704 line:-1
所有的东西都被渲染得很漂亮


514
00:26:44,071 --> 00:26:45,272 line:-2
这是因为
San Francisco


515
00:26:45,339 --> 00:26:47,908 line:-1
支持各种不同的语言


516
00:26:48,242 --> 00:26:50,477 line:-2
当你在你的app中
使用系统字体时


517
00:26:50,544 --> 00:26:52,679 line:-1
你肯定会得到免费的支持


518
00:26:54,181 --> 00:26:57,651 line:-2
现在你在Xcode中
创建的任何文本标签


519
00:26:57,718 --> 00:26:59,786 line:-2
都会默认为
San Francisco


520
00:27:00,354 --> 00:27:04,291 line:-2
但是如果你想更进一步
使用文本样式


521
00:27:06,660 --> 00:27:09,429 line:-2
我们在操作系统中
支持各种不同的样式


522
00:27:09,496 --> 00:27:11,565 line:-1
这些样式都是精心实现的


523
00:27:11,632 --> 00:27:14,001 line:-1
以支持各种不同的用例


524
00:27:14,568 --> 00:27:18,505 line:-2
并且能够很好地映射
不同的语言


525
00:27:19,373 --> 00:27:20,707 line:-1
因此当你用一种文本样式时


526
00:27:20,774 --> 00:27:24,311 line:-2
你可以向你的用户保证
他会得到一致的 高质量的体验


527
00:27:26,079 --> 00:27:27,748 line:-1
你也可以更进一步


528
00:27:28,849 --> 00:27:31,518 line:-2
如果你将标签设置为
自动调整字体大小


529
00:27:31,585 --> 00:27:34,821 line:-2
它将根据用户的文本大小设置
进行调整


530
00:27:35,289 --> 00:27:36,823 line:-2
这对于使用更小或
更大尺寸的文本的人


531
00:27:36,890 --> 00:27:39,426 line:-1
来说非常方便


532
00:27:39,893 --> 00:27:40,894 line:-1
就像我自己一样


533
00:27:42,029 --> 00:27:43,997 line:-1
因此我强烈建议你使用它


534
00:27:44,431 --> 00:27:47,734 line:-1
这将确保你的文本样式适当伸缩


535
00:27:50,003 --> 00:27:52,105 line:-1
但是假设 像我们现在一样


536
00:27:52,172 --> 00:27:55,175 line:-2
我们正在开发一个度假行星app
以便去木星 去火星


537
00:27:55,843 --> 00:27:59,980 line:-2
我们想要在这个
有趣的假期来做这个事情


538
00:28:00,347 --> 00:28:03,083 line:-2
但现在不是这样
因为所有东西都在系统字体中


539
00:28:03,150 --> 00:28:05,619 line:-1
所以我们决定把标题采用一种字体


540
00:28:05,686 --> 00:28:07,888 line:-1
它应该使app更加具有个性


541
00:28:08,856 --> 00:28:11,859 line:-2
所以我们看了一些可供选择的
有趣字体


542
00:28:13,026 --> 00:28:14,628 line:-1
首先我们看了这个


543
00:28:14,828 --> 00:28:16,964 line:-2
但是正如
Joaquim从一开始就提到的


544
00:28:17,464 --> 00:28:20,334 line:-2
我们希望保持本地化
作为我们开发和设计过程的


545
00:28:20,400 --> 00:28:22,636 line:-1
中心部分


546
00:28:22,703 --> 00:28:25,806 line:-1
我们做的第一件事就是检查


547
00:28:25,873 --> 00:28:28,308 line:-2
这适用于
我们需要支持的所有语言吗？


548
00:28:28,375 --> 00:28:30,344 line:-1
好 我们已经有了法国的本地化


549
00:28:30,744 --> 00:28:31,745 line:-1
我们试过了


550
00:28:32,446 --> 00:28:34,014 line:-1
事实证明 事实并非如此


551
00:28:34,548 --> 00:28:39,353 line:-1
所以我们一直在看我们的选择清单


552
00:28:39,653 --> 00:28:41,388 line:-1
我们看了另一种字体


553
00:28:42,356 --> 00:28:45,225 line:-2
当我们用法语试的时候
<i>太好啦 好用</i>


554
00:28:45,859 --> 00:28:48,829 line:-1
因为它支持法语所需的所有字符


555
00:28:49,029 --> 00:28:50,130 line:-1
这真是个好消息


556
00:28:52,132 --> 00:28:55,669 line:-2
我们的app下一步
就是扩展到越南语


557
00:28:55,736 --> 00:28:58,472 line:-1
但是我们还没有越南语的本地化


558
00:28:59,206 --> 00:29:02,576 line:-2
那么你可以使用的一个很棒的工具是
字体书籍


559
00:29:02,643 --> 00:29:06,780 line:-2
它可以安装在每一个Mac电脑上
即使你不是开发人员也可以


560
00:29:06,847 --> 00:29:08,315 line:-1
它安装在每台Mac电脑上了


561
00:29:08,549 --> 00:29:12,519 line:-2
在字体本中
你可以很容易地搜索一种语言的名称


562
00:29:12,719 --> 00:29:13,787 line:-1
就像这里的越南语


563
00:29:14,421 --> 00:29:17,824 line:-2
我们在这里看到
在我们选择的字体中


564
00:29:18,025 --> 00:29:20,427 line:-1
越南语是一组受支持的语言


565
00:29:20,861 --> 00:29:23,931 line:-2
事实上 这种字体也支持
西里尔语和希腊文


566
00:29:24,031 --> 00:29:25,966 line:-1
所以我们有些确信


567
00:29:26,033 --> 00:29:28,869 line:-2
如果我们扩展到俄语
乌克兰语和希腊语


568
00:29:28,936 --> 00:29:30,404 line:-1
这种字体将也将好用


569
00:29:31,171 --> 00:29:33,874 line:-1
现在我要提醒大家注意


570
00:29:34,341 --> 00:29:35,475 line:-1
如果仅仅因为字体书说


571
00:29:35,542 --> 00:29:37,711 line:-2
一种字体支持一种给定语言
但这并不意味着


572
00:29:37,778 --> 00:29:41,081 line:-2
你不需要用这种语言
测试你的app


573
00:29:41,148 --> 00:29:44,251 line:-2
你仍然需要通过尝试
来确保该字体


574
00:29:44,318 --> 00:29:45,385 line:-1
确实适用于该语言


575
00:29:48,956 --> 00:29:54,194 line:-2
我们为我们的度假星球app
准备了漂亮有趣的字体


576
00:29:55,462 --> 00:29:58,198 line:-1
现在我们将进一步扩展


577
00:29:58,332 --> 00:29:59,833 line:-1
我们想做更多的语言


578
00:29:59,900 --> 00:30:02,102 line:-1
特别是我们希望本地化为中文


579
00:30:03,270 --> 00:30:06,106 line:-2
好吧 我们把所有的字符串
都发送出去进行翻译


580
00:30:06,173 --> 00:30:07,174 line:-1
它们已经回来了


581
00:30:07,341 --> 00:30:10,477 line:-2
我们的app现在已经完全本地化为
简体中文了


582
00:30:10,978 --> 00:30:11,979 line:-1
酷


583
00:30:12,880 --> 00:30:14,681 line:-1
但这并不是真的


584
00:30:14,748 --> 00:30:16,650 line:-1
看看标题发生了什么


585
00:30:17,251 --> 00:30:19,520 line:-1
在英语中 我们有这个有趣的字体


586
00:30:19,586 --> 00:30:22,956 line:-2
但是在中文中
我们使用的是系统字体


587
00:30:23,056 --> 00:30:26,560 line:-2
这是因为我们的字体只支持
西里尔字母 希腊字母和拉丁字母


588
00:30:27,761 --> 00:30:33,567 line:-2
当然 解决这个问题的方法是
对中文重复同样的过程


589
00:30:33,634 --> 00:30:36,069 line:-2
现在
我们有了一个有趣的汉字字体


590
00:30:36,236 --> 00:30:37,271 line:-1
就这么简单


591
00:30:39,072 --> 00:30:41,208 line:-2
不幸的是
我不能真正帮助你


592
00:30:41,275 --> 00:30:43,710 line:-2
这是一个文体的问题
你必须选择自己的字体


593
00:30:43,777 --> 00:30:46,113 line:-2
但是我可以告诉你
如何用代码来实现


594
00:30:47,881 --> 00:30:50,217 line:-1
这很简单


595
00:30:50,617 --> 00:30:54,888 line:-2
首先你通常从
从你开发语言的字体开始


596
00:30:54,955 --> 00:30:57,457 line:-1
比如在我们的例子中是英语


597
00:30:57,524 --> 00:31:00,093 line:-2
于是我们选择拉丁文字体
在这里得到我们的字体


598
00:31:01,228 --> 00:31:03,664 line:-1
我想介绍给你们的关键概念叫做


599
00:31:03,730 --> 00:31:05,265 line:-1
级联列表


600
00:31:05,766 --> 00:31:07,334 line:-1
于是这个级联列表上写着


601
00:31:07,668 --> 00:31:12,472 line:-1
如果我想渲染这个汉字


602
00:31:13,073 --> 00:31:14,908 line:-1
而第一个字体没有它


603
00:31:15,209 --> 00:31:18,212 line:-1
我应该用什么字体来查找这个字符？


604
00:31:18,478 --> 00:31:21,815 line:-2
如果你不指定一个级联列表的话
那么你会得到系统字体


605
00:31:21,982 --> 00:31:23,483 line:-1
但是如果你有一个级联列表


606
00:31:23,550 --> 00:31:27,454 line:-2
那么你可以在返回到系统字体之前
指定要尝试的其他字体


607
00:31:28,322 --> 00:31:30,958 line:-2
因此在本例中我们创建了
一个级联列表 其中包含了


608
00:31:31,024 --> 00:31:34,161 line:-2
我们手工选择的
中文字体描述符或字体


609
00:31:34,761 --> 00:31:36,897 line:-2
现在如果你的app
支持多个脚本的话


610
00:31:36,964 --> 00:31:40,601 line:-2
你可以在这里添加多个东西
这就像它的工作原理一样简单


611
00:31:41,535 --> 00:31:44,471 line:-2
一旦你有了一个级联列表
你就创建了一个新的字体描述符


612
00:31:44,538 --> 00:31:47,040 line:-2
然后你创建了一个新的字体
非常简单


613
00:31:48,675 --> 00:31:51,411 line:-2
而且还要确保如果你的app
使用动态类型


614
00:31:51,478 --> 00:31:52,613 line:-1
即它应该使用的类型


615
00:31:52,880 --> 00:31:55,682 line:-1
那么你的字体也应该适应它


616
00:31:55,816 --> 00:31:57,751 line:-1
这和API调用一样简单


617
00:31:59,386 --> 00:32:00,487 line:-1
让我们看看一些例子


618
00:32:02,155 --> 00:32:05,025 line:-2
这是macOS Mojave
上屏保的新词


619
00:32:05,092 --> 00:32:06,360 line:-1
在macOS Mojave上


620
00:32:07,227 --> 00:32:10,697 line:-2
正如你所看到的 对于这个新设计
我们选择了一种圆润的风格


621
00:32:11,231 --> 00:32:13,634 line:-2
当然
如果我们不为屏幕保护程序


622
00:32:13,700 --> 00:32:16,470 line:-2
支持的所有语言
包括日语


623
00:32:16,537 --> 00:32:18,872 line:-1
选择相同的圆形样式的话


624
00:32:18,939 --> 00:32:20,174 line:-1
那就没有意义了


625
00:32:21,942 --> 00:32:25,579 line:-2
此外在macOS Mojave上
也有简体汉字和繁体汉字


626
00:32:29,483 --> 00:32:31,618 line:-1
另一个例子是信息app


627
00:32:31,685 --> 00:32:37,090 line:-2
在这个app中 你可以
使用回放响应来对消息进行响应


628
00:32:37,791 --> 00:32:40,928 line:-2
现在这里 你将看到
英语中的“ha-ha”


629
00:32:41,295 --> 00:32:44,031 line:-1
不仅被翻译成其他语言


630
00:32:44,097 --> 00:32:45,732 line:-1
而且在风格上也得到了匹配


631
00:32:45,799 --> 00:32:50,137 line:-2
所以在我们支持的所有语言中
你都能看到同样活泼有趣的外观


632
00:32:52,005 --> 00:32:53,340 line:-1
这是字体


633
00:32:54,541 --> 00:32:55,976 line:-1
让我们再来谈谈风格样式


634
00:32:56,777 --> 00:32:58,712 line:0
同样我也要从定义开始


635
00:32:59,479 --> 00:33:00,914 line:0
我所说的风格是什么意思？


636
00:33:01,448 --> 00:33:04,218 line:0
广义地说


637
00:33:04,284 --> 00:33:08,755 line:0
我指的是你选择字体后
你所选择的文本的各个方面


638
00:33:09,056 --> 00:33:11,358 line:0
让我们来说说字体的字的粗细


639
00:33:11,692 --> 00:33:14,628 line:0
比如它有多粗
或者它是否是斜体


640
00:33:14,962 --> 00:33:17,231 line:0
以及字体的大小


641
00:33:19,399 --> 00:33:22,102 line:0
所以需要记住的关键方面是


642
00:33:22,169 --> 00:33:27,241 line:-2
有些方面可以更好地转化为其他语言
而有些则不然


643
00:33:27,341 --> 00:33:32,112 line:-2
让我们来看一个例子
在这个例子中有些东西可能无法翻译


644
00:33:32,779 --> 00:33:34,848 line:-2
这里我们有一个简单的
英语字符串


645
00:33:35,482 --> 00:33:38,652 line:-2
我们把“火星”
和“2个旅行者”


646
00:33:38,719 --> 00:33:39,853 line:-2
用斜体表示它们是变量
这样它们就可以改变


647
00:33:41,622 --> 00:33:44,157 line:-1
这就是它如何转换成繁体中文的


648
00:33:45,425 --> 00:33:46,927 line:-1
这里有几个问题


649
00:33:46,994 --> 00:33:48,795 line:-1
（词强调）


650
00:33:48,862 --> 00:33:54,168 line:-2
“火星”在英语中是斜体
中文不是斜体字


651
00:33:54,268 --> 00:33:57,771 line:-2
为什么？因为斜体化
不是一个汉语的概念


652
00:33:57,838 --> 00:34:00,073 line:-2
它不是拉丁语 西里尔语
和希腊语之外的大多数脚本中的


653
00:34:00,140 --> 00:34:01,909 line:-1
一个概念


654
00:34:03,277 --> 00:34:06,246 line:-2
所以使用斜体字的设计
可能不起作用


655
00:34:07,080 --> 00:34:10,684 line:-2
另一件要注意的是
在汉语中单词之间没有空格


656
00:34:10,751 --> 00:34:14,021 line:-1
也没有大写字母和小写字母的概念


657
00:34:14,221 --> 00:34:17,456 line:-2
所以
当你把它翻译成中文时


658
00:34:17,524 --> 00:34:20,027 line:-1
你就失去了在英语中的自然区别


659
00:34:20,960 --> 00:34:24,231 line:-2
还有几点要注意的是
单词的顺序是不同的


660
00:34:25,831 --> 00:34:28,502 line:-2
还有因为“2”
仍然来自拉丁文脚本


661
00:34:28,869 --> 00:34:31,103 line:-2
仍然是斜体
所以看起来不太好


662
00:34:33,306 --> 00:34:34,440 line:-1
如何解决这个问题呢？


663
00:34:35,775 --> 00:34:39,346 line:-1
关键是要意识到你在强调


664
00:34:39,413 --> 00:34:41,348 line:-1
而不一定非得是斜体


665
00:34:41,581 --> 00:34:43,917 line:-1
强调可以用多种不同的方式来完成


666
00:34:43,984 --> 00:34:45,319 line:-1
这是一种很好的方法


667
00:34:45,385 --> 00:34:47,187 line:-1
可以在不同的语言之间进行强调


668
00:34:47,254 --> 00:34:49,623 line:-1
事实上它适用于我们支持的所有语言


669
00:34:49,690 --> 00:34:52,726 line:-1
即对给定的单词加粗


670
00:34:55,329 --> 00:35:00,000 line:-2
最后让我们讨论一下
在字符级别或子单词级别上的强调


671
00:35:00,067 --> 00:35:01,335 line:-1
（字符强调）


672
00:35:01,401 --> 00:35:03,637 line:-2
假设我们有一个
具有搜索功能的app


673
00:35:04,104 --> 00:35:06,740 line:-1
我们想突出显示匹配的结果部分


674
00:35:06,940 --> 00:35:09,042 line:-2
以使用户更清楚地了解
正在发生的事情


675
00:35:09,543 --> 00:35:11,378 line:-1
现在这对于英语来说非常有效


676
00:35:11,445 --> 00:35:15,115 line:-2
因为它使用了一个更大加粗
来匹配这部分


677
00:35:17,584 --> 00:35:19,786 line:-1
但是这对印地语来说真的很糟糕


678
00:35:20,087 --> 00:35:22,289 line:-1
所以你在这里看到的


679
00:35:23,190 --> 00:35:24,558 line:-1
任何会读印地语的人


680
00:35:24,625 --> 00:35:26,460 line:-2
都会告诉你说
右手边的所有东西看来


681
00:35:26,527 --> 00:35:27,794 line:-1
都是完全坏的


682
00:35:28,362 --> 00:35:32,966 line:-2
每当你看到
一个印地语单词里的虚线圆圈时


683
00:35:33,200 --> 00:35:34,968 line:-1
这就是说有非常严重的错误了


684
00:35:35,802 --> 00:35:37,437 line:-1
发生这种情况的原因是


685
00:35:37,738 --> 00:35:40,240 line:-1
即使它是相同的字体家族


686
00:35:40,307 --> 00:35:44,077 line:-1
不同的字体权重实际上是不同的字体


687
00:35:44,244 --> 00:35:46,680 line:-2
如果你有两种不同的字体
你就不可能有像


688
00:35:46,747 --> 00:35:48,015 line:-1
印地语这样的语言的


689
00:35:48,382 --> 00:35:49,917 line:-1
合适的连接行为


690
00:35:51,351 --> 00:35:54,421 line:-1
因此解决这个问题的一种简单方法


691
00:35:54,488 --> 00:35:57,424 line:-1
在字符级别上使用不同的强调方式


692
00:35:57,491 --> 00:36:02,729 line:-2
因此在一个字符级别
你可以使用不同颜色的东西


693
00:36:03,230 --> 00:36:06,700 line:-2
例如在这里
我们用黑色表示数学部分


694
00:36:06,767 --> 00:36:08,502 line:-1
灰色表示剩余的单词.


695
00:36:08,869 --> 00:36:10,003 line:-1
这是很好用的


696
00:36:10,971 --> 00:36:15,576 line:0
现在你会在键盘上看到


697
00:36:15,642 --> 00:36:18,645 line:0
很好
他们是依赖的痕迹


698
00:36:18,712 --> 00:36:20,280 line:-1
（字符强调——颜色）


699
00:36:21,849 --> 00:36:24,818 line:-1
对于阿拉伯语这里有同样的例子


700
00:36:25,052 --> 00:36:28,555 line:-2
同样在iOS和macOS上
使用了相同的方法


701
00:36:28,622 --> 00:36:31,091 line:-1
而且它在很多方面都很有效


702
00:36:32,259 --> 00:36:33,961 line:-1
我还应该提到


703
00:36:34,027 --> 00:36:37,197 line:-2
带属性字符串
这是很容易的


704
00:36:40,467 --> 00:36:44,972 line:-2
最后我们来复习一下
我们讨论过的所有内容


705
00:36:48,509 --> 00:36:53,013 line:-2
首先在app的早期开始规划
是很重要的


706
00:36:53,447 --> 00:36:56,183 line:-2
不仅是针对于开发
而且是设计阶段也是一样的


707
00:36:59,586 --> 00:37:02,122 line:-2
一旦你知道了要本地化的语言
你就要计划在将来


708
00:37:02,322 --> 00:37:04,625 line:-1
扩展到国际化


709
00:37:05,125 --> 00:37:07,160 line:-1
尽你所能


710
00:37:07,761 --> 00:37:12,132 line:-2
像自动布局
堆栈视图和动态类型这样的技术


711
00:37:12,199 --> 00:37:14,067 line:-1
在你构建功能的过程中


712
00:37:14,134 --> 00:37:16,436 line:-1
非常容易采用


713
00:37:16,503 --> 00:37:19,740 line:-2
但是如果你完成了你的项目
并尝试回来使用它们


714
00:37:19,806 --> 00:37:22,109 line:-2
那么你可能必须
完全重新架构你的app


715
00:37:22,176 --> 00:37:23,544 line:-1
这将需要做大量的工作


716
00:37:25,579 --> 00:37:26,914 line:-1
（总结）


717
00:37:26,980 --> 00:37:28,682 line:-1
如果你正在做的事情让你觉得


718
00:37:28,749 --> 00:37:31,018 line:-2
“哦 是的
应该有一个API 对吧？”


719
00:37:31,518 --> 00:37:32,886 line:-1
它可能有一个API


720
00:37:33,253 --> 00:37:36,423 line:-2
所以当你要
格式化任何类型的数据时


721
00:37:36,490 --> 00:37:40,427 line:-1
一定要看看


722
00:37:40,594 --> 00:37:43,096 line:-1
是否有格式化程序类


723
00:37:43,163 --> 00:37:45,365 line:-2
在尝试破坏自己的工作成果前
一定要看看


724
00:37:45,432 --> 00:37:47,034 line:-1
确保查看


725
00:37:47,534 --> 00:37:49,670 line:-1
是否有任何处理文本的API


726
00:37:52,539 --> 00:37:56,376 line:-2
最后确保
在翻译过程中没有任何丢失


727
00:37:56,510 --> 00:37:59,313 line:-1
所以这里要注意的关键事情是


728
00:37:59,580 --> 00:38:02,983 line:-2
你的app的每一个本地化
都是一种独特的体验


729
00:38:03,483 --> 00:38:06,453 line:-1
并且你需要确保


730
00:38:06,520 --> 00:38:08,922 line:-2
你在开发语言中指定的意图
实际上已经传递到


731
00:38:09,289 --> 00:38:12,125 line:-1
你支持的所有其他语言


732
00:38:12,192 --> 00:38:14,428 line:-1
并且在此过程中不会丢失任何东西


733
00:38:14,494 --> 00:38:15,896 line:-2
（提前计划——边做边调整
标准自动指纹识别系统——不要迷失在翻译中）


734
00:38:15,963 --> 00:38:16,997 line:-1
非常感谢

