1
00:00:07,516 --> 00:00:15,500
［ 音乐 ］


2
00:00:22,516 --> 00:00:29,546
［ 掌声 ］


3
00:00:30,046 --> 00:00:30,906
>> 下午好    


4
00:00:30,906 --> 00:00:32,576
欢迎来到   


5
00:00:32,576 --> 00:00:33,536
UICollectionView 之旅    


6
00:00:34,336 --> 00:00:35,556
我是 Steve Breen 我    


7
00:00:35,556 --> 00:00:36,726
把这个放在这 我是   


8
00:00:36,726 --> 00:00:38,686
UIKit 团队的一名结构工程师   


9
00:00:39,766 --> 00:00:41,516
今天舞台上除了我  


10
00:00:41,516 --> 00:00:42,896
还有我的同事 Mohammed    


11
00:00:42,896 --> 00:00:45,636
Jisrawi 他也是 UIKit 团队的     


12
00:00:48,906 --> 00:00:49,836
所以今天我们将做    


13
00:00:49,836 --> 00:00:50,936
一些有点不同的事    


14
00:00:51,516 --> 00:00:52,966
我们从我们的设计师 Breanka［ 音译 ］   


15
00:00:52,966 --> 00:00:54,296
中获得了一些规格         


16
00:00:54,296 --> 00:00:55,496
我们将用这些规格建立一个 App      


17
00:00:56,006 --> 00:00:58,876
这将会应用到 UICollectionView     


18
00:00:58,876 --> 00:00:59,756
的许多功能当中     


19
00:01:00,156 --> 00:01:02,086
现在 当我们完成建立   


20
00:01:02,086 --> 00:01:03,916
我们的 App 需要的所有工作   


21
00:01:03,916 --> 00:01:05,266
我们将接触到     


22
00:01:05,266 --> 00:01:08,616
广泛的话题和 UICollectionView 有关 包括   


23
00:01:08,886 --> 00:01:11,606
布局 更新和动画   


24
00:01:12,356 --> 00:01:14,026
所以我们要涉及很多方面     


25
00:01:14,026 --> 00:01:15,326
让我们直接进入正题吧  


26
00:01:17,116 --> 00:01:19,106
好 所以这是我们从设计师那里得到   


27
00:01:19,106 --> 00:01:20,526
的第一个规格   


28
00:01:20,716 --> 00:01:21,916
看起来像 FriendFeed   


29
00:01:21,916 --> 00:01:22,406
想象一下    


30
00:01:22,406 --> 00:01:24,336
一个很小的柱状布局   


31
00:01:24,996 --> 00:01:28,826
看起来很简单  


32
00:01:28,826 --> 00:01:28,976
好   


33
00:01:29,076 --> 00:01:30,086
好 这看起来很棒   


34
00:01:30,526 --> 00:01:31,526
所以我们看到了这个  


35
00:01:31,626 --> 00:01:33,296
看起来很棒的花式镶嵌布局   


36
00:01:33,446 --> 00:01:34,786
这正是我们的    


37
00:01:34,786 --> 00:01:35,436
FriendFeed 的内容       


38
00:01:36,176 --> 00:01:37,966
好的 Mohammed 既然你  


39
00:01:37,966 --> 00:01:38,826
将要为我们写所有  


40
00:01:38,826 --> 00:01:39,936
代码 快速教我们  


41
00:01:39,936 --> 00:01:41,806
怎样使用这些功能   


42
00:01:41,806 --> 00:01:42,476
你设计这些的想法    


43
00:01:42,516 --> 00:01:43,046
是什么    


44
00:01:43,256 --> 00:01:44,096
>> 你知道的 我是    


45
00:01:44,096 --> 00:01:45,526
第一次看到这些 但是


46
00:01:45,716 --> 00:01:47,346
它们看起来都是不错的 CollectionView   


47
00:01:47,346 --> 00:01:48,096
候选人  


48
00:01:48,166 --> 00:01:49,186
我认为用这个有


49
00:01:49,186 --> 00:01:50,146
很多乐趣   


50
00:01:50,146 --> 00:01:50,956
>> 好的 这看起来很棒  


51
00:01:51,716 --> 00:01:52,746
好   


52
00:01:52,746 --> 00:01:55,626
所以在我们钻研代码   


53
00:01:55,626 --> 00:01:56,686
Mohammed 开始带领我们  


54
00:01:56,686 --> 00:01:58,566
浏览之前 需要  


55
00:01:58,786 --> 00:02:00,196
涉及三个关于 CollectionView 我们  


56
00:02:00,196 --> 00:02:01,596
要理解的三个概念 


57
00:02:01,596 --> 00:02:02,766
然后再钻研代码   


58
00:02:02,766 --> 00:02:04,236
让我们开始吧 我们


59
00:02:04,236 --> 00:02:05,896
将要谈论布局   


60
00:02:06,006 --> 00:02:09,936
数据源和委托  


61
00:02:10,036 --> 00:02:11,496
好的 所以 首先让我们   


62
00:02:11,496 --> 00:02:13,086
谈论一些关于布局的事情     


63
00:02:13,646 --> 00:02:15,566
如果你第一次 


64
00:02:15,566 --> 00:02:16,706
开始研究 UICollectionView 的定义 


65
00:02:16,706 --> 00:02:18,876
而且你对  


66
00:02:18,876 --> 00:02:20,546
UITableView 很熟悉 


67
00:02:20,546 --> 00:02:21,716
你会立马注意到在


68
00:02:21,716 --> 00:02:22,936
API 中有很多熟悉的地方 


69
00:02:22,936 --> 00:02:25,676
你有一个委托和一个数据源  


70
00:02:25,676 --> 00:02:26,686
所有这些看起来都很 


71
00:02:26,686 --> 00:02:28,856
熟悉 但是这个布局 


72
00:02:28,856 --> 00:02:30,796
概念很独特  


73
00:02:30,846 --> 00:02:32,306
而且不同于   


74
00:02:32,306 --> 00:02:33,176
UICollectionView   


75
00:02:33,176 --> 00:02:34,146
你可以把它看做 UICollectionView   


76
00:02:34,146 --> 00:02:35,656
的超能力         


77
00:02:36,846 --> 00:02:38,146
它允许 CollectionView   


78
00:02:38,146 --> 00:02:39,746
从内容中抽象出   


79
00:02:39,746 --> 00:02:40,936
与内容本身分离的     


80
00:02:41,336 --> 00:02:43,326
视觉安排    


81
00:02:44,416 --> 00:02:45,816
布局是所有关于  


82
00:02:46,146 --> 00:02:47,216
内容安排在哪里的事情   


83
00:02:48,946 --> 00:02:52,206
现在 每个单独的项都是由   


84
00:02:52,206 --> 00:02:53,046
UICollectionView 的


85
00:02:53,046 --> 00:02:54,066
布局属性  


86
00:02:54,066 --> 00:02:56,646
指定 比如像  


87
00:02:56,646 --> 00:02:59,116
界限 中心和帧这样的属性   


88
00:02:59,656 --> 00:03:00,716
你可以把它看做一套


89
00:03:00,716 --> 00:03:02,566
你可以使用的特性 用来定义 


90
00:03:02,566 --> 00:03:03,866
这些可以展示的项目


91
00:03:03,896 --> 00:03:06,206
你甚至可以自定义它们 通过


92
00:03:06,206 --> 00:03:07,886
打印你的 UICollectionView 布局 


93
00:03:07,886 --> 00:03:08,826
属性中的子类     


94
00:03:08,826 --> 00:03:10,676
把这些都包含在你的  


95
00:03:10,676 --> 00:03:11,546
设计当中    


96
00:03:12,876 --> 00:03:14,996
好 所以当用户


97
00:03:14,996 --> 00:03:16,496
滚动浏览屏幕上的


98
00:03:16,496 --> 00:03:19,636
内容 布局被认为是不能改变的  


99
00:03:20,266 --> 00:03:22,186
现在如果你需要改变这个 


100
00:03:22,186 --> 00:03:23,716
比如你将要 


101
00:03:23,716 --> 00:03:24,916
改变一个布局的外观


102
00:03:24,916 --> 00:03:26,616
你要使用  


103
00:03:26,616 --> 00:03:28,116
无效化机制 


104
00:03:28,116 --> 00:03:29,256
Mohammed 将会带领我们


105
00:03:29,256 --> 00:03:31,526
快速浏览一下   


106
00:03:31,526 --> 00:03:33,936
好的 现在 关于布局是一个


107
00:03:33,996 --> 00:03:35,066
单独的抽象的很棒的一件事是


108
00:03:35,066 --> 00:03:37,226
我们可以


109
00:03:37,226 --> 00:03:38,306
从一个布局转换到另一个


110
00:03:38,306 --> 00:03:40,616
布局中 当你在不同布局中


111
00:03:40,616 --> 00:03:42,026
移动 会有一个动画效果   


112
00:03:42,026 --> 00:03:44,526
布局 A 不必    


113
00:03:44,526 --> 00:03:46,156
知道任何关于  


114
00:03:46,446 --> 00:03:47,076
布局 B 的事情   


115
00:03:47,286 --> 00:03:48,056
它们只是    


116
00:03:48,056 --> 00:03:49,526
声明这个布局将变成什么样子


117
00:03:49,526 --> 00:03:50,396
然后转换就发生了


118
00:03:51,986 --> 00:03:54,926
好 所以 CollectionViewLayout 是  


119
00:03:54,926 --> 00:03:56,656
一个抽象类别 正因如此 


120
00:03:56,656 --> 00:03:58,686
这意味着不能直接


121
00:03:58,686 --> 00:04:00,976
被使用 但是 CollectionViewLayout 的    


122
00:04:00,976 --> 00:04:02,726
子类可以直接被使用   


123
00:04:04,036 --> 00:04:05,646
幸运的是 我们会提供一个 


124
00:04:06,556 --> 00:04:08,896
UICollectionViewFlowLayout   


125
00:04:08,896 --> 00:04:10,566
如果你之前用过 CollectionView    


126
00:04:10,566 --> 00:04:11,376
你可能对它很熟悉    


127
00:04:11,986 --> 00:04:13,736
现在 CollectionViewLayout 上


128
00:04:13,736 --> 00:04:15,026
有很多定制点  


129
00:04:15,026 --> 00:04:17,906
包括一些我们一会儿要讲的


130
00:04:17,906 --> 00:04:19,666
特性 但是你


131
00:04:19,666 --> 00:04:21,176
也可以使用委托进行


132
00:04:21,176 --> 00:04:23,646
自定义 我们马上   


133
00:04:23,646 --> 00:04:24,616
会谈论到 CollectionViewDelegate   


134
00:04:24,616 --> 00:04:27,656
但是 CollectionViewFlowLayout 将会    


135
00:04:28,216 --> 00:04:30,156
指定一些额外的东西


136
00:04:30,156 --> 00:04:32,026
扩展到 CollectionViewDelegate   


137
00:04:34,496 --> 00:04:35,986
好的 所以 Flow 是关于什么的  


138
00:04:35,986 --> 00:04:37,746
它是一个基于线的布局


139
00:04:37,746 --> 00:04:39,946
系统 正因如此


140
00:04:39,946 --> 00:04:41,796
它可以包括多种


141
00:04:41,796 --> 00:04:43,666
你可能享受到的不同设计


142
00:04:48,286 --> 00:04:49,176
让我们浏览一下


143
00:04:49,176 --> 00:04:51,406
解释什么是基于线的系统


144
00:04:51,476 --> 00:04:54,416
的最好方法是像这样


145
00:04:54,416 --> 00:04:55,856
给出一个例子 让我们开始吧 


146
00:04:56,556 --> 00:04:57,936
好的 所以在这我们可以看到 我们得到了


147
00:04:57,936 --> 00:04:59,486
一个垂直的滚动集合


148
00:04:59,486 --> 00:05:01,396
视图 我们将模拟  


149
00:05:01,396 --> 00:05:02,786
Flow 布局是什么样的


150
00:05:02,786 --> 00:05:04,086
当它展示出这个内容时


151
00:05:04,606 --> 00:05:04,936
好的 


152
00:05:05,866 --> 00:05:07,806
这是我们的第一个项目 我们


153
00:05:07,806 --> 00:05:10,036
在顶部的前沿开始


154
00:05:10,416 --> 00:05:12,126
我们开始沿着一条线


155
00:05:12,126 --> 00:05:14,326
布局我们的项目


156
00:05:14,326 --> 00:05:15,216
现在看这条线


157
00:05:15,216 --> 00:05:18,006
这条线和滚动轴垂直


158
00:05:18,006 --> 00:05:20,126
我们垂直滚动 所以这个线是水平的 


159
00:05:21,366 --> 00:05:22,796
好了 现在注意到


160
00:05:22,796 --> 00:05:24,266
在这条线的空白处


161
00:05:24,266 --> 00:05:25,646
填满了项目 我们将


162
00:05:25,756 --> 00:05:28,046
下降到另一条线 


163
00:05:28,046 --> 00:05:29,696
继续布局我们的内容


164
00:05:30,216 --> 00:05:32,306
最终 我们落到了  


165
00:05:32,306 --> 00:05:35,366
最后一条线 我们得到了所有的内容


166
00:05:36,756 --> 00:05:38,596
现在如果我进行一些指示
	
00:05:38,596 --> 00:05:39,976
来突出显示


167
00:05:39,976 --> 00:05:41,556
这些水平线的地方


168
00:05:42,496 --> 00:05:44,926
让我们谈谈一些已有的定义 


169
00:05:45,206 --> 00:05:46,586
作为自定义 Flow 的方法  


170
00:05:47,306 --> 00:05:49,986
首先是行间距的概念 


171
00:05:50,906 --> 00:05:52,076
正如你在这看到的箭头 


172
00:05:52,076 --> 00:05:53,586
行间距将要成为


173
00:05:53,586 --> 00:05:55,536
这些水平线之间的间距


174
00:05:56,676 --> 00:06:00,166
相似的是 项目之间的间距 


175
00:06:00,166 --> 00:06:03,426
指的是这些沿着这个布局线 项目之间的间距


176
00:06:03,616 --> 00:06:06,176
在 Flow 布局中我们有两个属性 让你指定


177
00:06:06,496 --> 00:06:07,996
他们之间的最小值


178
00:06:08,536 --> 00:06:11,006
好的 所以让我们巩固一下


179
00:06:11,006 --> 00:06:13,736
我们的直觉 然后旋转整个画面


180
00:06:13,736 --> 00:06:15,786
让我们开始于  


181
00:06:15,786 --> 00:06:17,276
顶部的前沿 


182
00:06:17,956 --> 00:06:20,756
现在 这个是水平滚动 好了 所以我们


183
00:06:20,756 --> 00:06:24,496
将要画一个垂直的布局线 


184
00:06:24,496 --> 00:06:25,606
当我们到达这个区域的底部 


185
00:06:25,606 --> 00:06:27,716
我们就填满了这条线 回到顶部   


186
00:06:28,646 --> 00:06:30,676
好的 这个图案现在非常熟悉了


187
00:06:31,526 --> 00:06:32,196
继续 


188
00:06:32,196 --> 00:06:33,386
这是我们的所有内容


189
00:06:34,116 --> 00:06:36,236
现在我们有了垂直布局线 


190
00:06:36,926 --> 00:06:38,856
所以按照这个方向 我们的


191
00:06:39,226 --> 00:06:40,596
行间距是这样的 


192
00:06:41,876 --> 00:06:44,426
我们的项目之间的间距是这样的


193
00:06:45,266 --> 00:06:46,186
当你在使用 Flow 布局时


194
00:06:46,186 --> 00:06:47,086
记住这个很关键


195
00:06:48,426 --> 00:06:49,636
好的 所以这就是布局


196
00:06:50,366 --> 00:06:52,316
让我们谈论一点


197
00:06:52,316 --> 00:06:54,996
数据来源 如果你使用     


198
00:06:54,996 --> 00:06:56,746
TableView 这个应该看起来


199
00:06:56,746 --> 00:06:57,486
很熟悉


200
00:06:57,486 --> 00:06:58,606
这是一个很简单的图案


201
00:06:59,436 --> 00:07:00,936
他们分享相似的 API   


202
00:07:00,936 --> 00:07:03,416
好 所以如果布局是   


203
00:07:03,416 --> 00:07:05,766
关于内容摆放在哪里的所有事情


204
00:07:06,276 --> 00:07:07,756
数据源就是内容是什么


205
00:07:07,916 --> 00:07:08,986
内容本身是什么


206
00:07:09,836 --> 00:07:11,816
有三种核心办法以供思考 


207
00:07:11,816 --> 00:07:12,746
第一个是可选的


208
00:07:12,846 --> 00:07:13,686
在 CollectionView 中的许多部分 


209
00:07:13,686 --> 00:07:16,026
如果你不提供这个  


210
00:07:16,026 --> 00:07:18,086
我们就会认为你有一个  


211
00:07:19,336 --> 00:07:21,446
相似的是 我们在这一部分


212
00:07:21,446 --> 00:07:24,556
有很多项目 这将会告诉你


213
00:07:24,556 --> 00:07:25,346
每个单独部分的项目数量


214
00:07:25,346 --> 00:07:26,986
因为它们可以有所有不同的项目


215
00:07:27,536 --> 00:07:29,026
最后一个 出售


216
00:07:29,026 --> 00:07:30,206
项目索引路径就是


217
00:07:30,206 --> 00:07:31,546
你为你的客户提供


218
00:07:31,546 --> 00:07:32,836
你将要展示的真实内容      


219
00:07:33,506 --> 00:07:35,686
好的 这就是数据源


220
00:07:36,076 --> 00:07:37,736
好的 在我们和 Mohammed 钻研


221
00:07:37,736 --> 00:07:38,846
代码之前 我们将要谈论的 


222
00:07:39,086 --> 00:07:42,086
三个话题中的最后一个是委托 


223
00:07:42,726 --> 00:07:45,786
好的 所以使用委托是可选的


224
00:07:47,226 --> 00:07:48,576
现在 CollectionView 是   


225
00:07:48,576 --> 00:07:50,036
UIScrollView 中的一个子类    


226
00:07:50,476 --> 00:07:52,256
所以我们使用   


227
00:07:52,686 --> 00:07:54,276
由 ScrollView 超类


228
00:07:54,276 --> 00:07:56,696
提供的相同委托 但是我们扩展它 


229
00:07:57,526 --> 00:07:58,646
所以如果你需要修改


230
00:07:58,906 --> 00:08:00,116
滚动行为 你可以


231
00:08:00,116 --> 00:08:01,426
在相同的委托中来进行


232
00:08:01,426 --> 00:08:03,826
也可以使用  


233
00:08:03,826 --> 00:08:06,216
一些 UICollectionViewDelegate 中的   


234
00:08:06,216 --> 00:08:08,496
方法 提供一些细粒度控制


235
00:08:08,616 --> 00:08:11,176
当用户和你的内容交互时


236
00:08:11,176 --> 00:08:12,686
控制高亮和选中


237
00:08:13,206 --> 00:08:15,796
我们也会进入一个 API  


238
00:08:15,796 --> 00:08:17,086
让你知道 有一些东西  


239
00:08:17,086 --> 00:08:18,016
出现在屏幕上   


240
00:08:18,016 --> 00:08:19,426
WillDisplayItem 和        


241
00:08:19,426 --> 00:08:20,636
DidEndDisplayingItem      


242
00:08:21,116 --> 00:08:24,816
好的 所以在我们钻研代码  


243
00:08:24,816 --> 00:08:26,196
开始 UICollectionView 之前   


244
00:08:26,196 --> 00:08:28,156
有三个重要概念  


245
00:08:28,266 --> 00:08:30,936
我们需要谈论一下    


246
00:08:30,936 --> 00:08:32,775
所以让我们切换到  


247
00:08:32,775 --> 00:08:34,226
Mohammed 的 Dev Box     


248
00:08:34,496 --> 00:08:35,395
让他向我们展示下它是怎么工作的    


249
00:08:35,556 --> 00:08:35,846
Mohammed   


250
00:08:35,846 --> 00:08:38,746
>> 好的 所以   


251
00:08:38,746 --> 00:08:40,596
两个列布局屏幕中的第一个   


252
00:08:40,596 --> 00:08:42,706
就是使用 CollectionViewFlowLayout 的  


253
00:08:42,706 --> 00:08:44,626
一个绝佳案例  


254
00:08:45,106 --> 00:08:46,376
我们可以完成 


255
00:08:46,376 --> 00:08:47,896
我们需要的任何事情


256
00:08:47,896 --> 00:08:49,996
这也会是我们 


257
00:08:50,106 --> 00:08:52,036
开始使用 UICollectionView 的一种很好方式  


258
00:08:54,596 --> 00:08:56,686
所以现在当我们可以用一个 Flow 布局


259
00:08:56,686 --> 00:08:58,896
完成整个设计目标时


260
00:08:58,896 --> 00:09:00,216
我实际上


261
00:09:00,216 --> 00:09:01,036
是来到了 CollectionViewFlowLayout 的   


262
00:09:01,036 --> 00:09:02,566
子类因为  


263
00:09:02,566 --> 00:09:03,346
我们将要再做一些


264
00:09:03,346 --> 00:09:04,576
额外的定制化服务 


265
00:09:04,756 --> 00:09:06,596
所以我将要开始


266
00:09:07,646 --> 00:09:10,436
创立一个我的


267
00:09:10,436 --> 00:09:12,066
ColumnFlowLayout 分类的实例  


268
00:09:12,066 --> 00:09:12,916
我准备好了


269
00:09:13,756 --> 00:09:15,276
我将要使用这个实例


270
00:09:15,276 --> 00:09:17,276
来建立我的 CollectionView  


271
00:09:17,276 --> 00:09:18,946
我将要移动这个 


272
00:09:18,946 --> 00:09:19,956
CollectionView 并且  


273
00:09:19,956 --> 00:09:21,576
设置一些视图属性 比如


274
00:09:21,576 --> 00:09:23,356
自动调整掩码 背景


275
00:09:23,356 --> 00:09:25,356
颜色 因为它是  


276
00:09:25,356 --> 00:09:26,876
ScrollView 我也可以设置   


277
00:09:26,876 --> 00:09:28,296
一些 ScrollView 的属性


278
00:09:28,296 --> 00:09:29,406
这一切只是为了让它


279
00:09:29,406 --> 00:09:31,126
看起来和感受起来就像我想为


280
00:09:31,276 --> 00:09:33,086
大家在我们的 App 上所呈现的那样


281
00:09:33,426 --> 00:09:34,786
在把 CollectionView 添加到  


282
00:09:34,786 --> 00:09:36,596
我的视图层以后 我将要


283
00:09:36,596 --> 00:09:38,816
注册我的 PersonCell 类    


284
00:09:38,816 --> 00:09:40,706
在 CollectionView 上使用独特的


285
00:09:40,706 --> 00:09:42,536
标识符 所以我们可以


286
00:09:42,536 --> 00:09:45,126
在 App 中设计单元格    


287
00:09:45,126 --> 00:09:46,696
然后我将要建立   


288
00:09:46,696 --> 00:09:47,866
这个 View Controller 作为这个


289
00:09:47,866 --> 00:09:49,586
CollectionView 的数据来源 所以 


290
00:09:49,586 --> 00:09:51,186
我们可以提供给它一些信息


291
00:09:51,186 --> 00:09:52,496
关于将要展示多少单元格  


292
00:09:52,496 --> 00:09:54,616
以及在它的单元格上将要


293
00:09:54,616 --> 00:09:56,146
展示什么样的数据


294
00:09:56,516 --> 00:09:59,346
接下来我将要把它设置为


295
00:09:59,346 --> 00:10:00,956
委托 所以我们可以


296
00:10:00,956 --> 00:10:02,066
处理单元格的选择


297
00:10:02,986 --> 00:10:04,196
所以既然我们已经建立起来这些 


298
00:10:04,196 --> 00:10:05,976
我们实际上需要遵循


299
00:10:05,976 --> 00:10:07,216
这两种协议 


300
00:10:07,876 --> 00:10:10,036
所以让我们先遵循


301
00:10:10,036 --> 00:10:12,606
数据源 并且我们有


302
00:10:12,676 --> 00:10:14,816
两种要求我们执行的方法


303
00:10:14,946 --> 00:10:17,906
这些当中的第一个是


304
00:10:17,976 --> 00:10:20,656
Section 中的项目数 


305
00:10:20,656 --> 00:10:22,696
回到我们人口布阵


306
00:10:22,816 --> 00:10:23,926
当中的人数或者项目数


307
00:10:23,926 --> 00:10:26,956
来展示我们的


308
00:10:26,956 --> 00:10:27,996
数据模型体 


309
00:10:28,666 --> 00:10:30,586
第二个我们需要执行的


310
00:10:30,586 --> 00:10:31,566
方法是   


311
00:10:32,106 --> 00:10:34,456
CellForItemAtIndexPath    


312
00:10:34,456 --> 00:10:36,226
我们可以从 CollectionView 中脱离 


313
00:10:36,226 --> 00:10:37,726
单元格队列使用我们独特的


314
00:10:37,726 --> 00:10:41,106
标识符 穿过一个  


315
00:10:41,106 --> 00:10:42,526
从我们的人口布阵脱离出去的


316
00:10:42,526 --> 00:10:43,976
人和物体 来到单元格展示  


317
00:10:44,136 --> 00:10:47,126
我们的数据 然后  


318
00:10:47,126 --> 00:10:48,576
回到单元格    


319
00:10:50,426 --> 00:10:52,566
事情到这圆满完成    


320
00:10:52,566 --> 00:10:54,686
我们接下来只需从  


321
00:10:54,756 --> 00:10:56,396
委托协议中挑选一种 


322
00:10:56,396 --> 00:10:58,066
可供选择的方法 所以  


323
00:10:58,066 --> 00:10:58,836
我们可以处理选择   


324
00:10:59,336 --> 00:11:00,826
所以我们将要添加   


325
00:11:00,926 --> 00:11:04,226
DidSelectItemAtIndexPath    


326
00:11:04,226 --> 00:11:06,186
在其中我们将用示例


327
00:11:06,186 --> 00:11:07,716
讲解 FeedView 控制器这  


328
00:11:07,716 --> 00:11:09,246
将要成为我们的第二屏幕 如果


329
00:11:09,246 --> 00:11:10,056
我们没有一个实例    


330
00:11:10,056 --> 00:11:11,886
接下来我们需要


331
00:11:12,136 --> 00:11:14,406
穿过一个人 所以我们


332
00:11:14,406 --> 00:11:16,566
知道要展示谁的图像


333
00:11:17,116 --> 00:11:19,386
接下来我们要把它放到  


334
00:11:19,386 --> 00:11:20,366
我们的导航控制器当中    


335
00:11:21,256 --> 00:11:24,136
好的 所以让我们建立这个 


336
00:11:24,176 --> 00:11:27,006
然后转换到模拟器中来看看 


337
00:11:29,256 --> 00:11:29,976
好的


338
00:11:30,516 --> 00:11:33,606
［ 掌声和欢呼声 ］   


339
00:11:34,106 --> 00:11:35,836
好的 所以可以看到


340
00:11:35,836 --> 00:11:37,446
屏幕上有了我们的 CollectionView 


341
00:11:37,546 --> 00:11:39,816
我们也有了一些单元格     


342
00:11:39,816 --> 00:11:41,196
你可以看到它们 虽然它们  


343
00:11:41,196 --> 00:11:42,096
是扁平的 


344
00:11:42,146 --> 00:11:44,026
它们的大小并不合适 所以


345
00:11:44,026 --> 00:11:45,116
我们将对它们做一些


346
00:11:45,116 --> 00:11:46,786
我们认为我们需要做的 


347
00:11:46,786 --> 00:11:47,656
自定义   


348
00:11:47,996 --> 00:11:51,066
所以让我们回到 Xcode 中   


349
00:11:51,066 --> 00:11:55,916
让我们在这打开我们的  


350
00:11:55,996 --> 00:11:59,906
子集列 我们之前放在一起的 


351
00:12:00,046 --> 00:12:01,936
ColumnFlowLayout Class    


352
00:12:03,106 --> 00:12:06,536
让我们看看我们


353
00:12:06,536 --> 00:12:07,176
在这需要做什么 


354
00:12:07,176 --> 00:12:10,236
所以我早已准备了


355
00:12:10,236 --> 00:12:12,916
一种重写布局存根的方法 


356
00:12:13,506 --> 00:12:15,756
现在不论什么时候布局无效   


357
00:12:15,756 --> 00:12:17,266
就调用 UICollectionView LayoutsPrepare   


358
00:12:22,636 --> 00:12:24,646
只要 CollectionView 的边界大小改变


359
00:12:24,646 --> 00:12:27,336
我们的布局就无效了


360
00:12:27,336 --> 00:12:29,626
所以如果我们的 App 在手机上旋转  


361
00:12:29,626 --> 00:12:32,446
或者我们的 App 在 iPad 上重新调整大小 


362
00:12:33,996 --> 00:12:35,976
所以在这里进行自定义 


363
00:12:35,976 --> 00:12:39,366
很棒 这种自定义把


364
00:12:39,366 --> 00:12:41,506
CollectionView 考虑到其中了  


365
00:12:41,506 --> 00:12:42,986
在我们的例子中 我们想要我们的单元格     


366
00:12:42,986 --> 00:12:45,456
拥有像 CollectionView 一样的  


367
00:12:45,456 --> 00:12:46,756
很多功能    


368
00:12:47,266 --> 00:12:48,886
我们也可以让      


369
00:12:48,886 --> 00:12:51,236
CollectionView 知道我们想要  


370
00:12:51,236 --> 00:12:53,146
我们的项目变多大 通过


371
00:12:53,146 --> 00:12:54,436
指明项目的大小属性  


372
00:12:54,516 --> 00:12:55,876
所以我将要继续 


373
00:12:55,876 --> 00:12:56,296
在这里做这个 


374
00:12:57,426 --> 00:12:58,586
所以我要把我的   


375
00:12:58,586 --> 00:13:01,086
CollectionView 的项目大小  


376
00:13:01,276 --> 00:13:03,586
设置为 CG 大小 宽度也设置成  


377
00:13:03,586 --> 00:13:04,886
CollectionView 的边缘宽度 


378
00:13:04,886 --> 00:13:07,206
插入布局边缘 


379
00:13:07,206 --> 00:13:08,996
我们将要把它的高度 


380
00:13:08,996 --> 00:13:10,946
设置成 70 点 


381
00:13:10,946 --> 00:13:12,736
以此来匹配我们的设计  


382
00:13:14,046 --> 00:13:14,856
既然我们已经到这了 


383
00:13:14,856 --> 00:13:15,746
我将要在这做  


384
00:13:15,836 --> 00:13:17,536
一些不同的事情  


385
00:13:17,536 --> 00:13:18,816
使它们看起来美观 


386
00:13:19,296 --> 00:13:21,326
我要在顶部  


387
00:13:21,326 --> 00:13:22,816
填充一个 sectionInset   


388
00:13:22,896 --> 00:13:24,526
来匹配我们的项目内  


389
00:13:24,646 --> 00:13:26,636
间距 我将要把这个布局的  


390
00:13:26,776 --> 00:13:28,216
sectionInsertReference     


391
00:13:28,216 --> 00:13:30,106
属性设置到安全区域   


392
00:13:30,106 --> 00:13:32,256
所以一切都整齐地


393
00:13:32,256 --> 00:13:33,846
安置在 CollectionView 的  


394
00:13:33,846 --> 00:13:34,956
安全区域内   


395
00:13:35,616 --> 00:13:37,526
好的 让我们再一次  


396
00:13:37,526 --> 00:13:39,546
回到模拟器中 看看 


397
00:13:39,546 --> 00:13:40,746
我们正确构建的


398
00:13:40,746 --> 00:13:41,546
布局长什么样子 


399
00:13:41,816 --> 00:13:42,086
好的 


400
00:13:43,656 --> 00:13:44,926
这看起来很棒 


401
00:13:44,926 --> 00:13:47,056
这看起来就像我们的规格


402
00:13:47,056 --> 00:13:48,626
我认为我们的设计者将会非常开心


403
00:13:48,626 --> 00:13:52,316
如果我们把它旋转成横屏 


404
00:13:52,396 --> 00:13:53,426
我们可以看到我们的单元格大小很合适


405
00:13:53,426 --> 00:13:54,866
所以我们知道我们的


406
00:13:55,206 --> 00:13:56,956
无效代码


407
00:13:56,956 --> 00:13:58,166
随时准备再次被调用 


408
00:13:59,756 --> 00:14:01,176
现在一切都准备好了


409
00:14:01,176 --> 00:14:04,316
你可能会想 我们并没有做到最好


410
00:14:04,316 --> 00:14:07,976
它看起来没有非常棒


411
00:14:08,486 --> 00:14:09,736
我们可能想要做一些


412
00:14:09,736 --> 00:14:10,696
更有趣的事情 比如


413
00:14:10,696 --> 00:14:12,216
展示多列布局


414
00:14:12,216 --> 00:14:14,806
因为我们有了一些可获得的间距 


415
00:14:15,336 --> 00:14:16,936
现在流式布局使这个


416
00:14:16,936 --> 00:14:17,876
变得如此简单


417
00:14:18,166 --> 00:14:19,926
如果你记得之前 Steve 的解释  


418
00:14:19,926 --> 00:14:21,366
流式布局是怎样


419
00:14:21,486 --> 00:14:22,666
安排它的布局


420
00:14:22,746 --> 00:14:24,536
流式布局会在


421
00:14:24,536 --> 00:14:26,656
移动到下一条线之前


422
00:14:26,656 --> 00:14:29,946
安装尽可能多的项目 


423
00:14:30,526 --> 00:14:33,396
所以使用这个 我们可以


424
00:14:33,876 --> 00:14:36,086
搞清楚布局


425
00:14:36,086 --> 00:14:37,626
如果我们改变我们的项目大小


426
00:14:37,626 --> 00:14:38,826
我们就可以获得很多列


427
00:14:39,506 --> 00:14:41,996
所以如果我们回到 Xcode 中  


428
00:14:41,996 --> 00:14:44,446
回到我们这里的布局


429
00:14:44,446 --> 00:14:46,986
如果我们仅仅改变我们计算项目


430
00:14:46,986 --> 00:14:47,976
大小的方式 


431
00:14:47,976 --> 00:14:50,886
所以我将要移除


432
00:14:50,886 --> 00:14:52,156
这个 将要


433
00:14:52,906 --> 00:14:54,216
用一些和数学相关的东西


434
00:14:54,296 --> 00:14:55,336
来替代它


435
00:14:56,336 --> 00:14:57,926
所以我将要开始使用


436
00:14:58,006 --> 00:15:00,536
与我之前获得的相同的可用宽度


437
00:15:00,536 --> 00:15:02,466
这是由边距插入的边界  


438
00:15:02,466 --> 00:15:05,546
和一些对最小列宽的


439
00:15:05,546 --> 00:15:07,726
任意定义


440
00:15:07,856 --> 00:15:11,156
是 300 点   


441
00:15:11,696 --> 00:15:14,106
然后取这些数值中的


442
00:15:14,106 --> 00:15:15,796
两个数值 使用它们


443
00:15:15,796 --> 00:15:17,476
来计算一个我认为可以安装


444
00:15:17,476 --> 00:15:18,986
在可用空间中的


445
00:15:18,986 --> 00:15:21,146
最大列值


446
00:15:21,146 --> 00:15:23,096
我将使用这个数值来除以


447
00:15:23,096 --> 00:15:24,536
可用宽度来


448
00:15:24,536 --> 00:15:26,546
计算出一个最佳单元宽度


449
00:15:26,546 --> 00:15:29,816
这可能会超过 300 点 


450
00:15:30,626 --> 00:15:32,346
我将要把这个数值带到


451
00:15:32,346 --> 00:15:33,636
我现在正在使用的作为我的项目


452
00:15:33,636 --> 00:15:33,966
大小的 CT 大小中    


453
00:15:34,886 --> 00:15:37,166
好的 所以现在让我们再次回到


454
00:15:37,166 --> 00:15:39,546
我们的模拟器中 看看我们


455
00:15:39,546 --> 00:15:40,676
更新的布局是什么样子


456
00:15:42,246 --> 00:15:43,806
好的 所以一切都一模一样 


457
00:15:43,806 --> 00:15:44,466
我们没有打破它


458
00:15:44,736 --> 00:15:47,756
这是一个好的开始 如果我们


459
00:15:47,756 --> 00:15:50,146
想要横过来


460
00:15:50,146 --> 00:15:51,416
我们就会有多列并排


461
00:15:51,536 --> 00:15:52,136
这正是我们想要的   


462
00:15:53,436 --> 00:15:55,186
你怎么想呢 Steve   


463
00:15:55,656 --> 00:15:56,306
>> 看起来很棒   


464
00:15:56,306 --> 00:15:57,596
我们得到了一个很棒的可改变的


465
00:15:57,596 --> 00:15:58,706
柱形布局  


466
00:15:58,706 --> 00:15:59,726
没有花太多力气


467
00:16:00,266 --> 00:16:00,436
>> 没有   


468
00:16:00,536 --> 00:16:01,486
>> 接下来我们的设计是什么呢  


469
00:16:02,036 --> 00:16:02,906
>> 好的 既然我们已经轻松  


470
00:16:02,906 --> 00:16:04,366
进入我们的朋友列表中


471
00:16:04,366 --> 00:16:05,446
现在该开始


472
00:16:05,446 --> 00:16:07,846
想想 


473
00:16:07,846 --> 00:16:08,306
App 的花式镶嵌布局了


474
00:16:08,336 --> 00:16:08,686
>> 好    


475
00:16:08,686 --> 00:16:09,566
很棒  


476
00:16:09,566 --> 00:16:09,676
>> 是的        


477
00:16:09,676 --> 00:16:10,816
>> 让我们回到  


478
00:16:10,816 --> 00:16:13,076
幻灯片 稍微  


479
00:16:13,076 --> 00:16:16,926
聊一聊   


480
00:16:17,136 --> 00:16:19,726
好的 让我们看一下


481
00:16:19,726 --> 00:16:21,686
这里的布局或者设计  


482
00:16:21,686 --> 00:16:22,506
看看我们可以做什么   


483
00:16:22,506 --> 00:16:23,816
所以我们的第一个意向 


484
00:16:23,816 --> 00:16:25,006
我不知道你的 但是我的是


485
00:16:25,006 --> 00:16:25,956
我能否用 Flow      


486
00:16:26,206 --> 00:16:27,216
我懂了 准备好了 


487
00:16:27,276 --> 00:16:28,036
让我们开始使用它  


488
00:16:29,256 --> 00:16:30,796
所以让我们简单看一下


489
00:16:30,796 --> 00:16:32,786
这个设计 看看 Flow 对于   


490
00:16:32,786 --> 00:16:33,946
我们来说是否有意义


491
00:16:34,966 --> 00:16:36,726
在这个特殊的区域有


492
00:16:36,726 --> 00:16:39,626
这三张照片 我将迅速放大          


493
00:16:40,276 --> 00:16:40,626
好   


494
00:16:41,756 --> 00:16:43,496
所以在现在这个例子中 


495
00:16:43,496 --> 00:16:45,206
我们左边有一张非常大的照片 


496
00:16:45,276 --> 00:16:47,656
右边有一个垂直的堆叠  


497
00:16:48,446 --> 00:16:49,836
所以在 Flow 领域


498
00:16:49,836 --> 00:16:50,886
因为它是基于线条的 我们将要


499
00:16:50,886 --> 00:16:52,446
把左边那个大一点的项目


500
00:16:53,076 --> 00:16:54,186
移动到下一个项目


501
00:16:54,186 --> 00:16:55,306
所在的地方 然后再安排


502
00:16:55,306 --> 00:16:57,386
另一个项目 然后再跳到


503
00:16:57,386 --> 00:16:58,116
下一条线中 


504
00:16:58,606 --> 00:16:59,686
但是我们没有完成 


505
00:16:59,686 --> 00:17:00,686
我们还要处理这个


506
00:17:00,686 --> 00:17:01,296
垂直的堆栈 


507
00:17:01,296 --> 00:17:03,056
所以这对于 Flow 来说  


508
00:17:03,056 --> 00:17:04,326
行不通 因为事实证明  


509
00:17:04,326 --> 00:17:07,226
它并不是一个真的基于线的布局   


510
00:17:09,796 --> 00:17:10,766
但是这个练习的经历


511
00:17:10,766 --> 00:17:12,205
还是有用的 所以 你知道


512
00:17:12,205 --> 00:17:13,566
让我们先开始 Flow 


513
00:17:15,096 --> 00:17:16,776
好的 所以在这个例子中 


514
00:17:16,776 --> 00:17:18,506
我们将要创建 我们自己的自定义布局


515
00:17:19,685 --> 00:17:20,796
我们有点害怕  


516
00:17:20,796 --> 00:17:21,876
不用怕 这并不复杂  


517
00:17:21,876 --> 00:17:23,925
我们已经有了四种基本方法


518
00:17:23,925 --> 00:17:25,356
来处理这个 我将要


519
00:17:25,356 --> 00:17:27,056
提出另外一种 


520
00:17:27,056 --> 00:17:28,276
让人自豪的方法


521
00:17:29,676 --> 00:17:31,566
好的 四种方法 让我们开始吧


522
00:17:32,836 --> 00:17:34,076
我想说的第一种方法


523
00:17:34,076 --> 00:17:36,346
关于 CollectionView 的内容大小     


524
00:17:37,306 --> 00:17:39,286
现在 在我们提到 CollectionView 是   


525
00:17:39,286 --> 00:17:40,736
UIScrollView 的一个子集之前回忆  


526
00:17:40,736 --> 00:17:42,126
一下 UIScrollView 的    


527
00:17:42,126 --> 00:17:44,036
一个特征就是     


528
00:17:44,036 --> 00:17:45,576
你有一个可视化区域和一个   


529
00:17:45,576 --> 00:17:47,636
很大的内容区域 并且你有一个  


530
00:17:47,636 --> 00:17:49,096
很棒的 iOS 体验 


531
00:17:49,096 --> 00:17:52,666
可以在其内部移动你的内容 所以


532
00:17:52,756 --> 00:17:53,896
CollectionView 需要知道怎样   


533
00:17:53,896 --> 00:17:55,396
告诉 ScrollView    


534
00:17:55,396 --> 00:17:56,836
我的内容有多大   


535
00:17:57,276 --> 00:17:59,856
好的 所以我们如何得到这个尺寸      


536
00:18:00,656 --> 00:18:01,986
想象一下一个长方形   


537
00:18:01,986 --> 00:18:03,546
包含这个布局将要


538
00:18:03,546 --> 00:18:04,646
为你的 CollectionView 定义


539
00:18:04,646 --> 00:18:06,196
所有内容  


540
00:18:06,626 --> 00:18:09,406
我们想要这样的大小


541
00:18:09,406 --> 00:18:11,596
好的 这就是 CollectionView     


542
00:18:11,596 --> 00:18:12,436
的内容大小       


543
00:18:13,556 --> 00:18:15,326
接下来我们有两种  


544
00:18:15,326 --> 00:18:18,246
提供布局属性的方法  


545
00:18:19,376 --> 00:18:20,516
第一种是  


546
00:18:20,516 --> 00:18:21,826
LayoutAttributesForElements（在   


547
00:18:21,826 --> 00:18:22,116
矩形中）                    


548
00:18:23,186 --> 00:18:24,606
现在这个被 CollectionView 定期调用 


549
00:18:24,606 --> 00:18:25,996
当用户第一次滚动浏览


550
00:18:25,996 --> 00:18:26,856
你的内容或者展示时


551
00:18:26,856 --> 00:18:30,916
它需要知道在屏幕上展示 什么


552
00:18:31,906 --> 00:18:33,966
所以这个查询是由一个几何区域构成的 


553
00:18:35,686 --> 00:18:38,166
好的 这是 API   


554
00:18:38,276 --> 00:18:39,596
LayoutAttributesForItem    


555
00:18:39,596 --> 00:18:42,046
AtIndexPath 你可以想象 


556
00:18:42,046 --> 00:18:43,366
它只是在寻找一个单独的项目  


557
00:18:43,496 --> 00:18:44,876
给我这个属性   


558
00:18:45,876 --> 00:18:47,416
好的 当 Mohammed 带着我们浏览的时候


559
00:18:47,416 --> 00:18:48,446
我们会看到更多东西


560
00:18:48,446 --> 00:18:50,116
但是对于这两个 API 来说


561
00:18:50,116 --> 00:18:52,936
需要注意的是 性能最重要


562
00:18:57,136 --> 00:18:58,956
好的 所以我们四个


563
00:18:59,136 --> 00:19:01,906
核心自定义布局子集中的第四个


564
00:19:01,976 --> 00:19:04,106
就是 Prepare 方法 


565
00:19:04,106 --> 00:19:05,396
现在 Mohammed 已经讲了  


566
00:19:05,396 --> 00:19:06,706
一些这方面的事情 


567
00:19:06,706 --> 00:19:08,266
每当布局无效时 


568
00:19:08,266 --> 00:19:09,346
就调用这个 


569
00:19:09,406 --> 00:19:11,226
所以这是计算一切的


570
00:19:11,226 --> 00:19:12,436
有利时机 比如


571
00:19:12,436 --> 00:19:13,486
你想要缓存的布局属性


572
00:19:13,486 --> 00:19:16,206
和你的内容大小


573
00:19:16,206 --> 00:19:18,976
之后很快就会要求这些事情 


574
00:19:23,456 --> 00:19:25,326
好的 所以我们值得骄傲的  


575
00:19:25,326 --> 00:19:27,066
API 让我们谈论一下它吧


576
00:19:27,066 --> 00:19:28,316
这是一个为边界变更设置的   


577
00:19:28,316 --> 00:19:29,856
ShouldInvalidateLayout       


578
00:19:30,766 --> 00:19:33,046
所以每次 CollectionView 的 


579
00:19:33,046 --> 00:19:34,126
边界改变时


580
00:19:34,126 --> 00:19:34,876
都会被调用


581
00:19:35,066 --> 00:19:36,366
好的 再一次 它是 CollectionView  


582
00:19:36,366 --> 00:19:38,566
是 UIScrollView 的一个子集     


583
00:19:38,566 --> 00:19:41,216
所以边界发生变化 究竟是什么意思 


584
00:19:41,216 --> 00:19:43,206
当一个 ScrollView 边界发生改变 


585
00:19:43,206 --> 00:19:45,406
原点可以在滚动期间  


586
00:19:45,406 --> 00:19:47,246
发生改变  


587
00:19:47,246 --> 00:19:48,546
当 App 大小改变   


588
00:19:48,546 --> 00:19:50,366
或者 CollectionView 的大小改变时 


589
00:19:50,366 --> 00:19:51,726
其大小也会发生改变  


590
00:19:51,726 --> 00:19:53,996
所以这将会在滚动过程中被调用  


591
00:19:55,116 --> 00:19:56,996
是的 就像表情符号 


592
00:19:56,996 --> 00:19:58,196
这经常被调用


593
00:19:58,196 --> 00:20:00,126
所以在这里做出正确的决定


594
00:20:00,126 --> 00:20:00,906
非常重要


595
00:20:01,466 --> 00:20:03,176
好的 所以


596
00:20:03,176 --> 00:20:04,296
UICollectionViewLayout 中的   


597
00:20:04,296 --> 00:20:07,056
默认执行将返回 false           


598
00:20:07,746 --> 00:20:08,666
所以如果你需要让它做


599
00:20:08,666 --> 00:20:10,906
一些不同的事情 你的机会到了


600
00:20:11,906 --> 00:20:13,576
作为示例的一种方式


601
00:20:13,906 --> 00:20:16,106
如果原点改变 


602
00:20:16,106 --> 00:20:18,876
UICollectionViewLayout 将返回 false    


603
00:20:18,876 --> 00:20:19,706
好的 所以用户只是


604
00:20:19,706 --> 00:20:20,636
在滚动浏览你的内容


605
00:20:20,636 --> 00:20:21,606
我们不会无效


606
00:20:21,606 --> 00:20:22,726
把它变成默认状态


607
00:20:23,366 --> 00:20:25,446
但是如果 iPad 旋转    


608
00:20:25,446 --> 00:20:26,856
手机旋转 你的 App    


609
00:20:26,856 --> 00:20:28,136
大小就发生了改变    


610
00:20:28,436 --> 00:20:29,316
它即将返回 true     


611
00:20:30,566 --> 00:20:32,596
现在有一点例外


612
00:20:32,596 --> 00:20:33,786
比如浮动的页眉和页脚


613
00:20:33,786 --> 00:20:34,346
对吧


614
00:20:34,346 --> 00:20:35,606
当你在滚动你的内容时


615
00:20:35,606 --> 00:20:37,056
我们必须重新计算这些


616
00:20:37,376 --> 00:20:39,146
要做一个自定义的无效 


617
00:20:39,146 --> 00:20:40,196
来考虑这些事情 


618
00:20:40,826 --> 00:20:41,846
好的 理论已经足够多了 


619
00:20:42,536 --> 00:20:44,936
让我们回到我们的


620
00:20:44,936 --> 00:20:47,116
开发机器当中 


621
00:20:47,116 --> 00:20:48,616
让 Mohammed 带领我们了解一下  


622
00:20:48,616 --> 00:20:49,376
在用代码建立这个奇特自定义   


623
00:20:49,406 --> 00:20:51,316
UICollectionViewLayout 的时候    


624
00:20:51,316 --> 00:20:52,206
看起来会是什么样子    


625
00:20:53,916 --> 00:20:55,486
>> 好的 让我们直接进入   


626
00:20:55,486 --> 00:20:55,746
正题吧    


627
00:20:56,136 --> 00:20:57,886
所以我已经把


628
00:20:58,156 --> 00:21:00,506
另一个我们将要为这个布局使用的


629
00:21:00,506 --> 00:21:01,416
布局子集放到一起


630
00:21:01,416 --> 00:21:03,336
你可能会注意到


631
00:21:03,336 --> 00:21:04,426
它是 UICollectionViewLayout 的   


632
00:21:04,426 --> 00:21:06,276
一个子集  


633
00:21:06,276 --> 00:21:07,736
不是 CollectionViewLayout 的     


634
00:21:07,736 --> 00:21:09,906
一个子集    


635
00:21:09,906 --> 00:21:11,596
这就是 Steve 之前向我们   


636
00:21:11,636 --> 00:21:13,786
解释的原因     


637
00:21:14,146 --> 00:21:16,006
UICollectionViewLayout 并没有   


638
00:21:16,006 --> 00:21:17,356
真正满足我们   


639
00:21:17,356 --> 00:21:19,446
自定义的镶嵌布局设计   


640
00:21:20,906 --> 00:21:22,076
所以我在这做的第一件事


641
00:21:22,076 --> 00:21:23,626
是我要建立一些


642
00:21:23,626 --> 00:21:25,246
实例变量 


643
00:21:25,246 --> 00:21:26,646
我将用它们来保存  


644
00:21:26,646 --> 00:21:28,176
一些稍后可以参考的  


645
00:21:28,176 --> 00:21:29,366
关键信息    


646
00:21:30,706 --> 00:21:32,946
第一个是内容绑定的 


647
00:21:32,946 --> 00:21:34,816
CG 矩形 我将要  


648
00:21:34,816 --> 00:21:37,476
用它来保持


649
00:21:37,516 --> 00:21:39,396
我的 CollectionView 内  


650
00:21:39,396 --> 00:21:40,226
所有项的代表性边界    


651
00:21:40,776 --> 00:21:43,366
第二个是缓存


652
00:21:43,366 --> 00:21:46,106
属性数列 我将要使用这个来保存我的


653
00:21:46,516 --> 00:21:48,336
布局属性 所以


654
00:21:48,336 --> 00:21:50,086
当性能重要的时候 我可以快速查阅它们 


655
00:21:51,496 --> 00:21:52,916
所以我们将为这个布局


656
00:21:52,916 --> 00:21:54,396
再次开始执行我们的


657
00:21:54,396 --> 00:21:55,836
Prepare 类函数  


658
00:21:56,846 --> 00:21:59,776
Prepare 是我们做大部分工作的


659
00:21:59,776 --> 00:22:01,116
理想场所


660
00:22:01,326 --> 00:22:03,086
因为每次失效都会调用


661
00:22:03,146 --> 00:22:04,086
Prepare       


662
00:22:04,686 --> 00:22:06,616
我们可以在这建立我们自己的布局  


663
00:22:06,756 --> 00:22:08,696
然后避免做任何


664
00:22:08,696 --> 00:22:10,626
繁重的布局工作或者任何繁重


665
00:22:10,626 --> 00:22:12,776
的经常被调用的


666
00:22:12,776 --> 00:22:13,976
布局数学函数


667
00:22:18,486 --> 00:22:19,696
所以我们要在这儿做很多事情


668
00:22:19,956 --> 00:22:21,836
首先 我们将重置我们的


669
00:22:21,836 --> 00:22:23,086
缓存属性和我们的


670
00:22:23,086 --> 00:22:24,816
内容界限只为了清除


671
00:22:24,816 --> 00:22:26,956
以前失效的


672
00:22:26,956 --> 00:22:28,276
所有陈旧信息


673
00:22:29,576 --> 00:22:32,196
接下来 我们要为


674
00:22:32,196 --> 00:22:33,426
我们的 CollectionView 中的每一个项目    


675
00:22:33,426 --> 00:22:34,056
做一些事情    


676
00:22:35,346 --> 00:22:36,736
这些当中的第一个实际上是


677
00:22:36,786 --> 00:22:38,536
准备这些属性


678
00:22:38,536 --> 00:22:39,626
但是现在我不会


679
00:22:39,626 --> 00:22:41,506
深入研究


680
00:22:41,506 --> 00:22:42,836
具体布局的内容 因为


681
00:22:42,836 --> 00:22:43,676
这对你而言


682
00:22:43,676 --> 00:22:44,076
会有所不同


683
00:22:44,466 --> 00:22:46,376
这是你将要


684
00:22:46,376 --> 00:22:47,606
计算大小


685
00:22:47,606 --> 00:22:49,506
位置和转换的地方


686
00:22:49,506 --> 00:22:52,976
使你的单元格 符合你的设计需求


687
00:22:53,746 --> 00:22:54,886
但是在我们完成


688
00:22:54,886 --> 00:22:55,646
这些属性以后


689
00:22:55,646 --> 00:22:57,706
我们将要在这做很多关键的事情


690
00:22:58,176 --> 00:22:59,676
第一 我们将要缓存它们


691
00:22:59,786 --> 00:23:00,576
我们将要把它们放在我们的


692
00:23:00,576 --> 00:23:01,936
缓存的属性数组以便我们


693
00:23:01,936 --> 00:23:03,536
不久后可以快速抓住它们


694
00:23:04,086 --> 00:23:06,486
第二个是 我们将


695
00:23:06,486 --> 00:23:08,406
把他们的框架和我们的


696
00:23:08,406 --> 00:23:10,426
内容界限矩形结合起来


697
00:23:10,426 --> 00:23:11,996
以便于我们的内容界限保持更新


698
00:23:13,896 --> 00:23:15,266
所以既然我们的 Prepare 已经出现


699
00:23:15,266 --> 00:23:16,366
并且运行 我们需要


700
00:23:16,366 --> 00:23:18,546
在我们需要使一切运转的


701
00:23:18,546 --> 00:23:20,206
布局中执行


702
00:23:20,406 --> 00:23:21,536
剩余的方法


703
00:23:22,416 --> 00:23:25,686
所以这些当中的第一个


704
00:23:25,686 --> 00:23:27,186
CollectionView 内容大小    


705
00:23:27,596 --> 00:23:29,036
在这其中 如果我们在 Prepare 中正确地


706
00:23:29,036 --> 00:23:30,986
完成了我们的工作 我们可以


707
00:23:30,986 --> 00:23:33,006
返回我们的内容界限作为大小


708
00:23:35,556 --> 00:23:37,286
下一个是为边界改变设置的   


709
00:23:37,286 --> 00:23:38,306
shouldInvalidateLayout      


710
00:23:39,576 --> 00:23:40,876
现在既然我们的布局中不


711
00:23:40,876 --> 00:23:43,036
包含任何当我们滚动时


712
00:23:43,036 --> 00:23:44,946
失效的元素


713
00:23:44,946 --> 00:23:47,486
所以没有任何浮动的


714
00:23:47,486 --> 00:23:48,966
标题 浮动页脚或者


715
00:23:48,966 --> 00:23:49,566
类似的东西


716
00:23:50,106 --> 00:23:51,896
我们只想在 CollectionView 的大小变化范围 


717
00:23:51,896 --> 00:23:54,276
发生变化时无效


718
00:23:54,706 --> 00:23:56,276
所以如果我们的新的大小边界


719
00:23:56,276 --> 00:23:58,076
不等于


720
00:23:58,076 --> 00:23:59,606
我们的 CollectionView 的大小边界


721
00:23:59,606 --> 00:24:01,856
我们目前的大小边界 我们就会返回 true      


722
00:24:03,876 --> 00:24:05,366
在那之后 我们将执行


723
00:24:05,366 --> 00:24:06,616
LayoutAttributesForItem   


724
00:24:06,616 --> 00:24:08,846
AtIndexPath 在这里 再一次  


725
00:24:08,846 --> 00:24:09,886
因为在我们的 Prepare 函数中   


726
00:24:09,886 --> 00:24:10,906
我们已经准备了所有属性   


727
00:24:10,906 --> 00:24:12,846
我们只能把握      


728
00:24:12,846 --> 00:24:15,616
从我们的数组中回应        


729
00:24:15,786 --> 00:24:17,936
RequestAtIndexPath 的特别属性      


730
00:24:18,116 --> 00:24:21,236
最后 我们将执行 


731
00:24:22,256 --> 00:24:23,786
LayoutAttributesForElements      
 
00:24:23,786 --> 00:24:24,166
InRect               


732
00:24:25,316 --> 00:24:26,776
现在这个方法


733
00:24:26,776 --> 00:24:27,656
被带有不同      


734
00:24:27,656 --> 00:24:29,096
查询矩阵的 CollectionView           


735
00:24:29,096 --> 00:24:31,676
定期调用 这个矩形可能会比        


736
00:24:31,676 --> 00:24:32,486
我们的 CollectionView 更大        


737
00:24:32,616 --> 00:24:36,566
我们的 CollectionView 只要求一些列            


738
00:24:36,566 --> 00:24:37,926
匹配特定区域的属性     


739
00:24:38,676 --> 00:24:41,746
我们的工作是返回一个数组


740
00:24:41,896 --> 00:24:44,386
该数组包含所有属性


741
00:24:44,786 --> 00:24:46,266
这些属性与所有


742
00:24:46,306 --> 00:24:47,576
将要在我们的 CollectionView 矩形中出现的       


743
00:24:47,576 --> 00:24:48,866
所有项目相对应      


744
00:24:50,296 --> 00:24:52,766
所以我们可以简单地


745
00:24:52,846 --> 00:24:54,836
通过过滤属性框架上的


746
00:24:54,836 --> 00:24:57,616
缓存属性数组


747
00:24:57,616 --> 00:25:00,216
来回答这个问题


748
00:25:00,216 --> 00:25:02,396
所以如果我们的属性


749
00:25:02,476 --> 00:25:04,466
有一个与我们的查询矩阵相交的框架


750
00:25:04,466 --> 00:25:06,566
我们可以返回它们


751
00:25:06,566 --> 00:25:08,826
好的 所以让我们回到  


752
00:25:08,826 --> 00:25:11,786
Sim 看看我们的布局变成了什么样子   


753
00:25:12,626 --> 00:25:14,106
所以我将要挑选其中的一个


754
00:25:14,106 --> 00:25:15,806
Feed 在这


755
00:25:15,806 --> 00:25:17,586
我们有我们的布局


756
00:25:17,586 --> 00:25:19,086
我们的图像可以很好地加载到


757
00:25:19,086 --> 00:25:21,146
这个花式镶嵌结构中


758
00:25:21,146 --> 00:25:23,706
如果我们想要旋转成横屏


759
00:25:23,706 --> 00:25:25,246
你可以看到我们的单元格已经


760
00:25:25,246 --> 00:25:26,996
调整了大小 所以我们已正确更新


761
00:25:26,996 --> 00:25:28,036
所有内容 我们已经将其


762
00:25:28,036 --> 00:25:29,466
无效化 这真的很棒   


763
00:25:32,286 --> 00:25:36,876
所以这看起来很像我们的规格


764
00:25:36,876 --> 00:25:39,306
但是滚动性能并不是很好 对吗


765
00:25:39,436 --> 00:25:39,636
>> 不是很好           


766
00:25:39,636 --> 00:25:40,786
>> 很差       


767
00:25:41,826 --> 00:25:43,116
所以你可能早已有了一个


768
00:25:43,116 --> 00:25:44,286
关于接下来怎么进行的主意


769
00:25:44,386 --> 00:25:45,536
让我们回到代码中


770
00:25:45,536 --> 00:25:47,946
看看接下来会发生什么 


771
00:25:49,176 --> 00:25:50,386
所以如果我们在


772
00:25:50,386 --> 00:25:51,666
这的矩形中看看我们的布局属性或


773
00:25:51,666 --> 00:25:54,386
元素 要记得这种


774
00:25:54,386 --> 00:25:55,946
方法在滚动时


775
00:25:55,946 --> 00:25:56,836
经常被调用


776
00:25:58,616 --> 00:26:01,376
所以这里的这个函数


777
00:26:01,376 --> 00:26:03,656
正在过滤我们的整个数组


778
00:26:03,656 --> 00:26:05,036
你可能会想


779
00:26:05,036 --> 00:26:06,666
当我们的 CollectionView 的项目数增加  


780
00:26:06,666 --> 00:26:08,096
会变得非常高耗  


781
00:26:08,416 --> 00:26:09,476
所以在我们的 App 中


782
00:26:09,476 --> 00:26:11,106
我们的照片越多  


783
00:26:11,106 --> 00:26:13,096
我们的滚动进程将会越慢  


784
00:26:14,296 --> 00:26:15,506
所以如果你发现你自己遇到


785
00:26:15,506 --> 00:26:17,146
这种情况 它帮助你


786
00:26:17,146 --> 00:26:18,766
后退 想想你


787
00:26:18,766 --> 00:26:20,776
布局的属性 想想


788
00:26:20,776 --> 00:26:21,976
你是否可以找到任何


789
00:26:21,976 --> 00:26:23,466
优化机会    


790
00:26:24,296 --> 00:26:28,476
所以我们的布局要求


791
00:26:28,476 --> 00:26:31,226
每个单元 App 紧邻或者   


792
00:26:31,226 --> 00:26:32,856
低于它的前一个单元格


793
00:26:33,536 --> 00:26:34,976
所以这意味着我们的    


794
00:26:34,976 --> 00:26:37,926
属性已经按照   


795
00:26:37,926 --> 00:26:39,126
它们框架的最小 y 值   


796
00:26:39,126 --> 00:26:41,736
在缓存的属性数组中排序了   


797
00:26:43,456 --> 00:26:45,736
所以我们有一个排序数组 所以我们 


798
00:26:45,736 --> 00:26:48,006
可以通过做一些


799
00:26:48,006 --> 00:26:49,206
二进制的搜索来加速搜索


800
00:26:49,206 --> 00:26:51,826
而不是像现在我们正在做的


801
00:26:51,826 --> 00:26:52,506
线型过滤器


802
00:26:53,386 --> 00:26:57,786
所以让我们删除我们的


803
00:26:57,786 --> 00:27:00,216
慢执行 让我们


804
00:27:00,216 --> 00:27:01,936
用一些本应该更快的东西来替代它


805
00:27:03,856 --> 00:27:06,196
所以我会逐步介绍   


806
00:27:06,196 --> 00:27:07,226
不必担心       


807
00:27:08,216 --> 00:27:10,066
所以我们在这要做的


808
00:27:10,066 --> 00:27:12,606
第一件事是我们调用 


809
00:27:13,476 --> 00:27:15,136
我们已经准备好的


810
00:27:15,316 --> 00:27:16,656
二进制搜索函数


811
00:27:16,656 --> 00:27:17,986
它在我们的数组和


812
00:27:17,986 --> 00:27:20,526
我们的查询矩阵中


813
00:27:20,526 --> 00:27:20,806
引入了一些列索引


814
00:27:22,276 --> 00:27:25,956
如果它发现了一组


815
00:27:25,956 --> 00:27:27,086
在我们的矩阵中包含一个框架的属性


816
00:27:27,086 --> 00:27:30,586
它将作为我们数组中的索引


817
00:27:30,586 --> 00:27:34,616
返回属性 然后从该索引开始


818
00:27:34,616 --> 00:27:36,856
我们可以简单地通过在


819
00:27:36,856 --> 00:27:39,016
我们的数组中上下循环


820
00:27:39,016 --> 00:27:41,736
并拾取属性


821
00:27:41,736 --> 00:27:43,736
来构建其余部分


822
00:27:43,736 --> 00:27:46,376
的属性集 直到我们退出查询矩阵


823
00:27:46,376 --> 00:27:47,506
直到我们找到


824
00:27:47,506 --> 00:27:49,176
在我们的矩阵之外的属性


825
00:27:49,886 --> 00:27:51,466
这应该快得多了


826
00:27:51,946 --> 00:27:53,056
在你的数组中


827
00:27:53,056 --> 00:27:53,416
有成千上万的项目


828
00:27:53,416 --> 00:27:56,566
你不可能通过成千上万个项目


829
00:27:56,566 --> 00:27:57,886
循环成千上万次


830
00:27:58,576 --> 00:28:00,626
好的 让我们再次回到


831
00:28:00,626 --> 00:28:02,436
Sim 中 让我们看看


832
00:28:02,436 --> 00:28:04,196
更快的滚动算法是什么样子


833
00:28:07,056 --> 00:28:09,676
让我们把这个弹出来的打开 然后轻点一下


834
00:28:10,116 --> 00:28:11,096
更快了


835
00:28:11,816 --> 00:28:13,206
你怎么看 Steve  


836
00:28:13,826 --> 00:28:14,326
>> 好多了   


837
00:28:14,326 --> 00:28:14,906
好的 很棒


838
00:28:14,906 --> 00:28:16,216
所以我们现在已经有了


839
00:28:16,216 --> 00:28:16,906
两种布局


840
00:28:17,246 --> 00:28:17,936
接下来是什么呢


841
00:28:18,776 --> 00:28:20,426
>> 所以我们有了两个屏幕  


842
00:28:20,426 --> 00:28:22,756
这位我们这里的


843
00:28:22,756 --> 00:28:24,366
朋友列表留下了我们的


844
00:28:24,366 --> 00:28:24,516
更新动画


845
00:28:24,936 --> 00:28:25,446
>> 很棒       


846
00:28:25,496 --> 00:28:25,706
好的  


847
00:28:25,706 --> 00:28:26,676
好的 让我们回到


848
00:28:27,096 --> 00:28:28,836
幻灯片中 让我们浏览一下


849
00:28:28,836 --> 00:28:30,786
我想我们的设计师会称它为


850
00:28:30,786 --> 00:28:32,426
非常酷的更新动画


851
00:28:33,266 --> 00:28:35,046
好的 这里有一个视频


852
00:28:35,046 --> 00:28:36,446
让我们浏览一下


853
00:28:36,946 --> 00:28:38,176
看看这个非常酷炫的


854
00:28:38,176 --> 00:28:39,086
更新动画是什么样子


855
00:28:39,536 --> 00:28:41,756
好的 所以我们这里有一些元素


856
00:28:41,756 --> 00:28:44,966
我们看到最后一个项目更新了


857
00:28:44,966 --> 00:28:46,246
我猜有人发了一张


858
00:28:46,246 --> 00:28:48,136
照片 我们有在这得到了另一个项目


859
00:28:48,136 --> 00:28:51,706
它看起来 是第三个项目涂片


860
00:28:51,706 --> 00:28:52,546
不会在这里


861
00:28:52,686 --> 00:28:55,316
好的 所以我们在这里有


862
00:28:55,316 --> 00:28:56,696
三个基本操作正在进行 对吧


863
00:28:56,696 --> 00:28:59,586
我们重新下载 移动 删除


864
00:29:00,216 --> 00:29:01,386
我们为什么不回到


865
00:29:01,386 --> 00:29:03,616
开发机器 Mohammed     


866
00:29:03,776 --> 00:29:04,996
你何不给我们展示一下 这个是怎么操作的呢


867
00:29:06,096 --> 00:29:08,416
>> 当然    


868
00:29:08,636 --> 00:29:11,226
好的 所以我们


869
00:29:11,226 --> 00:29:13,216
同时做了很多动画的更新


870
00:29:14,036 --> 00:29:15,606
所以你可能会认识到


871
00:29:15,606 --> 00:29:17,206
UICollectionView 和 UITableView 提供给 


872
00:29:17,206 --> 00:29:19,576
我们 一个多么伟大的工具    


873
00:29:19,576 --> 00:29:21,236
正是执行批量更新 API       


874
00:29:21,936 --> 00:29:24,266
它基本上可以允许我们


875
00:29:24,266 --> 00:29:26,636
通过集合视图


876
00:29:26,636 --> 00:29:28,036
可以在动画执行的同时


877
00:29:28,036 --> 00:29:29,736
执行一组更新


878
00:29:30,606 --> 00:29:33,226
所以我要给   


879
00:29:33,486 --> 00:29:34,126
CollectionView PerformBatchUpdates    


880
00:29:34,186 --> 00:29:36,426
添加一个调用 并且注意            


881
00:29:36,426 --> 00:29:37,646
我在关闭这里做了


882
00:29:37,646 --> 00:29:38,896
我的数据源更新和


883
00:29:38,896 --> 00:29:40,856
我的 CollectionView 的更新          


884
00:29:41,256 --> 00:29:43,196
这实际上是一种最佳方式


885
00:29:43,196 --> 00:29:45,486
协调我的更新


886
00:29:45,606 --> 00:29:47,576
并保持事物的整齐同步


887
00:29:47,576 --> 00:29:49,676
避免事物不一致


888
00:29:50,836 --> 00:29:53,356
所以 首先 我在我的数据源上


889
00:29:53,356 --> 00:29:57,586
更新了我的最后一个项目


890
00:29:57,666 --> 00:29:59,476
我把第二个项目移动到最后


891
00:29:59,476 --> 00:30:01,316
一个项目中 选中最后一个项目


892
00:30:01,316 --> 00:30:02,416
移动到最顶端


893
00:30:02,416 --> 00:30:04,086
然后我要求 CollectionView      


894
00:30:04,086 --> 00:30:05,926
执行我想要的动画


895
00:30:06,766 --> 00:30:08,706
好的 让我们再次回到 Sim         


896
00:30:08,706 --> 00:30:10,846
看看我们的更新是什么样子


897
00:30:10,846 --> 00:30:13,166
所以我们已经通过


898
00:30:13,166 --> 00:30:14,426
右上角的更新按钮


899
00:30:14,426 --> 00:30:17,856
连接了我们的更新代码    


900
00:30:18,056 --> 00:30:19,556
>> 怎么样了   


901
00:30:20,876 --> 00:30:23,526
>> 有点尴尬 


902
00:30:23,556 --> 00:30:25,456
这发生了什么


903
00:30:25,456 --> 00:30:26,126
>> 你知道的 我写     


904
00:30:26,126 --> 00:30:27,026
iOS 很长时间了   


905
00:30:27,026 --> 00:30:28,596
我之前见过这个影片  


906
00:30:29,076 --> 00:30:31,396
>> 是的 在舞台上发生这种事情   


907
00:30:31,596 --> 00:30:34,586
很糟糕


908
00:30:34,586 --> 00:30:36,096
你知道的 我们的时间马上要


909
00:30:36,096 --> 00:30:37,756
用完了 我们为什么不


910
00:30:37,756 --> 00:30:39,256
调用重新下载数据 我们可以


911
00:30:39,636 --> 00:30:41,966
回去 然后为 V2 做动画


912
00:30:41,966 --> 00:30:42,396
>> 真的吗   


913
00:30:43,516 --> 00:30:47,816
［ 掌声 ］


914
00:30:48,316 --> 00:30:50,756
你知道的 我们可以的 但是


915
00:30:50,756 --> 00:30:51,846
接下来我们将会丢失这个非常酷炫的


916
00:30:51,846 --> 00:30:53,426
更新动画 我们的用户


917
00:30:53,426 --> 00:30:55,036
期待这些生动的界面


918
00:30:56,016 --> 00:30:56,206
对吗


919
00:30:56,666 --> 00:30:57,766
>> 是的 你说的对      


920
00:30:57,766 --> 00:30:58,286
你知道吗


921
00:30:58,286 --> 00:30:58,996
他们值得更好的    


922
00:30:59,446 --> 00:31:00,526
>> 我喜欢你思考问题的方式      


923
00:31:00,676 --> 00:31:01,426
好的 让我们快速


924
00:31:01,426 --> 00:31:03,256
回到幻灯片中 


925
00:31:03,256 --> 00:31:04,426
让我们看看我们是否保存了我们


926
00:31:04,876 --> 00:31:06,736
非常酷炫的动画更新


927
00:31:07,846 --> 00:31:08,736
你之前已经看过了


928
00:31:08,876 --> 00:31:09,246
好的


929
00:31:09,246 --> 00:31:11,286
所以首先让我们仔细研究一下


930
00:31:11,286 --> 00:31:12,596
这个调试异常 然后看看


931
00:31:12,596 --> 00:31:14,446
它试图想告诉我们什么


932
00:31:14,446 --> 00:31:14,706
好的


933
00:31:15,566 --> 00:31:16,436
所以这里说的是 我们


934
00:31:16,436 --> 00:31:18,276
正试图从 0-3 的


935
00:31:18,576 --> 00:31:20,716
相同索引路径执行删除和


936
00:31:20,716 --> 00:31:21,766
移动操作   


937
00:31:21,766 --> 00:31:22,756
所以如果我记的对的话 这刚刚是


938
00:31:22,756 --> 00:31:23,656
第四个项目


939
00:31:23,656 --> 00:31:25,046
我们重新下载 然后移动它


940
00:31:25,046 --> 00:31:27,806
我们刚刚没有删除它 我们删除了


941
00:31:27,806 --> 00:31:29,386
第三个项目 0-2 对   


942
00:31:31,396 --> 00:31:33,026
>> 所以 这是怎么回事


943
00:31:33,026 --> 00:31:34,326
好的 在我们开始这个之前


944
00:31:34,326 --> 00:31:36,876
让我们回去


945
00:31:36,876 --> 00:31:38,146
匆匆看一眼 PerformBatchUpdates     


946
00:31:38,146 --> 00:31:41,196
API 讨论一些高级原则


947
00:31:41,196 --> 00:31:41,456
好的


948
00:31:41,456 --> 00:31:43,496
所以正如 Mohammed 之前提到的那样  


949
00:31:43,496 --> 00:31:45,356
当他介绍这个 API 的时候


950
00:31:45,356 --> 00:31:47,156
这个 API 的目的便是


951
00:31:47,156 --> 00:31:48,826
我们可以同时处理多种更新


952
00:31:48,826 --> 00:31:50,486
让一切充满生气


953
00:31:50,486 --> 00:31:51,786
获得这样一种


954
00:31:51,786 --> 00:31:53,526
很棒的体验


955
00:31:54,296 --> 00:31:55,646
也正如他所提到的那样      


956
00:31:55,646 --> 00:31:57,556
在 CollectionView     


957
00:31:57,606 --> 00:31:59,516
更新关闭中    


958
00:31:59,516 --> 00:32:00,466
执行数据源更新和   


959
00:32:00,526 --> 00:32:02,466
你的 CollectionView 更新非常重要   


960
00:32:03,276 --> 00:32:04,566
现在 我所说的关于  


961
00:32:04,566 --> 00:32:05,826
CollectionView 的这些也同样适用于   


962
00:32:05,826 --> 00:32:06,316
TableView         


963
00:32:06,316 --> 00:32:07,386
所以如果你想要在你的 App 上    


964
00:32:07,386 --> 00:32:09,136
安装 TableViews 所有的这些信息  


965
00:32:09,136 --> 00:32:10,256
都是一致的 


966
00:32:11,496 --> 00:32:13,856
好的 让我们多观察一下


967
00:32:14,406 --> 00:32:16,136
CollectionView 更新时      


968
00:32:16,136 --> 00:32:16,976
你插入 移动和删除   


969
00:32:16,976 --> 00:32:19,186
这些顺序


970
00:32:19,246 --> 00:32:20,586
在你的更新关闭中


971
00:32:20,586 --> 00:32:21,016
并不重要


972
00:32:21,736 --> 00:32:22,556
把它们放在任何你想要放的地方  


973
00:32:23,666 --> 00:32:25,046
然而 当你改变结构时


974
00:32:25,046 --> 00:32:26,176
现在你的数据源会更新 


975
00:32:26,176 --> 00:32:27,176
提供你的数据源或者


976
00:32:27,176 --> 00:32:31,306
支持数据源的数据源很重要


977
00:32:32,456 --> 00:32:34,906
好的 最好用一个例子


978
00:32:34,906 --> 00:32:36,146
来展示 所以我将


979
00:32:36,146 --> 00:32:38,086
列举一个例子 这个例子包含两个数组


980
00:32:38,086 --> 00:32:39,106
每个数组有三个元素 


981
00:32:39,106 --> 00:32:41,946
我们将强化我们这方面的直觉


982
00:32:41,946 --> 00:32:43,796
展示一个删除和一个插入


983
00:32:44,006 --> 00:32:45,406
但是首先我们将


984
00:32:45,406 --> 00:32:46,916
先执行一次删除


985
00:32:46,996 --> 00:32:48,846
然后再执行第二个删除


986
00:32:48,846 --> 00:32:49,666
我们将颠倒顺序


987
00:32:49,666 --> 00:32:51,196
只是为了


988
00:32:51,196 --> 00:32:52,156
增强我们的直觉


989
00:32:52,266 --> 00:32:53,076
我一直这样做


990
00:32:53,076 --> 00:32:53,646
画画 对


991
00:32:53,826 --> 00:32:54,786
好的


992
00:32:54,786 --> 00:32:56,056
所以我们删除第一个项目


993
00:32:57,246 --> 00:33:00,346
然后我们现在要在索引一插入 


994
00:33:01,186 --> 00:33:02,526
好的 在第二个例子中


995
00:33:02,526 --> 00:33:03,846
我们颠倒顺序


996
00:33:03,846 --> 00:33:05,626
先插入然后再进行删除


997
00:33:06,526 --> 00:33:08,436
所以我们的直觉依然存在 确实


998
00:33:08,436 --> 00:33:09,356
我们得到了一个完全不同的结果


999
00:33:09,456 --> 00:33:10,426
这可能并不是一件好事


1000
00:33:10,496 --> 00:33:10,936
好的


1001
00:33:12,376 --> 00:33:14,776
让我们把这个和


1002
00:33:14,776 --> 00:33:15,986
CollectionView 的更新做一下对比  


1003
00:33:16,126 --> 00:33:17,806
现在这里有两组


1004
00:33:17,806 --> 00:33:18,816
批量更新提交的


1005
00:33:18,816 --> 00:33:21,256
CollectionView 更新   


1006
00:33:21,256 --> 00:33:22,396
我已经删除了数据源更新


1007
00:33:22,396 --> 00:33:23,926
只是为了保持幻灯片的整洁


1008
00:33:24,996 --> 00:33:25,906
但是我在第一个上面做了插入和


1009
00:33:25,906 --> 00:33:28,766
删除 在第二个上面先删除再插入


1010
00:33:28,766 --> 00:33:30,406
顺序是不同的


1011
00:33:30,406 --> 00:33:31,696
但这会给你完全


1012
00:33:31,696 --> 00:33:32,326
相同的结果


1013
00:33:33,426 --> 00:33:34,376
我们都是工程师


1014
00:33:34,376 --> 00:33:35,956
我们想知道为什么 


1015
00:33:35,956 --> 00:33:36,286
为什么是这样


1016
00:33:36,286 --> 00:33:38,066
好的 让我们谈谈吧


1017
00:33:38,676 --> 00:33:39,796
这是怎么发生的呢


1018
00:33:39,796 --> 00:33:40,766
为什么排序对于


1019
00:33:40,766 --> 00:33:42,166
发送到 CollectionView 的  


1020
00:33:42,166 --> 00:33:43,106
更新并不重要 


1021
00:33:43,106 --> 00:33:44,296
当然这是针对你的数据源而言的


1022
00:33:44,296 --> 00:33:46,446
好的 让我们通过操作


1023
00:33:46,446 --> 00:33:47,926
来完成这些操作


1024
00:33:47,926 --> 00:33:50,346
所以第一个是要删除


1025
00:33:50,346 --> 00:33:52,506
这是按降序索引路径顺序


1026
00:33:52,586 --> 00:33:53,196
进行的过程


1027
00:33:53,196 --> 00:33:55,536
现在让我们谈谈索引路径


1028
00:33:55,716 --> 00:33:57,576
所以首先 


1029
00:33:57,576 --> 00:33:58,586
在批量更新开始之前


1030
00:33:58,586 --> 00:33:59,946
你在考虑  


1031
00:33:59,946 --> 00:34:01,206
在 PerformBatchUpdate 中发生了什么 


1032
00:34:01,206 --> 00:34:02,786
你的数据源处于之前状态


1033
00:34:04,046 --> 00:34:05,466
现在一旦所有事情


1034
00:34:05,466 --> 00:34:07,156
在批量更新中完成


1035
00:34:07,276 --> 00:34:08,025
你将处于一个后续状态


1036
00:34:08,606 --> 00:34:10,906
好的 所以对于删除而言


1037
00:34:10,966 --> 00:34:13,275
索引路径总是指向前级


1038
00:34:13,686 --> 00:34:15,326
所以这就是删除


1039
00:34:15,326 --> 00:34:18,226
所以插入是按


1040
00:34:18,335 --> 00:34:20,255
升序索引路径顺序进行处理的


1041
00:34:20,846 --> 00:34:23,346
因此 插入中的索引


1042
00:34:23,346 --> 00:34:25,376
路径总是指向


1043
00:34:25,446 --> 00:34:27,116
最终状态或者


1044
00:34:27,255 --> 00:34:28,206
后更新阶段


1045
00:34:29,636 --> 00:34:30,946
所以 移动是这两者的结合


1046
00:34:30,946 --> 00:34:31,436
对吧


1047
00:34:31,436 --> 00:34:33,485
你有一个来和一个去的索引


1048
00:34:33,485 --> 00:34:35,235
路径 来是处于


1049
00:34:35,235 --> 00:34:39,366
之前状态 好的 去是处于后续状态


1050
00:34:39,806 --> 00:34:42,545
重新加载 现在如果你愿意


1051
00:34:42,545 --> 00:34:44,186
重新加载算一个超级命令


1052
00:34:44,186 --> 00:34:46,096
它实际上可以分解成为


1053
00:34:46,096 --> 00:34:47,876
一个删除和一个插入


1054
00:34:48,416 --> 00:34:51,266
重新加载中指定的


1055
00:34:51,266 --> 00:34:55,016
索引路径是关于前状态的


1056
00:34:56,126 --> 00:34:57,776
好的 所以既然我们已经


1057
00:34:57,776 --> 00:34:59,106
了解了重新加载是干什么的


1058
00:34:59,106 --> 00:35:00,946
这种洞察力可以告诉我们


1059
00:35:00,946 --> 00:35:02,426
在我们的 App 中


1060
00:35:02,756 --> 00:35:04,466
发生了什么错误


1061
00:35:05,476 --> 00:35:06,516
因为最后个项目


1062
00:35:06,516 --> 00:35:07,696
重新加载中的删除和


1063
00:35:07,696 --> 00:35:10,376
项目的移动概念相冲突


1064
00:35:10,476 --> 00:35:10,796
好的


1065
00:35:10,846 --> 00:35:12,006
所以当我们回到代码中


1066
00:35:12,006 --> 00:35:14,396
我们可以一分钟内解决这个问题


1067
00:35:14,396 --> 00:35:15,906
好的 我不打算检查


1068
00:35:15,906 --> 00:35:17,866
这些 但是你可以稍后解释


1069
00:35:17,866 --> 00:35:18,996
只是把它放在这里作参考


1070
00:35:18,996 --> 00:35:22,346
这些都会导致 CollectionView 崩溃


1071
00:35:22,726 --> 00:35:23,576
不要这样做


1072
00:35:23,716 --> 00:35:27,486
我们如何获取所有这些


1073
00:35:27,486 --> 00:35:29,176
知识并简化它


1074
00:35:29,176 --> 00:35:30,746
以这样一种方式来使用它


1075
00:35:30,746 --> 00:35:32,456
我们总是可以从给定的    


1076
00:35:32,456 --> 00:35:34,016
CollectionView 或 TableView   


1077
00:35:34,016 --> 00:35:35,026
中应用我们的数据源更新


1078
00:35:35,026 --> 00:35:36,826
并确保所有的东西都同步


1079
00:35:37,056 --> 00:35:37,426
好的


1080
00:35:37,496 --> 00:35:38,796
所以这是四项基本的原则


1081
00:35:39,446 --> 00:35:40,176
所以首先你想要


1082
00:35:40,176 --> 00:35:41,466
分解这些动作


1083
00:35:41,466 --> 00:35:42,336
删除然后插入


1084
00:35:42,556 --> 00:35:44,776
简单 将所有删除和插入


1085
00:35:44,776 --> 00:35:45,796
组合到两个


1086
00:35:45,796 --> 00:35:48,536
单独的列表中 


1087
00:35:48,536 --> 00:35:50,546
首先在索引路径上


1088
00:35:50,546 --> 00:35:52,396
按降序顺序进行删除


1089
00:35:52,396 --> 00:35:54,176
最后按升序索引路径


1090
00:35:54,246 --> 00:35:55,636
应用这些插入


1091
00:35:55,776 --> 00:35:59,586
做到这一点 就很好往下进行了


1092
00:35:59,816 --> 00:36:00,826
重新加载数据怎么样


1093
00:36:00,826 --> 00:36:02,466
我知道 Mohammed 说我们  


1094
00:36:02,466 --> 00:36:04,676
可以做到这一点 我们完成了 每个人都笑了


1095
00:36:04,676 --> 00:36:05,586
我很确定我大喊了


1096
00:36:05,586 --> 00:36:07,456
情况就是这样 但是关于


1097
00:36:07,456 --> 00:36:08,606
重新加载数据的事实却是你没有


1098
00:36:08,606 --> 00:36:09,926
获得这些很棒的动画


1099
00:36:09,926 --> 00:36:11,826
这真的是一个强有力的做法


1100
00:36:12,516 --> 00:36:13,816
所以 我们真的想让我们的


1101
00:36:13,816 --> 00:36:15,286
App 变得活泼生动


1102
00:36:15,286 --> 00:36:16,686
使我们的客户 获得很棒的感受


1103
00:36:16,686 --> 00:36:19,496
所以 这是在特殊情况下使用的 


1104
00:36:20,356 --> 00:36:21,576
好吧 Mohammed 让我们快速 


1105
00:36:21,576 --> 00:36:23,416
切换回来 看看我们能否


1106
00:36:23,416 --> 00:36:24,536
在代码中解决这个问题


1107
00:36:24,536 --> 00:36:26,046
并保存完全酷炫的


1108
00:36:26,566 --> 00:36:27,236
更新动画


1109
00:36:27,676 --> 00:36:29,666
>> 好的 是时候赎罪了  


1110
00:36:29,666 --> 00:36:29,766
>> 是的   


1111
00:36:29,766 --> 00:36:32,066
>> 所以让我们使用  


1112
00:36:32,066 --> 00:36:33,446
刚刚 Steve 分享给我们的


1113
00:36:33,446 --> 00:36:34,966
指导原则来修复我们的更新动画  


1114
00:36:35,156 --> 00:36:36,756
所以让我们删除这里的


1115
00:36:36,756 --> 00:36:37,556
所有执行


1116
00:36:37,746 --> 00:36:40,456
如果你还记得 我们的更新


1117
00:36:40,456 --> 00:36:44,066
包括重新加载 删除 和移动


1118
00:36:44,066 --> 00:36:46,916
我们的重新加载和移动


1119
00:36:46,916 --> 00:36:49,086
处于相同的索引路径  


1120
00:36:49,296 --> 00:36:50,386
它们在同样的地方开始


1121
00:36:50,386 --> 00:36:52,326
这就是我们的冲突所在


1122
00:36:52,796 --> 00:36:55,396
所以我们需要先分开这两个


1123
00:36:55,956 --> 00:36:57,926
因此让我们重新载入


1124
00:36:57,926 --> 00:36:59,706
自己的调用来执行


1125
00:36:59,706 --> 00:37:03,546
批量更新 然后在这


1126
00:37:04,506 --> 00:37:06,176
我只是在更新我的数据源 再一次


1127
00:37:06,496 --> 00:37:09,216
和之前一样 在 CollectionView 上    


1128
00:37:09,216 --> 00:37:09,806
调用重新加载的项目   


1129
00:37:10,336 --> 00:37:12,496
我只是在没有动画关闭


1130
00:37:12,496 --> 00:37:14,156
的 UI 视图中执行它


1131
00:37:14,686 --> 00:37:16,376
如果你仔细查看


1132
00:37:16,376 --> 00:37:18,336
我们的规范


1133
00:37:18,336 --> 00:37:19,716
它实际上是非动画的


1134
00:37:19,716 --> 00:37:20,436
初始重新加载


1135
00:37:22,026 --> 00:37:24,236
好的 所以接下来 我们必须


1136
00:37:24,236 --> 00:37:25,266
处理剩余的


1137
00:37:25,266 --> 00:37:29,716
更新 删除和移动


1138
00:37:29,936 --> 00:37:32,386
让我们来解释一下


1139
00:37:32,386 --> 00:37:35,766
我们在索引二处删除


1140
00:37:35,766 --> 00:37:38,176
然后把项目从索引三  


1141
00:37:38,176 --> 00:37:40,376
移动到索引零处   


1142
00:37:41,386 --> 00:37:43,256
因此如果我们使用


1143
00:37:43,256 --> 00:37:44,886
我们刚刚学到的指导原则来


1144
00:37:44,886 --> 00:37:47,146
分解我们的动作 这就变成了


1145
00:37:47,146 --> 00:37:50,046
索引二进行删除


1146
00:37:50,046 --> 00:37:53,506
索引三进行删除


1147
00:37:53,506 --> 00:37:56,066
把项目插入到索引三至索引零  


1148
00:37:57,496 --> 00:38:00,836
所以现在我们有两套操作


1149
00:38:00,836 --> 00:38:02,766
我们有删除和插入


1150
00:38:03,146 --> 00:38:04,826
我们可以相应地处理它们


1151
00:38:05,566 --> 00:38:07,246
首先 我们按照降序顺序


1152
00:38:07,246 --> 00:38:08,776
执行删除操作


1153
00:38:08,946 --> 00:38:11,516
因此我们首先要在索引三处


1154
00:38:11,656 --> 00:38:13,756
进行删除 然后


1155
00:38:13,756 --> 00:38:15,546
抓住来自那里的人 以便


1156
00:38:15,546 --> 00:38:16,476
以后我们可以插入它们


1157
00:38:17,376 --> 00:38:22,876
接下来我们将要删除 在索引二处的项目


1158
00:38:23,126 --> 00:38:24,756
接下来我们需要按照升序的顺序来


1159
00:38:24,756 --> 00:38:26,366
处理我们的插入


1160
00:38:26,526 --> 00:38:27,916
我们只有一个 所以我们就


1161
00:38:27,916 --> 00:38:30,266
继续 插入它


1162
00:38:30,266 --> 00:38:31,586
最后 我们会要求


1163
00:38:31,586 --> 00:38:34,296
CollectionView 执行   


1164
00:38:34,296 --> 00:38:35,446
我们想要的动画     


1165
00:38:35,816 --> 00:38:38,466
现在 注意 我仍在调用


1166
00:38:38,466 --> 00:38:39,116
此处的移动  


1167
00:38:39,116 --> 00:38:40,966
我没有把它分解成


1168
00:38:40,966 --> 00:38:42,726
它的组件动作 因为


1169
00:38:42,726 --> 00:38:43,836
我们仍然想要 Collection View   


1170
00:38:44,046 --> 00:38:45,476
播放正确的动画


1171
00:38:45,476 --> 00:38:46,296
如果我们用我们的数据源


1172
00:38:46,386 --> 00:38:47,906
做出了正确的事情


1173
00:38:47,906 --> 00:38:49,086
那么 CollectionView 会根据动画做出         


1174
00:38:49,156 --> 00:38:50,616
正确的思考


1175
00:38:51,376 --> 00:38:51,756
好的


1176
00:38:51,846 --> 00:38:53,826
让我们回到模拟器中


1177
00:38:53,826 --> 00:38:56,826
看看当它工作时


1178
00:38:56,826 --> 00:38:58,066
我们的更新是什么样子


1179
00:38:58,936 --> 00:38:59,966
好的


1180
00:39:00,536 --> 00:39:01,146
这里什么也没有


1181
00:39:01,986 --> 00:39:02,176
>> 哇     


1182
00:39:02,826 --> 00:39:02,976
>> 很棒     


1183
00:39:03,516 --> 00:39:07,716
［ 掌声 ］


1184
00:39:08,216 --> 00:39:09,296
我将要重新加载


1185
00:39:09,296 --> 00:39:11,126
绕场慢跑一圈庆祝胜利


1186
00:39:11,126 --> 00:39:13,696
让我们继续吧


1187
00:39:13,946 --> 00:39:15,446
这看起来和我们的规格完全一样


1188
00:39:15,446 --> 00:39:16,356
不是吗


1189
00:39:16,356 --> 00:39:17,956
>> 很棒 了不起   


1190
00:39:17,986 --> 00:39:18,206
好的


1191
00:39:18,906 --> 00:39:19,766
让我们圆满完成它


1192
00:39:19,766 --> 00:39:21,496
我们涵盖了大量内容


1193
00:39:21,496 --> 00:39:22,796
你能回到幻灯片中吗 


1194
00:39:23,906 --> 00:39:25,716
我想发布一个调用来执行


1195
00:39:25,716 --> 00:39:28,576
所以如果你对构建自定义布局


1196
00:39:29,036 --> 00:39:30,636
感到紧张或焦虑


1197
00:39:30,636 --> 00:39:32,106
请采用我们今天刚刚


1198
00:39:32,106 --> 00:39:33,586
应用的内容 然后返回


1199
00:39:33,906 --> 00:39:35,196
研究并建立那些自定义


1200
00:39:35,196 --> 00:39:36,376
布局 建立行之有效的   


1201
00:39:36,806 --> 00:39:38,016
CollectionView 解决方案  


1202
00:39:38,016 --> 00:39:39,806
如果在你的 App 中


1203
00:39:39,806 --> 00:39:41,016
重新加载的数据导出都是


1204
00:39:41,016 --> 00:39:42,396
你正在失去


1205
00:39:42,396 --> 00:39:43,596
这些灰色的动画


1206
00:39:44,016 --> 00:39:45,046
它们会检查这些事情


1207
00:39:45,046 --> 00:39:46,376
看看为什么你不理解这些


1208
00:39:46,376 --> 00:39:47,596
或者不明白


1209
00:39:47,686 --> 00:39:48,966
为什么会发生这些事情


1210
00:39:48,966 --> 00:39:52,376
并修复这些地方


1211
00:39:52,546 --> 00:39:54,056
好的 所以想获取更多消息


1212
00:39:54,056 --> 00:39:55,286
你可以看到幻灯片这儿


1213
00:39:55,286 --> 00:39:55,536
有链接


1214
00:39:56,266 --> 00:39:57,236
并且明天上午 9 点


1215
00:39:57,236 --> 00:39:59,346
我们也有一个 CollectionView 的实验


1216
00:39:59,346 --> 00:40:00,746
如果你有任何


1217
00:40:00,746 --> 00:40:01,476
关于你的 CollectionViews 的问题或评论    


1218
00:40:01,476 --> 00:40:02,706
请顺便来


1219
00:40:02,706 --> 00:40:03,316
找我们聊一聊


1220
00:40:03,316 --> 00:40:05,096
Mohammed 和我都会在这 


1221
00:40:05,666 --> 00:40:07,376
谢谢大家来参加


1222
00:40:07,376 --> 00:40:08,386
我希望你们能享受


1223
00:40:08,386 --> 00:40:08,976
接下来的会议


1224
00:40:09,516 --> 00:40:13,500
［ 掌声 ］

