1
00:00:07,516 --> 00:00:14,500
[ 音乐 ]


2
00:00:18,316 --> 00:00:21,796
>> 女士们 先生们


3
00:00:21,796 --> 00:00:22,946
有请软件副总裁


4
00:00:22,946 --> 00:00:23,976
Sebastian Marineau-Mes


5
00:00:24,516 --> 00:00:31,796
[ 掌声 ]


6
00:00:32,296 --> 00:00:34,136
>> 大家下午好


7
00:00:34,606 --> 00:00:36,046
欢迎各位出席


8
00:00:36,046 --> 00:00:38,416
WWDC 2018 的下午讨论会


9
00:00:39,166 --> 00:00:40,906
今天上午的讨论会


10
00:00:40,906 --> 00:00:42,226
十分精彩


11
00:00:42,446 --> 00:00:43,476
我想你们都喜欢


12
00:00:43,476 --> 00:00:44,446
上午的讲演吧


13
00:00:44,546 --> 00:00:45,456
我们展示了很多


14
00:00:45,456 --> 00:00:46,086
很棒的内容


15
00:00:46,086 --> 00:00:48,166
我想你们已经看到


16
00:00:48,166 --> 00:00:49,736
2018 年是热切关注


17
00:00:49,736 --> 00:00:51,516
整个生态系统的基础的一年


18
00:00:51,516 --> 00:00:53,586
我们拓宽了


19
00:00:53,586 --> 00:00:55,816
关键技术领域的边界


20
00:00:56,636 --> 00:01:00,326
我们引入了大量的 API 和功能 从而提供了


21
00:01:00,326 --> 00:01:02,356
许多全新的体验


22
00:01:02,356 --> 00:01:06,566
涵盖机器学习 AR 高性能图形处理


23
00:01:06,566 --> 00:01:08,446
新的开发工具等等


24
00:01:08,446 --> 00:01:09,236
领域十分广泛


25
00:01:10,146 --> 00:01:13,456
API 中的许多改进 都适用于我们


26
00:01:13,456 --> 00:01:15,396
所有的操作系统


27
00:01:15,396 --> 00:01:16,736
因此每个操作系统都得以共同发展


28
00:01:17,116 --> 00:01:18,856
此外 iCloud 提供了


29
00:01:18,856 --> 00:01:20,496
一种结构 使我们的所有设备


30
00:01:20,496 --> 00:01:23,836
都能获得统一且一致的体验


31
00:01:24,956 --> 00:01:27,166
在 iOS 12 中 我们看到了大量


32
00:01:27,166 --> 00:01:28,126
令人难以置信的新功能


33
00:01:28,126 --> 00:01:29,706
包括 AR 中的新功能


34
00:01:29,706 --> 00:01:31,476
“信息” App 中的相机特效


35
00:01:31,476 --> 00:01:32,906
FaceTime 群聊


36
00:01:33,276 --> 00:01:35,756
屏幕使用时间数据


37
00:01:35,976 --> 00:01:38,136
功能更丰富的“照片” App


38
00:01:38,136 --> 00:01:40,946
当然还有对性能的显著提升


39
00:01:41,906 --> 00:01:44,186
在 macOS 中


40
00:01:44,186 --> 00:01:46,266
我们很兴奋地引入了深色模式


41
00:01:46,556 --> 00:01:48,246
桌面上“访达”全新的功能


42
00:01:48,736 --> 00:01:51,246
诸如“News”和“股市”的新 App


43
00:01:51,246 --> 00:01:53,306
重新构思设计的 Mac 版 App Store


44
00:01:53,306 --> 00:01:55,146
增强的隐私和安全保护


45
00:01:55,146 --> 00:01:58,406
watchOS 5 带来了


46
00:01:58,496 --> 00:01:59,876
可定制的互动通知功能


47
00:01:59,876 --> 00:02:02,166
对 App 内容的支持


48
00:02:02,166 --> 00:02:03,906
Siri 表盘中的“捷径”功能


49
00:02:04,006 --> 00:02:05,966
背景音频模式


50
00:02:05,966 --> 00:02:08,626
以及改进的体能训练 API


51
00:02:08,626 --> 00:02:12,526
在 Apple tvOS 中


52
00:02:12,526 --> 00:02:14,276
我们加入了对“杜比全景声”的支持


53
00:02:14,276 --> 00:02:16,016
这样视频 App 就可以提供


54
00:02:16,016 --> 00:02:16,736
沉浸式的音频体验


55
00:02:16,736 --> 00:02:18,386
我们在今天早上 体验了一下效果 真的很棒


56
00:02:18,886 --> 00:02:20,636
iOS 设备的安全密码共享


57
00:02:20,636 --> 00:02:22,596
使你可以轻松地在 Apple TV App 


58
00:02:22,596 --> 00:02:23,686
VPP 支持以及


59
00:02:23,686 --> 00:02:26,376
UIKit 和 TV MLKit 的增强功能之间


60
00:02:26,376 --> 00:02:28,416
进行操作


61
00:02:28,416 --> 00:02:30,816
从而更轻松地构建


62
00:02:30,816 --> 00:02:32,136
视觉和体验俱佳的


63
00:02:32,136 --> 00:02:33,296
原生 App


64
00:02:34,526 --> 00:02:36,526
我们创造了优秀的平台


65
00:02:36,526 --> 00:02:38,156
真正影响世界的


66
00:02:38,466 --> 00:02:39,676
是你们的 App


67
00:02:39,676 --> 00:02:40,866
我们的生态系统的


68
00:02:40,866 --> 00:02:42,196
广度和规模


69
00:02:42,196 --> 00:02:44,126
使我们成为用户生活中


70
00:02:44,126 --> 00:02:46,166
必不可少的一部分


71
00:02:47,016 --> 00:02:48,386
无论是帮助他们探索创造力


72
00:02:48,386 --> 00:02:52,956
与最关心的人取得联系


73
00:02:52,956 --> 00:02:54,276
还是改变医疗保健服务的提供方式


74
00:02:54,276 --> 00:02:56,656
我们共同关注


75
00:02:56,656 --> 00:02:58,536
用户生活中


76
00:02:58,536 --> 00:03:00,416
十分重要的方方面面


77
00:03:00,416 --> 00:03:02,396
并为他们提供了出色的体验


78
00:03:03,586 --> 00:03:04,966
我们认为 当技术改善每一个人的生活的时候


79
00:03:05,016 --> 00:03:07,576
它才是最强大的


80
00:03:08,506 --> 00:03:10,116
因此 我们自始至终致力于


81
00:03:10,116 --> 00:03:13,456
让每一款 Apple 产品都可用且易用


82
00:03:14,176 --> 00:03:15,826
为了使我们的平台


83
00:03:16,226 --> 00:03:18,026
以及你们所有的 App


84
00:03:18,026 --> 00:03:19,816
都方便使用


85
00:03:19,816 --> 00:03:21,166
我们提供了强大的功能


86
00:03:21,166 --> 00:03:22,496
并且希望你们能一直利用这些功能


87
00:03:22,866 --> 00:03:24,996
因为这对那些用户来说 是非常重要的


88
00:03:26,416 --> 00:03:28,166
我们的用户也将他们的


89
00:03:28,166 --> 00:03:29,786
最宝贵的数据托付给我们


90
00:03:30,216 --> 00:03:31,676
所以在 Apple 我们不断深入地思考


91
00:03:31,676 --> 00:03:33,096
隐私和安全问题


92
00:03:33,566 --> 00:03:35,216
我想邀请 Katie 上台


93
00:03:35,216 --> 00:03:36,846
与你们继续讨论这一点


94
00:03:36,846 --> 00:03:36,976
Katie


95
00:03:37,516 --> 00:03:45,096
[ 掌声 ]


96
00:03:45,596 --> 00:03:46,246
>> 谢谢 Sebastian


97
00:03:46,246 --> 00:03:49,176
提到隐私我们就会考虑


98
00:03:49,176 --> 00:03:51,066
如何在我们的产品和服务中


99
00:03:51,066 --> 00:03:52,646
建立隐私保护


100
00:03:52,646 --> 00:03:54,376
可能会有很多细节


101
00:03:54,376 --> 00:03:55,586
需要考虑


102
00:03:55,906 --> 00:03:57,006
但是要考虑的首要内容是


103
00:03:57,006 --> 00:03:58,836
信任


104
00:03:58,836 --> 00:04:01,776
我们所有人都要确保


105
00:04:01,776 --> 00:04:03,306
用户可以信任我们


106
00:04:03,306 --> 00:04:06,306
能够保护他们


107
00:04:06,306 --> 00:04:07,426
最敏感的数据


108
00:04:08,056 --> 00:04:09,946
从财务数据到通讯


109
00:04:09,946 --> 00:04:12,446
再到位置信息和照片


110
00:04:12,446 --> 00:04:15,556
随着科技越来越


111
00:04:15,556 --> 00:04:17,476
融入我们的生活


112
00:04:17,476 --> 00:04:19,516
信任变得愈发重要


113
00:04:20,016 --> 00:04:22,146
那么 如何与用户建立信任呢


114
00:04:22,946 --> 00:04:25,366
我们将重点放在四个关键因素上


115
00:04:25,366 --> 00:04:26,996
让我为你们逐个举例展示


116
00:04:28,286 --> 00:04:30,136
我们不需要用户


117
00:04:30,206 --> 00:04:32,186
在“地图” App 上登录


118
00:04:32,186 --> 00:04:34,296
而是使用旋转随机标识符


119
00:04:34,676 --> 00:04:36,016
在实现相关功能时


120
00:04:36,016 --> 00:04:38,366
它不能关联到特定的 Apple ID


121
00:04:39,636 --> 00:04:41,926
我们使用设备内置智能


122
00:04:41,926 --> 00:04:43,906
来支持强大的功能


123
00:04:43,906 --> 00:04:46,046
比如“照片” App 中的搜索功能和“回忆”相册


124
00:04:46,576 --> 00:04:50,146
不需要云分析照片就可以实现


125
00:04:50,326 --> 00:04:52,846
我们设计了面容 ID


126
00:04:53,006 --> 00:04:55,106
所有的面容 ID 数据


127
00:04:55,106 --> 00:04:56,886
都受 Secure Enclave 的加密和保护


128
00:04:56,886 --> 00:04:58,226
且永远不会离开你的设备


129
00:04:59,636 --> 00:05:01,266
当我们收集用户数据


130
00:05:01,816 --> 00:05:03,076
或允许第三方


131
00:05:03,076 --> 00:05:05,186
收集照片等数据时


132
00:05:05,186 --> 00:05:06,376
我们要确保一切在


133
00:05:06,376 --> 00:05:07,046
用户同意的情况下进行


134
00:05:07,176 --> 00:05:09,886
让我们深入了解一下


135
00:05:09,886 --> 00:05:12,266
透明和控制


136
00:05:12,916 --> 00:05:14,386
当请求访问位置


137
00:05:14,386 --> 00:05:16,026
或照片时


138
00:05:16,026 --> 00:05:18,036
你们一定看到过这些警报


139
00:05:18,036 --> 00:05:20,506
这个警报包含一个


140
00:05:20,506 --> 00:05:21,326
目的字符串


141
00:05:21,596 --> 00:05:23,606
它是由你们提供的字符串


142
00:05:23,606 --> 00:05:25,236
用来解释


143
00:05:25,236 --> 00:05:27,446
请求数据的原因


144
00:05:27,516 --> 00:05:28,366
以及你会用数据去做什么


145
00:05:29,316 --> 00:05:31,036
一个好的字符串


146
00:05:31,036 --> 00:05:32,966
包含一个清晰的解释


147
00:05:32,966 --> 00:05:36,566
说明它将启用哪些特性


148
00:05:36,566 --> 00:05:38,236
以及改进哪些功能


149
00:05:39,636 --> 00:05:42,186
你的解释越具体


150
00:05:42,186 --> 00:05:44,206
用户们就越有可能


151
00:05:44,206 --> 00:05:45,936
授予访问权限


152
00:05:47,516 --> 00:05:48,876
我们认为


153
00:05:48,876 --> 00:05:51,276
确保用户知晓


154
00:05:51,276 --> 00:05:53,016
他们的数据将被如何使用


155
00:05:53,016 --> 00:05:53,966
是十分重要的


156
00:05:54,636 --> 00:05:56,756
App 审核现在更加关注


157
00:05:56,756 --> 00:05:58,426
这些目的字符串


158
00:05:59,106 --> 00:06:01,176
如果你们有一个这样的目的字符串


159
00:06:01,176 --> 00:06:03,256
它显然是无效的


160
00:06:03,256 --> 00:06:05,686
那么你们可能会被


161
00:06:05,686 --> 00:06:06,666
App 审核拒绝


162
00:06:06,666 --> 00:06:10,736
这个字符串从技术上解释了


163
00:06:10,736 --> 00:06:12,326
如何使用数据


164
00:06:12,976 --> 00:06:15,656
但是它缺乏细节


165
00:06:15,656 --> 00:06:17,566
以至于用户很难


166
00:06:17,566 --> 00:06:20,286
做出决定


167
00:06:20,356 --> 00:06:22,806
有些用户可能会担心


168
00:06:22,806 --> 00:06:24,326
App 的麦克风的访问权限


169
00:06:24,586 --> 00:06:27,366
但它可能是


170
00:06:27,366 --> 00:06:29,436
你的 App 中的关键功能


171
00:06:30,116 --> 00:06:31,706
这就是为什么


172
00:06:31,706 --> 00:06:33,386
我们需要一个清晰的


173
00:06:33,436 --> 00:06:35,876
目的字符串


174
00:06:35,876 --> 00:06:39,496
来解释如何使用数据


175
00:06:39,646 --> 00:06:41,476
优秀的功能


176
00:06:41,476 --> 00:06:42,946
不应以牺牲隐私为代价


177
00:06:43,436 --> 00:06:45,506
相反地 它可以通过告知用户


178
00:06:45,506 --> 00:06:47,276
你们将如何保护他们的数据


179
00:06:47,276 --> 00:06:48,176
以及如何使用这些数据


180
00:06:48,176 --> 00:06:48,976
从而为隐私安全提供保障


181
00:06:54,276 --> 00:06:56,426
我们也非常关心安全问题


182
00:06:56,846 --> 00:06:58,436
为了保护设备上


183
00:06:58,506 --> 00:07:00,706
App 和云中的


184
00:07:00,706 --> 00:07:03,176
所有敏感数据


185
00:07:03,176 --> 00:07:06,076
我们应从整体上 考虑安全问题


186
00:07:06,806 --> 00:07:09,336
我们提供的技术


187
00:07:09,336 --> 00:07:11,556
可以让你们更容易地构建


188
00:07:11,616 --> 00:07:12,976
安全的 App


189
00:07:13,076 --> 00:07:14,606
以下是一些关于


190
00:07:14,606 --> 00:07:16,016
我们所提供的技术的例子


191
00:07:17,336 --> 00:07:20,876
在 iOS 上 我们默认


192
00:07:20,876 --> 00:07:22,316
自动加密 App 数据


193
00:07:23,416 --> 00:07:25,736
通过网络


194
00:07:25,736 --> 00:07:27,506
“App Transport Security（App 传输安全）”


195
00:07:27,506 --> 00:07:29,186
意味着你无需再修补


196
00:07:29,186 --> 00:07:29,816
客户端网络库


197
00:07:31,516 --> 00:07:33,506
接下来是 CloudKit


198
00:07:33,506 --> 00:07:35,836
在云中 CloudKit 安全地跨设备


199
00:07:35,936 --> 00:07:37,856
存储和同步数据


200
00:07:39,186 --> 00:07:40,736
使你们可以专注于为用户


201
00:07:40,736 --> 00:07:42,546
构建良好的体验


202
00:07:42,866 --> 00:07:44,186
而不必担心


203
00:07:44,186 --> 00:07:46,446
管理帐户状态


204
00:07:46,446 --> 00:07:47,326
或帐户凭证


205
00:07:48,076 --> 00:07:50,456
它使你能够获得


206
00:07:50,456 --> 00:07:51,876
最佳的类内安全保障


207
00:07:51,876 --> 00:07:54,026
最佳的类内安全保障


208
00:07:54,026 --> 00:07:56,466
包括内置的双重认证


209
00:07:57,256 --> 00:07:59,076
自双重认证在三年前推出以来


210
00:07:59,076 --> 00:08:01,546
超过三分之二的


211
00:08:01,546 --> 00:08:03,766
Apple ID 帐户


212
00:08:03,766 --> 00:08:05,536
采用了双重认证


213
00:08:06,506 --> 00:08:08,956
与其他行业相比


214
00:08:08,956 --> 00:08:10,206
这是一个巨大的成功


215
00:08:10,576 --> 00:08:13,196
我们发现他们只有不到 10% 的帐户


216
00:08:13,196 --> 00:08:15,796
受到双因素认证的保护


217
00:08:16,686 --> 00:08:18,556
但这对我们很重要


218
00:08:19,206 --> 00:08:21,866
我们一直致力于


219
00:08:21,866 --> 00:08:24,126
确保用户帐户的安全


220
00:08:24,686 --> 00:08:26,396
这样即使别人知道你的密码


221
00:08:26,396 --> 00:08:28,906
你也是唯一


222
00:08:28,906 --> 00:08:30,566
可以访问你的帐户的人


223
00:08:31,146 --> 00:08:35,216
在 iOS 12 中


224
00:08:35,216 --> 00:08:36,836
我们想让你和你的用户


225
00:08:37,015 --> 00:08:39,826
能够更加方便和安全地使用密码


226
00:08:41,416 --> 00:08:42,956
我们都知道


227
00:08:42,956 --> 00:08:44,646
一个安全的密码对于


228
00:08:44,976 --> 00:08:47,236
保证信息和身份的安全


229
00:08:47,236 --> 00:08:48,546
至关重要


230
00:08:49,926 --> 00:08:51,936
但密码可能很难记住


231
00:08:51,936 --> 00:08:54,586
所以用户会倾向


232
00:08:54,586 --> 00:08:55,656
使用弱密码或重复使用密码


233
00:08:56,416 --> 00:08:59,506
这也给开发人员带来了问题


234
00:09:00,606 --> 00:09:03,236
用户可能会放弃注册帐户


235
00:09:03,306 --> 00:09:05,076
你还必须要处理


236
00:09:05,076 --> 00:09:06,386
密码重置请求


237
00:09:07,536 --> 00:09:09,276
但最糟糕的是


238
00:09:09,276 --> 00:09:10,736
过弱的密码


239
00:09:10,736 --> 00:09:13,026
可能导致帐户被盗


240
00:09:13,766 --> 00:09:18,036
我们有了一个解决方案


241
00:09:18,036 --> 00:09:19,926
iOS 12 可以让你们和你们的用户


242
00:09:19,926 --> 00:09:21,696
通过创建 存储和自动填充密码


243
00:09:21,976 --> 00:09:24,116
来轻松地使用强


244
00:09:24,406 --> 00:09:26,606
且独特的密码


245
00:09:27,426 --> 00:09:29,826
但真正了不起的是


246
00:09:30,076 --> 00:09:31,816
它也可以在你的


247
00:09:31,816 --> 00:09:34,066
iOS App 中使用


248
00:09:34,066 --> 00:09:35,936
这样无论用户在哪里创建帐户


249
00:09:35,936 --> 00:09:38,016
他们都能够得到一个强密码


250
00:09:38,016 --> 00:09:39,766
并且同步到所有的设备上


251
00:09:39,766 --> 00:09:42,586
自动提供强密码


252
00:09:42,586 --> 00:09:44,396
非常简单


253
00:09:45,066 --> 00:09:46,206
事实上 你们可以不需要


254
00:09:46,206 --> 00:09:48,696
在你们的 App 中做任何改变


255
00:09:48,696 --> 00:09:51,396
为了确保它能正常工作


256
00:09:51,396 --> 00:09:53,736
你们需要把你们的 App 和域名关联起来


257
00:09:54,416 --> 00:09:55,786
如果你们采用了通用链接


258
00:09:56,196 --> 00:09:57,966
你们可能已经这样做了


259
00:09:59,326 --> 00:10:00,316
然后你们需要标记


260
00:10:00,316 --> 00:10:00,976
用户名和密码字段


261
00:10:01,056 --> 00:10:04,056
如果密码不符合


262
00:10:04,056 --> 00:10:06,786
你们的 App 的要求


263
00:10:06,786 --> 00:10:10,016
你们甚至可以定制密码


264
00:10:10,216 --> 00:10:11,886
此外 我们也让用户


265
00:10:11,886 --> 00:10:13,866
更容易地获取密码


266
00:10:14,796 --> 00:10:16,596
他们只需询问 Siri


267
00:10:16,596 --> 00:10:17,806
一旦经过认证


268
00:10:17,996 --> 00:10:19,666
就能看到他们的密码清单


269
00:10:21,126 --> 00:10:23,256
最重要的是


270
00:10:23,256 --> 00:10:25,486
为了帮助清除旧密码


271
00:10:26,216 --> 00:10:27,556
你们可以轻松地判断


272
00:10:27,556 --> 00:10:29,826
你们的密码是否在


273
00:10:29,826 --> 00:10:31,516
现有帐户中被重复使用


274
00:10:31,516 --> 00:10:32,456
现有帐户中被重复使用


275
00:10:33,176 --> 00:10:35,846
你们的 iPhone 会标记这些密码


276
00:10:35,876 --> 00:10:37,456
然后引领你们访问相关网站


277
00:10:37,456 --> 00:10:39,136
你们可以在那里


278
00:10:39,136 --> 00:10:41,326
将其替换为强密码


279
00:10:44,076 --> 00:10:45,796
现在 处理那些


280
00:10:45,796 --> 00:10:47,076
发送给你们和你们的用户的


281
00:10:47,076 --> 00:10:49,326
一次性验证码


282
00:10:49,616 --> 00:10:52,106
也变得更加容易


283
00:10:53,646 --> 00:10:54,886
它们会自动出现在


284
00:10:54,886 --> 00:10:57,176
快速输入栏中 你们只需轻点一下 


285
00:10:57,176 --> 00:10:58,856
就可以填入它们


286
00:10:59,516 --> 00:11:05,876
[ 掌声 ]


287
00:11:06,376 --> 00:11:08,026
我们还为第三方密码管理器


288
00:11:08,026 --> 00:11:10,306
创建了一个新的扩展功能


289
00:11:10,306 --> 00:11:12,586
使它们能够为 “Safari 浏览器” 中的


290
00:11:12,586 --> 00:11:15,966
自动填充和 App 提供密码


291
00:11:16,516 --> 00:11:22,646
[ 掌声 ]


292
00:11:23,146 --> 00:11:24,906
这些功能


293
00:11:24,906 --> 00:11:27,896
在 iOS Mac


294
00:11:28,176 --> 00:11:30,616
甚至 Apple TV 上


295
00:11:30,616 --> 00:11:33,376
都能提供很好的体验


296
00:11:33,586 --> 00:11:36,146
我们非常关心隐私和安全


297
00:11:36,146 --> 00:11:38,906
它们是我们所有产品的基础


298
00:11:39,566 --> 00:11:42,686
因此 我们为你们提供了


299
00:11:42,686 --> 00:11:44,696
在此基础上构建 App 的能力


300
00:11:45,076 --> 00:11:47,726
从而保护并保障安全性


301
00:11:47,726 --> 00:11:48,536
以及赢得用户的信任


302
00:11:49,156 --> 00:11:50,976
现在 让我们请回 Sebastian


303
00:11:51,516 --> 00:11:57,976
[ 掌声 ]


304
00:11:58,476 --> 00:11:59,266
>> 谢谢 Katie


305
00:11:59,586 --> 00:12:00,856
这些新的密码功能


306
00:12:00,856 --> 00:12:02,436
是不是很神奇


307
00:12:02,736 --> 00:12:03,676
非常 非常棒


308
00:12:03,676 --> 00:12:04,326
棒极了


309
00:12:04,456 --> 00:12:05,046
谢谢大家


310
00:12:06,096 --> 00:12:07,996
我们向我们的用户承诺


311
00:12:07,996 --> 00:12:10,076
提供优秀的体验


312
00:12:10,256 --> 00:12:11,606
我们通常将


313
00:12:11,606 --> 00:12:14,326
认为出色的体验


314
00:12:14,326 --> 00:12:15,336
应该是优秀的创新功能


315
00:12:16,556 --> 00:12:17,926
但同样重要的是


316
00:12:17,926 --> 00:12:19,556
不要在不可预知和缓慢的软件中


317
00:12:19,556 --> 00:12:21,576
妥协了愉悦的体验


318
00:12:22,436 --> 00:12:24,956
这是 Apple 工程团队的首要任务


319
00:12:25,586 --> 00:12:27,326
我们开发工具和实践


320
00:12:27,326 --> 00:12:28,396
来帮助我们实现这一点


321
00:12:28,396 --> 00:12:30,576
我们将这些工具提供给你们


322
00:12:30,636 --> 00:12:32,396
这样你们就可以


323
00:12:32,396 --> 00:12:34,376
在 App 中应用它们


324
00:12:35,306 --> 00:12:36,586
大量的工具和技术可供你们使用


325
00:12:36,586 --> 00:12:38,956
从而帮助你们


326
00:12:38,956 --> 00:12:40,976
使代码更加可靠和稳定


327
00:12:41,326 --> 00:12:42,356
对于你们的 App 来说


328
00:12:42,356 --> 00:12:43,066
可预测性十分重要


329
00:12:43,596 --> 00:12:45,006
当然 让你们的 App 快速地运行


330
00:12:45,006 --> 00:12:46,406
同样至关重要


331
00:12:46,406 --> 00:12:47,746
为此 我们为你们提供了


332
00:12:47,746 --> 00:12:49,706
许多的性能工具


333
00:12:50,586 --> 00:12:51,696
我们都知道


334
00:12:51,696 --> 00:12:55,416
跨越复杂系统和 App


335
00:12:55,686 --> 00:12:56,456
的性能优化是一项挑战


336
00:12:56,986 --> 00:12:59,696
今年 我们在这方面做了很多工作


337
00:12:59,986 --> 00:13:02,806
我们开发了许多新的工具和技术


338
00:13:02,806 --> 00:13:03,936
并希望为你们带来


339
00:13:03,936 --> 00:13:04,736
这些强大的新功能


340
00:13:05,496 --> 00:13:07,696
在 Xcode 10 中


341
00:13:07,696 --> 00:13:09,276
我们扩展了 Instruments 的功能


342
00:13:09,496 --> 00:13:10,856
使你们能够


343
00:13:10,856 --> 00:13:12,216
对自己的自定义工具和工作流


344
00:13:12,216 --> 00:13:13,466
进行更丰富的操作


345
00:13:14,286 --> 00:13:15,706
这一切都是从一个


346
00:13:15,706 --> 00:13:16,806
旧有的 API 开始的


347
00:13:17,106 --> 00:13:18,246
你们有些人可能知道


348
00:13:18,246 --> 00:13:19,196
并使用过它


349
00:13:19,616 --> 00:13:21,126
我知道我应该感到内疚


350
00:13:21,596 --> 00:13:24,316
printf 它就像 API 中瑞士军刀


351
00:13:24,316 --> 00:13:25,816
我们使用它来


352
00:13:25,816 --> 00:13:27,276
调试和跟踪代码


353
00:13:27,276 --> 00:13:28,166
但我们都知道它效率很低


354
00:13:28,676 --> 00:13:30,156
两年前 我们为你们带来了


355
00:13:30,156 --> 00:13:32,546
一个叫做 os_log 的新 API


356
00:13:32,906 --> 00:13:34,266
它是一种高效和高性能的 API


357
00:13:34,266 --> 00:13:36,266
可以在系统的


358
00:13:36,266 --> 00:13:38,006
各个层面中


359
00:13:38,006 --> 00:13:38,626
捕获日志和跟踪点


360
00:13:39,076 --> 00:13:41,366
它高效且轻量


361
00:13:41,366 --> 00:13:42,836
如果你们还没有使用过它


362
00:13:42,836 --> 00:13:43,436
你们真的应该试试


363
00:13:43,436 --> 00:13:43,926
它很棒


364
00:13:44,566 --> 00:13:47,466
今年 我们基于 os_log


365
00:13:47,466 --> 00:13:49,336
加入了 os_signpost


366
00:13:50,016 --> 00:13:51,326
它是一种功能强大的技术


367
00:13:51,376 --> 00:13:53,656
为你们的 App 提供了丰富的


368
00:13:53,656 --> 00:13:55,776
其格式能够被 Instruments 解译的


369
00:13:55,776 --> 00:13:57,606
上下文数据


370
00:13:57,606 --> 00:13:59,996
因此 你们可以使用 os_signpost


371
00:13:59,996 --> 00:14:01,816
跟踪你们的代码


372
00:14:01,816 --> 00:14:03,786
也可以使用它


373
00:14:03,936 --> 00:14:05,986
标记函数的关键部分


374
00:14:06,586 --> 00:14:08,226
一旦你获得了数据


375
00:14:08,226 --> 00:14:09,986
就到了内置的自定义 Instruments 可视化


376
00:14:10,306 --> 00:14:12,266
大显身手的时候了


377
00:14:13,256 --> 00:14:14,756
现在我们有了这个新的


378
00:14:14,756 --> 00:14:16,656
自定义 Instruments 支持


379
00:14:16,656 --> 00:14:18,086
我认为 只有通过展示


380
00:14:18,086 --> 00:14:19,556
才能向你们证明它的强大


381
00:14:19,846 --> 00:14:21,236
接下来 Ken 将向你们展示


382
00:14:21,236 --> 00:14:21,886
这个工具能做些什么


383
00:14:21,886 --> 00:14:21,976
Ken


384
00:14:22,516 --> 00:14:28,066
[ 掌声 ]


385
00:14:28,566 --> 00:14:29,536
>> 谢谢 Sebastian


386
00:14:30,176 --> 00:14:31,416
我正在开发我的


387
00:14:31,416 --> 00:14:33,086
太阳系探索 App


388
00:14:33,656 --> 00:14:35,186
但我注意到了


389
00:14:35,186 --> 00:14:36,746
一些存在的性能问题


390
00:14:36,996 --> 00:14:38,506
App 在更新数据的过程中


391
00:14:38,506 --> 00:14:39,646
每当它启动


392
00:14:39,646 --> 00:14:40,846
或者当我像这样按 command-R 时


393
00:14:41,126 --> 00:14:43,106
你们可以看到


394
00:14:43,106 --> 00:14:45,306
UI 会变得很不稳定


395
00:14:45,756 --> 00:14:46,576
行星在围绕轨道


396
00:14:46,576 --> 00:14:47,766
运行的时候


397
00:14:47,766 --> 00:14:48,486
会断断续续


398
00:14:48,936 --> 00:14:49,786
然而更新完成后


399
00:14:49,786 --> 00:14:52,006
又变得十分流畅


400
00:14:52,556 --> 00:14:53,556
所以我想搞清楚


401
00:14:53,556 --> 00:14:54,126
问题的所在


402
00:14:55,166 --> 00:14:56,996
回到我的代码中


403
00:14:57,906 --> 00:15:00,426
PlanetUpdateService.swift


404
00:15:00,426 --> 00:15:02,106
这是处理


405
00:15:02,106 --> 00:15:03,056
数据更新的文件


406
00:15:03,056 --> 00:15:05,096
我想添加一些日志


407
00:15:05,176 --> 00:15:06,926
一些 signpost 来帮助我弄明白


408
00:15:06,926 --> 00:15:08,266
代码中到底发生了什么


409
00:15:08,266 --> 00:15:10,696
我将从添加一个


410
00:15:10,746 --> 00:15:11,506
日志句柄开始


411
00:15:11,676 --> 00:15:13,566
我将使用新的


412
00:15:13,566 --> 00:15:17,296
pointsOfInterest 类别


413
00:15:17,396 --> 00:15:20,166
这是一个特殊的新类别


414
00:15:20,676 --> 00:15:22,276
我用它记录的任何东西


415
00:15:22,346 --> 00:15:24,846
都会自动显示在 Instruments 里面


416
00:15:25,426 --> 00:15:27,256
我想要分析的第一件是


417
00:15:27,256 --> 00:15:30,596
启动这个更新时 发生了什么


418
00:15:30,596 --> 00:15:32,276
它是在这个方法中发生的


419
00:15:32,276 --> 00:15:33,756
我要在这里加上


420
00:15:33,756 --> 00:15:34,906
第一个 log 语句


421
00:15:34,906 --> 00:15:36,186
“Requesting planet data（请求行星数据）”


422
00:15:36,186 --> 00:15:38,176
我们之后就能看到


423
00:15:39,296 --> 00:15:40,656
然后我真正想知道的是


424
00:15:40,656 --> 00:15:43,156
处理和解析所有这些


425
00:15:43,156 --> 00:15:45,706
我正在使用的数据


426
00:15:45,776 --> 00:15:46,666
需要多长时间


427
00:15:47,476 --> 00:15:50,336
这些任务是在这里完成的


428
00:15:50,796 --> 00:15:52,476
为了更直观一些


429
00:15:52,476 --> 00:15:53,906
我要添加一些 signpost


430
00:15:54,476 --> 00:15:55,866
第一个 signpost 将是一个


431
00:15:56,666 --> 00:15:58,946
begin 类别的 signpost


432
00:15:58,946 --> 00:16:00,966
放在我开始任务之前


433
00:16:00,966 --> 00:16:02,526
然后 我将在这里


434
00:16:02,526 --> 00:16:05,206
添加另一个 signpost


435
00:16:05,206 --> 00:16:06,226
也就是在我结束任务之后


436
00:16:06,456 --> 00:16:08,166
它是一个 end 类别的 signpost


437
00:16:08,166 --> 00:16:09,986
这将为我创建 一个时间区间


438
00:16:10,706 --> 00:16:11,646
自动计算时间差


439
00:16:11,646 --> 00:16:13,436
并直暴露过 Instruments


440
00:16:13,436 --> 00:16:14,196
显示出来


441
00:16:15,056 --> 00:16:16,626
让我们在 Instruments 中分析一下


442
00:16:16,626 --> 00:16:18,486
看看我们能得到什么样的数据


443
00:16:19,296 --> 00:16:21,236
所以我们选择 “Product”-


444
00:16:21,386 --> 00:16:22,546
“Profile（分析）”


445
00:16:22,806 --> 00:16:24,086
Xcode 会构建我的 App


446
00:16:24,876 --> 00:16:26,456
启动 Instruments 


447
00:16:26,486 --> 00:16:30,066
然后我们会在这里 看到数据流


448
00:16:30,486 --> 00:16:31,506
在这里 你们可以看到


449
00:16:31,506 --> 00:16:32,536
pointsOfInterest 的轨迹


450
00:16:33,156 --> 00:16:34,596
我用 pointsOfInterest 类别


451
00:16:34,596 --> 00:16:35,376
记录的所有东西


452
00:16:35,376 --> 00:16:37,236
都显示在这里


453
00:16:37,236 --> 00:16:39,566
这是我的数据 我想放大


454
00:16:39,566 --> 00:16:40,816
所以我需要按住 Option 键


455
00:16:40,816 --> 00:16:42,026
然后点按并拖拽


456
00:16:42,026 --> 00:16:43,016
这样我们可以更清楚地观察


457
00:16:43,746 --> 00:16:45,086
我们在这里可以看到一个小标志


458
00:16:45,086 --> 00:16:46,766
上面写着请求行星数据


459
00:16:47,326 --> 00:16:48,876
这是我在代码中添加的


460
00:16:48,876 --> 00:16:50,136
第一个日志的结果


461
00:16:51,056 --> 00:16:52,506
这里的蓝条


462
00:16:52,996 --> 00:16:55,376
是我处理和解析数据的地方


463
00:16:55,626 --> 00:16:56,866
这些就是我添加的


464
00:16:56,866 --> 00:16:58,126
signpost 的结果


465
00:16:58,906 --> 00:17:00,406
当我看到这个的时候


466
00:17:00,406 --> 00:17:02,626
我想我马上就知道 问题出在哪里了


467
00:17:02,886 --> 00:17:04,256
每次我在这里


468
00:17:04,306 --> 00:17:05,756
处理并解析数据时


469
00:17:05,756 --> 00:17:07,336
我都可以看到主线程的 CPU 使用量


470
00:17:07,336 --> 00:17:08,846
出现相应的峰值


471
00:17:08,846 --> 00:17:11,096
对我来说 这是一个明显的危险信号


472
00:17:11,096 --> 00:17:13,376
因为我可能正在主线程上


473
00:17:13,376 --> 00:17:15,126
进行分析和处理


474
00:17:15,746 --> 00:17:17,326
这将导致不尽流畅的 UI


475
00:17:18,066 --> 00:17:19,876
你们可以看到 


476
00:17:19,876 --> 00:17:21,256
通过一个日志语句和几个 signpost


477
00:17:21,256 --> 00:17:23,876
我已经能够对我的 App 的性能


478
00:17:23,876 --> 00:17:26,236
进行一些非常深入的了解


479
00:17:26,486 --> 00:17:28,465
借助新的工具


480
00:17:28,465 --> 00:17:29,866
你们能做的事情不仅这些


481
00:17:30,286 --> 00:17:32,516
在 Xcode 10 中有一个新的模板


482
00:17:32,516 --> 00:17:34,366
可以让你们创建一个


483
00:17:34,546 --> 00:17:37,296
完全自定义的 Instruments 包


484
00:17:37,786 --> 00:17:38,836
我的一个团队伙伴


485
00:17:38,836 --> 00:17:40,286
已经着手创建了一个 Instruments 包


486
00:17:40,286 --> 00:17:41,686
它基于一些网络


487
00:17:41,686 --> 00:17:43,386
一些他在我们的网络框架中


488
00:17:43,596 --> 00:17:44,006
添加过的 signpost


489
00:17:44,456 --> 00:17:45,516
我的“下载”文件夹里有


490
00:17:45,516 --> 00:17:46,796
他发给我的最新版本


491
00:17:47,236 --> 00:17:50,056
所以让我打开它


492
00:17:50,056 --> 00:17:51,576
当我打开的时候


493
00:17:51,576 --> 00:17:52,446
Instruments 会询问我是否安装


494
00:17:53,036 --> 00:17:54,376
那么我选择 “Install（安装）”


495
00:17:54,786 --> 00:17:56,056
现在你们可以看到


496
00:17:56,056 --> 00:17:56,756
我有了一个新的模板


497
00:17:56,756 --> 00:17:57,636
这里是我的模板选择器


498
00:17:57,636 --> 00:17:58,696
叫做 “Solar System（太阳系）”


499
00:17:58,696 --> 00:17:59,866
我需要连按它


500
00:17:59,866 --> 00:18:02,516
之后我们再一次开始


501
00:18:02,516 --> 00:18:03,126
记录数据


502
00:18:04,136 --> 00:18:05,826
就像之前一样


503
00:18:05,826 --> 00:18:07,136
我需要跟踪 pointsOfInterest


504
00:18:07,136 --> 00:18:08,126
这里有我想要


505
00:18:08,126 --> 00:18:08,896
观察的数据


506
00:18:09,436 --> 00:18:11,356
但是现在 我有了更多


507
00:18:11,356 --> 00:18:13,096
关于我所发出的网络请求


508
00:18:13,096 --> 00:18:15,076
的详细信息


509
00:18:15,536 --> 00:18:16,506
同样地 我需要放大一下


510
00:18:16,506 --> 00:18:16,976
这样我们可以看得更清楚一些


511
00:18:22,406 --> 00:18:24,136
这个定制的 Instruments 包


512
00:18:24,466 --> 00:18:26,536
使我能够


513
00:18:26,536 --> 00:18:28,706
清楚地看到


514
00:18:28,706 --> 00:18:30,566
我是如何使用这个框架的


515
00:18:31,016 --> 00:18:32,426
例如这里


516
00:18:32,626 --> 00:18:34,226
它向我展示了


517
00:18:34,226 --> 00:18:35,746
我每 0.1 秒平均发出了


518
00:18:35,746 --> 00:18:37,506
多少个网络请求


519
00:18:38,226 --> 00:18:39,456
然后在这里


520
00:18:39,456 --> 00:18:41,256
这个跟踪显示了


521
00:18:41,256 --> 00:18:43,536
关于每个网络请求的详细信息


522
00:18:43,796 --> 00:18:44,726
耗时多久


523
00:18:45,026 --> 00:18:46,326
它甚至用红色突出显示


524
00:18:46,326 --> 00:18:47,396
重复的请求


525
00:18:47,756 --> 00:18:48,766
在这些地方


526
00:18:48,946 --> 00:18:50,386
我不止一次请求


527
00:18:50,386 --> 00:18:51,816
相同的数据


528
00:18:51,816 --> 00:18:53,066
看起来大约超过一半的时间


529
00:18:53,146 --> 00:18:55,406
我都在做这样的事情


530
00:18:55,666 --> 00:18:56,836
所以我一直在浪费


531
00:18:56,836 --> 00:18:58,056
大量的性能


532
00:18:58,536 --> 00:18:59,816
这些正是我需要的信息


533
00:18:59,816 --> 00:19:01,796
帮助我更有效地


534
00:19:01,796 --> 00:19:04,086
使用这个框架


535
00:19:04,766 --> 00:19:07,126
signpost 和定制工具


536
00:19:07,126 --> 00:19:09,146
是两种非常好的方法


537
00:19:09,146 --> 00:19:10,926
让你们可以在 Instruments 中


538
00:19:10,926 --> 00:19:12,516
查看你们的数据


539
00:19:12,856 --> 00:19:13,566
那么这就是


540
00:19:13,566 --> 00:19:14,316
新的性能工具


541
00:19:14,476 --> 00:19:14,976
Sebastian


542
00:19:15,516 --> 00:19:19,546
[ 掌声 ]


543
00:19:20,046 --> 00:19:20,356
>> 好的


544
00:19:20,706 --> 00:19:21,476
谢谢 Ken


545
00:19:21,476 --> 00:19:23,866
这真是一个精彩的演示


546
00:19:23,866 --> 00:19:25,276
这些出色的工具


547
00:19:25,276 --> 00:19:27,046
能帮助你们所有人


548
00:19:27,556 --> 00:19:28,856
让 App 运行得更快


549
00:19:29,796 --> 00:19:32,396
现在总结一下


550
00:19:32,396 --> 00:19:33,886
我们刚刚回顾了许多


551
00:19:33,886 --> 00:19:35,726
优秀的工具和最佳的实践


552
00:19:35,726 --> 00:19:37,626
可以帮助我们使我们的用户满意


553
00:19:37,896 --> 00:19:38,746
并保持他们的信任


554
00:19:39,656 --> 00:19:41,676
现在 我想把我们的注意力


555
00:19:41,676 --> 00:19:42,976
转移到 Mac 上


556
00:19:43,186 --> 00:19:46,516
OS X 是 17 年前被推出的


557
00:19:46,516 --> 00:19:48,336
我们一直在推动这个平台


558
00:19:48,336 --> 00:19:49,366
向前发展


559
00:19:50,016 --> 00:19:53,346
Leopard 支持了 64 位操作


560
00:19:53,346 --> 00:19:54,386
OS X Mountain Lion


561
00:19:54,386 --> 00:19:56,246
引入了 Gatekeeper


562
00:19:56,246 --> 00:19:56,976
这是 Mac 安全方面的关键一步


563
00:19:57,046 --> 00:19:59,296
我们的主要任务之一


564
00:19:59,296 --> 00:20:00,626
就是利用最新的技术


565
00:20:00,626 --> 00:20:02,546
通过扩展 Mac 的功能


566
00:20:02,546 --> 00:20:04,436
来推动 Mac 的发展


567
00:20:05,146 --> 00:20:06,236
但是 当我们推动平台发展时


568
00:20:06,236 --> 00:20:08,096
我们有时不得不


569
00:20:08,096 --> 00:20:09,866
放弃旧有的功能


570
00:20:10,166 --> 00:20:12,376
以确保我们不会阻碍它的发展


571
00:20:13,476 --> 00:20:14,986
去年我们宣布


572
00:20:14,986 --> 00:20:16,976
High Sierra 是最后一个


573
00:20:16,976 --> 00:20:19,046
完全支持 32 位 App 的


574
00:20:19,046 --> 00:20:20,766
macOS 版本


575
00:20:21,586 --> 00:20:23,276
今年我们宣布


576
00:20:23,276 --> 00:20:25,326
macOS Mojave 是最后一个


577
00:20:25,326 --> 00:20:28,076
支持 32 位的版本


578
00:20:29,346 --> 00:20:30,946
因此 当我们在明年


579
00:20:30,946 --> 00:20:33,286
移除 32 位的支持时


580
00:20:33,356 --> 00:20:35,256
这些 32 位的框架也将被移除


581
00:20:35,256 --> 00:20:36,726
例如 QuickTime 框架


582
00:20:37,036 --> 00:20:38,796
和 Apple Java 框架


583
00:20:39,336 --> 00:20:42,746
接下来让我们讨论一下


584
00:20:42,746 --> 00:20:43,126
Mac 的安全问题


585
00:20:43,696 --> 00:20:45,186
Gatekeeper 在阻挡大规模的


586
00:20:45,186 --> 00:20:46,576
恶意软件攻击的方面做得很好


587
00:20:46,576 --> 00:20:49,786
今年我们想进一步推进


588
00:20:50,666 --> 00:20:52,086
我们在扩展用户可决定的权限


589
00:20:52,436 --> 00:20:54,176
强化运行时安全


590
00:20:54,176 --> 00:20:56,006
并推出新的认证服务


591
00:20:56,246 --> 00:20:57,966
让我们将更详细地讨论一下


592
00:20:59,296 --> 00:21:00,986
正如你们今天上午所听到的


593
00:21:00,986 --> 00:21:02,086
我们正在扩展


594
00:21:02,086 --> 00:21:04,666
对敏感系统资源的保护


595
00:21:05,976 --> 00:21:06,816
我们已经添加了摄像头和麦克风的监管


596
00:21:06,816 --> 00:21:08,676
现在 我们需要征得用户的同意


597
00:21:08,676 --> 00:21:10,936
才能使用 API


598
00:21:10,936 --> 00:21:12,626
并直接访问所有这些资源


599
00:21:13,606 --> 00:21:14,706
这在实践中意味着什么呢


600
00:21:15,636 --> 00:21:17,846
这意味着 根据用户同意与否


601
00:21:17,846 --> 00:21:19,466
你的 App 必须


602
00:21:19,466 --> 00:21:22,156
适当地处理


603
00:21:22,156 --> 00:21:22,986
可能的拒绝或失败


604
00:21:24,796 --> 00:21:26,076
正如 Katie 提到的


605
00:21:26,076 --> 00:21:27,456
提供有意义的目的字符串


606
00:21:27,456 --> 00:21:28,546
也是一个很棒的想法


607
00:21:28,546 --> 00:21:30,316
这样当用户


608
00:21:30,316 --> 00:21:31,226
面对这些对话时


609
00:21:31,266 --> 00:21:33,326
他们能够理解为什么


610
00:21:33,326 --> 00:21:34,756
你们的 App 需要访问权限


611
00:21:35,396 --> 00:21:37,996
我们还将进一步保护


612
00:21:37,996 --> 00:21:39,806
敏感的用户数据


613
00:21:40,456 --> 00:21:42,036
只有像备份工具


614
00:21:42,036 --> 00:21:44,106
这样的专用 App


615
00:21:44,106 --> 00:21:45,006
才需要访问这类数据


616
00:21:45,416 --> 00:21:46,396
在“安全性与隐私”的


617
00:21:46,396 --> 00:21:48,336
系统偏好设置面板中


618
00:21:48,336 --> 00:21:50,666
我们通过直接征求用户同意


619
00:21:50,666 --> 00:21:53,776
来保护这些位置


620
00:21:53,946 --> 00:21:55,236
接下来 我们将介绍


621
00:21:55,236 --> 00:21:57,246
运行时保护的增强


622
00:21:58,086 --> 00:21:58,876
许多人想要用一种方法


623
00:21:58,876 --> 00:22:01,036
将 SIP 保护扩展到


624
00:22:01,146 --> 00:22:03,146
自己的 App 中


625
00:22:03,886 --> 00:22:05,896
在我们新的增强的运行时中


626
00:22:05,936 --> 00:22:07,446
有一个新的安全基线


627
00:22:07,736 --> 00:22:09,466
就是有风险的功能


628
00:22:09,826 --> 00:22:10,726
需要被选择


629
00:22:11,376 --> 00:22:12,456
除了强大的代码验证之外


630
00:22:12,456 --> 00:22:14,656
它还保护了 App


631
00:22:14,656 --> 00:22:16,606
不受代码注入的影响等


632
00:22:17,526 --> 00:22:18,826
增强的运行时


633
00:22:18,826 --> 00:22:19,906
完全向后兼容


634
00:22:20,146 --> 00:22:21,816
它是通过 Xcode 中的


635
00:22:21,896 --> 00:22:23,176
一个简单开关来选择的


636
00:22:24,636 --> 00:22:25,876
最后 我们将介绍


637
00:22:25,876 --> 00:22:28,446
已认证 App 的概念


638
00:22:28,996 --> 00:22:30,416
它是一个


639
00:22:30,416 --> 00:22:32,036
开发人员 ID 程序的扩展


640
00:22:32,036 --> 00:22:34,596
针对那些发布在 Mac App Store 之外的 App


641
00:22:34,596 --> 00:22:35,896
它有两个主要目标


642
00:22:36,406 --> 00:22:38,266
第一个目标是


643
00:22:38,266 --> 00:22:40,356
在恶意软件传播给我们的用户之前


644
00:22:40,356 --> 00:22:41,746
能够比现在更快地检测到它们


645
00:22:42,346 --> 00:22:43,736
第二个目标是


646
00:22:43,826 --> 00:22:45,026
提供更细粒度的撤销功能


647
00:22:45,026 --> 00:22:46,846
以便我们可以撤销某个


648
00:22:46,846 --> 00:22:48,256
受损 App 的特定版本


649
00:22:48,256 --> 00:22:50,246
而无需撤销


650
00:22:50,246 --> 00:22:52,946
整个签名证书


651
00:22:53,786 --> 00:22:54,816
这是它的工作原理


652
00:22:55,316 --> 00:22:56,846
你们修复了漏洞


653
00:22:56,846 --> 00:22:57,866
然后像以前一样构建你们的 App


654
00:22:57,866 --> 00:22:59,126
用你们的


655
00:22:59,126 --> 00:23:00,426
开发人员 ID 证书签名


656
00:23:01,096 --> 00:23:02,356
但在发布给用户之前


657
00:23:02,356 --> 00:23:04,156
你们需要将 App 提交给


658
00:23:04,156 --> 00:23:05,626
开发人员 ID 认证服务


659
00:23:06,336 --> 00:23:08,336
经过认证之后


660
00:23:08,526 --> 00:23:09,986
你们就可以通过现有的渠道发布 App


661
00:23:11,186 --> 00:23:13,266
如果你们的用户在他们的系统上


662
00:23:13,266 --> 00:23:15,536
运行这个 App


663
00:23:15,536 --> 00:23:16,826
macOS Mojave 将与认证服务进行核对


664
00:23:16,826 --> 00:23:18,006
以确保这个 App 通过认证


665
00:23:18,006 --> 00:23:21,056
且不是恶意 App


666
00:23:22,106 --> 00:23:25,026
这个服务不同于 App 审核


667
00:23:25,026 --> 00:23:26,186
由于认证服务的缘故


668
00:23:26,186 --> 00:23:27,926
目前还不需要新的


669
00:23:27,926 --> 00:23:29,906
针对开发人员 ID App 的准则


670
00:23:30,256 --> 00:23:32,216
它专门用于


671
00:23:32,216 --> 00:23:34,726
在安全层面上分析 App


672
00:23:35,996 --> 00:23:37,796
未来的 macOS 版本


673
00:23:37,796 --> 00:23:40,316
将要求所有的开发人员 ID App


674
00:23:40,316 --> 00:23:41,546
在安装之前


675
00:23:41,546 --> 00:23:43,136
必须经过认证服务


676
00:23:43,216 --> 00:23:44,356
所以希望你们做好准备


677
00:23:44,356 --> 00:23:46,616
这个特性已在 Beta 版中投入使用


678
00:23:46,616 --> 00:23:48,596
我们鼓励你们试用一下


679
00:23:48,596 --> 00:23:49,876
并为我们提供反馈


680
00:23:50,996 --> 00:23:52,136
这些就是在 macOS Mojave 中


681
00:23:52,186 --> 00:23:54,846
对 Gatekeeper 的增强


682
00:23:55,276 --> 00:23:56,796
现在让我们换个话题


683
00:23:56,796 --> 00:23:58,626
谈谈 macOS 的用户体验


684
00:23:59,056 --> 00:24:01,746
为此 我想邀请 Kristen 上台


685
00:24:01,746 --> 00:24:01,976
Kristen


686
00:24:02,516 --> 00:24:05,546
[ 掌声 ]


687
00:24:06,046 --> 00:24:06,906
>> 谢谢 Sebastian


688
00:24:06,906 --> 00:24:07,766
很高兴来到这里


689
00:24:08,556 --> 00:24:09,806
我们在 macOS Mojave 中


690
00:24:09,806 --> 00:24:11,546
加入了很多很棒的功能


691
00:24:11,546 --> 00:24:12,656
包括对访达 屏幕快照


692
00:24:12,896 --> 00:24:14,836
以及桌面文档的改进


693
00:24:15,116 --> 00:24:17,046
我想特别强调其中一个


694
00:24:17,046 --> 00:24:18,166
你们作为开发人员


695
00:24:18,166 --> 00:24:19,536
可以利用的功能


696
00:24:19,536 --> 00:24:20,956
它就是 Quick Actions


697
00:24:21,646 --> 00:24:26,746
使用访达的 Quick Actions 功能


698
00:24:26,746 --> 00:24:28,296
我们将你需要的工具


699
00:24:28,296 --> 00:24:29,826
根据你需要的场景 嵌入到访达的


700
00:24:29,826 --> 00:24:30,846
预览面板中


701
00:24:31,826 --> 00:24:33,766
你可以在文件上


702
00:24:33,826 --> 00:24:35,166
执行一些常见的操作


703
00:24:35,166 --> 00:24:35,866
而不需要离开访达


704
00:24:36,586 --> 00:24:38,646
针对不同的文件类型


705
00:24:38,646 --> 00:24:39,626
支持不同的操作


706
00:24:39,626 --> 00:24:46,366
你们可以看到这里的视频和 PDF


707
00:24:47,416 --> 00:24:48,876
而且不仅仅局限于内置的操作


708
00:24:49,326 --> 00:24:51,296
我们知道专业用户


709
00:24:51,296 --> 00:24:52,196
喜欢创建自己的操作


710
00:24:52,776 --> 00:24:54,766
这些操作也可以


711
00:24:54,976 --> 00:24:57,356
显示在访达中


712
00:24:57,536 --> 00:24:58,856
你作为开发人员能够通过 App 扩展


713
00:24:58,856 --> 00:25:00,496
从你们的 App 中


714
00:25:00,496 --> 00:25:02,636
提供自定义操作


715
00:25:03,466 --> 00:25:05,366
作为终端用户


716
00:25:05,366 --> 00:25:07,376
你们还可以将 shell 脚本


717
00:25:07,376 --> 00:25:09,146
Applesscripts 和 Automator 操作


718
00:25:09,146 --> 00:25:11,496
合并到 Automator 中


719
00:25:11,496 --> 00:25:12,186
以创建一个操作包


720
00:25:12,246 --> 00:25:14,816
这些操作包


721
00:25:14,816 --> 00:25:17,046
将基于文件类型


722
00:25:17,046 --> 00:25:18,726
显示在访达中


723
00:25:19,456 --> 00:25:20,986
这些自定义操作


724
00:25:20,986 --> 00:25:23,216
在访达中拥有一席之地


725
00:25:23,216 --> 00:25:24,726
在触控栏中更是如此


726
00:25:25,176 --> 00:25:26,346
触控栏经过自定义后


727
00:25:26,346 --> 00:25:26,996
变得更加出色


728
00:25:27,346 --> 00:25:28,686
你们可以自定义触控栏


729
00:25:28,686 --> 00:25:29,906
能够随时或在按下某个按钮时


730
00:25:29,906 --> 00:25:31,576
显示这些操作


731
00:25:33,006 --> 00:25:35,546
接下来 在今天上午的主题演讲中


732
00:25:35,626 --> 00:25:37,566
你们看到了另一项


733
00:25:37,566 --> 00:25:39,906
我们非常感兴趣的技术


734
00:25:39,906 --> 00:25:42,796
一种可以将 iOS App


735
00:25:43,856 --> 00:25:44,626
引入 Mac 的简单方法


736
00:25:44,896 --> 00:25:46,076
我们在 “News” “股市”


737
00:25:46,076 --> 00:25:48,016
“语音备忘录”和“家庭”


738
00:25:48,016 --> 00:25:49,426
这四款 App 中


739
00:25:49,976 --> 00:25:52,486
开发这一技术


740
00:25:53,216 --> 00:25:57,076
这些 App 利用了 UIKit


741
00:25:57,336 --> 00:25:59,376
它是一种可以交付


742
00:25:59,376 --> 00:26:01,746
优秀 Mac App 的新方法


743
00:26:01,746 --> 00:26:03,396
当然 AppKit 是我们


744
00:26:03,396 --> 00:26:04,846
主要的原生框架


745
00:26:04,846 --> 00:26:06,846
它充分地利用了 Mac


746
00:26:06,846 --> 00:26:07,596
提供的所有功能


747
00:26:07,936 --> 00:26:11,066
我们绝不能忽略这一点


748
00:26:11,066 --> 00:26:12,286
然而我们注意到


749
00:26:12,286 --> 00:26:14,186
很多人都有 iOS App


750
00:26:14,186 --> 00:26:15,396
却没有提供原生的 Mac 体验


751
00:26:15,396 --> 00:26:17,306
针对这种情况


752
00:26:17,306 --> 00:26:18,476
我们向你们介绍一种


753
00:26:18,476 --> 00:26:20,436
能够把你们的 App


754
00:26:20,436 --> 00:26:21,226
移植到 Mac 上的简单方法


755
00:26:22,346 --> 00:26:24,206
那么我们怎么做呢


756
00:26:25,216 --> 00:26:27,016
这些 UIKit App


757
00:26:27,016 --> 00:26:28,576
在原生堆栈上的


758
00:26:28,576 --> 00:26:29,026
原生环境中运行


759
00:26:29,196 --> 00:26:30,856
如果你们仔细观察


760
00:26:30,856 --> 00:26:32,446
你们会发现 UIKit App 下面的堆栈


761
00:26:32,446 --> 00:26:34,206
和 AppKit App 下面的堆栈


762
00:26:34,206 --> 00:26:35,976
有很多共同点


763
00:26:35,976 --> 00:26:37,616
事实上 这些环境是建立在


764
00:26:37,616 --> 00:26:39,336
一个共同的基础之上的


765
00:26:39,596 --> 00:26:40,816
然而随着时间的推移 这些基础已经


766
00:26:40,816 --> 00:26:41,676
在一定程度上分散了


767
00:26:42,826 --> 00:26:44,696
我们正在利用这个机会


768
00:26:44,846 --> 00:26:46,466
对底层进行合并


769
00:26:47,136 --> 00:26:48,546
这对之前不曾接触这项技术的


770
00:26:48,546 --> 00:26:49,886
开发人员来说是一个好消息


771
00:26:49,886 --> 00:26:51,186
因为它可以让你们更容易地


772
00:26:51,186 --> 00:26:52,836
编写可移植的代码


773
00:26:53,466 --> 00:26:56,336
这些 App 具有所有


774
00:26:56,336 --> 00:26:59,026
典型的 Mac 特性


775
00:26:59,026 --> 00:26:59,976
现在我想向你们展示一下


776
00:27:14,046 --> 00:27:15,466
你已经看到了 iPad 的


777
00:27:15,946 --> 00:27:17,306
新“股市” App


778
00:27:17,846 --> 00:27:19,426
我现在运行的是这个 App 的 Mac 版本


779
00:27:19,426 --> 00:27:20,906
它是基于同样的资源构建的


780
00:27:22,046 --> 00:27:23,356
鼠标事件被映射到 UI 事件


781
00:27:23,356 --> 00:27:25,336
因此我可以在关注列表中


782
00:27:25,336 --> 00:27:27,116
点按一个股票代号


783
00:27:27,586 --> 00:27:28,636
来查看更多的信息


784
00:27:29,306 --> 00:27:30,896
我可以在交互式图表上


785
00:27:30,896 --> 00:27:32,366
移动鼠标


786
00:27:32,366 --> 00:27:34,056
来查看某个时间点的价格


787
00:27:34,056 --> 00:27:35,416
我还可以点按并拖动


788
00:27:35,416 --> 00:27:37,086
来查看一段时间内的股价变化


789
00:27:37,736 --> 00:27:39,406
我可以在 App 中


790
00:27:39,406 --> 00:27:40,626
点按一篇文章并打开它


791
00:27:40,626 --> 00:27:42,666
既然这是一个 Mac 窗口


792
00:27:42,666 --> 00:27:44,766
我当然可以任意调整大小


793
00:27:45,266 --> 00:27:46,686
也可以全屏显示


794
00:27:46,766 --> 00:27:49,816
另一个事件映射的例子是


795
00:27:49,816 --> 00:27:51,466
我可以使用两指滚动


796
00:27:51,466 --> 00:27:52,296
来滑动网页


797
00:27:52,516 --> 00:27:54,216
如果我想复制一些文本


798
00:27:54,216 --> 00:27:57,126
我可以选择它 选中它


799
00:27:57,126 --> 00:28:02,686
然后拖拽到我的“备忘录” App 中


800
00:28:03,016 --> 00:28:04,426
在这个备忘录中


801
00:28:04,586 --> 00:28:06,406
我有一个新闻文章的链接


802
00:28:06,406 --> 00:28:07,826
我可以点按它


803
00:28:07,826 --> 00:28:09,736
然后它就会直接在 “News” App 中打开


804
00:28:10,126 --> 00:28:12,666
我们用一些项目


805
00:28:12,786 --> 00:28:15,826
填充了这个 App 的菜单项


806
00:28:16,126 --> 00:28:17,286
例如 我可以进入 “File（文件）” 菜单


807
00:28:17,286 --> 00:28:19,446
然后选择 “Follow Channel（关注频道）”


808
00:28:20,316 --> 00:28:22,406
请注意 ESPN 是如何


809
00:28:22,406 --> 00:28:24,096
直接过渡到侧边栏中的


810
00:28:24,916 --> 00:28:26,366
在工具栏中可以看到


811
00:28:26,366 --> 00:28:28,136
另一个 Mac 技术


812
00:28:28,136 --> 00:28:29,606
下面的内容为这里的渲染


813
00:28:29,606 --> 00:28:31,206
提供了一些红色


814
00:28:31,886 --> 00:28:33,256
我们在工具栏中


815
00:28:33,256 --> 00:28:34,996
有一些窗口的控件


816
00:28:34,996 --> 00:28:36,906
包括分享按钮


817
00:28:36,906 --> 00:28:38,266
这样我就可以点按


818
00:28:38,266 --> 00:28:39,396
并向朋友分享这篇文章


819
00:28:40,176 --> 00:28:44,186
这就是我们对 Mac 上的


820
00:28:44,526 --> 00:28:44,966
UIKit App 的简要介绍


821
00:28:45,516 --> 00:28:50,636
[ 掌声 ]


822
00:28:51,136 --> 00:28:51,676
谢谢大家


823
00:28:53,376 --> 00:28:54,686
我们一直在开发这一项技术


824
00:28:54,716 --> 00:28:56,266
并努力对它


825
00:28:56,266 --> 00:28:57,756
进行全面的审查


826
00:28:57,756 --> 00:28:59,316
我们计划在明年


827
00:28:59,316 --> 00:29:00,856
将其提供给你们


828
00:29:00,856 --> 00:29:02,886
和你们的 App


829
00:29:04,496 --> 00:29:09,216
接下来 深色模式


830
00:29:09,406 --> 00:29:12,196
深色模式是 macOS Mojave 的


831
00:29:12,196 --> 00:29:13,966
一项重要更新


832
00:29:13,966 --> 00:29:14,576
我们觉得它看起来十分惊艳


833
00:29:14,576 --> 00:29:15,956
让我们简要地了解一下


834
00:29:20,076 --> 00:29:21,276
窗口背景为深色


835
00:29:21,566 --> 00:29:23,786
使得内容更为突出


836
00:29:24,346 --> 00:29:26,216
侧边栏是半透明的


837
00:29:26,456 --> 00:29:28,556
内容显示变得更为生动


838
00:29:28,976 --> 00:29:31,456
并与窗口下面的内容


839
00:29:31,486 --> 00:29:33,076
形成对比


840
00:29:33,076 --> 00:29:36,506
在一些情况下 我们发现


841
00:29:36,506 --> 00:29:38,356
改变图标很有必要


842
00:29:38,356 --> 00:29:40,136
比如你们可以看到这个


843
00:29:40,186 --> 00:29:42,236
颜色稍微变深的照片图标


844
00:29:42,236 --> 00:29:44,126
和这个深色的废纸篓图标


845
00:29:45,136 --> 00:29:46,346
这里还有一些


846
00:29:46,346 --> 00:29:46,946
非常微妙的细节


847
00:29:47,756 --> 00:29:49,176
窗口的背景


848
00:29:49,176 --> 00:29:50,536
也受桌面颜色的


849
00:29:50,536 --> 00:29:52,096
轻微影响


850
00:29:53,716 --> 00:29:55,316
为了向你们展示这个特性


851
00:29:55,316 --> 00:29:57,296
这个窗口被置于


852
00:29:57,296 --> 00:29:57,976
两张差别很大的桌面图片之上


853
00:29:59,736 --> 00:30:01,446
在左边


854
00:30:01,446 --> 00:30:02,976
蓝色桌面图片上的窗口


855
00:30:03,066 --> 00:30:05,166
有轻微的蓝色色调


856
00:30:05,666 --> 00:30:07,346
而在右边


857
00:30:07,346 --> 00:30:08,516
橙色桌面图片上的窗口


858
00:30:08,516 --> 00:30:10,366
有轻微的橙色色调


859
00:30:10,996 --> 00:30:12,406
这不是半透明的


860
00:30:12,406 --> 00:30:13,596
我们实际上


861
00:30:13,596 --> 00:30:14,776
是从桌面获取平均的颜色


862
00:30:14,816 --> 00:30:16,966
然后将其混合到不透明的背景中


863
00:30:16,966 --> 00:30:18,536
这样 你们的窗口就能够


864
00:30:18,536 --> 00:30:20,056
在各种桌面图片上


865
00:30:20,056 --> 00:30:21,436
都看起来协调美观


866
00:30:21,436 --> 00:30:24,946
让我们看看 为了支持深色模式


867
00:30:24,946 --> 00:30:26,986
你们需要在 App 中进行的操作


868
00:30:28,656 --> 00:30:30,516
因为我们想要确保


869
00:30:30,516 --> 00:30:31,806
与你们的 App 保持兼容


870
00:30:31,806 --> 00:30:32,986
所以我们不会自动为你们选择


871
00:30:33,396 --> 00:30:34,836
对深色模式的支持


872
00:30:35,106 --> 00:30:36,426
你们需要构建


873
00:30:36,426 --> 00:30:38,726
macOS Mojave SDK


874
00:30:40,046 --> 00:30:42,026
例如 这就是 “Keynote 讲演”


875
00:30:42,026 --> 00:30:43,906
在 Mojave 上构建后


876
00:30:44,046 --> 00:30:46,096
首次运行时的样子


877
00:30:47,026 --> 00:30:48,696
它有一个深色的工具栏


878
00:30:48,696 --> 00:30:50,326
但它在其他方面并没有按照


879
00:30:50,386 --> 00:30:51,756
我们希望的方式 应用深色模式


880
00:30:53,146 --> 00:30:54,506
格式部分的


881
00:30:54,506 --> 00:30:55,606
背景颜色太浅


882
00:30:56,396 --> 00:30:58,866
工具栏控件变得


883
00:30:58,866 --> 00:31:00,696
模糊且难以阅读


884
00:31:01,096 --> 00:31:02,546
侧边栏用的是错误的材料


885
00:31:02,546 --> 00:31:05,016
它过于半透明


886
00:31:05,016 --> 00:31:11,246
在控件的选定部分中


887
00:31:11,246 --> 00:31:12,906
我们发现在白色背景上


888
00:31:13,086 --> 00:31:14,056
存在白色的 Glyph


889
00:31:15,626 --> 00:31:17,266
然而好消息是


890
00:31:17,266 --> 00:31:20,426
这些问题都很容易解决


891
00:31:20,776 --> 00:31:22,426
我们有简单的 API


892
00:31:22,426 --> 00:31:23,426
来支持深色模式的所有需求


893
00:31:23,426 --> 00:31:25,536
事实上 其中的大多数


894
00:31:25,536 --> 00:31:26,846
已经存在多年了


895
00:31:26,846 --> 00:31:29,916
我们只需要做少量的添加


896
00:31:29,916 --> 00:31:30,576
NSColor


897
00:31:32,246 --> 00:31:34,376
带有 backgroundColor 属性的


898
00:31:34,376 --> 00:31:35,796
容器视图


899
00:31:36,926 --> 00:31:39,036
针对材料的 NSVisualEffectView


900
00:31:40,606 --> 00:31:42,366
模板图形


901
00:31:42,366 --> 00:31:44,476
以及一种新的方式来着色你们的内容


902
00:31:46,316 --> 00:31:48,456
我们用这些 API 更新了 Keynote 讲演


903
00:31:48,456 --> 00:31:50,476
结果就是这样


904
00:31:51,196 --> 00:31:51,976
看起来很棒


905
00:31:54,696 --> 00:31:56,416
这些都是非常简单的改变


906
00:31:56,666 --> 00:31:58,436
我们邀请你们今天来试试


907
00:31:59,006 --> 00:32:00,236
如果你们已经遵循了 在系统颜色中


908
00:32:00,236 --> 00:32:02,076
使用素材目录的最佳实践


909
00:32:02,076 --> 00:32:03,596
那么你们可能会


910
00:32:03,596 --> 00:32:05,136
惊喜地发现


911
00:32:05,186 --> 00:32:06,646
你们已经非常接近成功了


912
00:32:07,306 --> 00:32:08,556
由于这些技术仍然可以


913
00:32:08,556 --> 00:32:10,486
在以前的版本中使用


914
00:32:10,756 --> 00:32:12,146
所以你们可以应用它们


915
00:32:12,146 --> 00:32:12,866
并轻松地进行向后兼容


916
00:32:13,706 --> 00:32:14,976
当然 这取决于


917
00:32:14,976 --> 00:32:16,456
你们的 App 中


918
00:32:16,456 --> 00:32:18,256
有多少自定义控件


919
00:32:18,256 --> 00:32:20,356
但对于我们的一些 App 来说


920
00:32:20,356 --> 00:32:21,786
仅需要一天就可以完成


921
00:32:22,006 --> 00:32:23,346
我们也为你们提供了


922
00:32:23,346 --> 00:32:24,096
一些有用的工具


923
00:32:24,096 --> 00:32:26,536
我想有请 Matthew


924
00:32:26,656 --> 00:32:28,306
来到讲台


925
00:32:28,306 --> 00:32:30,296
并向你们展示 Xcode 10


926
00:32:30,296 --> 00:32:31,976
如何支持深色模式的应用等内容


927
00:32:32,516 --> 00:32:38,726
[ 掌声 ]


928
00:32:39,226 --> 00:32:39,916
>> 谢谢 Kristen


929
00:32:40,676 --> 00:32:42,166
我们今年发布的 Xcode 版本


930
00:32:42,166 --> 00:32:43,486
关注的是生产力


931
00:32:44,156 --> 00:32:45,116
工作流的改进


932
00:32:45,266 --> 00:32:47,236
性能的改进


933
00:32:47,236 --> 00:32:50,586
以及对所有 SDK 新特性的支持


934
00:32:50,586 --> 00:32:51,906
当然


935
00:32:51,906 --> 00:32:54,566
Xcode 在 macOS Mojave 上运行时


936
00:32:54,566 --> 00:32:55,556
提供了全新的外观和使用感受


937
00:32:56,006 --> 00:32:57,956
让我们先来看看


938
00:32:57,956 --> 00:32:59,676
Xcode 如何让你们的 Mac App


939
00:32:59,676 --> 00:33:01,976
在深色模式下 也拥有出色的外观


940
00:33:06,046 --> 00:33:08,826
现在我们回到了太阳系 App


941
00:33:09,576 --> 00:33:10,886
我们已经把它转换成深色模式


942
00:33:10,886 --> 00:33:12,896
到目前为止我们已经 取得了很大的进展


943
00:33:13,356 --> 00:33:15,036
但还有一些改进


944
00:33:15,036 --> 00:33:15,936
我需要在这里完成


945
00:33:16,716 --> 00:33:17,786
设计程序为我们提供了一个


946
00:33:17,786 --> 00:33:19,746
颜色更深的地球图形


947
00:33:20,036 --> 00:33:21,806
我可以在


948
00:33:22,006 --> 00:33:23,786
这两个硬编码的方框里


949
00:33:23,786 --> 00:33:24,466
改变颜色


950
00:33:25,286 --> 00:33:27,006
Xcode 的素材目录


951
00:33:27,056 --> 00:33:27,546
使这变得很容易


952
00:33:28,166 --> 00:33:29,866
我们从这个图形开始


953
00:33:31,026 --> 00:33:32,406
我需要切换到素材标签页


954
00:33:32,406 --> 00:33:34,066
我们可以看到


955
00:33:34,066 --> 00:33:35,946
我已经定义了


956
00:33:35,996 --> 00:33:37,116
所有颜色的深色变量


957
00:33:38,496 --> 00:33:39,896
我将选择


958
00:33:39,896 --> 00:33:41,576
包含所有图形的组


959
00:33:41,686 --> 00:33:43,026
比如 我想为这个行星图形


960
00:33:43,026 --> 00:33:45,276
添加一个深色变体 非常简单


961
00:33:46,126 --> 00:33:46,796
我选择它


962
00:33:47,426 --> 00:33:49,416
进入检查器并添加一个


963
00:33:49,416 --> 00:33:50,096
深色变体


964
00:33:50,586 --> 00:33:52,246
我的设计师已经把这些素材发给了我


965
00:33:52,246 --> 00:33:53,596
所以我可以把它们


966
00:33:53,596 --> 00:33:56,676
从我的下载文件夹中取出


967
00:33:56,676 --> 00:33:57,146
并放到目录中


968
00:33:58,176 --> 00:33:58,866
就是这样


969
00:33:59,536 --> 00:34:00,786
当我回到我的界面时


970
00:34:00,786 --> 00:34:02,346
你们将看到 更新后的地球图形


971
00:34:02,346 --> 00:34:03,886
已经匹配了


972
00:34:04,206 --> 00:34:05,386
界面构建器画布的外观


973
00:34:07,176 --> 00:34:08,886
我已经指定了我需要的


974
00:34:08,886 --> 00:34:10,096
所有颜色变体


975
00:34:10,666 --> 00:34:12,246
为了更新这些方框


976
00:34:12,246 --> 00:34:14,126
我只选择这两个框


977
00:34:14,126 --> 00:34:15,666
进入检查器并将填充颜色


978
00:34:15,666 --> 00:34:17,966
更改为目录中的一个颜色


979
00:34:18,596 --> 00:34:20,136
我们选择 badgeBackgroundColor


980
00:34:21,356 --> 00:34:22,846
很好 现在我的界面


981
00:34:22,846 --> 00:34:23,466
看起来十分漂亮


982
00:34:24,485 --> 00:34:26,255
在设计界面时


983
00:34:26,255 --> 00:34:27,545
我通常喜欢检查其他的外观


984
00:34:27,545 --> 00:34:29,466
因为我需要


985
00:34:29,466 --> 00:34:30,565
评估我的进展


986
00:34:31,326 --> 00:34:32,795
所以我们需要使用界面构建器


987
00:34:33,835 --> 00:34:34,896
在底部


988
00:34:34,896 --> 00:34:36,516
这个新的外观栏允许我


989
00:34:36,516 --> 00:34:38,576
在外观之间切换


990
00:34:39,356 --> 00:34:40,255
我只要选择左边的外观


991
00:34:40,255 --> 00:34:41,485
就可以看到


992
00:34:41,485 --> 00:34:43,565
我的 App 的浅色外观


993
00:34:44,266 --> 00:34:46,076
这样我就可以很容易地评估我的进展


994
00:34:46,906 --> 00:34:49,466
让我们运行这个 App


995
00:34:49,466 --> 00:34:50,136
看看结果怎么样


996
00:34:51,295 --> 00:34:52,536
我们需要更新我们的素材


997
00:34:52,536 --> 00:34:53,766
并启动 App


998
00:34:54,505 --> 00:34:55,916
我们在这里可以看到


999
00:34:55,916 --> 00:34:57,106
App 启动了


1000
00:34:58,046 --> 00:34:59,606
很好 看起来很不错


1001
00:35:00,226 --> 00:35:02,406
这个 App 已经能够


1002
00:35:02,406 --> 00:35:04,226
以深色模式启动 进而匹配了我的系统


1003
00:35:04,916 --> 00:35:06,466
在我开发 App 的过程中


1004
00:35:06,466 --> 00:35:07,556
我也可以改变它的外观


1005
00:35:08,486 --> 00:35:09,866
在调试栏的下面


1006
00:35:09,866 --> 00:35:11,516
是一个新的外观切换开关


1007
00:35:11,516 --> 00:35:13,476
我也可以在触控栏中使用它


1008
00:35:13,476 --> 00:35:15,146
并访问所有的外观


1009
00:35:15,666 --> 00:35:17,366
我可以选择浅色模式 深色模式


1010
00:35:17,366 --> 00:35:19,566
甚至高对比度模式


1011
00:35:19,566 --> 00:35:21,196
来评估辅助功能


1012
00:35:21,966 --> 00:35:23,766
现在我选择了浅色模式


1013
00:35:23,766 --> 00:35:25,816
我们加载这些素材


1014
00:35:25,816 --> 00:35:27,446
我的 App 就会处于浅色模式


1015
00:35:28,436 --> 00:35:30,496
只需使用素材目录


1016
00:35:30,496 --> 00:35:32,186
界面构建器


1017
00:35:32,186 --> 00:35:33,946
和我们的调试工具


1018
00:35:33,946 --> 00:35:35,176
你们就可以让你们的 App


1019
00:35:35,176 --> 00:35:36,566
在黑暗模式下也拥有出色的外观


1020
00:35:37,516 --> 00:35:45,566
[ 掌声 ]


1021
00:35:46,066 --> 00:35:47,796
我知道你们中的许多人


1022
00:35:47,796 --> 00:35:49,456
一直想要


1023
00:35:49,566 --> 00:35:50,646
在 Xcode 中显示暗色模式


1024
00:35:51,396 --> 00:35:52,616
它已经成为呼声最高的


1025
00:35:52,616 --> 00:35:54,076
请求之一


1026
00:35:54,076 --> 00:35:55,296
事实上 就在几周前


1027
00:35:55,296 --> 00:35:56,686
App Store 中出现了一条


1028
00:35:56,686 --> 00:35:58,596
关于诉求这个功能的评论


1029
00:35:58,856 --> 00:36:00,436
这个用户叫做


1030
00:36:00,436 --> 00:36:02,456
Ronnie Bo Bonnie


1031
00:36:02,456 --> 00:36:03,436
这是真的


1032
00:36:03,436 --> 00:36:04,216
并不是我编造的


1033
00:36:04,556 --> 00:36:05,556
但我只是想花点时间 然后说


1034
00:36:05,556 --> 00:36:07,436
Ronnie 如果你也在这里的话


1035
00:36:07,436 --> 00:36:09,536
你不用出卖自己的灵魂了


1036
00:36:10,516 --> 00:36:12,516
[ 笑声 ]


1037
00:36:13,516 --> 00:36:15,866
[ 掌声 ]


1038
00:36:16,366 --> 00:36:17,586
我们也做出了其他的一些


1039
00:36:17,586 --> 00:36:18,906
针对设计工具的改进


1040
00:36:18,906 --> 00:36:19,666
今天与你们分享


1041
00:36:21,286 --> 00:36:23,256
基于表格的 UI 比如“偏好设置”和“检查器” 


1042
00:36:23,256 --> 00:36:25,996
在 Mac App 中是很常见的


1043
00:36:26,036 --> 00:36:27,816
Cocoa 的 NSGridView


1044
00:36:27,816 --> 00:36:30,396
是布局它们的最佳系统


1045
00:36:30,516 --> 00:36:31,766
所以我们将 NSGridView 的功能


1046
00:36:31,876 --> 00:36:33,656
引入到界面构建器中


1047
00:36:33,656 --> 00:36:35,496
这样你们就可以


1048
00:36:35,496 --> 00:36:37,166
像在电子表格中


1049
00:36:37,506 --> 00:36:39,126
设计表格一样


1050
00:36:39,126 --> 00:36:39,606
设计基于列和行的 UI


1051
00:36:40,636 --> 00:36:41,676
拖放内容 [ 掌声 ]


1052
00:36:42,206 --> 00:36:42,696
是的


1053
00:36:44,786 --> 00:36:48,696
你们可以为此鼓掌


1054
00:36:48,806 --> 00:36:49,756
电子表格可以很酷


1055
00:36:49,756 --> 00:36:52,866
你们可以拖放内容


1056
00:36:52,906 --> 00:36:54,476
使用符合环境操作


1057
00:36:54,476 --> 00:36:56,296
并获得诸如从右到左的布局


1058
00:36:56,356 --> 00:36:57,436
等内容的系统访问


1059
00:36:58,456 --> 00:36:59,476
在设计界面时


1060
00:36:59,476 --> 00:37:01,166
库是一个重要的工具


1061
00:37:01,266 --> 00:37:02,796
我们为你们提供一个


1062
00:37:02,796 --> 00:37:04,046
全新的工作流


1063
00:37:04,676 --> 00:37:05,956
因为现在的库已经


1064
00:37:06,126 --> 00:37:07,466
与检查器分离了


1065
00:37:08,246 --> 00:37:09,596
你们现在可以把库移动到


1066
00:37:09,596 --> 00:37:10,906
任何你们想要的地方


1067
00:37:11,556 --> 00:37:13,196
可以调整大小


1068
00:37:13,196 --> 00:37:13,666
以匹配你们的布局


1069
00:37:14,286 --> 00:37:15,846
还可以在工作时


1070
00:37:15,846 --> 00:37:17,276
保持库的开启


1071
00:37:17,276 --> 00:37:18,966
或者在完成时 自动关闭库


1072
00:37:19,516 --> 00:37:25,066
[ 掌声 ]


1073
00:37:25,566 --> 00:37:26,896
这个库可以很好地处理


1074
00:37:26,896 --> 00:37:28,176
我们所有的内容类型


1075
00:37:28,246 --> 00:37:31,596
包括媒体和代码片段


1076
00:37:31,596 --> 00:37:32,746
最后 有了我们的设计工具


1077
00:37:32,746 --> 00:37:33,876
你们会发现


1078
00:37:33,876 --> 00:37:35,636
它们变得更灵活


1079
00:37:35,636 --> 00:37:37,536
拥有更快的文档加载速度


1080
00:37:37,536 --> 00:37:39,436
和更具响应性的画布交互


1081
00:37:40,666 --> 00:37:42,056
我们也将大量的精力


1082
00:37:42,056 --> 00:37:43,706
放在我们的源代码编辑工具


1083
00:37:43,756 --> 00:37:46,716
使它们能够保持快速 流畅


1084
00:37:46,716 --> 00:37:47,286
并不断提供有用的信息


1085
00:37:47,286 --> 00:37:49,706
我们从性能出发


1086
00:37:49,706 --> 00:37:50,626
使得编辑器能够


1087
00:37:50,626 --> 00:37:52,246
以更快的速度加载大型文档


1088
00:37:52,306 --> 00:37:55,996
同时保持 每秒 60 帧每秒的平滑滚动


1089
00:37:57,016 --> 00:37:58,596
接下来


1090
00:37:58,666 --> 00:38:00,516
我们对 SourceKit 的


1091
00:38:00,516 --> 00:38:01,856
稳定性加倍


1092
00:38:01,856 --> 00:38:02,736
并增强语言集成的坚固性


1093
00:38:03,146 --> 00:38:04,966
所以现在 更多精彩的注释


1094
00:38:04,966 --> 00:38:06,296
将不再处于编辑器周围


1095
00:38:06,296 --> 00:38:07,966
而是存在于编辑器之中


1096
00:38:09,516 --> 00:38:15,786
[ 掌声 ]


1097
00:38:16,286 --> 00:38:17,766
自动补全和导航


1098
00:38:17,826 --> 00:38:19,646
是两个基本的工作流


1099
00:38:19,646 --> 00:38:20,686
我们在这两个方面都做了改进


1100
00:38:21,596 --> 00:38:23,106
自动补全现在提供了


1101
00:38:23,106 --> 00:38:24,896
更有针对性的结果


1102
00:38:24,896 --> 00:38:27,076
并限制了高置信匹配的完成


1103
00:38:28,046 --> 00:38:29,466
当使用“跳转到定义”


1104
00:38:29,466 --> 00:38:31,496
进行导航时


1105
00:38:31,496 --> 00:38:32,956
目的地列表现在将提供


1106
00:38:32,956 --> 00:38:34,676
类似于文件和行信息的环境细节


1107
00:38:34,676 --> 00:38:36,276
以帮助你们轻松到达


1108
00:38:36,276 --> 00:38:37,576
你想要去的地方


1109
00:38:38,516 --> 00:38:43,166
[ 掌声 ]


1110
00:38:43,666 --> 00:38:44,576
你们将在 “Action（操作）” 菜单中的


1111
00:38:44,576 --> 00:38:46,096
“Callers” 选项中


1112
00:38:46,096 --> 00:38:48,136
看到相同的环境信息


1113
00:38:48,136 --> 00:38:49,976
这是一个让你们在项目之间


1114
00:38:49,976 --> 00:38:51,646
迅速切换的完美方式


1115
00:38:52,456 --> 00:38:54,756
去年 我们为包括 Swift 的


1116
00:38:54,756 --> 00:38:56,436
所有语言


1117
00:38:56,506 --> 00:38:57,156
引入了重构


1118
00:38:57,156 --> 00:38:59,286
而你们 也就是 Swift 社区


1119
00:38:59,486 --> 00:39:01,126
抓住了这个机会


1120
00:39:01,126 --> 00:39:02,536
并增加了一些新的操作


1121
00:39:03,936 --> 00:39:05,606
这些操作简化了


1122
00:39:05,606 --> 00:39:07,526
常见的编程场景


1123
00:39:07,526 --> 00:39:08,956
并直接构建到 Xcode 之中


1124
00:39:09,446 --> 00:39:10,336
点按一下就可使用


1125
00:39:11,766 --> 00:39:13,526
重构只是你们在项目中


1126
00:39:13,526 --> 00:39:15,266
修改源代码的


1127
00:39:15,356 --> 00:39:16,196
众多方法之一


1128
00:39:16,846 --> 00:39:17,876
为了更容易地跟踪


1129
00:39:17,876 --> 00:39:19,806
你们的更改


1130
00:39:19,806 --> 00:39:21,326
我们引入了一个


1131
00:39:21,326 --> 00:39:22,056
源代码控制更改栏


1132
00:39:23,336 --> 00:39:24,706
更改栏位于


1133
00:39:24,706 --> 00:39:25,896
编辑器的左侧


1134
00:39:25,896 --> 00:39:27,326
它是一些突出显示的


1135
00:39:27,326 --> 00:39:29,156
自上次退出后发生变化的代码行


1136
00:39:29,946 --> 00:39:31,896
标志的样式和颜色


1137
00:39:31,896 --> 00:39:33,576
反映了更改的类型


1138
00:39:33,576 --> 00:39:35,326
使你很容易地


1139
00:39:35,326 --> 00:39:37,046
看到你所做的更改


1140
00:39:37,046 --> 00:39:38,516
团队成员所做的更改


1141
00:39:38,516 --> 00:39:41,016
以及可能存在冲突的更改


1142
00:39:41,836 --> 00:39:44,466
这个特性


1143
00:39:45,516 --> 00:39:49,586
[ 掌声 ]


1144
00:39:50,086 --> 00:39:51,796
是的 我也认为这个特性非常棒


1145
00:39:51,796 --> 00:39:53,966
现在我想给你们演示一下


1146
00:39:55,886 --> 00:39:57,336
我们回到


1147
00:39:57,336 --> 00:39:59,686
太阳系 App


1148
00:39:59,686 --> 00:40:00,906
我想在我们的一个源文件中


1149
00:40:00,906 --> 00:40:03,236
做一些改变


1150
00:40:03,346 --> 00:40:04,946
那就是我们的 sceneViewController


1151
00:40:05,676 --> 00:40:07,166
我将在编辑器中


1152
00:40:07,166 --> 00:40:08,446
向下滚动到


1153
00:40:08,446 --> 00:40:09,206
我想要进行更改的地方


1154
00:40:09,816 --> 00:40:10,996
我们可以看到在左边


1155
00:40:11,076 --> 00:40:12,716
就在行数的左边


1156
00:40:12,716 --> 00:40:14,896
源代码控制更改栏


1157
00:40:14,896 --> 00:40:16,206
指示了一些


1158
00:40:16,206 --> 00:40:18,436
团队成员所做的上游更改


1159
00:40:19,106 --> 00:40:21,576
事实上 如果我对这行进行更改


1160
00:40:21,616 --> 00:40:22,926
你们将看到标志变为红色


1161
00:40:23,276 --> 00:40:24,346
为了突出显示冲突


1162
00:40:24,976 --> 00:40:26,626
如果我把光标放在这个标志上


1163
00:40:26,626 --> 00:40:27,596
你们会看到


1164
00:40:27,666 --> 00:40:28,996
它突出显示了


1165
00:40:29,036 --> 00:40:30,356
已经发生变化并且正在产生冲突的


1166
00:40:30,356 --> 00:40:31,166
字符的范围


1167
00:40:32,106 --> 00:40:33,976
如果我点按这个标志


1168
00:40:34,146 --> 00:40:35,776
它会弹出一个操作菜单


1169
00:40:35,776 --> 00:40:36,726
其中有对这个变化的描述


1170
00:40:36,726 --> 00:40:38,546
以及我可以进行的操作


1171
00:40:38,546 --> 00:40:40,986
我看到我的团队成员在这里


1172
00:40:40,986 --> 00:40:42,556
添加了更多的描述性的注释


1173
00:40:43,316 --> 00:40:44,896
我想我会采取他的更改方案


1174
00:40:45,246 --> 00:40:46,576
因此我将使用 “Action（操作）”菜单


1175
00:40:46,576 --> 00:40:48,946
来丢弃我的更改 并在上方的


1176
00:40:48,946 --> 00:40:50,546
“Source Controll（源代码控制）”菜单中


1177
00:40:50,606 --> 00:40:51,656
把他的更改 Pull 过来


1178
00:40:53,046 --> 00:40:55,146
这是他的更改


1179
00:40:55,146 --> 00:40:56,216
有十分具体的注释


1180
00:40:56,916 --> 00:40:58,276
我可以滚动到编辑器的底部


1181
00:40:58,276 --> 00:40:59,036
看看还有什么


1182
00:40:59,036 --> 00:41:01,096
我想看的东西


1183
00:41:01,976 --> 00:41:02,976
这是 Xcode 10 的另一个新特性


1184
00:41:02,976 --> 00:41:04,696
我们的编辑器现在支持


1185
00:41:04,726 --> 00:41:05,376
超范围滚动功能


1186
00:41:06,516 --> 00:41:11,976
[ 掌声 ]


1187
00:41:12,476 --> 00:41:13,706
回到我想修改的代码行


1188
00:41:13,746 --> 00:41:15,226
我想把这些硬编码的函数


1189
00:41:15,226 --> 00:41:16,616
转换成


1190
00:41:16,656 --> 00:41:20,406
从素材目录中 提取颜色的属性


1191
00:41:21,376 --> 00:41:23,636
我想改变其中的三个


1192
00:41:23,636 --> 00:41:25,546
由于这些注释


1193
00:41:25,546 --> 00:41:26,336
它们现在有点分散了


1194
00:41:27,076 --> 00:41:29,066
没有关系 在 Xcode 10 中 


1195
00:41:29,066 --> 00:41:30,196
我们改进了代码折叠问题


1196
00:41:31,066 --> 00:41:32,356
你们现在可以


1197
00:41:32,356 --> 00:41:33,206
随意折叠代码


1198
00:41:33,686 --> 00:41:34,856
我们还重新引入了


1199
00:41:34,856 --> 00:41:35,636
代码折叠条


1200
00:41:35,756 --> 00:41:36,716
就在行数的右边


1201
00:41:36,716 --> 00:41:37,966
我可以点按


1202
00:41:38,516 --> 00:41:42,546
[ 掌声 ]


1203
00:41:43,046 --> 00:41:43,876
从而将代码折叠起来


1204
00:41:44,326 --> 00:41:45,446
现在我们有了这个


1205
00:41:45,506 --> 00:41:47,923
漂亮且简洁的折叠展示


1206
00:41:48,546 --> 00:41:50,206
这是我想要改变的


1207
00:41:50,206 --> 00:41:51,686
第一个函数


1208
00:41:51,686 --> 00:41:52,916
我发现所有这些函数都


1209
00:41:52,916 --> 00:41:54,256
非常相似


1210
00:41:54,256 --> 00:41:55,326
所以如果我能同时改变它们


1211
00:41:55,326 --> 00:41:57,176
那就太好了


1212
00:41:58,226 --> 00:42:07,626
我现在通过多光标编辑 也能实现这点了


1213
00:42:08,126 --> 00:42:09,326
多光标编辑的关键是


1214
00:42:09,326 --> 00:42:11,506
两个手指 “Control” 和 “Shift”


1215
00:42:11,956 --> 00:42:13,806
我需要按住这两个键


1216
00:42:13,836 --> 00:42:15,086
然后依次点按


1217
00:42:15,086 --> 00:42:16,456
每个函数的开头


1218
00:42:17,326 --> 00:42:18,766
我们将使用范围选择


1219
00:42:18,766 --> 00:42:20,166
将它们改为 var


1220
00:42:20,606 --> 00:42:22,246
我们把它们换成冒号


1221
00:42:22,736 --> 00:42:24,786
到目前为止我们做得都很好


1222
00:42:25,896 --> 00:42:27,726
现在我突然发现


1223
00:42:27,726 --> 00:42:29,356
我将目录中的颜色和这里的属性


1224
00:42:29,546 --> 00:42:31,426
起了相同的名称


1225
00:42:32,006 --> 00:42:33,606
我们只需要选择这些名字


1226
00:42:33,606 --> 00:42:34,236
并复制它们


1227
00:42:34,926 --> 00:42:35,716
现在让我们执行


1228
00:42:35,716 --> 00:42:37,136
并改变它们


1229
00:42:37,836 --> 00:42:39,256
我们再放置三个光标


1230
00:42:39,256 --> 00:42:41,196
全部选中


1231
00:42:41,196 --> 00:42:43,506
输入 named:


1232
00:42:43,506 --> 00:42:45,876
粘贴这些颜色


1233
00:42:45,876 --> 00:42:46,766
这样我们就将它们全部改变了


1234
00:42:46,766 --> 00:42:47,916
快了三倍


1235
00:42:48,516 --> 00:42:55,016
[ 掌声 ]


1236
00:42:55,516 --> 00:42:56,876
多光标编辑


1237
00:42:56,876 --> 00:42:59,066
也很适合列选择


1238
00:42:59,626 --> 00:43:01,206
这里是所有


1239
00:43:01,206 --> 00:43:02,516
我用 weak 定义的 IBOutlets


1240
00:43:03,006 --> 00:43:04,666
如果我按住 option 键


1241
00:43:05,066 --> 00:43:06,766
将它们全部选中


1242
00:43:06,766 --> 00:43:08,806
[ 欢呼声 ] 


1243
00:43:09,226 --> 00:43:10,266
然后把它们


1244
00:43:10,266 --> 00:43:12,346
转换成 unowned [ 掌声 ]


1245
00:43:12,966 --> 00:43:13,896
就像这样


1246
00:43:13,896 --> 00:43:15,316
我可以进行修改


1247
00:43:15,316 --> 00:43:16,516
然后使用源代码控制条


1248
00:43:16,516 --> 00:43:17,786
确保我得到了我想要的修改


1249
00:43:18,546 --> 00:43:19,916
这些就是我们在 Xcode 10 中


1250
00:43:19,916 --> 00:43:21,156
所添加的一些出色的


1251
00:43:21,486 --> 00:43:22,846
新的编辑功能


1252
00:43:23,516 --> 00:43:30,246
[ 掌声 ]


1253
00:43:30,746 --> 00:43:32,066
除了性能和稳定性方面的


1254
00:43:32,066 --> 00:43:33,246
改进之外


1255
00:43:33,246 --> 00:43:35,106
我们还增加了


1256
00:43:35,106 --> 00:43:36,356
源代码控制更改条


1257
00:43:36,356 --> 00:43:36,946
和多光标编辑


1258
00:43:37,276 --> 00:43:39,156
Xcode 10 会不断提升


1259
00:43:39,156 --> 00:43:41,366
我们的源代码编辑体验


1260
00:43:41,906 --> 00:43:43,846
除了源代码控制更改栏之外


1261
00:43:43,846 --> 00:43:45,456
我们还扩展了


1262
00:43:45,456 --> 00:43:47,456
源代码控制集成


1263
00:43:47,456 --> 00:43:50,426
首先 我们将冲突解决系统


1264
00:43:50,426 --> 00:43:52,286
与 Git 统一起来


1265
00:43:52,286 --> 00:43:54,106
使结果更准确


1266
00:43:54,106 --> 00:43:56,266
更可预测


1267
00:43:56,316 --> 00:43:57,316
且速度更快


1268
00:43:58,466 --> 00:44:00,376
接下来 我们增强了


1269
00:44:00,376 --> 00:44:02,146
Pull 操作以支持 Rebase


1270
00:44:02,446 --> 00:44:03,896
这样你们将可以重放


1271
00:44:03,896 --> 00:44:04,656
不同分支之间的变化 [ 掌声 ]


1272
00:44:04,656 --> 00:44:05,976
是的 我们可以为此鼓掌


1273
00:44:06,516 --> 00:44:08,896
[ 掌声 ]


1274
00:44:09,396 --> 00:44:10,726
你们可以轻松地重放


1275
00:44:10,726 --> 00:44:12,106
在分支之间的更改


1276
00:44:12,106 --> 00:44:13,346
而不必进行不必要的 Merge


1277
00:44:13,976 --> 00:44:15,786
为了保证连接的安全


1278
00:44:15,786 --> 00:44:17,116
Xcode 将帮助你们


1279
00:44:17,116 --> 00:44:19,836
创建 SSH 密钥


1280
00:44:19,836 --> 00:44:21,786
并将它们直接上载到服务帐户


1281
00:44:22,516 --> 00:44:26,516
[ 掌声 ]


1282
00:44:27,016 --> 00:44:29,006
这对于我们的服务集成来说


1283
00:44:29,086 --> 00:44:30,466
是一个完美的补充


1284
00:44:30,466 --> 00:44:32,196
因为除了 GitHub


1285
00:44:32,376 --> 00:44:33,916
我们今年还增加了两个新的服务


1286
00:44:34,676 --> 00:44:35,616
对 Atlassian 的


1287
00:44:35,676 --> 00:44:37,566
Bitbucket 云和 Bitbucket 服务器的支持


1288
00:44:38,516 --> 00:44:42,246
[ 掌声 ]


1289
00:44:42,746 --> 00:44:44,766
以及对 GitLab.com 的支持


1290
00:44:45,096 --> 00:44:45,846
和自托管


1291
00:44:46,516 --> 00:44:49,816
[ 掌声 ]


1292
00:44:50,316 --> 00:44:51,836
看来这里有很多源代码控制的爱好者


1293
00:44:52,606 --> 00:44:54,366
这两个功能都很棒


1294
00:44:54,496 --> 00:44:55,786
因为它们的 WEB 接口


1295
00:44:55,786 --> 00:44:57,976
将直接检入 Xcode


1296
00:44:59,386 --> 00:45:01,006
正如 Sebastian 前面提到的


1297
00:45:01,006 --> 00:45:02,626
我们热衷于为你们提供


1298
00:45:02,626 --> 00:45:04,186
优秀的工具来调试和优化


1299
00:45:04,476 --> 00:45:05,696
你们的 App


1300
00:45:06,056 --> 00:45:07,556
今年 我们重点关注了


1301
00:45:07,556 --> 00:45:09,536
工具的可用性和性能


1302
00:45:09,536 --> 00:45:12,456
我们从低级调试器


1303
00:45:12,456 --> 00:45:13,536
LLDB 开始


1304
00:45:13,966 --> 00:45:15,656
LLDB 在控制台


1305
00:45:15,656 --> 00:45:16,966
和 Xcode 的变量视图中


1306
00:45:16,966 --> 00:45:19,146
具有更快的启动速度


1307
00:45:19,146 --> 00:45:20,186
和更精确的对变量的访问


1308
00:45:21,676 --> 00:45:23,176
接下来 我们将调试符号的


1309
00:45:23,176 --> 00:45:25,246
下载速度提高了 5 倍


1310
00:45:25,246 --> 00:45:26,496
所以现在的下载时长是以秒记


1311
00:45:26,496 --> 00:45:26,976
而不是以分钟记


1312
00:45:27,516 --> 00:45:33,146
[ 掌声 ]


1313
00:45:33,646 --> 00:45:34,646
我们增强了


1314
00:45:34,646 --> 00:45:35,966
内存调试工具


1315
00:45:35,966 --> 00:45:37,106
使其能够更快地加载和保存文档


1316
00:45:37,106 --> 00:45:39,176
并提供了全新且紧凑的布局


1317
00:45:39,176 --> 00:45:40,646
以帮助你们同时查看


1318
00:45:40,646 --> 00:45:42,746
更多的 App


1319
00:45:43,886 --> 00:45:45,456
今年春天的早些时候


1320
00:45:45,456 --> 00:45:47,936
我们介绍了能源诊断报告


1321
00:45:48,416 --> 00:45:49,826
它们就像崩溃日志


1322
00:45:49,826 --> 00:45:50,606
但是针对能源使用


1323
00:45:51,266 --> 00:45:52,796
这些报告在 iOS 上


1324
00:45:52,836 --> 00:45:54,656
自动收集


1325
00:45:54,656 --> 00:45:57,086
用于 App Store App 的试运行


1326
00:45:57,086 --> 00:45:59,106
并会展现前台和


1327
00:45:59,106 --> 00:46:00,016
后台使用的细节


1328
00:46:01,086 --> 00:46:02,576
这些报告显示在整理器中


1329
00:46:02,576 --> 00:46:04,326
内容包括用来说明事件的


1330
00:46:04,326 --> 00:46:05,916
堆栈框架


1331
00:46:06,896 --> 00:46:08,196
和崩溃日志一样


1332
00:46:08,196 --> 00:46:09,876
你们可以在项目中打开这些报告


1333
00:46:09,876 --> 00:46:11,446
导航你们的代码


1334
00:46:11,446 --> 00:46:13,756
然后找到并修复问题


1335
00:46:15,006 --> 00:46:16,646
除此之外


1336
00:46:16,646 --> 00:46:19,456
我们在测试方面也有一些改进


1337
00:46:19,806 --> 00:46:21,346
今年春天的早些时候


1338
00:46:21,386 --> 00:46:23,116
我们增强了 “Code Coverage（代码覆盖）”


1339
00:46:23,116 --> 00:46:24,466
添加了一个命令行工具


1340
00:46:24,466 --> 00:46:26,456
来访问覆盖数据


1341
00:46:26,456 --> 00:46:28,476
并允许你们选择


1342
00:46:28,476 --> 00:46:29,396
收集覆盖的单个目标


1343
00:46:30,286 --> 00:46:31,436
这意味着你们的覆盖报告


1344
00:46:31,436 --> 00:46:33,176
现在可以主动设置为针对


1345
00:46:33,176 --> 00:46:35,106
你们正在编写和测试的区域


1346
00:46:36,266 --> 00:46:38,106
除此之外


1347
00:46:38,106 --> 00:46:40,216
我们今年还增加两个新的


1348
00:46:40,216 --> 00:46:41,676
测试工作流 实际上是三个


1349
00:46:42,466 --> 00:46:44,226
首先 你们现在可以


1350
00:46:44,226 --> 00:46:45,976
在测试包中自动包含


1351
00:46:45,976 --> 00:46:47,986
或排除新的测试


1352
00:46:48,616 --> 00:46:50,486
接下来 你们可以


1353
00:46:50,486 --> 00:46:51,626
以随机的顺序执行测试


1354
00:46:51,626 --> 00:46:53,306
从而最小化


1355
00:46:53,306 --> 00:46:54,506
偶然因素的影响


1356
00:46:55,536 --> 00:46:56,726
我们今年最大的变化是


1357
00:46:56,726 --> 00:46:58,496
现在 你们可以在 Xcode 中


1358
00:46:58,496 --> 00:47:00,906
并行执行测试


1359
00:47:01,516 --> 00:47:07,066
[ 掌声 ]


1360
00:47:07,566 --> 00:47:09,236
去年 你们可以使用 Xcodebuild


1361
00:47:09,236 --> 00:47:11,056
对多个设备进行并行测试


1362
00:47:11,056 --> 00:47:13,366
将所有相同的测试


1363
00:47:13,366 --> 00:47:15,056
发送到每个设备上


1364
00:47:15,056 --> 00:47:17,126
如果你们想要使用持续集成


1365
00:47:17,126 --> 00:47:18,476
并达到最广泛的测试规模


1366
00:47:18,476 --> 00:47:19,886
它是最适合的方法


1367
00:47:20,956 --> 00:47:22,146
当你们使用 Xcode 时


1368
00:47:22,326 --> 00:47:24,556
你们通常只关注于单个配置


1369
00:47:24,966 --> 00:47:25,916
但在测试时


1370
00:47:25,916 --> 00:47:27,586
你们希望尽快完成


1371
00:47:28,696 --> 00:47:30,406
Xcode 10 通过并行测试


1372
00:47:30,406 --> 00:47:33,376
极大地改进了


1373
00:47:33,376 --> 00:47:34,016
这个配置的测试速度


1374
00:47:35,126 --> 00:47:36,536
在后台 Xcode 创建了


1375
00:47:36,536 --> 00:47:38,706
Mac App 的副本


1376
00:47:38,826 --> 00:47:40,906
或者 iOS 模拟器的克隆


1377
00:47:41,156 --> 00:47:42,866
然后将测试套件


1378
00:47:42,866 --> 00:47:43,106
发送给它们


1379
00:47:44,496 --> 00:47:45,756
这意味着你们将


1380
00:47:45,826 --> 00:47:47,716
继续测试单个配置


1381
00:47:47,716 --> 00:47:49,856
但是将在很短的时间内完成


1382
00:47:51,096 --> 00:47:51,926
并行测试可以


1383
00:47:51,966 --> 00:47:53,286
根据你们的机器容量


1384
00:47:53,286 --> 00:47:55,106
自动进行伸缩


1385
00:47:55,106 --> 00:47:57,316
这意味着在 iMac Pro 上


1386
00:47:57,316 --> 00:47:57,876
它会表现得非常棒


1387
00:47:59,796 --> 00:48:00,846
你们可能会问 具体有多棒呢


1388
00:48:01,266 --> 00:48:02,776
好吧 我们来看看另一个演示


1389
00:48:03,506 --> 00:48:07,896
我们将再次回到我们的太阳系项目


1390
00:48:08,956 --> 00:48:11,986
这里我们看到了


1391
00:48:12,056 --> 00:48:13,826
我们之前运行的 Mac 测试的测试日志


1392
00:48:14,406 --> 00:48:15,866
耗时大约 14 秒


1393
00:48:16,986 --> 00:48:18,016
现在让我们用并行测试


1394
00:48:18,016 --> 00:48:19,206
来运行它


1395
00:48:19,416 --> 00:48:20,276
我将点按并按住工具栏


1396
00:48:20,276 --> 00:48:22,416
选择 “Test...(测试)”操作


1397
00:48:23,016 --> 00:48:24,216
然后会跳出方案列表


1398
00:48:25,696 --> 00:48:27,266
在选项中 我将点按


1399
00:48:27,316 --> 00:48:29,246
“Execute in parallel（以并行方式执行）”


1400
00:48:29,246 --> 00:48:31,236
点按 “Test（测试）”


1401
00:48:31,236 --> 00:48:32,386
然后我们将构建并行测试


1402
00:48:32,386 --> 00:48:33,676
如果你们看看


1403
00:48:33,676 --> 00:48:35,246
右下角的文件


1404
00:48:35,246 --> 00:48:37,076
会发现我们已经启动了测试


1405
00:48:37,076 --> 00:48:38,596
我们现在启动了许多不同的进程


1406
00:48:38,596 --> 00:48:39,786
每一个都对应一个我们的测试套件


1407
00:48:39,866 --> 00:48:41,746
然后收集结果


1408
00:48:42,996 --> 00:48:44,116
如果我们看一下测试日志


1409
00:48:44,116 --> 00:48:45,966
它的完成速度几乎是


1410
00:48:45,966 --> 00:48:46,646
原来的四倍


1411
00:48:47,516 --> 00:48:53,676
[ 掌声 ]


1412
00:48:54,176 --> 00:48:55,376
由于并行测试对单元测试


1413
00:48:55,376 --> 00:48:57,376
非常有效


1414
00:48:57,486 --> 00:48:58,546
它对 UI 测试也会非常有效


1415
00:48:59,786 --> 00:49:01,986
我将选择 App 的


1416
00:49:01,986 --> 00:49:04,316
iOS 版本


1417
00:49:04,316 --> 00:49:04,936
然后开始测试


1418
00:49:05,526 --> 00:49:06,936
在后台


1419
00:49:06,936 --> 00:49:08,156
我们将克隆


1420
00:49:08,156 --> 00:49:10,236
活动的模拟器


1421
00:49:10,236 --> 00:49:11,686
然后为每个模拟器


1422
00:49:11,686 --> 00:49:13,126
设置调试会话


1423
00:49:13,126 --> 00:49:14,816
然后切换到运行


1424
00:49:14,816 --> 00:49:15,776
所有这些模拟器的空间


1425
00:49:16,676 --> 00:49:17,846
你们将会看到


1426
00:49:17,846 --> 00:49:19,456
我们在每个模拟器上


1427
00:49:19,456 --> 00:49:20,916
安装不同的测试套件


1428
00:49:20,916 --> 00:49:22,696
并在每个模拟器上启动不同的测试集


1429
00:49:23,556 --> 00:49:25,386
我可以在所有这些设备上


1430
00:49:25,386 --> 00:49:27,756
更快地运行


1431
00:49:27,756 --> 00:49:28,986
所有相同的测试


1432
00:49:28,986 --> 00:49:30,716
这使我能够添加更多的测试


1433
00:49:30,716 --> 00:49:31,706
并做出一个更好的 App


1434
00:49:32,556 --> 00:49:34,316
这就是 Xcode 10 中


1435
00:49:34,316 --> 00:49:36,796
快得像鬼畜一样的并行测试


1436
00:49:37,516 --> 00:49:46,216
[ 掌声 ]


1437
00:49:46,716 --> 00:49:47,976
去年 我们介绍了


1438
00:49:48,026 --> 00:49:49,646
用 Swift 编写的


1439
00:49:49,826 --> 00:49:50,626
新的构建系统的预览版


1440
00:49:51,516 --> 00:49:52,466
对此 许多人在自己的项目中


1441
00:49:52,466 --> 00:49:54,186
进行了尝试 并提供了积极的反馈


1442
00:49:54,426 --> 00:49:56,546
现在我可以高兴地说


1443
00:49:56,546 --> 00:49:58,156
我们的新型构建系统


1444
00:49:58,456 --> 00:49:59,306
已经适用于所有项目


1445
00:50:00,006 --> 00:50:01,116
除了更高的可靠性


1446
00:50:01,116 --> 00:50:03,656
和稳定性之外


1447
00:50:03,656 --> 00:50:05,916
我们还关注总体的构建性能


1448
00:50:06,796 --> 00:50:07,936
你们将发现 构建系统现在可以


1449
00:50:07,936 --> 00:50:09,906
更快地进行重新构建


1450
00:50:10,136 --> 00:50:11,976
更好地处理并行任务 并且使用更少的内存


1451
00:50:11,976 --> 00:50:14,436
构建系统现在包含


1452
00:50:14,436 --> 00:50:16,476
新的更丰富的诊断信息


1453
00:50:16,646 --> 00:50:17,946
以帮助你们调整项目配置


1454
00:50:17,986 --> 00:50:19,516
从而实现最佳的


1455
00:50:19,516 --> 00:50:21,026
构建性能


1456
00:50:21,446 --> 00:50:23,746
让我们继续构建性能的话题


1457
00:50:23,746 --> 00:50:24,956
我想谈谈


1458
00:50:24,956 --> 00:50:26,466
最新版本的另一个核心组件


1459
00:50:26,466 --> 00:50:29,396
Swift 4.2


1460
00:50:29,766 --> 00:50:31,156
在过去的一年里


1461
00:50:31,156 --> 00:50:33,016
我们对 Swift 项目的编译时间


1462
00:50:33,086 --> 00:50:34,786
进行了稳步的改进


1463
00:50:35,936 --> 00:50:37,126
我们对一些开放源代码的


1464
00:50:37,126 --> 00:50:39,526
iOS App 进行了采样


1465
00:50:39,526 --> 00:50:40,666
与旧版本相比


1466
00:50:40,666 --> 00:50:42,776
使用 Xcode 10 调试构建版本的性能


1467
00:50:42,776 --> 00:50:46,996
通常是之前的两倍


1468
00:50:46,996 --> 00:50:49,566
至于发布的构建版本


1469
00:50:49,566 --> 00:50:52,316
通过使用新的尺寸优化


1470
00:50:52,316 --> 00:50:54,306
代码大小可以最多减少 30%


1471
00:50:54,306 --> 00:50:55,906
这对于蜂窝网络下载来说


1472
00:50:55,906 --> 00:50:56,436
是一个很好的消息


1473
00:50:57,976 --> 00:51:00,056
除此之外


1474
00:51:00,056 --> 00:51:02,306
Swift 还添加了一些新功能


1475
00:51:02,306 --> 00:51:04,576
并对运行时语言进行改进


1476
00:51:05,326 --> 00:51:06,126
其中一些是很拗口的 API


1477
00:51:06,126 --> 00:51:09,276
比如 “Synthesized hashtable conformance”


1478
00:51:10,786 --> 00:51:12,436
尝试这些 API 的最佳位置是


1479
00:51:12,436 --> 00:51:14,906
Xcode 中的 Playgrounds


1480
00:51:15,596 --> 00:51:16,976
因为 Xcode Playgrounds 现在


1481
00:51:16,976 --> 00:51:18,676
包含了新的


1482
00:51:18,676 --> 00:51:20,506
类似速降的交互


1483
00:51:20,506 --> 00:51:21,996
允许你们在不重新启动


1484
00:51:22,316 --> 00:51:23,726
Playground 会话的情况下


1485
00:51:23,726 --> 00:51:24,486
评估新的代码行


1486
00:51:26,516 --> 00:51:30,186
[ 掌声 ]


1487
00:51:30,686 --> 00:51:31,756
这是我们太阳系视图的


1488
00:51:31,756 --> 00:51:32,346
一个 Playground


1489
00:51:32,346 --> 00:51:34,216
为移动到下一个行星


1490
00:51:34,506 --> 00:51:36,466
而添加的新代码行


1491
00:51:36,466 --> 00:51:38,616
将被评估


1492
00:51:38,616 --> 00:51:39,386
并在 Playground 继续运行时


1493
00:51:39,386 --> 00:51:39,536
返回结果


1494
00:51:42,046 --> 00:51:43,896
所有这些


1495
00:51:43,896 --> 00:51:45,546
对运行时语言和工具的添加


1496
00:51:45,786 --> 00:51:47,646
使得作为 Xcode 10 的一部分的 Swift


1497
00:51:48,046 --> 00:51:49,206
保持着不断进步的步伐


1498
00:51:49,206 --> 00:51:52,036
我们还有另一个版本


1499
00:51:52,036 --> 00:51:52,796
即将与你们见面


1500
00:51:52,796 --> 00:51:55,646
Swift 5


1501
00:51:55,986 --> 00:51:57,806
Swift 5 的主要焦点在于更广泛的应用


1502
00:51:57,806 --> 00:51:59,856
使 Swift 成为


1503
00:51:59,886 --> 00:52:01,166
OS 的一部分


1504
00:52:01,796 --> 00:52:03,216
当我们发布新的 OS 版本时


1505
00:52:03,216 --> 00:52:04,946
App 将不再需要


1506
00:52:04,946 --> 00:52:06,336
包含 Swift 运行时


1507
00:52:06,336 --> 00:52:08,046
从而获得


1508
00:52:08,086 --> 00:52:09,636
更小的下载 [ 掌声 ]


1509
00:52:09,636 --> 00:52:09,846
和更快的启动


1510
00:52:10,516 --> 00:52:15,586
[ 掌声 ]


1511
00:52:16,086 --> 00:52:17,216
我们对此也感到非常兴奋


1512
00:52:17,216 --> 00:52:18,666
我们在这个目标上


1513
00:52:18,706 --> 00:52:19,976
取得了巨大的进展


1514
00:52:20,396 --> 00:52:21,626
你们会在明年初的


1515
00:52:21,696 --> 00:52:23,956
看到它的发布


1516
00:52:24,536 --> 00:52:27,996
Xcode 10 包含了


1517
00:52:27,996 --> 00:52:29,566
大量的生产力改进


1518
00:52:29,886 --> 00:52:31,626
以及在工具的性能 坚固性


1519
00:52:31,626 --> 00:52:33,496
和稳定性方面的


1520
00:52:33,496 --> 00:52:35,846
大幅提升


1521
00:52:36,436 --> 00:52:37,736
所有这些都能帮助你们


1522
00:52:37,736 --> 00:52:40,586
更快地完成高质量的工作


1523
00:52:40,626 --> 00:52:42,246
这就是 Xcode 10


1524
00:52:43,516 --> 00:52:50,656
[ 掌声 ]


1525
00:52:51,156 --> 00:52:52,576
接下来 我想邀请 John


1526
00:52:52,576 --> 00:52:54,236
来与你们讨论


1527
00:52:54,236 --> 00:52:54,816
关于机器学习的新内容


1528
00:52:55,356 --> 00:52:55,636
John


1529
00:52:56,321 --> 00:52:58,321
[ 掌声 ]


1530
00:52:58,626 --> 00:52:59,306
>> 谢谢 Matthew


1531
00:53:02,286 --> 00:53:03,236
机器学习是


1532
00:53:03,236 --> 00:53:04,556
操作系统


1533
00:53:04,556 --> 00:53:06,736
和许多 App 的基础


1534
00:53:07,276 --> 00:53:09,206
我们的目标是


1535
00:53:09,346 --> 00:53:12,476
提供简单易用的 API


1536
00:53:12,476 --> 00:53:14,826
使每个人都能使用“机器学习”


1537
00:53:15,726 --> 00:53:17,356
你们都做得非常出色


1538
00:53:17,356 --> 00:53:19,606
不断为你们的 App 注入


1539
00:53:19,606 --> 00:53:21,886
创新的特性和智慧


1540
00:53:22,456 --> 00:53:26,426
去年 我们引入了 Core ML


1541
00:53:26,926 --> 00:53:29,196
及其基本性能框架


1542
00:53:29,196 --> 00:53:31,096
以及高层级的视觉


1543
00:53:31,096 --> 00:53:32,946
和自然语言处理


1544
00:53:33,306 --> 00:53:34,506
首先 我想向你们展示


1545
00:53:34,506 --> 00:53:35,336
我们在视觉和自然语言处理方面


1546
00:53:35,336 --> 00:53:37,706
所做的一些改进


1547
00:53:38,776 --> 00:53:42,826
如果我们想要拍摄


1548
00:53:42,826 --> 00:53:43,906
带有深度的照片


1549
00:53:43,906 --> 00:53:46,436
我们现在提供了


1550
00:53:46,436 --> 00:53:47,996
支持物体检测


1551
00:53:48,546 --> 00:53:50,126
和包围框的 API 


1552
00:53:50,186 --> 00:53:51,306
就像图片中标记的那样


1553
00:53:52,546 --> 00:53:55,396
我们可以做脸部检测


1554
00:53:55,396 --> 00:53:56,446
人脸关键点检测


1555
00:53:57,546 --> 00:53:59,846
像这个二维码这样的条形码


1556
00:53:59,846 --> 00:54:01,886
也可以在图像中被检测到


1557
00:54:03,276 --> 00:54:05,476
除了我们之前提供的


1558
00:54:05,536 --> 00:54:06,906
可以检测深度的 API


1559
00:54:07,576 --> 00:54:08,876
我们现在支持人形分割


1560
00:54:08,876 --> 00:54:10,936
所以你们可以从照片中


1561
00:54:10,936 --> 00:54:12,576
删除一个人


1562
00:54:12,636 --> 00:54:13,296
并将他们从背景中


1563
00:54:13,296 --> 00:54:15,736
分离出来


1564
00:54:15,736 --> 00:54:16,536
或者在背景中替换成一些


1565
00:54:16,536 --> 00:54:17,926
不同的东西


1566
00:54:19,926 --> 00:54:21,586
对于自然语言处理


1567
00:54:21,586 --> 00:54:23,836
我们有一个全新且易于使用的


1568
00:54:23,836 --> 00:54:24,796
基于 Swift 的 API


1569
00:54:26,876 --> 00:54:28,696
你们可以将


1570
00:54:28,696 --> 00:54:30,846
像这样简单的句子


1571
00:54:30,846 --> 00:54:32,676
自动地识别为英文


1572
00:54:34,226 --> 00:54:35,596
通过简单的 API


1573
00:54:37,116 --> 00:54:38,346
你们可以对句子进行拆分


1574
00:54:38,386 --> 00:54:40,086
并将其转换为语法元素


1575
00:54:40,336 --> 00:54:43,416
除此之外


1576
00:54:43,416 --> 00:54:45,256
你们还可以进行命名实体识别


1577
00:54:46,046 --> 00:54:47,596
这句话被检测到


1578
00:54:47,596 --> 00:54:49,096
是在说 Apple 这个组织


1579
00:54:49,096 --> 00:54:50,096
以及一个


1580
00:54:50,096 --> 00:54:51,506
位于圣何塞的地点


1581
00:54:51,506 --> 00:54:54,726
你们可能认为 对于英文这样的语言


1582
00:54:54,726 --> 00:54:56,666
实现这点并不困难


1583
00:54:56,666 --> 00:54:59,106
但是我们支持更多的语言


1584
00:54:59,516 --> 00:55:01,866
包括法语 德语 日语


1585
00:55:01,866 --> 00:55:03,186
以及这里举例的简体中文


1586
00:55:03,186 --> 00:55:07,836
现在我们来看看 Core ML


1587
00:55:08,456 --> 00:55:09,876
它是我们的


1588
00:55:09,876 --> 00:55:11,106
机器学习技术的基础


1589
00:55:12,676 --> 00:55:13,986
就在一年前


1590
00:55:13,986 --> 00:55:15,146
我们在这里引入了 Core ML


1591
00:55:15,866 --> 00:55:17,016
从那以后


1592
00:55:17,016 --> 00:55:18,876
我们应用了所有主要的


1593
00:55:18,876 --> 00:55:20,876
机器学习的训练框架和格式


1594
00:55:21,716 --> 00:55:23,126
仅仅在一年内就实现这一点


1595
00:55:23,126 --> 00:55:24,366
令人难以置信


1596
00:55:24,366 --> 00:55:26,796
但我们不想就此停止


1597
00:55:28,266 --> 00:55:29,936
我们将引入 Core ML 2


1598
00:55:29,936 --> 00:55:33,026
我们专注于让模型


1599
00:55:33,026 --> 00:55:35,376
执行得更快


1600
00:55:35,376 --> 00:55:37,546
体型更小


1601
00:55:37,616 --> 00:55:38,736
并且让它们更容易自定义


1602
00:55:39,956 --> 00:55:40,866
我们知道这些


1603
00:55:40,906 --> 00:55:43,576
是我们最需要的特性


1604
00:55:43,576 --> 00:55:46,676
为了查看性能改进


1605
00:55:46,676 --> 00:55:48,336
我们添加了一个


1606
00:55:48,336 --> 00:55:48,906
新的批处理 API


1607
00:55:49,896 --> 00:55:52,356
以前你们不得不


1608
00:55:52,356 --> 00:55:53,786
对每个映像进行推理


1609
00:55:54,196 --> 00:55:55,836
并在 CPU 和 GPU 之间传递它们


1610
00:55:55,836 --> 00:55:58,526
而现在 你们可以将这些推理请求


1611
00:55:58,526 --> 00:56:00,196
打包在一起


1612
00:56:00,196 --> 00:56:02,566
并利用 CPU 和 GPU 的


1613
00:56:02,696 --> 00:56:04,066
全部性能进行处理


1614
00:56:05,076 --> 00:56:06,486
通过这种技术


1615
00:56:06,486 --> 00:56:07,866
以及对其下的


1616
00:56:07,866 --> 00:56:09,036
Metal 性能着色器的增强


1617
00:56:09,756 --> 00:56:11,866
我们可以在像 Resnet


1618
00:56:11,866 --> 00:56:13,596
这样的大型网络上


1619
00:56:13,596 --> 00:56:14,846
获得高达 30% 的性能改进


1620
00:56:15,536 --> 00:56:16,826
但是如果你们使用的是小型网络


1621
00:56:16,826 --> 00:56:17,806
就像在 iOS 上使用的那种


1622
00:56:17,806 --> 00:56:20,316
我们观察到的结果是


1623
00:56:20,316 --> 00:56:21,796
当使用 MobileNet 运行时


1624
00:56:21,876 --> 00:56:22,906
API 会有高达 4 倍的性能改进


1625
00:56:23,646 --> 00:56:25,536
我们并没有就此止步


1626
00:56:26,566 --> 00:56:27,806
我们想要让模型更小


1627
00:56:27,806 --> 00:56:30,386
所以我们现在支持量化


1628
00:56:30,886 --> 00:56:32,806
我们使用一个


1629
00:56:32,806 --> 00:56:35,856
以 FP32 制式发布的模型


1630
00:56:36,626 --> 00:56:37,866
比如这个来自 MobileNet 的例子


1631
00:56:37,866 --> 00:56:40,216
将它调整到 Int 8 制式


1632
00:56:40,216 --> 00:56:42,756
然后它的大小将成功从 17MB


1633
00:56:42,756 --> 00:56:44,566
减少到小于 5MB


1634
00:56:45,546 --> 00:56:46,926
这对于与 App 绑定的模型来说


1635
00:56:46,926 --> 00:56:48,636
是一个不少的节省


1636
00:56:48,636 --> 00:56:53,676
你们可以通过


1637
00:56:54,066 --> 00:56:55,566
“Lookup tabel quantization” 等功能


1638
00:56:55,566 --> 00:56:56,646
进行进一步的简化


1639
00:56:56,726 --> 00:56:58,616
我们还支持许多其他功能


1640
00:56:58,616 --> 00:57:01,146
包括对“Custom models（自定义模型）”的支持


1641
00:57:01,146 --> 00:57:03,396
以及一个非常流行的功能


1642
00:57:03,396 --> 00:57:05,366
“Flexible shapes（柔性形状）”


1643
00:57:05,656 --> 00:57:06,826
你们不再需要


1644
00:57:06,826 --> 00:57:08,376
为每一个你们想要进行推理的形状


1645
00:57:08,376 --> 00:57:09,266
提供一个模型


1646
00:57:09,586 --> 00:57:11,396
你们仅需发布一个模型


1647
00:57:11,396 --> 00:57:13,076
然后我们简单的 API


1648
00:57:13,076 --> 00:57:17,076
将为你处理一切


1649
00:57:17,296 --> 00:57:18,936
现在让我们谈谈 Create ML


1650
00:57:19,006 --> 00:57:21,776
一个全新的 易于使用的


1651
00:57:21,776 --> 00:57:23,336
机器学习训练框架


1652
00:57:24,096 --> 00:57:25,926
它汇集了机器学习


1653
00:57:25,926 --> 00:57:28,276
Swift Xcode


1654
00:57:28,276 --> 00:57:29,716
和 Xcode Playgrounds 的强大功能


1655
00:57:31,536 --> 00:57:33,166
使你们不必再从互联网下载包


1656
00:57:33,166 --> 00:57:34,206
并通过冗长


1657
00:57:34,206 --> 00:57:35,256
复杂的教程


1658
00:57:35,256 --> 00:57:36,616
来训练一个模型


1659
00:57:38,406 --> 00:57:39,636
我们支持特征层面训练


1660
00:57:39,636 --> 00:57:41,586
例如图形分类


1661
00:57:41,586 --> 00:57:43,076
和自然语言处理


1662
00:57:44,256 --> 00:57:45,736
如果你们想深入研究


1663
00:57:45,736 --> 00:57:47,336
机器学习


1664
00:57:47,336 --> 00:57:49,226
我们也支持传统类型的算法


1665
00:57:49,276 --> 00:57:50,576
比如线性回归


1666
00:57:50,576 --> 00:57:52,336
增强树模型


1667
00:57:52,336 --> 00:57:53,516
以及传统的数据处理


1668
00:57:53,666 --> 00:57:56,106
但是我们认为人们会想要


1669
00:57:56,106 --> 00:57:57,906
更多地使用这些


1670
00:57:57,906 --> 00:57:59,476
特征类型的训练


1671
00:57:59,476 --> 00:58:00,596
所以让我们来看看这些例子


1672
00:58:01,986 --> 00:58:05,106
对于自然语言处理


1673
00:58:05,106 --> 00:58:06,976
你们现在可以拥有自己的


1674
00:58:06,976 --> 00:58:08,816
自定义自然语言模型


1675
00:58:08,816 --> 00:58:10,646
该模型可以进行


1676
00:58:10,996 --> 00:58:12,096
文本分类 单词标记


1677
00:58:12,096 --> 00:58:12,886
并支持多种语言


1678
00:58:12,886 --> 00:58:16,576
你们可以用非常小的数据集


1679
00:58:16,576 --> 00:58:18,236
训练一个模型


1680
00:58:18,236 --> 00:58:20,536
做情感分析


1681
00:58:20,536 --> 00:58:22,636
比如电影评论


1682
00:58:22,636 --> 00:58:23,766
你们只需要在


1683
00:58:23,766 --> 00:58:25,046
字符串中训练正负


1684
00:58:25,046 --> 00:58:26,766
然后建立自己的自定义图形


1685
00:58:26,796 --> 00:58:27,796
自定义文本分类器


1686
00:58:28,846 --> 00:58:31,786
你们也可以用这样的方法


1687
00:58:32,266 --> 00:58:34,196
进行领域分析


1688
00:58:34,196 --> 00:58:36,226
训练一个模型来理解


1689
00:58:36,226 --> 00:58:37,286
在给定的句子中你们谈论的


1690
00:58:37,286 --> 00:58:39,316
是一家酒店还是一家餐厅


1691
00:58:40,026 --> 00:58:43,636
我们认为 到目前为止


1692
00:58:43,636 --> 00:58:44,986
图形分类是


1693
00:58:45,036 --> 00:58:46,126
人们想要做的


1694
00:58:46,126 --> 00:58:49,256
最受欢迎的训练


1695
00:58:49,256 --> 00:58:50,616
所以我们把重点放在这上面


1696
00:58:51,646 --> 00:58:52,896
一般来说


1697
00:58:52,896 --> 00:58:55,466
如果你们用一个很小的数据集


1698
00:58:55,466 --> 00:58:56,526
来训练一个非常大的模型


1699
00:58:56,526 --> 00:58:58,086
因为作为开发人员


1700
00:58:58,086 --> 00:58:59,246
你们可能只能访问到这样的数据


1701
00:58:59,426 --> 00:59:01,096
那么你们的模型将不会得到很好的训练


1702
00:59:01,096 --> 00:59:02,456
它们会被过度供给


1703
00:59:02,456 --> 00:59:03,236
然后你们就会得到糟糕的预测


1704
00:59:03,846 --> 00:59:06,506
Apple 在使用


1705
00:59:06,506 --> 00:59:08,646
数百万的照片数据


1706
00:59:08,646 --> 00:59:10,696
训练非常大的模型的方面


1707
00:59:10,746 --> 00:59:12,856
有着十分丰富的经验


1708
00:59:13,236 --> 00:59:14,786
我们想把所有的经验


1709
00:59:14,786 --> 00:59:16,416
传授给你们


1710
00:59:16,746 --> 00:59:19,136
通过一种叫做迁移学习的技术


1711
00:59:19,136 --> 00:59:21,896
你们可以训练自己的


1712
00:59:22,156 --> 00:59:23,896
自定义图形分类器


1713
00:59:25,206 --> 00:59:27,506
我们把模型打包到


1714
00:59:27,506 --> 00:59:28,956
我们的 OS 中


1715
00:59:28,956 --> 00:59:29,666
这样就不需要你们交付了


1716
00:59:30,096 --> 00:59:32,116
然后获取你们的数据


1717
00:59:32,116 --> 00:59:33,336
并通过 Creat ML 使用迁移学习


1718
00:59:33,336 --> 00:59:35,366
然后增强我们的模型


1719
00:59:36,706 --> 00:59:38,076
这意味着你们只需要


1720
00:59:38,136 --> 00:59:39,166
交付模型中被增强的那部分


1721
00:59:39,166 --> 00:59:41,636
这为你们的 App 


1722
00:59:41,636 --> 00:59:43,516
带来了十分可观的节省 


1723
00:59:44,926 --> 00:59:45,926
很多开发人员


1724
00:59:45,926 --> 00:59:47,626
需要构建大约 100MB 规模的模型


1725
00:59:47,626 --> 00:59:48,606
仅仅为了向他们的 App 中


1726
00:59:48,606 --> 00:59:50,396
添加一个智能功能


1727
00:59:50,396 --> 00:59:52,526
我们帮助他们提高了效率


1728
00:59:53,376 --> 00:59:54,506
现在 通过迁移学习


1729
00:59:54,506 --> 00:59:55,886
他们可以把模型的大小


1730
00:59:55,886 --> 00:59:57,726
缩减到 3MB


1731
00:59:58,516 --> 01:00:05,856
[ 掌声 ]


1732
01:00:06,356 --> 01:00:08,296
如果你们能够了解


1733
01:00:08,296 --> 01:00:09,716
在 Xcode 和 Xcode Playground 中


1734
01:00:09,716 --> 01:00:11,726
实现这一点的方法


1735
01:00:11,726 --> 01:00:13,166
那就更酷了


1736
01:00:13,166 --> 01:00:14,186
所以我想邀请 Lizzie 上来给你们演示一下


1737
01:00:14,856 --> 01:00:16,856
[ 掌声 ]


1738
01:00:17,196 --> 01:00:17,406
Lizzie


1739
01:00:18,746 --> 01:00:19,276
>> 谢谢 John


1740
01:00:20,196 --> 01:00:21,506
让我们来看看


1741
01:00:21,506 --> 01:00:23,456
如何创建一个 App


1742
01:00:23,456 --> 01:00:24,936
来对不同类型的花进行分类


1743
01:00:25,686 --> 01:00:26,986
我将使用一种


1744
01:00:27,136 --> 01:00:28,146
最先进的图形分类器模型


1745
01:00:28,146 --> 01:00:29,516
叫做 Inception B3


1746
01:00:29,516 --> 01:00:31,726
但是这种方法有两个问题


1747
01:00:31,726 --> 01:00:33,076
但是这种方法有两个问题


1748
01:00:33,506 --> 01:00:35,486
第一个问题是这个模型很大


1749
01:00:35,486 --> 01:00:39,076
它在我们的 App 中占了 100MB 的内存


1750
01:00:39,076 --> 01:00:40,916
第二个问题是


1751
01:00:40,916 --> 01:00:42,986
即使这个模型


1752
01:00:43,046 --> 01:00:44,976
支持 1000 个分类


1753
01:00:45,136 --> 01:00:47,396
它也不能正确分类一个玫瑰


1754
01:00:48,076 --> 01:00:49,826
一般来说我要做的就是


1755
01:00:49,826 --> 01:00:51,276
切换到新的开发环境


1756
01:00:51,276 --> 01:00:52,936
下载一个开源的


1757
01:00:52,996 --> 01:00:54,466
机器学习库


1758
01:00:54,466 --> 01:00:56,586
然后花几个小时 训练一个新的模型


1759
01:00:57,376 --> 01:00:59,686
但是现在有了 Create ML 的强大功能


1760
01:00:59,796 --> 01:01:02,656
你们现在可以在几分钟内


1761
01:01:02,896 --> 01:01:04,826
在 Xcode 中完成这项工作


1762
01:01:04,826 --> 01:01:05,866
我将切换到一个新的 Playground


1763
01:01:05,866 --> 01:01:08,226
并导入 CreatMLUI


1764
01:01:09,506 --> 01:01:11,296
下一步是定义一个 builder


1765
01:01:11,296 --> 01:01:14,066
它可以构建


1766
01:01:14,066 --> 01:01:15,006
图形分类器模型


1767
01:01:16,256 --> 01:01:18,066
然后 为了启用


1768
01:01:18,066 --> 01:01:20,166
这个模型的拖放交互


1769
01:01:20,166 --> 01:01:21,796
我们可以在实况视图中


1770
01:01:21,856 --> 01:01:22,136
显示这个构建器


1771
01:01:22,736 --> 01:01:24,286
请看一下旁边


1772
01:01:24,326 --> 01:01:26,146
我们得到了一个提示


1773
01:01:26,146 --> 01:01:26,886
告诉我们拖如图形来开始训练


1774
01:01:28,366 --> 01:01:30,936
在我的桌面上


1775
01:01:30,936 --> 01:01:32,506
我有很多不同的


1776
01:01:32,506 --> 01:01:35,096
花的图片


1777
01:01:35,096 --> 01:01:36,676
并根据它们的名字


1778
01:01:36,676 --> 01:01:37,776
整理在不同的文件夹中


1779
01:01:38,596 --> 01:01:39,686
我们有雏菊 朱槿


1780
01:01:40,026 --> 01:01:43,656
当然还有玫瑰


1781
01:01:45,416 --> 01:01:46,566
现在我要做的是


1782
01:01:46,566 --> 01:01:48,636
把这个文件夹拖到 UI 中


1783
01:01:49,466 --> 01:01:50,936
很快 一个图形分类器模型


1784
01:01:50,936 --> 01:01:52,816
通过 GPU 的加速


1785
01:01:52,896 --> 01:01:55,646
开始在 Mac 上训练


1786
01:01:55,726 --> 01:01:58,156
我马上就能看到


1787
01:01:58,156 --> 01:02:00,116
这个训练数据集的准确度


1788
01:02:00,546 --> 01:02:01,856
但我真正想知道的是


1789
01:02:01,856 --> 01:02:03,586
它对没有出现过的花朵


1790
01:02:03,636 --> 01:02:05,186
的分类表现如何


1791
01:02:05,316 --> 01:02:07,156
我把其中的一些放在这里


1792
01:02:07,206 --> 01:02:09,146
然后把它们拖进来


1793
01:02:09,246 --> 01:02:10,796
让模型开始分析


1794
01:02:10,796 --> 01:02:12,346
这些新的图片


1795
01:02:13,076 --> 01:02:15,266
当我滚动界面时


1796
01:02:15,456 --> 01:02:16,996
你们可以看到


1797
01:02:16,996 --> 01:02:18,556
每种花的实际标签


1798
01:02:18,556 --> 01:02:19,436
以及模型的预测结果


1799
01:02:20,676 --> 01:02:24,486
在这个数据集中 95% 的准确度 是相当不错的


1800
01:02:25,236 --> 01:02:26,886
我现在想做的是


1801
01:02:26,886 --> 01:02:27,986
把它添加到我的 App 中


1802
01:02:27,986 --> 01:02:29,456
你们只需拖拽一下


1803
01:02:29,456 --> 01:02:31,406
就可以了


1804
01:02:34,096 --> 01:02:34,736
我添加好了


1805
01:02:34,856 --> 01:02:36,616
我们看看这个新的模型


1806
01:02:36,616 --> 01:02:38,926
可以发现


1807
01:02:39,116 --> 01:02:40,016
它只有 50KB


1808
01:02:40,566 --> 01:02:41,866
这是节省了很多空间


1809
01:02:42,396 --> 01:02:44,226
所以我会删除


1810
01:02:45,516 --> 01:02:52,046
[ 掌声 ]


1811
01:02:52,546 --> 01:02:53,966
我会删除这个 100MB 的模型


1812
01:02:53,966 --> 01:02:55,496
并初始化这个


1813
01:02:55,496 --> 01:02:56,966
新的图形分类器


1814
01:02:58,986 --> 01:03:01,976
如果我重新运行这个 App


1815
01:03:02,046 --> 01:03:04,196
它就会将这个新的模型


1816
01:03:04,346 --> 01:03:05,026
绑定到 App 中


1817
01:03:05,696 --> 01:03:07,276
我们可以对它进行测试


1818
01:03:07,346 --> 01:03:08,806
看看它是否能够正确地预测


1819
01:03:09,176 --> 01:03:10,626
我们训练过的图片


1820
01:03:10,626 --> 01:03:13,116
或者同样类型的


1821
01:03:13,116 --> 01:03:13,806
花的新图片


1822
01:03:14,376 --> 01:03:16,146
的确 它可以正确地


1823
01:03:16,146 --> 01:03:17,416
对玫瑰进行分类


1824
01:03:18,366 --> 01:03:19,546
让我们再试试朱槿的分类


1825
01:03:19,546 --> 01:03:22,006
经过我们的训练


1826
01:03:22,006 --> 01:03:23,346
以及与 App 的整合后


1827
01:03:23,346 --> 01:03:25,703
它也可以正确地分辨这类图片


1828
01:03:25,996 --> 01:03:27,366
正如你们所看到的


1829
01:03:27,366 --> 01:03:29,536
我们已经能够


1830
01:03:29,536 --> 01:03:31,676
通过 Swift 和 Xcode


1831
01:03:31,786 --> 01:03:33,056
在很少的时间内


1832
01:03:33,286 --> 01:03:37,536
用 Create ML 训练我们的分类器模型 且模型的


1833
01:03:37,726 --> 01:03:38,036
大小十分轻量


1834
01:03:38,816 --> 01:03:39,746
下面有请 John


1835
01:03:40,516 --> 01:03:43,296
[ 掌声 ]


1836
01:03:43,796 --> 01:03:44,146
>> 谢谢 Lizzie


1837
01:03:47,296 --> 01:03:49,106
这难道不酷吗


1838
01:03:49,106 --> 01:03:50,496
仅仅使用三行的 Swift


1839
01:03:50,496 --> 01:03:52,776
就在 Mac 上用几秒钟的时间


1840
01:03:53,066 --> 01:03:57,176
训练了一个自定义图像分类器


1841
01:03:57,386 --> 01:03:59,836
我们已经讨论了新的


1842
01:03:59,836 --> 01:04:01,446
视觉和自然语言处理 API


1843
01:04:01,446 --> 01:04:02,626
以及我们所做的一些增强


1844
01:04:02,626 --> 01:04:05,196
我们对 Core ML 2 的改进


1845
01:04:05,196 --> 01:04:06,866
能够使模型变得更小 更快


1846
01:04:06,866 --> 01:04:08,486
且支持更多的自定义


1847
01:04:08,486 --> 01:04:10,526
Create ML 方面


1848
01:04:10,526 --> 01:04:12,546
我们为 Mac 加入了


1849
01:04:12,546 --> 01:04:16,546
全新的机器学习训练框架


1850
01:04:16,756 --> 01:04:17,746
现在我想谈一谈


1851
01:04:17,746 --> 01:04:19,016
我们在 OS 中构建的


1852
01:04:19,066 --> 01:04:20,046
另一个智能领域


1853
01:04:20,046 --> 01:04:23,296
那就是“捷径”


1854
01:04:23,296 --> 01:04:25,106
你们可以通过 Siri


1855
01:04:25,106 --> 01:04:26,196
暴露 App 中的


1856
01:04:26,196 --> 01:04:27,776
关键功能


1857
01:04:27,866 --> 01:04:31,176
你们甚至可以使用语音命令


1858
01:04:31,176 --> 01:04:34,646
暴露这些关键功能


1859
01:04:36,316 --> 01:04:38,606
此前在 OS 中的


1860
01:04:38,606 --> 01:04:40,536
为 Apple 软件


1861
01:04:40,536 --> 01:04:42,846
建议功能和操作的部分特性


1862
01:04:42,846 --> 01:04:44,856
如今可以通过“捷径”而实现


1863
01:04:46,266 --> 01:04:47,906
所有这些预测都是在设备上


1864
01:04:47,906 --> 01:04:49,576
通过机器学习做出的


1865
01:04:49,856 --> 01:04:51,486
从而保护了用户的隐私


1866
01:04:53,456 --> 01:04:54,666
你们可能会问


1867
01:04:54,666 --> 01:04:55,526
如何应用“捷径”


1868
01:04:56,666 --> 01:04:57,956
你们中的许多人


1869
01:04:57,956 --> 01:05:00,306
已经应用了一些


1870
01:05:00,356 --> 01:05:01,936
NSUserActivity 的功能


1871
01:05:01,936 --> 01:05:03,096
比如“聚焦”搜索和“接力”


1872
01:05:03,256 --> 01:05:05,976
如果你就是他们中的一员


1873
01:05:06,026 --> 01:05:07,496
现在只需添加这一行代码


1874
01:05:07,496 --> 01:05:09,206
就可以使它们


1875
01:05:09,206 --> 01:05:10,796
支持系统的预测


1876
01:05:11,016 --> 01:05:12,496
[ 掌声 ]


1877
01:05:12,496 --> 01:05:13,436
没错 仅仅一行代码


1878
01:05:13,436 --> 01:05:18,016
但是如果你们想要体验


1879
01:05:18,046 --> 01:05:20,376
完整且丰富的“捷径”功能


1880
01:05:20,376 --> 01:05:21,826
你们需要使用加强的


1881
01:05:21,826 --> 01:05:22,756
新 SiriKit 的 Intents API


1882
01:05:23,996 --> 01:05:26,406
它可以使 App 


1883
01:05:28,046 --> 01:05:29,606
丰富的内联功能


1884
01:05:29,606 --> 01:05:32,106
集成在 Siri 中


1885
01:05:32,106 --> 01:05:33,726
并支持自定义语音触发和响应


1886
01:05:34,126 --> 01:05:35,866
更重要的是


1887
01:05:35,906 --> 01:05:37,776
它可以更有针对性地预测


1888
01:05:37,776 --> 01:05:39,736
这些“捷径”在未来的何时


1889
01:05:39,866 --> 01:05:41,616
会引起用户的兴趣


1890
01:05:42,786 --> 01:05:45,856
一个优秀的“捷径”


1891
01:05:45,856 --> 01:05:47,276
应该能加速并增加


1892
01:05:47,276 --> 01:05:49,886
与 App 的连接


1893
01:05:50,656 --> 01:05:53,826
应该被更频繁地使用


1894
01:05:54,686 --> 01:05:56,566
例如在 TeamSnap 中


1895
01:05:56,566 --> 01:05:58,426
你们希望能够


1896
01:05:58,456 --> 01:06:00,656
检查孩子在每个周六早上的


1897
01:06:00,656 --> 01:06:01,536
足球比赛日程


1898
01:06:02,526 --> 01:06:03,796
理想情况下 我们希望这个功能


1899
01:06:03,796 --> 01:06:05,976
能够集成在 Siri UI 中


1900
01:06:06,046 --> 01:06:08,196
并被直接处理


1901
01:06:08,196 --> 01:06:09,336
而无需进入 App


1902
01:06:09,336 --> 01:06:11,296
如果这是你们想要做的事情


1903
01:06:11,376 --> 01:06:13,826
你们现在完全可以实现它


1904
01:06:14,176 --> 01:06:15,806
在创建“捷径”时


1905
01:06:16,046 --> 01:06:17,686
你们需要做三件简单的事情


1906
01:06:18,336 --> 01:06:19,636
显然 你们需要定义这个“捷径”


1907
01:06:19,636 --> 01:06:21,066
而且需要为


1908
01:06:21,066 --> 01:06:22,246
用户真正感兴趣的操作


1909
01:06:22,246 --> 01:06:23,366
定义它


1910
01:06:24,516 --> 01:06:25,716
当这些“捷径”出现时


1911
01:06:25,716 --> 01:06:27,446
即使它们在 App 中


1912
01:06:27,446 --> 01:06:29,346
你们也需要递交


1913
01:06:29,346 --> 01:06:30,496
因为我们需要这个信号


1914
01:06:30,496 --> 01:06:32,106
在将来预测这些“捷径”


1915
01:06:32,106 --> 01:06:34,196
当然 当这些“捷径”出现时


1916
01:06:34,196 --> 01:06:35,566
你需要处理它们


1917
01:06:35,566 --> 01:06:38,676
如果你们已经完成了这些操作


1918
01:06:38,676 --> 01:06:40,436
你们会惊喜地发现


1919
01:06:40,436 --> 01:06:41,916
你们可以直接与


1920
01:06:41,916 --> 01:06:43,496
HomePod 中的“捷径”进行互动


1921
01:06:44,246 --> 01:06:45,626
所以现在 你们不用拿起手机


1922
01:06:45,626 --> 01:06:47,166
只需要在 HomePod 那里


1923
01:06:47,166 --> 01:06:48,816
向 Siri 询问


1924
01:06:48,816 --> 01:06:50,656
孩子的球员名单


1925
01:06:50,656 --> 01:06:53,426
它就会借助 App 中的信息回复你


1926
01:06:53,696 --> 01:06:55,766
如果你们也想


1927
01:06:55,766 --> 01:06:57,096
让你们的“捷径”


1928
01:06:57,096 --> 01:06:59,016
在 Siri 表盘上显示


1929
01:06:59,016 --> 01:07:01,046
你们可以采用这个新的 Relevant API


1930
01:07:02,066 --> 01:07:06,026
这就是“捷径”


1931
01:07:06,026 --> 01:07:08,056
一种可以暴露 App 的关键功能


1932
01:07:08,056 --> 01:07:09,606
并可以通过 Siri 


1933
01:07:09,846 --> 01:07:12,016
提高用户参与度的 强大的新方法


1934
01:07:13,686 --> 01:07:15,246
现在 我想邀请 Jeremy 上台


1935
01:07:15,246 --> 01:07:17,676
与你们谈谈关于 Metal 的新内容


1936
01:07:17,866 --> 01:07:18,046
Jeremy


1937
01:07:19,516 --> 01:07:22,816
[ 掌声 ]


1938
01:07:23,316 --> 01:07:23,816
>> 谢谢 John


1939
01:07:24,646 --> 01:07:26,526
Metal 是 Apple 现代的


1940
01:07:26,526 --> 01:07:27,616
性能强大


1941
01:07:27,856 --> 01:07:29,056
且高效的编程接口


1942
01:07:29,056 --> 01:07:30,646
它接通了 Apple 所有平台的核心


1943
01:07:30,646 --> 01:07:32,626
也就是 GPU


1944
01:07:32,626 --> 01:07:33,636
利用了它强大的能力


1945
01:07:34,076 --> 01:07:35,716
它加速了高级 3D 图形


1946
01:07:35,716 --> 01:07:37,526
以及通用数据的


1947
01:07:37,526 --> 01:07:38,976
并行计算


1948
01:07:39,756 --> 01:07:41,306
自我们在 2014 年推出 Metal 以来


1949
01:07:41,306 --> 01:07:43,416
我们看到它已被广泛用于


1950
01:07:43,416 --> 01:07:44,916
流畅且高性能的 UI


1951
01:07:44,916 --> 01:07:47,246
现代 3D 游戏


1952
01:07:47,246 --> 01:07:49,266
高级计算摄影


1953
01:07:49,266 --> 01:07:51,396
以及最新的


1954
01:07:51,396 --> 01:07:53,256
AR 和 VR 体验


1955
01:07:53,936 --> 01:07:54,866
去年秋天


1956
01:07:54,866 --> 01:07:56,926
当我们推出最新款 iPhone 时


1957
01:07:56,926 --> 01:07:58,506
我们在 A11 Bionic 芯片的支持下


1958
01:07:58,506 --> 01:08:00,096
非常兴奋地揭开了了 Metal 的新章节


1959
01:08:00,096 --> 01:08:02,556
Apple 利用多年


1960
01:08:02,846 --> 01:08:05,176
在硬件和软件设计方面


1961
01:08:05,176 --> 01:08:07,166
深厚的专业知识的芯片


1962
01:08:07,276 --> 01:08:09,246
发布了针对 Metal 2 优化的


1963
01:08:09,246 --> 01:08:11,586
自行设计的 GPU


1964
01:08:11,766 --> 01:08:14,246
它具有切片式着色


1965
01:08:14,286 --> 01:08:15,776
和图块等


1966
01:08:15,776 --> 01:08:17,076
创新的新特性


1967
01:08:17,076 --> 01:08:18,305
并以更快的性能


1968
01:08:18,305 --> 01:08:20,046
和更低的功耗


1969
01:08:20,046 --> 01:08:22,106
推动了 GPU 编程的发展


1970
01:08:22,106 --> 01:08:24,406
现在你们的 App 可以


1971
01:08:24,406 --> 01:08:26,106
直接使用 Metal 处理 3D 图形


1972
01:08:26,106 --> 01:08:27,386
和 GPU 计算


1973
01:08:27,555 --> 01:08:29,136
此外 Metal 还为 Apple 的


1974
01:08:29,136 --> 01:08:31,126
针对图形 媒体和数据处理的许多系统框架


1975
01:08:31,345 --> 01:08:33,015
提供了强大的支持


1976
01:08:33,015 --> 01:08:35,256
让我为你们举一些例子


1977
01:08:35,256 --> 01:08:37,716
我们的 iOS 摄像头框架


1978
01:08:37,716 --> 01:08:38,886
使用 Metal 计算深度信息


1979
01:08:38,886 --> 01:08:41,196
识别照片中的人物


1980
01:08:41,196 --> 01:08:42,676
并在这张华丽的


1981
01:08:42,716 --> 01:08:44,145
人像模式图片中


1982
01:08:44,145 --> 01:08:45,395
产生景深效果


1983
01:08:46,176 --> 01:08:47,786
开发人员 Epic Games


1984
01:08:47,786 --> 01:08:49,216
利用我们在所有平台上


1985
01:08:49,216 --> 01:08:50,805
对 Metal 的广泛支持


1986
01:08:50,805 --> 01:08:52,026
在 iPhone iPad 和 Mac 上


1987
01:08:52,106 --> 01:08:55,116
发布了他们的畅销游戏 《堡垒之夜》


1988
01:08:56,486 --> 01:08:58,796
AMD 的受 Metal 加速的


1989
01:08:58,796 --> 01:08:59,395
Radeon ProRender 插件


1990
01:08:59,395 --> 01:09:01,805
现在正在 Maxon Cinema4D 和


1991
01:09:01,805 --> 01:09:03,946
Autodesk Maya 中 


1992
01:09:03,946 --> 01:09:05,566
驱动高性能的 3D 内容创建


1993
01:09:05,566 --> 01:09:08,876
和专业编辑


1994
01:09:09,466 --> 01:09:11,526
像《Gravity Sketch》这样的 App


1995
01:09:11,526 --> 01:09:13,256
正在使用 Metal 


1996
01:09:13,256 --> 01:09:14,946
为新一代的艺术家提供


1997
01:09:14,946 --> 01:09:17,106
沉浸式的专业 VR 编辑功能


1998
01:09:18,696 --> 01:09:20,055
Metal 的机器学习加速功能


1999
01:09:20,055 --> 01:09:21,816
使《BeCasso》等 iOS App


2000
01:09:21,816 --> 01:09:23,386
能够将你们的照片


2001
01:09:23,386 --> 01:09:25,826
转化为美丽的画作


2002
01:09:26,225 --> 01:09:27,506
并在 macOS 的


2003
01:09:27,616 --> 01:09:29,515
Pixelmator Pro 中


2004
01:09:29,515 --> 01:09:31,435
驱动自动和智能的图像编辑


2005
01:09:32,225 --> 01:09:33,055
这些只是其中一部分例子


2006
01:09:33,055 --> 01:09:34,996
因为开发人员对 Metal 的


2007
01:09:34,996 --> 01:09:37,446
应用非常惊人


2008
01:09:37,446 --> 01:09:38,486
现在已经有超过 40 万个 App


2009
01:09:38,546 --> 01:09:40,886
使用 Metal API


2010
01:09:42,395 --> 01:09:44,316
所有运行 iOS 12


2011
01:09:44,376 --> 01:09:46,536
和 macOS Mojave 的系统


2012
01:09:46,536 --> 01:09:48,185
均支持 Metal


2013
01:09:48,185 --> 01:09:49,716
包括过去至少 5 年间发布的


2014
01:09:49,716 --> 01:09:51,296
所有 iOS 设备和 Mac


2015
01:09:52,326 --> 01:09:53,856
这意味着现在有


2016
01:09:53,856 --> 01:09:56,326
超过 10 亿个 Metal 系统


2017
01:09:56,326 --> 01:09:56,976
可以支持你们的 App 和游戏


2018
01:09:57,106 --> 01:10:00,886
由于 Metal 广泛支持


2019
01:10:00,886 --> 01:10:04,626
Apple 所有的桌面和移动平台


2020
01:10:04,626 --> 01:10:06,106
我们现在正从 macOS Mojave


2021
01:10:06,106 --> 01:10:08,476
iOS 12 和 Apple tvOS 12 开始


2022
01:10:08,476 --> 01:10:10,686
弃用旧有的


2023
01:10:10,686 --> 01:10:12,026
OpenGL 和 OpenCL GPU 框架


2024
01:10:12,116 --> 01:10:14,786
使用这些旧有 API 的 App


2025
01:10:14,786 --> 01:10:15,916
仍然可以在这些


2026
01:10:15,916 --> 01:10:17,256
系统版本中运行


2027
01:10:17,256 --> 01:10:18,766
但随着我们对旧有技术逐步的淘汰


2028
01:10:18,766 --> 01:10:19,966
弃用是必须迈出的第一步


2029
01:10:20,096 --> 01:10:21,156
因此如果你们还没有着手


2030
01:10:21,156 --> 01:10:22,256
我们建议你们


2031
01:10:22,256 --> 01:10:23,676
尽快将 App 转变为 Metal


2032
01:10:23,676 --> 01:10:24,806
我们将在不久的将来


2033
01:10:24,806 --> 01:10:27,186
就这一转变


2034
01:10:27,186 --> 01:10:27,786
进行更多的讨论


2035
01:10:28,716 --> 01:10:29,906
在你们转变 App 的过程中


2036
01:10:29,906 --> 01:10:30,966
我们可以提供帮助


2037
01:10:31,296 --> 01:10:33,016
与其他的 GPU


2038
01:10:33,016 --> 01:10:34,726
编程 API 相比


2039
01:10:34,726 --> 01:10:35,856
Metal API 更易于使用


2040
01:10:35,856 --> 01:10:37,246
也更易于掌握


2041
01:10:37,496 --> 01:10:38,856
它包含了一种


2042
01:10:38,856 --> 01:10:41,186
熟悉且强大的 C++ GPU 着色语言


2043
01:10:41,436 --> 01:10:43,126
我们还为 Metal 的使用


2044
01:10:43,126 --> 01:10:44,426
提供了一整套


2045
01:10:44,426 --> 01:10:46,666
高级调试和性能分析工具


2046
01:10:46,666 --> 01:10:49,076
这些都内置在 Xcode 中


2047
01:10:49,076 --> 01:10:51,286
我们还提供了具有高级分析功能的


2048
01:10:51,286 --> 01:10:52,456
GPU 性能计数器


2049
01:10:52,456 --> 01:10:53,746
来识别你们最宝贵的


2050
01:10:53,746 --> 01:10:55,506
着色代码行


2051
01:10:55,506 --> 01:10:57,476
一个用于导航 Metal 函数调用的


2052
01:10:57,476 --> 01:10:58,646
可视化 API 调试器


2053
01:10:58,646 --> 01:11:00,666
以及 Metal 系统跟踪


2054
01:11:00,666 --> 01:11:02,226
用于将你们的 Metal 命令


2055
01:11:02,226 --> 01:11:03,506
放在系统上发生的


2056
01:11:03,506 --> 01:11:04,506
所有其他事件的环境中


2057
01:11:04,996 --> 01:11:07,476
今年 我们很兴奋地宣布


2058
01:11:07,516 --> 01:11:08,956
两个强大的工具


2059
01:11:08,956 --> 01:11:10,586
一个是新的 Metal 依赖查看器


2060
01:11:10,586 --> 01:11:11,776
你们可以调查你们的


2061
01:11:11,776 --> 01:11:13,326
复杂且多通道的渲染和命令编码器


2062
01:11:13,326 --> 01:11:15,526
另一个是全新的


2063
01:11:15,526 --> 01:11:17,666
交互式 GPU 源代码


2064
01:11:17,666 --> 01:11:19,306
着色调试器


2065
01:11:19,306 --> 01:11:20,806
你们可以将 Metal 代码


2066
01:11:20,806 --> 01:11:22,966
探索到像素级别


2067
01:11:24,036 --> 01:11:25,046
你们一定想看到


2068
01:11:25,046 --> 01:11:26,596
这些新工具的作用


2069
01:11:26,596 --> 01:11:28,756
所以我想邀请 Seth 为你们做一个演示


2070
01:11:29,346 --> 01:11:29,556
Seth


2071
01:11:30,516 --> 01:11:35,466
[ 掌声 ]


2072
01:11:35,966 --> 01:11:36,496
>> 谢谢 John


2073
01:11:37,416 --> 01:11:39,556
Xcode 的 GP 调试器


2074
01:11:39,556 --> 01:11:41,216
是用于开发 Metal App 的工具


2075
01:11:41,576 --> 01:11:43,306
在左侧的调试导航器中


2076
01:11:43,306 --> 01:11:44,646
你们可以看到在框架中所使用的


2077
01:11:44,646 --> 01:11:45,926
所有 Metal API 代码


2078
01:11:46,126 --> 01:11:46,906
和绘制代码


2079
01:11:46,906 --> 01:11:48,956
在右边你们可以看到


2080
01:11:48,956 --> 01:11:51,406
所选的绘制代码的结果


2081
01:11:51,406 --> 01:11:53,186
主编辑器向你们展示了


2082
01:11:53,186 --> 01:11:54,656
所有的缓冲区 纹理


2083
01:11:54,656 --> 01:11:56,196
和绘制代码所需的


2084
01:11:56,196 --> 01:11:57,316
其他资源


2085
01:11:57,576 --> 01:11:59,086
我们将介绍在 Xcode 10 中全新的


2086
01:11:59,086 --> 01:12:00,096
依赖查看器


2087
01:12:00,096 --> 01:12:01,556
我们可以使用它来了解


2088
01:12:01,556 --> 01:12:04,236
复杂的渲染层


2089
01:12:04,236 --> 01:12:06,166
是如何组合成场景的


2090
01:12:07,706 --> 01:12:09,136
它为你们提供一个


2091
01:12:09,136 --> 01:12:12,296
框架的蓝图


2092
01:12:12,296 --> 01:12:14,276
从而解释和理解


2093
01:12:14,276 --> 01:12:15,666
在一个 App 中复杂的渲染图


2094
01:12:15,746 --> 01:12:17,696
例如 Unity 在这里展示的


2095
01:12:17,696 --> 01:12:19,406
令人惊叹的《死亡之书》


2096
01:12:20,016 --> 01:12:24,656
我可以缩小来查看更多细节


2097
01:12:24,816 --> 01:12:26,486
前面的渲染层


2098
01:12:26,486 --> 01:12:28,696
显示在顶部


2099
01:12:28,696 --> 01:12:30,426
后面的渲染层显示在底部


2100
01:12:31,296 --> 01:12:32,206
这些线表示


2101
01:12:32,206 --> 01:12:34,176
路径之间的依赖


2102
01:12:34,876 --> 01:12:36,136
选中的路径


2103
01:12:36,376 --> 01:12:37,426
用蓝色高亮显示


2104
01:12:38,306 --> 01:12:40,096
正如你们所见


2105
01:12:40,096 --> 01:12:41,616
由于这里有超过 100 张渲染路径


2106
01:12:41,616 --> 01:12:43,146
这个场景中显然有很多依赖关系


2107
01:12:44,496 --> 01:12:46,516
尽管这个场景看起来已经很好


2108
01:12:47,026 --> 01:12:48,756
但仍有提升的空间


2109
01:12:49,256 --> 01:12:50,736
所以我做了一个额外的渲染层


2110
01:12:50,736 --> 01:12:52,076
镜头光晕


2111
01:12:52,076 --> 01:12:54,336
但是你们可以看到


2112
01:12:54,336 --> 01:12:55,806
结果看起来并不好


2113
01:12:55,806 --> 01:12:57,156
太绿了


2114
01:12:58,176 --> 01:13:03,376
让我们放大 选择一个像素


2115
01:13:03,416 --> 01:13:06,186
然后启动新的着色调试器


2116
01:13:06,186 --> 01:13:08,566
一个强大的交互式工具


2117
01:13:08,566 --> 01:13:09,956
从而根据视觉效果


2118
01:13:09,956 --> 01:13:10,476
调试着色器[ 音质不清晰 ]


2119
01:13:11,206 --> 01:13:14,676
在主编辑器中


2120
01:13:14,676 --> 01:13:15,156
我可以看到源代码


2121
01:13:15,816 --> 01:13:17,396
在右边的侧边栏中


2122
01:13:17,526 --> 01:13:19,126
我可以看到每一行代码


2123
01:13:19,256 --> 01:13:21,176
所涉及的变量


2124
01:13:21,176 --> 01:13:22,806
此外 我可以展开


2125
01:13:22,806 --> 01:13:25,316
其中的任何一行 来查看更多的细节


2126
01:13:26,146 --> 01:13:27,876
这两个视图将所选的


2127
01:13:27,876 --> 01:13:29,486
像素周围的区域可视化


2128
01:13:30,316 --> 01:13:31,906
并与框架附件中


2129
01:13:31,906 --> 01:13:34,496
高亮显示的区域相对应


2130
01:13:36,016 --> 01:13:37,986
左边的视图


2131
01:13:37,986 --> 01:13:39,336
显示变量值


2132
01:13:39,336 --> 01:13:41,576
右边的视图


2133
01:13:41,726 --> 01:13:44,276
显示像素 执行蒙版


2134
01:13:44,336 --> 01:13:45,946
它表示这一行代码


2135
01:13:45,996 --> 01:13:48,156
所执行的像素


2136
01:13:48,326 --> 01:13:49,766
这是一种非常强大的方法


2137
01:13:49,826 --> 01:13:52,256
来调试 GPU 上


2138
01:13:52,256 --> 01:13:53,756
大量的着色器并行执行


2139
01:13:53,756 --> 01:13:57,586
你们可以看到


2140
01:13:57,586 --> 01:13:59,016
执行蒙版的形状


2141
01:13:59,516 --> 01:14:00,596
与视觉异常的形状相匹配


2142
01:14:00,596 --> 01:14:02,296
这告诉我


2143
01:14:02,296 --> 01:14:05,426
问题存在于这一行代码中


2144
01:14:05,426 --> 01:14:06,386
现在我知道问题出在哪里了


2145
01:14:06,386 --> 01:14:07,806
这就是我的具体错误


2146
01:14:07,806 --> 01:14:09,456
我应该使用


2147
01:14:09,456 --> 01:14:10,606
镜头光晕的矢量长度


2148
01:14:10,606 --> 01:14:12,556
而不是它的颜色


2149
01:14:12,556 --> 01:14:13,976
这将很容易修复


2150
01:14:17,286 --> 01:14:18,916
我可以点击更新着色器的按钮


2151
01:14:18,916 --> 01:14:20,576
来快速应用修复


2152
01:14:20,716 --> 01:14:22,386
重新编译着色器


2153
01:14:22,386 --> 01:14:23,836
并将其配置到 GPU 上


2154
01:14:24,026 --> 01:14:26,876
这里我们可以看到


2155
01:14:26,876 --> 01:14:28,266
我的镜头光晕被修复了


2156
01:14:28,266 --> 01:14:28,776
场景看起来很酷


2157
01:14:29,516 --> 01:14:36,246
[ 掌声 ]


2158
01:14:36,746 --> 01:14:37,936
这就是 Xcode 10 中


2159
01:14:37,936 --> 01:14:39,946
新的依赖查看器


2160
01:14:39,946 --> 01:14:41,626
和 GP 着色调试器


2161
01:14:41,626 --> 01:14:42,856
为你们提供强大的新工具来构建


2162
01:14:42,856 --> 01:14:43,416
Metal App


2163
01:14:44,066 --> 01:14:44,446
Jeremy


2164
01:14:45,276 --> 01:14:47,496
>> 好的 [ 掌声 ]


2165
01:14:47,496 --> 01:14:47,776
谢谢 Seth


2166
01:14:50,806 --> 01:14:52,036
除了这些神奇的新工具外


2167
01:14:52,036 --> 01:14:53,396
我们还将继续讨论 Metal


2168
01:14:53,396 --> 01:14:55,266
在 iOS 12


2169
01:14:55,266 --> 01:14:57,276
和 macOS Mojave 中的


2170
01:14:57,276 --> 01:14:58,606
一些全新的功能


2171
01:14:58,606 --> 01:15:00,856
我今天将着重介绍其中的三个


2172
01:15:01,526 --> 01:15:03,096
“GPU-Driven Command Encoding”


2173
01:15:03,416 --> 01:15:04,556
“Machine Learning Training Acceleration”


2174
01:15:04,556 --> 01:15:06,576
以及 “Ray Tracing”


2175
01:15:07,496 --> 01:15:09,466
首先是 GPU 驱动的命令编码


2176
01:15:09,676 --> 01:15:11,606
在之前 你们的 App 会使用 CPU


2177
01:15:11,606 --> 01:15:13,536
对 GPU 命令进行编码


2178
01:15:13,536 --> 01:15:14,936
然后在 GPU 上


2179
01:15:14,936 --> 01:15:16,686
执行这些命令


2180
01:15:17,086 --> 01:15:18,196
虽然 Metal 可以使


2181
01:15:18,196 --> 01:15:20,326
这种编码非常快


2182
01:15:20,326 --> 01:15:21,426
但是它仍然会因为


2183
01:15:21,456 --> 01:15:23,086
CPU 和 GPU 之间同步的瓶颈


2184
01:15:23,086 --> 01:15:24,246
而受到影响


2185
01:15:24,746 --> 01:15:26,506
在 iOS 12 和 macOS Mojave 中


2186
01:15:26,506 --> 01:15:28,026
你们可以直接在 GPU 上


2187
01:15:28,026 --> 01:15:29,836
对这些命令进行编码


2188
01:15:29,836 --> 01:15:32,046
从而节省宝贵的 CPU 时间


2189
01:15:32,046 --> 01:15:34,806
以供游戏和 App 使用


2190
01:15:35,276 --> 01:15:36,746
由于你们使用的是


2191
01:15:36,746 --> 01:15:38,476
一个计算着色器


2192
01:15:38,476 --> 01:15:39,886
来在 GPU 上处理这些命令


2193
01:15:39,886 --> 01:15:41,016
所以你们也可以


2194
01:15:41,016 --> 01:15:42,386
并行地构造


2195
01:15:42,386 --> 01:15:44,076
大量的命令


2196
01:15:44,076 --> 01:15:47,976
从而获得更佳的渲染性能和复杂性


2197
01:15:48,966 --> 01:15:50,876
接下来 我想分享


2198
01:15:50,876 --> 01:15:52,526
关于 Metal 对机器学习的支持


2199
01:15:52,716 --> 01:15:54,036
的最新进展


2200
01:15:54,396 --> 01:15:57,186
在 iOS 12 和 macOS Mojave 中


2201
01:15:57,186 --> 01:15:59,936
我们为现有的 Metal 性能着色库


2202
01:15:59,936 --> 01:16:01,876
增加了大量


2203
01:16:01,876 --> 01:16:03,566
全新的计算内核


2204
01:16:03,966 --> 01:16:05,626
经过优化后 它们可以在 iOS


2205
01:16:05,626 --> 01:16:07,196
和 Mac 设备的本地 GPU 上


2206
01:16:07,196 --> 01:16:09,926
支持机器学习训练


2207
01:16:10,246 --> 01:16:11,646
新的 Metal 性能着色器


2208
01:16:11,646 --> 01:16:14,076
在机器学习训练时的性能改进


2209
01:16:14,076 --> 01:16:15,706
是令人惊叹的


2210
01:16:15,706 --> 01:16:17,116
训练速度快了


2211
01:16:17,166 --> 01:16:18,456
一个数量级


2212
01:16:19,376 --> 01:16:20,846
我们也非常高兴地宣布


2213
01:16:20,846 --> 01:16:21,826
我们一直在与 Google 合作


2214
01:16:21,866 --> 01:16:22,796
并将在今年的晚些时候


2215
01:16:22,796 --> 01:16:24,676
将 Metal 加速引入 TensorFlow


2216
01:16:24,676 --> 01:16:25,966
早期的性能结果显示


2217
01:16:25,966 --> 01:16:27,226
相较于以前


2218
01:16:27,226 --> 01:16:29,406
执行的速度快了 20 倍


2219
01:16:29,406 --> 01:16:31,236
这是一个惊人的进步


2220
01:16:32,316 --> 01:16:33,936
[ 掌声 ] 是的 非常棒


2221
01:16:34,516 --> 01:16:36,756
[ 掌声 ]


2222
01:16:37,256 --> 01:16:38,796
最后 射线跟踪


2223
01:16:38,796 --> 01:16:39,866
这是一个有较长历史的技术


2224
01:16:39,866 --> 01:16:41,746
它可以实现令人


2225
01:16:41,806 --> 01:16:44,076
难以置信的逼真场景


2226
01:16:44,076 --> 01:16:45,646
通常用于高端渲染


2227
01:16:45,646 --> 01:16:46,336
和 3D 产品设计


2228
01:16:46,716 --> 01:16:48,116
然而一般来说


2229
01:16:48,116 --> 01:16:49,466
它必须离线完成


2230
01:16:49,466 --> 01:16:51,206
因为它的计算成本非常高


2231
01:16:51,346 --> 01:16:54,796
现在让我快速地描述一下原因


2232
01:16:55,126 --> 01:16:56,196
首先 你们需要通过数学建模


2233
01:16:56,196 --> 01:16:58,036
模拟光线从光源发出


2234
01:16:58,036 --> 01:17:00,636
在物体上反射穿过场景


2235
01:17:00,636 --> 01:17:02,676
朝向屏幕


2236
01:17:02,676 --> 01:17:03,686
并进入你们的眼睛的过程


2237
01:17:04,326 --> 01:17:05,756
并且为了获得越来越高的分辨率


2238
01:17:05,756 --> 01:17:07,126
你们需要添加


2239
01:17:07,126 --> 01:17:09,796
越来越多的射线


2240
01:17:10,866 --> 01:17:14,206
直到达到理想的分辨率


2241
01:17:14,206 --> 01:17:15,486
直到达到理想的分辨率


2242
01:17:15,486 --> 01:17:17,626
这个简单的 1000 * 1000 的图形


2243
01:17:17,626 --> 01:17:19,776
就需要接近 600 万束射线才能生成


2244
01:17:20,756 --> 01:17:22,066
每一束射线都必须


2245
01:17:22,066 --> 01:17:23,256
经过至少两组


2246
01:17:23,256 --> 01:17:25,726
昂贵的数学计算处理


2247
01:17:26,136 --> 01:17:27,496
首先 你们需要确定


2248
01:17:27,496 --> 01:17:28,606
一条给定的射线是否


2249
01:17:28,606 --> 01:17:30,226
与场景中一个特定的三角形相交


2250
01:17:30,576 --> 01:17:31,966
其次 你们需要应用


2251
01:17:31,966 --> 01:17:33,266
一个依据材料特定的着色器


2252
01:17:33,266 --> 01:17:35,106
来生成像素


2253
01:17:35,986 --> 01:17:38,716
最初 这两个操作


2254
01:17:38,716 --> 01:17:39,696
都是由 CPU 执行的


2255
01:17:39,936 --> 01:17:41,656
然而 虽然 GPU 可以


2256
01:17:41,656 --> 01:17:43,336
轻松地处理像素阴影


2257
01:17:43,336 --> 01:17:45,036
可对 CPU 来说


2258
01:17:45,036 --> 01:17:46,506
光线与三角形的相交


2259
01:17:46,506 --> 01:17:47,716
本身就是一个很大的瓶颈


2260
01:17:47,716 --> 01:17:49,026
并且 要将其有效地移动到 GPU 上


2261
01:17:49,026 --> 01:17:50,386
也是一个难题


2262
01:17:51,546 --> 01:17:52,876
但是新的 Metal 射线-三角形求交器


2263
01:17:52,876 --> 01:17:55,016
为你们解决了这个问题


2264
01:17:55,276 --> 01:17:56,726
有了这个新的 API


2265
01:17:56,726 --> 01:17:58,306
你们可以在一个


2266
01:17:58,306 --> 01:18:00,106
非常简单易用的包中


2267
01:18:00,106 --> 01:18:01,336
获得高达 10 倍的性能提升


2268
01:18:01,336 --> 01:18:03,336
且一切都已针对 iOS


2269
01:18:03,516 --> 01:18:05,376
和 macOS 的 GPU 进行了预先优化


2270
01:18:06,186 --> 01:18:07,956
只需简单的几行代码


2271
01:18:07,956 --> 01:18:09,216
只需简单的几行代码


2272
01:18:09,216 --> 01:18:12,216
和许多 GPU 计算操作一样


2273
01:18:12,216 --> 01:18:13,896
射线跟踪是一种


2274
01:18:13,896 --> 01:18:15,086
能够有效地根据


2275
01:18:15,086 --> 01:18:16,376
GPU 的可用性能


2276
01:18:16,376 --> 01:18:18,356
达到不同水平效果的操作


2277
01:18:18,356 --> 01:18:20,066
所以我们可以借助


2278
01:18:20,066 --> 01:18:21,936
Metal 2 对外部 GPU 的支持


2279
01:18:21,936 --> 01:18:23,216
来获得更多的性能


2280
01:18:23,216 --> 01:18:25,806
你们一定要看一下它的效果


2281
01:18:25,976 --> 01:18:27,076
我想邀请 Rav


2282
01:18:27,076 --> 01:18:29,406
来做一个快速的演示 Rav


2283
01:18:30,516 --> 01:18:34,016
[ 掌声 ]


2284
01:18:34,516 --> 01:18:35,106
>> 谢谢 Jeremy


2285
01:18:35,806 --> 01:18:37,716
好的 让我们打开这个


2286
01:18:37,716 --> 01:18:39,296
Amazon Lumberyard 的小酒馆场景


2287
01:18:39,476 --> 01:18:41,316
的射线跟踪渲染


2288
01:18:41,626 --> 01:18:43,536
并使用 CPU


2289
01:18:43,536 --> 01:18:44,956
来执行相交计算


2290
01:18:45,516 --> 01:18:47,186
这个执行在优化后


2291
01:18:47,316 --> 01:18:49,496
可以在 iMac Pro 的


2292
01:18:49,496 --> 01:18:50,686
所有 10 个内核上运行


2293
01:18:51,776 --> 01:18:52,786
我们还添加了一个小的基准测试


2294
01:18:52,786 --> 01:18:54,296
对射线跟踪算法


2295
01:18:54,296 --> 01:18:56,116
进行 80 次迭代的过程


2296
01:18:56,116 --> 01:18:58,116
进行计时


2297
01:18:59,016 --> 01:19:01,016
对于这种环境来说


2298
01:19:01,016 --> 01:19:03,206
这需要进行超过 60 亿次的


2299
01:19:03,206 --> 01:19:04,066
相交测试


2300
01:19:04,736 --> 01:19:05,676
你们可以看到


2301
01:19:05,676 --> 01:19:09,566
我们需要大约 12 秒才能在 CPU 上完成


2302
01:19:09,626 --> 01:19:12,556
现在我们使用 iMac Pro 中内置的 GPU 上的


2303
01:19:12,556 --> 01:19:14,286
新 Metal 射线-三角形求交器


2304
01:19:14,286 --> 01:19:15,796
并将所需的时间


2305
01:19:15,796 --> 01:19:17,506
与之前进行比较


2306
01:19:17,686 --> 01:19:19,816
你们可以马上看到


2307
01:19:19,816 --> 01:19:21,546
速度快了很多


2308
01:19:21,546 --> 01:19:23,926
我们只需要 1.3 秒


2309
01:19:23,926 --> 01:19:24,606
就能完成同样的工作量


2310
01:19:24,986 --> 01:19:26,256
太棒了 我再来做一次


2311
01:19:26,256 --> 01:19:26,646
开始


2312
01:19:28,436 --> 01:19:29,266
完成了


2313
01:19:30,046 --> 01:19:32,306
获得了近乎 10 倍的性能提升


2314
01:19:32,336 --> 01:19:34,836
简直令人惊叹


2315
01:19:35,356 --> 01:19:36,816
当然 我们并没有就此停止


2316
01:19:36,816 --> 01:19:39,296
正如 Jeremy 提到的


2317
01:19:39,296 --> 01:19:40,916
射线跟踪非常适合


2318
01:19:40,916 --> 01:19:43,336
跨多个 GPU 的并行处理


2319
01:19:43,336 --> 01:19:44,976
因此我可以启用一个


2320
01:19:44,976 --> 01:19:46,556
已经连接到 iMac Pro 上的外部 GPU


2321
01:19:46,626 --> 01:19:50,006
并将渲染时间缩短一半


2322
01:19:50,176 --> 01:19:52,316
你们可能注意到我们添加了一条绿线


2323
01:19:52,316 --> 01:19:53,676
这是为了能够直观地观察


2324
01:19:53,796 --> 01:19:55,106
我们如何在两个


2325
01:19:55,106 --> 01:19:56,326
GPU 之间分配工作负载


2326
01:19:56,326 --> 01:19:59,026
在这种情况下


2327
01:19:59,026 --> 01:20:00,776
每个 GPU 渲染一半的帧


2328
01:20:01,416 --> 01:20:02,946
这是一个很大的进步


2329
01:20:03,456 --> 01:20:05,006
但是正如 Jeremy 所说


2330
01:20:05,006 --> 01:20:06,626
你们不可能永远只有 2 个 GPU


2331
01:20:07,186 --> 01:20:09,266
所以让我们再添加 2 个


2332
01:20:09,266 --> 01:20:12,306
现在共有 4 个 GPU 在渲染场景


2333
01:20:12,756 --> 01:20:15,496
这就是 iMac Pro 的


2334
01:20:15,496 --> 01:20:17,836
超过 40 万亿次的计算能力


2335
01:20:17,936 --> 01:20:20,286
我们现在渲染场景的速度


2336
01:20:20,446 --> 01:20:23,186
比 CPU 快了 30 倍


2337
01:20:23,616 --> 01:20:25,466
我们认为这真的很棒


2338
01:20:27,516 --> 01:20:34,266
[ 掌声 ]


2339
01:20:34,766 --> 01:20:35,896
由于射线跟踪


2340
01:20:35,896 --> 01:20:37,076
非常适合渲染阴影


2341
01:20:37,076 --> 01:20:38,376
我将关闭这里的几个灯


2342
01:20:38,376 --> 01:20:40,276
来突出阴影效果


2343
01:20:40,276 --> 01:20:41,826
你们就可以真正理解


2344
01:20:41,916 --> 01:20:43,226
图像在 GPU 上


2345
01:20:43,226 --> 01:20:44,856
聚集的速度有多快


2346
01:20:45,526 --> 01:20:48,126
因此我们相信


2347
01:20:48,156 --> 01:20:49,916
新的 Metal 射线-三角形求交器


2348
01:20:49,916 --> 01:20:52,566
以及 macOS 上


2349
01:20:52,566 --> 01:20:53,926
对外部 GPU 的支持


2350
01:20:53,926 --> 01:20:55,496
将使那些能够利用射线跟踪技术的 App


2351
01:20:55,496 --> 01:20:57,566
进行一些新的工作流


2352
01:20:58,116 --> 01:20:58,406
谢谢大家


2353
01:20:58,856 --> 01:20:59,486
交回给你 Jeremy [ 掌声 ]


2354
01:21:02,196 --> 01:21:04,306
>> 好的 真是太棒了


2355
01:21:04,406 --> 01:21:04,936
谢谢 Rav 这就是 


2356
01:21:06,066 --> 01:21:08,116
iOS 12 和 macOS Mojave 中的 Metal 2


2357
01:21:08,116 --> 01:21:10,466
它是一款易于使用


2358
01:21:10,466 --> 01:21:12,216
统一了 3D 图形


2359
01:21:12,216 --> 01:21:14,466
和 GPU 计算的 API


2360
01:21:14,466 --> 01:21:16,046
广泛支持 Apple 的所有产品


2361
01:21:16,146 --> 01:21:18,926
包括 A11 Bionic


2362
01:21:18,926 --> 01:21:20,186
和 Apple 设计的 GPU


2363
01:21:21,086 --> 01:21:22,716
GPU 开发工具集成到 Xcode


2364
01:21:22,716 --> 01:21:24,206
和所有新特性中


2365
01:21:24,206 --> 01:21:27,016
以支持最新的机器学习训练


2366
01:21:27,016 --> 01:21:28,966
和射线跟踪技术


2367
01:21:29,376 --> 01:21:30,546
这是将你们的 App


2368
01:21:30,546 --> 01:21:31,686
转移到 Metal 的最佳时机


2369
01:21:31,686 --> 01:21:32,826
我们迫不及待地想看看


2370
01:21:32,856 --> 01:21:33,656
你们接下来会创造的成果


2371
01:21:33,856 --> 01:21:34,196
谢谢大家


2372
01:21:35,276 --> 01:21:37,126
现在 我想请上 Mike Rockwell


2373
01:21:37,126 --> 01:21:40,676
来讨论一些 AR 最新进展


2374
01:21:40,676 --> 01:21:40,876
谢谢


2375
01:21:41,516 --> 01:21:43,706
[ 掌声 ]


2376
01:21:44,206 --> 01:21:44,926
>> 谢谢 Jeremy


2377
01:21:47,936 --> 01:21:49,786
对 Apple 的 AR 来说


2378
01:21:49,786 --> 01:21:51,306
去年是了不起的一年


2379
01:21:51,896 --> 01:21:53,876
随着 ARKit 在 WWDC 上的首次亮相


2380
01:21:53,876 --> 01:21:57,866
iOS 成为了世界上


2381
01:21:57,866 --> 01:22:01,186
最大的 AR 平台


2382
01:22:01,696 --> 01:22:03,146
目前已有数亿个


2383
01:22:03,296 --> 01:22:06,576
支持 AR 的 iOS 设备


2384
01:22:06,576 --> 01:22:08,006
而且这个数字正在迅速增长


2385
01:22:09,066 --> 01:22:09,966
正如 Craig 在上午


2386
01:22:09,966 --> 01:22:12,336
向你们展示的


2387
01:22:12,336 --> 01:22:14,446
在 iOS 12 系统中


2388
01:22:14,446 --> 01:22:16,386
我们进一步实现了


2389
01:22:16,386 --> 01:22:17,326
AR 在操作系统中的高度集成 


2390
01:22:18,126 --> 01:22:20,696
我们现在可以在“信息” “News”


2391
01:22:20,696 --> 01:22:22,946
“Safari 浏览器” 等 App 中


2392
01:22:22,946 --> 01:22:26,606
通过新的 Quick Look 查看器来体验 AR 内容


2393
01:22:27,456 --> 01:22:29,516
为此 我们必须为 AR


2394
01:22:29,516 --> 01:22:31,246
创建一个针对其


2395
01:22:31,296 --> 01:22:32,996
进行优化的文件格式


2396
01:22:32,996 --> 01:22:35,066
我们与 Pixar 和 Adobe


2397
01:22:35,066 --> 01:22:37,836
合作创建了一种新的移动 AR 格式


2398
01:22:37,836 --> 01:22:39,886
叫做 USDZ


2399
01:22:40,176 --> 01:22:43,616
它基于在整个行业中


2400
01:22:43,616 --> 01:22:45,256
用于专业内容创作的


2401
01:22:45,256 --> 01:22:46,786
通用场景描述格式


2402
01:22:47,286 --> 01:22:48,726
它对移动设备进行了优化


2403
01:22:48,726 --> 01:22:50,916
支持丰富的


2404
01:22:50,916 --> 01:22:52,416
3D 素材和动画


2405
01:22:53,576 --> 01:22:57,596
使用 USDZ 十分简单


2406
01:22:58,016 --> 01:22:59,526
在网络上


2407
01:22:59,526 --> 01:23:01,596
只需要几行 HTML


2408
01:23:01,596 --> 01:23:03,976
并且它也支持在 SceneKit 中


2409
01:23:03,976 --> 01:23:06,196
使用 Model I/O


2410
01:23:06,196 --> 01:23:07,346
因此你们可以在 App 中


2411
01:23:07,346 --> 01:23:08,236
轻松地使用它


2412
01:23:09,596 --> 01:23:11,266
我们还一直与


2413
01:23:11,266 --> 01:23:12,736
内容创建工具方面的业界翘楚


2414
01:23:12,736 --> 01:23:14,116
密切合作


2415
01:23:14,116 --> 01:23:15,366
为了给 USDZ 提供本地支持


2416
01:23:16,406 --> 01:23:17,986
正如你们今天上午听到的


2417
01:23:17,986 --> 01:23:18,986
Abhay 说他十分了解


2418
01:23:18,986 --> 01:23:21,836
Adobe 在这个方向的最新进展


2419
01:23:21,836 --> 01:23:22,886
所以我想邀请他现在上台


2420
01:23:22,886 --> 01:23:24,666
跟你们聊一聊


2421
01:23:25,226 --> 01:23:25,676
Abhay


2422
01:23:26,516 --> 01:23:29,546
[ 掌声 ]


2423
01:23:30,046 --> 01:23:30,516
>> 谢谢 Mike


2424
01:23:32,996 --> 01:23:34,226
很高兴回到讲台上


2425
01:23:35,276 --> 01:23:36,186
正如你们在今天上午的


2426
01:23:36,186 --> 01:23:38,116
主题演讲中所听到的


2427
01:23:38,116 --> 01:23:40,866
Adobe 的 Creative Cloud


2428
01:23:40,866 --> 01:23:42,806
以及 ARKit 将能够重新想象


2429
01:23:42,806 --> 01:23:44,236
并融合数字世界和现实世界


2430
01:23:45,176 --> 01:23:47,496
这需要对新的


2431
01:23:47,496 --> 01:23:49,566
设计交互模型


2432
01:23:49,566 --> 01:23:50,656
进行彻底的重新思考


2433
01:23:52,086 --> 01:23:54,506
今天早些时候


2434
01:23:54,506 --> 01:23:56,546
我们宣布了一种用于


2435
01:23:56,546 --> 01:23:58,986
创建 AR 体验的新系统 Project Aero


2436
01:23:59,646 --> 01:24:02,286
它将 Photoshop 和 Dimension 等


2437
01:24:02,286 --> 01:24:03,916
常见的 Creative Cloud App 的


2438
01:24:03,916 --> 01:24:06,736
一些特性注入到 ARKit 中


2439
01:24:07,646 --> 01:24:11,816
借助于 Creative Cloud 和 iOS


2440
01:24:11,816 --> 01:24:13,076
你们将首次可以


2441
01:24:13,236 --> 01:24:14,606
在 AR 中进行


2442
01:24:14,606 --> 01:24:16,066
“所见即所得”的编辑


2443
01:24:16,066 --> 01:24:20,626
和你们想的一样


2444
01:24:20,626 --> 01:24:21,956
我们也认为


2445
01:24:21,956 --> 01:24:24,046
ARKit 绝对是 AR 的主导平台


2446
01:24:24,206 --> 01:24:26,236
我们很高兴能与


2447
01:24:26,236 --> 01:24:28,576
Apple 紧密合作


2448
01:24:28,576 --> 01:24:31,216
共同探索和推进


2449
01:24:31,216 --> 01:24:32,936
沉浸式设计的发展


2450
01:24:33,526 --> 01:24:38,226
但是要充分实现 AR 的潜力


2451
01:24:38,226 --> 01:24:39,326
你们需要投身于


2452
01:24:39,326 --> 01:24:40,066
整个生态系统中


2453
01:24:40,416 --> 01:24:42,056
所以今天 我们宣布


2454
01:24:42,056 --> 01:24:43,956
Adobe 将与


2455
01:24:43,956 --> 01:24:46,396
Apple 和 Pixar 一起


2456
01:24:46,646 --> 01:24:50,996
本地支持 USDZ 格式


2457
01:24:50,996 --> 01:24:51,063
[ 掌声 ]


2458
01:24:51,063 --> 01:24:54,466
AR 是一种独特的媒介


2459
01:24:54,466 --> 01:24:56,056
它允许交互内容


2460
01:24:56,106 --> 01:24:58,396
扩展到屏幕之外


2461
01:24:58,396 --> 01:25:00,036
我们周围的物理空间


2462
01:25:00,036 --> 01:25:02,106
实际上变成了一个


2463
01:25:02,106 --> 01:25:03,666
创造性的画布


2464
01:25:04,106 --> 01:25:05,506
我们来看一下


2465
01:25:07,516 --> 01:26:23,516
[ 音乐 ]


2466
01:26:24,016 --> 01:26:25,046
[ 掌声 ]


2467
01:26:25,046 --> 01:26:25,596
非常酷


2468
01:26:29,816 --> 01:26:32,876
究其核心 Aero 项目是 Adobe 


2469
01:26:32,926 --> 01:26:34,456
愿景和使命的一部分


2470
01:26:34,456 --> 01:26:36,686
希望能够真正将


2471
01:26:36,836 --> 01:26:38,376
沉浸式内容的创造民主化


2472
01:26:39,186 --> 01:26:40,266
正如你们在视频中所看到的


2473
01:26:40,266 --> 01:26:42,906
创造者和开发人员


2474
01:26:42,906 --> 01:26:44,266
将能够无缝地协作


2475
01:26:44,266 --> 01:26:46,566
并借助于这些工具


2476
01:26:46,566 --> 01:26:50,906
提供广泛的 AR 体验


2477
01:26:51,056 --> 01:26:53,356
请继续关注


2478
01:26:53,356 --> 01:26:55,136
我们即将召开的 Adobe MAX 大会


2479
01:26:55,136 --> 01:26:56,526
获知 Aero 项目的更多最新进展


2480
01:26:57,286 --> 01:26:58,576
就个人而言


2481
01:26:58,576 --> 01:26:59,806
我们与 Apple 的合作


2482
01:26:59,806 --> 01:27:02,246
令我感到十分的兴奋


2483
01:27:02,246 --> 01:27:04,476
因为我们在共同探索


2484
01:27:04,476 --> 01:27:06,556
这个新兴而强大的


2485
01:27:06,556 --> 01:27:07,616
新叙事媒介的无限可能


2486
01:27:07,706 --> 01:27:08,476
谢谢大家


2487
01:27:08,526 --> 01:27:08,976
交给你了 Mike


2488
01:27:09,516 --> 01:27:12,166
[ 掌声 ]


2489
01:27:12,666 --> 01:27:13,226
>> 谢谢 Abhay


2490
01:27:14,546 --> 01:27:15,516
简直太棒了


2491
01:27:15,736 --> 01:27:16,776
令人惊叹


2492
01:27:17,386 --> 01:27:20,096
当然 Apple 的 AR 基础


2493
01:27:20,096 --> 01:27:21,316
是 ARKit


2494
01:27:21,966 --> 01:27:23,676
ARKit 具备


2495
01:27:23,676 --> 01:27:25,626
可靠的设备位置定位


2496
01:27:25,626 --> 01:27:27,986
精确的照明和尺寸估计


2497
01:27:27,986 --> 01:27:30,606
这使得创建 AR App 变得更加容易


2498
01:27:31,616 --> 01:27:32,946
iPhone X 提供了


2499
01:27:32,946 --> 01:27:34,616
突破性的面部追踪


2500
01:27:34,806 --> 01:27:36,746
在过去 这需要专门定制的硬件


2501
01:27:38,116 --> 01:27:39,806
在最初的版本发布后


2502
01:27:39,806 --> 01:27:41,306
我们很快跟进了 ARKit 1.5


2503
01:27:41,306 --> 01:27:43,866
增加了 2D 图像触发器


2504
01:27:43,866 --> 01:27:45,206
高分辨率的背景摄像头


2505
01:27:45,206 --> 01:27:46,856
以及暂停


2506
01:27:46,856 --> 01:27:49,216
和恢复跟踪的功能


2507
01:27:49,216 --> 01:27:50,096
如此一来 在你接到来电时


2508
01:27:50,096 --> 01:27:52,006
就不必重启 AR 会话


2509
01:27:52,746 --> 01:27:54,366
我非常兴奋地告诉你们


2510
01:27:54,366 --> 01:27:56,576
我们下一个跨越式的前进


2511
01:27:56,576 --> 01:28:00,706
ARKit 2


2512
01:28:00,706 --> 01:28:03,076
ARKit 2 提供了很多的改进


2513
01:28:03,076 --> 01:28:06,116
包括提升的


2514
01:28:06,116 --> 01:28:07,946
面部跟踪功能


2515
01:28:07,946 --> 01:28:11,826
新增了注视和舌头的跟踪能力


2516
01:28:12,386 --> 01:28:13,786
这些高要求的功能


2517
01:28:13,786 --> 01:28:14,766
允许你们把面部动画的逼真程度


2518
01:28:14,766 --> 01:28:16,726
带到一个新的水平


2519
01:28:17,566 --> 01:28:18,846
事实证明


2520
01:28:18,846 --> 01:28:20,706
孩子们在玩动画表情时的


2521
01:28:20,706 --> 01:28:22,226
第一件事就是伸出舌头


2522
01:28:22,226 --> 01:28:23,536
我想你们很多人也是这样


2523
01:28:23,536 --> 01:28:24,886
这就是为什么 我们要新增这项功能


2524
01:28:28,366 --> 01:28:29,956
为了更准确地将物体


2525
01:28:29,956 --> 01:28:31,636
融入到场景中


2526
01:28:31,636 --> 01:28:33,346
我们添加了环境纹理贴图


2527
01:28:33,726 --> 01:28:36,206
ARKit 基于摄像头在现实世界中


2528
01:28:36,206 --> 01:28:37,986
看到的场景创建纹理贴图


2529
01:28:37,986 --> 01:28:41,346
请注意 这个球反射的是


2530
01:28:41,346 --> 01:28:42,466
桌子上的那张真实的图片


2531
01:28:43,046 --> 01:28:44,966
但是摄像头看不到的场景


2532
01:28:44,966 --> 01:28:45,706
该怎么办呢


2533
01:28:46,346 --> 01:28:47,896
通过机器学习


2534
01:28:47,896 --> 01:28:49,286
我们在数千个典型的环境中


2535
01:28:49,456 --> 01:28:51,356
训练了一个神经网络


2536
01:28:51,786 --> 01:28:53,826
这使得 ARKit 能够


2537
01:28:53,826 --> 01:28:55,876
虚构场景的其他部分


2538
01:28:56,406 --> 01:28:57,336
这意味着你们会得到一些


2539
01:28:57,416 --> 01:28:58,906
十分可信的反射


2540
01:28:58,906 --> 01:28:59,846
比如头顶的灯光


2541
01:28:59,846 --> 01:29:01,026
即使摄像头根本没有


2542
01:29:01,236 --> 01:29:02,676
在环境中看到灯光


2543
01:29:02,676 --> 01:29:04,346
你们也可以在球上看到反射


2544
01:29:06,706 --> 01:29:09,016
我们扩展了 2D 图像检测功能


2545
01:29:09,016 --> 01:29:11,486
从而支持在三维空间中


2546
01:29:11,486 --> 01:29:14,446
跟踪这些图像


2547
01:29:15,166 --> 01:29:17,246
所以现在你们可以跟踪


2548
01:29:17,306 --> 01:29:18,606
粘在图片上的 3D 物体


2549
01:29:18,606 --> 01:29:19,996
在现实世界中的移动


2550
01:29:20,366 --> 01:29:24,856
不仅是平面的移动 也可以是立体的移动


2551
01:29:27,516 --> 01:29:33,336
[ 掌声 ]


2552
01:29:33,836 --> 01:29:37,306
ARKit 现在可以检测 3D 物体


2553
01:29:37,796 --> 01:29:39,896
你们可以通过 API


2554
01:29:40,426 --> 01:29:42,416
或者我们提供的简单开发工具


2555
01:29:42,416 --> 01:29:46,596
来扫描物体


2556
01:29:46,596 --> 01:29:48,606
然后这些映射可以用于


2557
01:29:48,606 --> 01:29:49,786
识别这些物体及其位置


2558
01:29:49,786 --> 01:29:51,756
并触发与环境相关的


2559
01:29:51,756 --> 01:29:53,976
AR 体验


2560
01:29:56,516 --> 01:29:59,206
[ 掌声 ]


2561
01:29:59,706 --> 01:30:01,566
ARKit 2 的一个


2562
01:30:01,566 --> 01:30:03,576
非常重要的特性是


2563
01:30:03,576 --> 01:30:04,936
支持一致性体验


2564
01:30:05,356 --> 01:30:06,356
你们可以在视频中看到


2565
01:30:06,356 --> 01:30:07,866
我们绘制了一个环境


2566
01:30:07,866 --> 01:30:09,386
然后放置了一个 3D 物体


2567
01:30:10,276 --> 01:30:12,416
这个映射可以被保存


2568
01:30:12,416 --> 01:30:14,196
然后用于识别空间


2569
01:30:14,196 --> 01:30:16,066
并重新定位到


2570
01:30:16,066 --> 01:30:18,776
相同的坐标系中


2571
01:30:18,806 --> 01:30:20,736
而且不仅局限在那个设备上


2572
01:30:20,936 --> 01:30:22,206
你们还可以将这些映射


2573
01:30:22,296 --> 01:30:23,856
共享给其他设备


2574
01:30:23,856 --> 01:30:25,706
从而获得完全相同的体验


2575
01:30:26,396 --> 01:30:27,936
你们将有能力创建出


2576
01:30:27,936 --> 01:30:29,686
能够提供一致性体验的 App


2577
01:30:29,686 --> 01:30:31,586
这意味着


2578
01:30:31,586 --> 01:30:32,446
你们可以多次获得这个体验


2579
01:30:33,366 --> 01:30:34,836
例如 你们可以在家里


2580
01:30:34,836 --> 01:30:36,416
放一个展示家人图片和艺术品的


2581
01:30:36,416 --> 01:30:38,266
AR 图钉板


2582
01:30:38,856 --> 01:30:41,096
而且你们可以 在不使用云的情况下


2583
01:30:41,096 --> 01:30:42,726
分享这些映射


2584
01:30:43,186 --> 01:30:45,046
你们的设备可以


2585
01:30:45,226 --> 01:30:48,416
进行本地端对端分享


2586
01:30:49,206 --> 01:30:50,596
我们提供的另一个功能是


2587
01:30:50,596 --> 01:30:51,916
你们将可以实时


2588
01:30:51,916 --> 01:30:55,006
分享这些映射


2589
01:30:55,866 --> 01:30:57,596
这让你们可以创建


2590
01:30:57,926 --> 01:31:00,036
多人 AR 游戏


2591
01:31:00,746 --> 01:31:02,376
为了测验这项功能


2592
01:31:02,376 --> 01:31:04,126
我们创建了一个新的游戏


2593
01:31:04,126 --> 01:31:04,816
叫做《SwiftShot》


2594
01:31:05,226 --> 01:31:07,076
我将用一个视频


2595
01:31:07,076 --> 01:31:08,556
向你们展示


2596
01:31:09,516 --> 01:31:45,186
[ 音乐 ]


2597
01:31:45,686 --> 01:31:47,286
《SwiftShot》是一款非常棒的游戏


2598
01:31:47,286 --> 01:31:48,546
我们也将它带到了今天的展会中


2599
01:31:48,546 --> 01:31:49,806
如果你们还没有机会体验


2600
01:31:49,806 --> 01:31:51,416
我们提供了一个 AR 游戏区


2601
01:31:51,606 --> 01:31:53,636
我们希望与您共享它


2602
01:31:53,636 --> 01:31:54,806
因此你们可以


2603
01:31:54,806 --> 01:31:56,396
凭开放许可证


2604
01:31:56,396 --> 01:31:58,926
下载完整的源代码


2605
01:31:58,926 --> 01:32:00,496
你们可以测试它


2606
01:32:00,496 --> 01:32:01,256
并根据需要进行修改


2607
01:32:01,256 --> 01:32:02,056
我们迫不及待地想看看


2608
01:32:02,056 --> 01:32:03,646
你们在《SwiftShot》上所做的创意


2609
01:32:05,046 --> 01:32:08,376
这就是 ARKit 2


2610
01:32:08,376 --> 01:32:10,616
改进的脸部跟踪


2611
01:32:10,616 --> 01:32:13,186
环境纹理贴图


2612
01:32:13,186 --> 01:32:15,696
图像检测和跟踪


2613
01:32:16,146 --> 01:32:18,566
3D 物体检测


2614
01:32:18,566 --> 01:32:20,726
一致性体验以及多用户体验


2615
01:32:21,786 --> 01:32:23,926
它与整个操作系统


2616
01:32:23,956 --> 01:32:26,106
的 USDZ 相结合


2617
01:32:26,106 --> 01:32:28,766
使 iOS 12 成为迄今为止


2618
01:32:28,766 --> 01:32:29,926
最强大的 AR 平台


2619
01:32:30,326 --> 01:32:31,756
我们很高兴今天能把这项技术 展示给你们


2620
01:32:31,756 --> 01:32:33,216
而且迫不及待地想知道


2621
01:32:33,216 --> 01:32:34,706
你们会创造出怎么样的成果


2622
01:32:35,426 --> 01:32:37,176
请允许我请回 Sebastian


2623
01:32:37,416 --> 01:32:37,786
谢谢大家


2624
01:32:38,516 --> 01:32:42,726
[ 掌声 ]


2625
01:32:43,226 --> 01:32:43,996
>> 谢谢 Mike


2626
01:32:45,156 --> 01:32:47,946
我想我们今天看到了


2627
01:32:47,946 --> 01:32:49,556
很多令人激动的新技术


2628
01:32:49,556 --> 01:32:50,636
我希望你们对此


2629
01:32:50,636 --> 01:32:52,216
感到十分兴奋


2630
01:32:53,076 --> 01:32:54,716
我们让利用机器学习


2631
01:32:54,716 --> 01:32:56,406
变得更容易


2632
01:32:56,406 --> 01:32:58,456
用 ARKit 构建新的出色体验


2633
01:32:58,456 --> 01:32:59,666
用 Metal 进行高性能图形处理


2634
01:32:59,716 --> 01:33:01,546
借助深色模式


2635
01:33:01,546 --> 01:33:02,946
推进了 Mac 发展的一大步


2636
01:33:02,946 --> 01:33:04,156
我知道你们对此都无比的喜欢


2637
01:33:04,156 --> 01:33:05,916
这一切都得益于


2638
01:33:05,916 --> 01:33:07,136
我们的开发工具的巨大进步


2639
01:33:07,136 --> 01:33:09,366
这些工具使得我们


2640
01:33:09,366 --> 01:33:10,526
能够充分利用这些


2641
01:33:10,696 --> 01:33:12,236
非常强大的技术


2642
01:33:12,916 --> 01:33:15,026
我们还讨论了


2643
01:33:15,066 --> 01:33:17,156
应该如何专注于


2644
01:33:17,156 --> 01:33:18,966
对用户最重要的东西


2645
01:33:20,056 --> 01:33:21,286
所有这些优秀的技术和工具


2646
01:33:21,286 --> 01:33:23,216
都可以在今天作为开发人员预览版


2647
01:33:23,216 --> 01:33:26,716
供 WWDC 与会者帐户使用


2648
01:33:26,716 --> 01:33:27,986
有没有人已经开始下载了


2649
01:33:29,286 --> 01:33:29,826
没有几个人吗


2650
01:33:29,826 --> 01:33:31,276
好吧 你们得抓紧时间了


2651
01:33:31,526 --> 01:33:32,666
这个发布可是限量的


2652
01:33:34,966 --> 01:33:36,556
请尽快开始下载


2653
01:33:36,556 --> 01:33:37,456
请尽快开始下载


2654
01:33:37,816 --> 01:33:40,146
同时 请充分利用这一周


2655
01:33:40,146 --> 01:33:41,636
在这次大会上


2656
01:33:41,736 --> 01:33:42,906
我们将会举办超过 100 个讨论会


2657
01:33:42,906 --> 01:33:44,636
深入探讨所有这些主题


2658
01:33:45,126 --> 01:33:46,336
它们都是十分精彩的讨论会


2659
01:33:46,706 --> 01:33:48,106
我们还建议你们


2660
01:33:48,106 --> 01:33:49,976
充分利用我们所有的实验室


2661
01:33:49,976 --> 01:33:51,276
因为你们可以


2662
01:33:51,276 --> 01:33:52,456
从在场的许多


2663
01:33:52,456 --> 01:33:53,986
Apple 工程师那里得到帮助


2664
01:33:54,266 --> 01:33:56,306
他们将回答你们的所有问题


2665
01:33:57,206 --> 01:33:59,906
我希望你们能享受这次的大会


2666
01:33:59,906 --> 01:34:01,996
期待着本周能与你们见面


2667
01:34:02,166 --> 01:34:02,586
谢谢大家


2668
01:34:03,508 --> 01:34:05,508
[ 掌声 ]

