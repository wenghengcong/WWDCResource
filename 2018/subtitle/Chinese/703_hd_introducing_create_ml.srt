1
00:00:06,516 --> 00:00:14,500
［ 音乐 ］


2
00:00:20,516 --> 00:00:29,046
［ 掌声 ］


3
00:00:29,546 --> 00:00:31,956
>> 大家好 非常欢迎


4
00:00:32,436 --> 00:00:33,796
我是 Gaurav


5
00:00:33,796 --> 00:00:34,936
今天要向大家介绍的主题是


6
00:00:34,936 --> 00:00:36,436
机器学习


7
00:00:37,096 --> 00:00:40,146
去年我们发布了 Core ML


8
00:00:40,146 --> 00:00:41,986
从各位开发人员处


9
00:00:41,986 --> 00:00:44,906
得到的反馈


10
00:00:44,906 --> 00:00:45,766
非同凡响


11
00:00:46,566 --> 00:00:48,456
你们开发的 App


12
00:00:48,606 --> 00:00:50,436
令人惊叹


13
00:00:50,436 --> 00:00:53,596
效果也非常出众


14
00:00:53,596 --> 00:00:54,086
所以 首先让我对大家表示感谢


15
00:00:54,676 --> 00:00:56,186
谢谢你们信任 Core ML


16
00:00:56,666 --> 00:00:58,376
我们非常高兴看到


17
00:00:58,376 --> 00:01:01,396
这么多开发人员


18
00:01:01,396 --> 00:01:03,306
使用 Core ML


19
00:01:03,306 --> 00:01:03,596
并给用户带来智能体验


20
00:01:04,406 --> 00:01:05,556
因为我们是共进退的


21
00:01:05,876 --> 00:01:06,226
感谢大家


22
00:01:07,041 --> 00:01:09,041
［ 掌声 ］


23
00:01:09,066 --> 00:01:12,376
这是给所有开发人员的掌声


24
00:01:13,236 --> 00:01:16,506
好 如果你还有印象


25
00:01:16,506 --> 00:01:18,026
Core ML 让你可以轻松


26
00:01:18,026 --> 00:01:19,526
将机器学习模型


27
00:01:19,526 --> 00:01:19,856
应用于你的 App 中


28
00:01:21,336 --> 00:01:22,586
整个过程非常简单


29
00:01:23,006 --> 00:01:25,066
找到一个机器学习模型


30
00:01:25,066 --> 00:01:27,746
拖拽到 Xcode 中


31
00:01:27,816 --> 00:01:29,806
然后仅添加三行代码


32
00:01:30,366 --> 00:01:32,776
你就可以实时运行


33
00:01:32,776 --> 00:01:34,206
最先进的机器学习模型


34
00:01:34,206 --> 00:01:36,376
以及其中几百万个参数


35
00:01:36,436 --> 00:01:36,716
和几十亿次计算


36
00:01:36,916 --> 00:01:37,736
真是令人惊叹


37
00:01:39,076 --> 00:01:40,856
你的用户可以


38
00:01:40,916 --> 00:01:42,606
实时体验机器学习


39
00:01:42,606 --> 00:01:44,576
同时他们的隐私


40
00:01:44,576 --> 00:01:44,806
也受到保护


41
00:01:46,066 --> 00:01:47,466
你只需要将模型


42
00:01:47,466 --> 00:01:49,766
拖拽进 Xcode


43
00:01:50,126 --> 00:01:51,546
剩下的就看


44
00:01:51,546 --> 00:01:51,756
Core ML 了


45
00:01:51,856 --> 00:01:55,986
那么问题来了


46
00:01:55,986 --> 00:01:57,776
这些机器学习模型


47
00:01:58,626 --> 00:01:58,746
从哪儿来呢


48
00:01:59,936 --> 00:02:01,726
去年 我们给大家提供了


49
00:02:01,726 --> 00:02:02,486
两个选择


50
00:02:03,116 --> 00:02:05,086
第一个是


51
00:02:05,086 --> 00:02:06,896
你可以从我们网站上


52
00:02:06,896 --> 00:02:09,416
下载机器学习模型


53
00:02:10,166 --> 00:02:13,146
但更重要的是


54
00:02:13,146 --> 00:02:15,326
我们还发布了 Core ML 工具


55
00:02:15,896 --> 00:02:18,086
有了 Core ML 工具


56
00:02:18,316 --> 00:02:19,486
你们就可以使用


57
00:02:19,576 --> 00:02:22,496
了不起的 ML 社区创作作品了


58
00:02:23,776 --> 00:02:25,986
方法也很简单


59
00:02:26,446 --> 00:02:27,316
选择你最想要的学习资料库


60
00:02:27,316 --> 00:02:29,226
在该资料库中


61
00:02:29,226 --> 00:02:31,326
训练你的模型


62
00:02:31,526 --> 00:02:33,426
将模型导入 Core ML


63
00:02:33,426 --> 00:02:35,776
然后再嵌入


64
00:02:35,776 --> 00:02:36,426
你的 App 即可


65
00:02:36,426 --> 00:02:40,256
我们发布 Core ML 的时候


66
00:02:40,256 --> 00:02:42,346
Core ML 只支持


67
00:02:42,406 --> 00:02:43,656
五个或六个


68
00:02:43,656 --> 00:02:47,726
训练资料库


69
00:02:47,726 --> 00:02:48,996
但是一年以内


70
00:02:48,996 --> 00:02:52,026
我们就支持了


71
00:02:52,026 --> 00:02:52,976
所有热门的资料库


72
00:02:53,966 --> 00:02:55,586
我们现在还在改良工具


73
00:02:55,586 --> 00:02:56,756
让你们有更大


74
00:02:56,756 --> 00:02:57,826
自定义的空间


75
00:02:58,266 --> 00:02:59,436
明天的会上


76
00:02:59,436 --> 00:03:01,846
我们会给大家更详细介绍


77
00:03:01,846 --> 00:03:02,786
Core ML 工具


78
00:03:03,246 --> 00:03:07,586
2017 年年底


79
00:03:07,586 --> 00:03:10,686
我们发布了 Turi Create 这是我们的


80
00:03:10,686 --> 00:03:11,816
开源机器学习数据集


81
00:03:11,926 --> 00:03:13,706
明天的会议上我们也会


82
00:03:13,706 --> 00:03:15,556
介绍 Turi Create


83
00:03:16,086 --> 00:03:18,666
今年 我们想给大家


84
00:03:18,666 --> 00:03:19,636
带来一些新的东西


85
00:03:20,046 --> 00:03:22,186
希望能继续我们的征途


86
00:03:22,876 --> 00:03:24,226
给大家带来一些原生的


87
00:03:24,226 --> 00:03:27,126
既灵活又基于 Swift 的东西


88
00:03:28,056 --> 00:03:29,276
对 Xcode 的功能


89
00:03:29,276 --> 00:03:32,216
好好加以利用


90
00:03:32,216 --> 00:03:33,726
将关注点放在你们身上


91
00:03:33,726 --> 00:03:35,916
开发人员身上


92
00:03:35,916 --> 00:03:37,566
让机器学习变得简单明了


93
00:03:38,306 --> 00:03:40,956
这就是我们发布 Create ML 的原因


94
00:03:41,516 --> 00:03:47,636
［ 掌声 ］


95
00:03:48,136 --> 00:03:50,026
下面说说我们基于 Swift 的


96
00:03:50,716 --> 00:03:52,016
机器学习框架


97
00:03:52,226 --> 00:03:55,096
Create ML 让机器学习的


98
00:03:55,096 --> 00:03:56,616
组成部分变得完整


99
00:03:57,616 --> 00:03:59,836
你可以在 Create ML 中


100
00:03:59,836 --> 00:04:01,946
创建一个模型


101
00:04:01,996 --> 00:04:02,216
然后在 Core ML 中运行该模型


102
00:04:02,796 --> 00:04:04,496
这样你就可以用我们最喜欢的


103
00:04:04,496 --> 00:04:06,956
编程语言 Swift


104
00:04:06,956 --> 00:04:07,776
从头到脚进行机器学习开发


105
00:04:08,346 --> 00:04:09,366
无需面对开发过程中


106
00:04:09,366 --> 00:04:10,606
需要用到多种语言的情况


107
00:04:10,606 --> 00:04:12,166
例如 你用一种语言训练模型


108
00:04:12,166 --> 00:04:13,386
而又在另一种语言中


109
00:04:13,386 --> 00:04:14,446
运行模型


110
00:04:16,296 --> 00:04:19,736
Create ML


111
00:04:19,736 --> 00:04:20,565
既简单又强大


112
00:04:20,565 --> 00:04:21,966
为各位的 App 量身打造


113
00:04:22,546 --> 00:04:23,996
Create ML 运用了


114
00:04:23,996 --> 00:04:27,146
Apple 核心技术


115
00:04:27,146 --> 00:04:29,566
在你的 Mac 上就能使用


116
00:04:31,156 --> 00:04:32,876
今年 目前为止


117
00:04:32,876 --> 00:04:34,336
我们的重点是


118
00:04:34,336 --> 00:04:35,036
三个非常重要的用例


119
00:04:35,416 --> 00:04:38,696
第一个是图像


120
00:04:38,696 --> 00:04:40,946
第二个是文本


121
00:04:41,096 --> 00:04:41,646
第三个是表格数据


122
00:04:42,886 --> 00:04:45,226
我们认为这三个用例


123
00:04:45,226 --> 00:04:47,346
对大家是最有用的


124
00:04:47,606 --> 00:04:50,946
你可以自定义


125
00:04:50,946 --> 00:04:52,206
图像分类器


126
00:04:52,676 --> 00:04:54,426
这需要你自己创建


127
00:04:54,426 --> 00:04:55,696
图像分类器


128
00:04:55,696 --> 00:04:57,606
对你产品列表中的产品


129
00:04:57,636 --> 00:04:58,316
完成正确识别


130
00:04:59,536 --> 00:05:00,846
你也可以


131
00:05:00,986 --> 00:05:02,586
做文本分类器


132
00:05:02,586 --> 00:05:04,266
然后自己做情感分析


133
00:05:04,266 --> 00:05:05,766
话题分析 或领域分析


134
00:05:06,456 --> 00:05:09,616
你还可以


135
00:05:09,656 --> 00:05:12,636
对列表数据做


136
00:05:12,636 --> 00:05:13,246
经典回归及分类


137
00:05:13,626 --> 00:05:15,316
举个例子 你可能想


138
00:05:15,316 --> 00:05:16,726
根据红酒的化学成分


139
00:05:16,726 --> 00:05:18,916
预测红酒品质


140
00:05:19,746 --> 00:05:21,066
这样的例子数不胜数


141
00:05:21,066 --> 00:05:23,286
在接下来的三十分钟里


142
00:05:23,286 --> 00:05:24,966
我们来详细探讨一下


143
00:05:24,966 --> 00:05:25,216
这个状况


144
00:05:27,976 --> 00:05:30,216
在我们开始前


145
00:05:30,216 --> 00:05:31,656
我们先看一下普通的工作流程


146
00:05:31,656 --> 00:05:35,246
假如你想


147
00:05:35,576 --> 00:05:37,526
在你的 App 中


148
00:05:37,526 --> 00:05:39,726
添加一个新的功能


149
00:05:39,726 --> 00:05:40,826
首先确保机器学习


150
00:05:40,876 --> 00:05:41,606
是正确的选择


151
00:05:41,866 --> 00:05:42,986
不要盲目地


152
00:05:42,986 --> 00:05:43,676
使用机器学习


153
00:05:44,056 --> 00:05:45,156
确保机器学习


154
00:05:45,156 --> 00:05:46,496
是适合你的


155
00:05:46,496 --> 00:05:47,996
然后明确


156
00:05:49,696 --> 00:05:49,926
你要解决的问题


157
00:05:50,076 --> 00:05:52,006
第二步是收集数据


158
00:05:53,326 --> 00:05:55,446
要保证你的数据可以反映


159
00:05:55,446 --> 00:05:57,766
你 App 的真实使用情况


160
00:05:58,566 --> 00:05:59,686
例如 如果你在


161
00:05:59,686 --> 00:06:01,916
制作一个图像分类器


162
00:06:02,546 --> 00:06:04,066
用户会在 iPhone 上


163
00:06:04,066 --> 00:06:06,486
使用你的 App


164
00:06:06,486 --> 00:06:07,946
那你就需要收集


165
00:06:07,946 --> 00:06:08,236
iPhone 中的照片


166
00:06:08,676 --> 00:06:10,246
不要收集太多


167
00:06:10,366 --> 00:06:12,566
屏幕截图 主要还是 


168
00:06:13,106 --> 00:06:13,326
iPhone 的照片


169
00:06:14,536 --> 00:06:17,606
下一步是训练模型


170
00:06:18,396 --> 00:06:21,276
最后一个重要步骤是


171
00:06:21,276 --> 00:06:22,756
对你的模型进行评估


172
00:06:23,366 --> 00:06:25,686
模型评估需要用


173
00:06:25,686 --> 00:06:27,996
一组不一样的数据来检验


174
00:06:29,286 --> 00:06:31,556
如果你觉得满意


175
00:06:31,606 --> 00:06:32,376
就可以导出模型


176
00:06:33,726 --> 00:06:35,416
不过我们假设结果


177
00:06:35,416 --> 00:06:36,216
并不令人满意


178
00:06:36,216 --> 00:06:37,246
你要不就用不同的参数


179
00:06:37,246 --> 00:06:39,416
重新训练模型


180
00:06:39,686 --> 00:06:41,676
要不就收集更多数据


181
00:06:43,456 --> 00:06:45,356
Create ML 在工作流程的


182
00:06:45,356 --> 00:06:47,736
四个阶段


183
00:06:47,736 --> 00:06:48,176
都能给你提供帮助


184
00:06:48,796 --> 00:06:52,886
我们有强大的


185
00:06:52,886 --> 00:06:55,816
内置数据版工具 数据源和数据表


186
00:06:55,816 --> 00:06:57,196
那么接下来


187
00:06:57,196 --> 00:06:58,036
我会给大家介绍


188
00:06:58,466 --> 00:07:01,546
你只需一行代码


189
00:07:01,546 --> 00:07:03,196
就可以训练你的机器学习模型


190
00:07:04,416 --> 00:07:06,196
训练过程会根据你的硬件


191
00:07:06,196 --> 00:07:07,386
做最优化处理


192
00:07:08,096 --> 00:07:11,796
Create ML 还有内置评估标准


193
00:07:11,796 --> 00:07:12,976
这样你就不用


194
00:07:12,976 --> 00:07:14,236
自己写精确率 召回率


195
00:07:14,236 --> 00:07:16,316
和混淆矩阵的计算了


196
00:07:16,646 --> 00:07:19,926
用现成的就行


197
00:07:19,926 --> 00:07:22,376
最后 你对结果满意了


198
00:07:22,376 --> 00:07:22,716
导出模型即可


199
00:07:23,366 --> 00:07:25,936
现在我们深入研究一下


200
00:07:25,936 --> 00:07:28,506
三个用例


201
00:07:29,006 --> 00:07:32,646
图像 文本 和列表数据


202
00:07:32,986 --> 00:07:34,466
首先是图像


203
00:07:34,466 --> 00:07:36,056
下面有请 Lizi Ottens 上台


204
00:07:36,056 --> 00:07:38,036
她是机器学习团队的


205
00:07:38,036 --> 00:07:38,766
一名高级工程师


206
00:07:38,926 --> 00:07:39,266
谢谢大家


207
00:07:40,516 --> 00:07:44,996
［ 掌声 ］


208
00:07:45,496 --> 00:07:49,516
>> 谢谢你 Gaurav


209
00:07:50,106 --> 00:07:51,716
基于图像的功能


210
00:07:51,716 --> 00:07:53,866
是 App 功能中最强大


211
00:07:53,866 --> 00:07:56,806
也最具交互性的功能之一


212
00:07:57,526 --> 00:07:59,346
所以我们今天来看一下


213
00:07:59,346 --> 00:08:00,886
如何训练自定义的


214
00:08:00,886 --> 00:08:02,156
图像分类模型


215
00:08:03,316 --> 00:08:04,686
图像分类是


216
00:08:04,686 --> 00:08:06,626
在一组标签中


217
00:08:06,626 --> 00:08:08,546
找出你想要给某张图片


218
00:08:08,546 --> 00:08:10,336
添加的标签


219
00:08:11,646 --> 00:08:12,486
根据训练数据的不同


220
00:08:12,486 --> 00:08:14,216
你可以将目标定为


221
00:08:14,216 --> 00:08:16,676
在 App 中实现


222
00:08:16,676 --> 00:08:18,666
特定领域的用例


223
00:08:19,346 --> 00:08:21,876
我们的第一步是收集训练数据


224
00:08:23,826 --> 00:08:25,286
让我们来看一个


225
00:08:25,536 --> 00:08:28,286
水果分类器是如何成型的


226
00:08:29,596 --> 00:08:31,756
首先 你需要收集很多


227
00:08:31,756 --> 00:08:33,306
不同类型的图像


228
00:08:33,306 --> 00:08:34,756
这些图像要与你想得到的


229
00:08:34,756 --> 00:08:36,296
最终结果保持一致


230
00:08:36,296 --> 00:08:37,796
然后给图像添加标签


231
00:08:37,796 --> 00:08:38,726
你可以先做一个图集


232
00:08:38,726 --> 00:08:41,775
图集的字符串标签


233
00:08:42,066 --> 00:08:43,726
要与图集中的图像保持一致


234
00:08:44,376 --> 00:08:46,466
或者我们注意到


235
00:08:46,506 --> 00:08:48,226
很多热门的数据组


236
00:08:48,316 --> 00:08:49,636
是通过分层目录结构整理的


237
00:08:49,636 --> 00:08:51,706
也就是说 图像的标签


238
00:08:52,356 --> 00:08:53,726
就是图片文件夹的名字


239
00:08:53,726 --> 00:08:55,006
文件夹中包含所有相关图片


240
00:08:56,726 --> 00:08:57,556
还有一些其他数据源


241
00:08:57,806 --> 00:09:00,116
比如 在单个文件夹里


242
00:09:00,286 --> 00:09:01,836
图片标签被添加到文件名称中


243
00:09:02,296 --> 00:09:04,186
Create ML 的接口


244
00:09:04,186 --> 00:09:05,876
便于提取


245
00:09:06,156 --> 00:09:06,776
这些不同结构


246
00:09:09,126 --> 00:09:11,256
下面是比较复杂的部分


247
00:09:11,396 --> 00:09:12,246
模型训练


248
00:09:12,686 --> 00:09:14,756
准备好数据后


249
00:09:14,806 --> 00:09:15,596
就要训练模型了


250
00:09:17,036 --> 00:09:18,946
你可以通过


251
00:09:19,046 --> 00:09:20,576
输入的图像


252
00:09:20,646 --> 00:09:23,176
从零开始 训练一个复杂的模型


253
00:09:23,936 --> 00:09:26,326
这时你需要大量的标签数据


254
00:09:26,976 --> 00:09:28,546
你还需要大量的计算


255
00:09:28,546 --> 00:09:29,446
和很好的耐心


256
00:09:30,396 --> 00:09:31,626
在机器学习领域


257
00:09:31,696 --> 00:09:33,376
另一个比较成功的技术


258
00:09:33,376 --> 00:09:34,086
就是迁移学习


259
00:09:34,966 --> 00:09:36,936
由于 Apple 在训练


260
00:09:36,936 --> 00:09:38,796
复杂模型上


261
00:09:38,906 --> 00:09:40,236
有丰富的经验


262
00:09:40,236 --> 00:09:41,386
操作系统中


263
00:09:41,426 --> 00:09:43,036
已经包含一个


264
00:09:43,036 --> 00:09:43,826
你可以利用的模型了


265
00:09:44,336 --> 00:09:46,056
我们要做的是


266
00:09:46,056 --> 00:09:47,616
将迁移学习用于


267
00:09:47,686 --> 00:09:49,346
操作系统中的模型


268
00:09:49,346 --> 00:09:50,806
然后对其进行补充


269
00:09:51,256 --> 00:09:52,836
用你准备的数据


270
00:09:53,166 --> 00:09:55,046
重新训练最后几个层次


271
00:09:55,046 --> 00:09:57,126
这样你就不用收集几百万张图片了


272
00:09:57,476 --> 00:09:59,736
只需用你能收集到的数据


273
00:09:59,936 --> 00:10:01,446
就可以训练出一个不错的图像分类器


274
00:10:03,576 --> 00:10:05,656
这可以节省很多训练时间


275
00:10:06,176 --> 00:10:07,306
我们看到很多开发人员


276
00:10:07,346 --> 00:10:08,936
一开始花费数小时训练模型


277
00:10:09,596 --> 00:10:12,996
后来逐渐减少到几分钟


278
00:10:12,996 --> 00:10:14,576
只需用几千张图像


279
00:10:15,056 --> 00:10:16,756
或更小的数据组就可以


280
00:10:16,826 --> 00:10:17,166
有些甚至几秒就能完成


281
00:10:19,886 --> 00:10:21,126
这也缩减了模型大小


282
00:10:21,296 --> 00:10:23,026
从几百 MB


283
00:10:23,026 --> 00:10:26,756
缩减至几 MB


284
00:10:26,756 --> 00:10:28,426
只需几千张图片


285
00:10:28,426 --> 00:10:28,896
小的甚至有几 KB 的


286
00:10:32,076 --> 00:10:34,416
Create ML 的目标在于


287
00:10:34,416 --> 00:10:35,966
简化模型训练


288
00:10:35,966 --> 00:10:37,646
让机器学习变得简单易用


289
00:10:38,286 --> 00:10:39,786
为了证明这一点


290
00:10:39,786 --> 00:10:40,396
我们来看一个例子


291
00:10:47,396 --> 00:10:49,356
首先 为了发现问题


292
00:10:49,446 --> 00:10:51,066
我运行了一个 App


293
00:10:51,126 --> 00:10:52,546
而这个 App


294
00:10:52,626 --> 00:10:54,286
采用的是行业现有的


295
00:10:54,286 --> 00:10:55,166
一个图像分类模型


296
00:10:56,326 --> 00:10:57,766
这个模型是挺大的


297
00:10:57,766 --> 00:10:59,446
在 App 中有 100 MB


298
00:11:00,676 --> 00:11:03,066
我们运行 App


299
00:11:03,116 --> 00:11:07,016
可以得到一些水果的图片


300
00:11:07,016 --> 00:11:07,756
但是这不是我想要的结果


301
00:11:08,626 --> 00:11:10,256
如果我们能将


302
00:11:11,356 --> 00:11:13,316
这些特例分类就更棒了


303
00:11:14,376 --> 00:11:15,796
我们可以


304
00:11:15,886 --> 00:11:19,346
新建一个 Playground


305
00:11:19,346 --> 00:11:21,536
输入 CreateMLUI


306
00:11:21,536 --> 00:11:24,166
我借助 UI 给大家演示


307
00:11:24,166 --> 00:11:25,016
如何操作


308
00:11:26,166 --> 00:11:27,276
我们定义一个创建器


309
00:11:28,796 --> 00:11:29,576
设为启动


310
00:11:29,576 --> 00:11:31,226
然后启用拖拽式训练


311
00:11:31,276 --> 00:11:32,766
我们可以


312
00:11:32,766 --> 00:11:34,186
实时展示创建器


313
00:11:38,426 --> 00:11:40,696
这会在实时视图中


314
00:11:40,696 --> 00:11:42,476
出现拖拽添加图像的提示


315
00:11:42,646 --> 00:11:43,306
添加后开始训练模型


316
00:11:44,886 --> 00:11:47,176
我准备了一些


317
00:11:47,176 --> 00:11:50,676
水果的图片 有蓝莓 还有其他的水果


318
00:11:51,746 --> 00:11:53,396
你可以将图片拖进来


319
00:11:53,476 --> 00:11:54,626
然后你的 Mac


320
00:11:54,626 --> 00:11:56,366
就自动开始训练


321
00:11:56,576 --> 00:11:57,056
图像分类模型了


322
00:11:57,916 --> 00:11:59,616
无论有多少类别


323
00:11:59,616 --> 00:12:03,516
你的 GPU 都会加速训练进程


324
00:12:04,736 --> 00:12:06,036
Create ML 会自动展示


325
00:12:06,036 --> 00:12:09,526
训练数据组的准确率 然而


326
00:12:09,526 --> 00:12:11,316
更有效的是


327
00:12:11,316 --> 00:12:13,076
用模型未识别过的图像


328
00:12:13,076 --> 00:12:15,006
来预测实际用例中


329
00:12:15,006 --> 00:12:17,076
模型的性能


330
00:12:17,806 --> 00:12:20,696
我将另一个包含新图片的文件夹拖入


331
00:12:21,786 --> 00:12:24,846
现在 模型在评估新的水果图片


332
00:12:25,246 --> 00:12:26,896
往下滑可以


333
00:12:26,896 --> 00:12:28,566
看到图片的真实标签


334
00:12:28,606 --> 00:12:31,756
和模型预测出的标签


335
00:12:34,376 --> 00:12:36,406
如果你对准确度


336
00:12:36,406 --> 00:12:38,216
还算满意


337
00:12:38,216 --> 00:12:39,976
你就可以将模型


338
00:12:39,976 --> 00:12:40,406
拖入你的 App


339
00:12:44,786 --> 00:12:45,496
我加在了这里


340
00:12:45,806 --> 00:12:48,036
我们现在再来看


341
00:12:48,076 --> 00:12:49,836
这个模型只有 83 KB


342
00:12:50,396 --> 00:12:52,656
比之前的模型


343
00:12:52,766 --> 00:12:53,206
小了很多


344
00:12:54,516 --> 00:12:59,736
［ 掌声 ］


345
00:13:00,236 --> 00:13:01,696
我们可以删除


346
00:13:01,696 --> 00:13:02,686
之前的旧模型


347
00:13:02,686 --> 00:13:04,786
在视图控制器中


348
00:13:04,786 --> 00:13:06,286
我们可以启用新的模型


349
00:13:06,986 --> 00:13:07,806
ImageClassifier


350
00:13:10,536 --> 00:13:11,676
我们重新运行 App


351
00:13:13,146 --> 00:13:17,866
打开模拟器


352
00:13:17,866 --> 00:13:18,946
看一下新模型


353
00:13:19,026 --> 00:13:19,356
对于水果图片的识别


354
00:13:24,026 --> 00:13:25,436
现在 App 可以


355
00:13:25,436 --> 00:13:27,366
正确识别覆盆子了


356
00:13:27,366 --> 00:13:28,806
因为我们训练了模型


357
00:13:29,276 --> 00:13:29,826
对于覆盆子的识别


358
00:13:30,686 --> 00:13:31,736
我们甚至可以看看


359
00:13:31,736 --> 00:13:32,986
模型是否能区分草莓和覆盆子


360
00:13:33,396 --> 00:13:34,126
现在能做到了


361
00:13:37,956 --> 00:13:39,236
然而你还可以采用


362
00:13:39,286 --> 00:13:39,826
其他的工作流程


363
00:13:40,636 --> 00:13:41,516
或许你想


364
00:13:41,606 --> 00:13:43,356
用编程控制


365
00:13:43,356 --> 00:13:44,056
或自动训练


366
00:13:45,116 --> 00:13:46,486
下面就来讲一下我们


367
00:13:46,486 --> 00:13:48,096
如何在 Create ML 中实现


368
00:13:48,866 --> 00:13:54,246
我们切换到新的 Playground


369
00:13:54,296 --> 00:13:57,316
然后输入 CreateML


370
00:13:57,866 --> 00:13:59,566
由于会用到 URL


371
00:13:59,566 --> 00:14:01,386
我们也输入 Foundation


372
00:14:03,686 --> 00:14:05,406
因为桌面上


373
00:14:05,406 --> 00:14:06,826
还有水果图片的文件夹


374
00:14:06,826 --> 00:14:09,776
我们可以直接输入路径


375
00:14:09,776 --> 00:14:14,586
测试用的图片


376
00:14:14,586 --> 00:14:15,466
也是一样


377
00:14:15,466 --> 00:14:17,526
下一步是


378
00:14:17,526 --> 00:14:18,636
训练模型


379
00:14:19,426 --> 00:14:22,376
我们可以定义一个模型


380
00:14:22,376 --> 00:14:23,716
然后启动一个


381
00:14:23,716 --> 00:14:24,386
图像分类器


382
00:14:25,206 --> 00:14:26,726
现在 我们看一下


383
00:14:26,726 --> 00:14:28,166
自动完成的情况


384
00:14:28,296 --> 00:14:29,826
我们提供多个标签


385
00:14:29,826 --> 00:14:31,006
和多张图像所匹配的


386
00:14:31,006 --> 00:14:33,016
训练数据


387
00:14:33,086 --> 00:14:38,616
或者使用数据源


388
00:14:38,666 --> 00:14:39,846
甚至可以用


389
00:14:39,906 --> 00:14:40,046
模型训练的参数


390
00:14:41,456 --> 00:14:42,466
我们用一个数据源吧


391
00:14:42,466 --> 00:14:44,226
我们用 labeledDirectories


392
00:14:44,296 --> 00:14:45,366
因为我们的数据


393
00:14:45,366 --> 00:14:47,576
是根据标签目录整理的


394
00:14:47,576 --> 00:14:48,436
然后指定 trainingDirectory


395
00:14:50,526 --> 00:14:51,556
由于我们在 Xcode Playground


396
00:14:51,556 --> 00:14:52,946
新的 REPL 模式下


397
00:14:52,976 --> 00:14:54,226
运行模型


398
00:14:54,226 --> 00:14:56,726
我只需按 Shift + Enter


399
00:14:56,726 --> 00:14:57,796
模型马上就开始训练了


400
00:14:59,216 --> 00:15:00,576
你可以将控制台


401
00:15:01,556 --> 00:15:04,006
打开查看


402
00:15:04,006 --> 00:15:06,036
提取功能


403
00:15:06,036 --> 00:15:07,256
并查看有多少重复


404
00:15:08,566 --> 00:15:10,126
之后 你也可以


405
00:15:10,126 --> 00:15:12,066
打开 Quick Look


406
00:15:12,066 --> 00:15:13,866
查看模型的名称


407
00:15:13,866 --> 00:15:14,546
和经过多少数据的训练


408
00:15:16,216 --> 00:15:19,286
现在我们用测试数据


409
00:15:19,376 --> 00:15:19,686
评估一下模型


410
00:15:20,666 --> 00:15:22,926
我们可以


411
00:15:22,926 --> 00:15:25,116
对另一个数据源


412
00:15:25,306 --> 00:15:26,626
调用估算


413
00:15:26,626 --> 00:15:27,636
因为整理方法与之前相同


414
00:15:28,036 --> 00:15:30,206
明确测试数据的 URL


415
00:15:30,986 --> 00:15:33,246
点击 Shift + Enter


416
00:15:33,246 --> 00:15:35,196
模型就开始评估


417
00:15:35,196 --> 00:15:35,456
测试图像了


418
00:15:36,196 --> 00:15:37,816
评估结束后


419
00:15:37,816 --> 00:15:39,326
我们可以查看 Quick Look


420
00:15:39,326 --> 00:15:40,956
看评估了多少数据


421
00:15:40,956 --> 00:15:42,636
文件夹中包含


422
00:15:42,726 --> 00:15:44,166
多少类别


423
00:15:44,596 --> 00:15:45,366
和模型准确率


424
00:15:46,886 --> 00:15:48,326
如果多结果满意


425
00:15:48,376 --> 00:15:48,816
就可以将模型导出


426
00:15:58,606 --> 00:15:59,716
假设我想


427
00:15:59,826 --> 00:16:00,996
导出到桌面


428
00:16:01,206 --> 00:16:02,706
并命名为 FruitClassifier


429
00:16:04,846 --> 00:16:06,296
成功之后


430
00:16:06,296 --> 00:16:07,676
桌面上就有这个新模型了


431
00:16:08,586 --> 00:16:09,876
我们双击模型查看


432
00:16:09,876 --> 00:16:12,046
可以发现


433
00:16:12,126 --> 00:16:12,466
大小完全没变


434
00:16:12,696 --> 00:16:14,256
还是 83 KB


435
00:16:17,036 --> 00:16:18,316
此外 我们可以以同样的方式


436
00:16:18,376 --> 00:16:19,666
将模型嵌入我们的 App


437
00:16:21,206 --> 00:16:21,596
让我们重温一下


438
00:16:22,516 --> 00:16:31,506
［ 掌声 ］


439
00:16:32,006 --> 00:16:33,536
我们看到两种


440
00:16:33,536 --> 00:16:35,126
在 Create ML 中


441
00:16:35,126 --> 00:16:35,516
训练图像分类器模型的方式


442
00:16:36,276 --> 00:16:38,406
一是借助 UI


443
00:16:38,406 --> 00:16:40,446
拖拽训练数据


444
00:16:40,656 --> 00:16:41,626
及评估数据


445
00:16:41,626 --> 00:16:43,956
这样创建模型


446
00:16:43,956 --> 00:16:44,276
非常简单


447
00:16:45,396 --> 00:16:47,866
二是利用 Create ML 接口


448
00:16:48,676 --> 00:16:49,726
看代码的话


449
00:16:49,726 --> 00:16:51,406
我们会发现


450
00:16:51,406 --> 00:16:53,486
我们首先需要输入 CreateML


451
00:16:54,456 --> 00:16:56,066
下一步要明确


452
00:16:56,066 --> 00:16:57,486
训练数据和测试数据的位置


453
00:16:57,486 --> 00:16:59,666
然后通过明确


454
00:16:59,666 --> 00:17:01,396
测试数据的结构


455
00:17:01,496 --> 00:17:02,926
我们就可以开始训练模型了


456
00:17:04,205 --> 00:17:05,346
然后我们用测试数据


457
00:17:05,415 --> 00:17:07,996
评估模型


458
00:17:07,996 --> 00:17:08,306
最后保存模型


459
00:17:11,576 --> 00:17:12,596
如果想自动操作


460
00:17:13,006 --> 00:17:14,215
你可以将这些


461
00:17:14,326 --> 00:17:16,106
写成脚本


462
00:17:16,106 --> 00:17:17,836
很多人用脚本保存操作过程


463
00:17:17,836 --> 00:17:19,215
并且可以随时运行


464
00:17:21,746 --> 00:17:22,896
你可以更改


465
00:17:22,896 --> 00:17:24,766
文件的权限


466
00:17:24,866 --> 00:17:25,086
然后就这样运行


467
00:17:26,056 --> 00:17:27,806
对于其他的工作流程


468
00:17:27,806 --> 00:17:29,996
你可以使用


469
00:17:29,996 --> 00:17:30,126
Swift 命令行


470
00:17:30,126 --> 00:17:33,246
今天我们了解了


471
00:17:33,246 --> 00:17:34,496
如何通过不同的工作流程


472
00:17:35,016 --> 00:17:36,176
训练图像分类模型


473
00:17:36,176 --> 00:17:38,496
下面我要有请 Tao


474
00:17:38,496 --> 00:17:40,576
来讲一下


475
00:17:40,576 --> 00:17:40,976
自然语言处理


476
00:17:41,476 --> 00:17:41,766
谢谢大家


477
00:17:42,516 --> 00:17:49,876
［ 掌声 ］


478
00:17:50,376 --> 00:17:53,546
>> 谢谢 Lizi


479
00:17:54,636 --> 00:17:55,336
大家好


480
00:17:55,526 --> 00:17:56,466
我的名字是 Tao


481
00:17:56,466 --> 00:17:58,416
我是 Apple Core ML 团队的


482
00:17:58,686 --> 00:18:00,086
一名工程师


483
00:18:00,996 --> 00:18:03,166
刚刚大家看到了


484
00:18:03,166 --> 00:18:04,676
我们用几行代码


485
00:18:04,676 --> 00:18:07,036
就可以简单且直观地


486
00:18:07,036 --> 00:18:07,616
训练图像分类器


487
00:18:08,246 --> 00:18:10,146
自然语言也可以做到


488
00:18:10,146 --> 00:18:11,876
下面由我


489
00:18:11,876 --> 00:18:12,406
为大家讲解


490
00:18:12,956 --> 00:18:15,926
今年发布的 Create ML 中


491
00:18:15,926 --> 00:18:17,476
我们会支持两种自然语言处理


492
00:18:17,476 --> 00:18:19,826
文本分类


493
00:18:19,826 --> 00:18:21,866
和词语标注


494
00:18:23,096 --> 00:18:25,046
今天 我会重点介绍


495
00:18:25,046 --> 00:18:26,516
文本分类


496
00:18:26,836 --> 00:18:28,216
想了解词语标注的更多细节


497
00:18:28,796 --> 00:18:30,136
请各位参加明天


498
00:18:30,136 --> 00:18:31,796
自然语言方面的会议


499
00:18:32,656 --> 00:18:34,446
文本分类


500
00:18:34,696 --> 00:18:35,846
在机器学习中


501
00:18:35,926 --> 00:18:36,606
有几种 App


502
00:18:37,816 --> 00:18:39,886
例如 情感分析


503
00:18:40,756 --> 00:18:42,526
各位开发人员的热情


504
00:18:42,526 --> 00:18:43,516
不可抵挡


505
00:18:43,826 --> 00:18:44,906
这是正面信息


506
00:18:45,336 --> 00:18:46,776
你希望你的 App 可以识别


507
00:18:47,516 --> 00:18:50,166
［ 掌声 ］


508
00:18:50,666 --> 00:18:51,656
垃圾邮件分析


509
00:18:52,336 --> 00:18:54,006
如果你在邮箱中


510
00:18:54,006 --> 00:18:55,846
看到这条信息


511
00:18:55,846 --> 00:18:57,616
你知道这是垃圾邮件


512
00:18:57,766 --> 00:19:00,056
所以你希望你的 App


513
00:19:00,526 --> 00:19:02,086
也能识别


514
00:19:02,086 --> 00:19:03,076
话题分析


515
00:19:03,736 --> 00:19:05,696
勇士队翻盘


516
00:19:05,696 --> 00:19:06,636
大获全胜


517
00:19:07,166 --> 00:19:08,686
这是一条体育新闻


518
00:19:08,906 --> 00:19:10,406
你希望你的 App


519
00:19:10,406 --> 00:19:11,186
能划分类别


520
00:19:12,406 --> 00:19:14,876
想要训练这样的分类器


521
00:19:14,876 --> 00:19:16,226
你首先要收集


522
00:19:16,226 --> 00:19:17,436
一些训练数据


523
00:19:18,326 --> 00:19:21,076
Create ML 支持


524
00:19:21,076 --> 00:19:22,256
多种整理训练


525
00:19:22,256 --> 00:19:23,686
数据的方式


526
00:19:24,326 --> 00:19:26,776
比如 标签目录


527
00:19:27,486 --> 00:19:28,796
这里有两个文件夹


528
00:19:29,116 --> 00:19:30,856
一个叫正面


529
00:19:30,856 --> 00:19:32,196
一个叫负面


530
00:19:32,836 --> 00:19:34,526
每个文件夹中


531
00:19:34,526 --> 00:19:37,026
都有一些原始文本


532
00:19:37,026 --> 00:19:40,046
它们的准确标签


533
00:19:40,046 --> 00:19:41,616
就是文件夹的名字


534
00:19:43,096 --> 00:19:45,056
或者你可以


535
00:19:45,056 --> 00:19:46,456
在 CSV 文件中


536
00:19:46,456 --> 00:19:48,866
记录原始文本


537
00:19:48,866 --> 00:19:50,766
和准确标签


538
00:19:50,966 --> 00:19:51,916
以逗号隔开


539
00:19:52,926 --> 00:19:54,926
我们还支持 JSON 格式的


540
00:19:54,926 --> 00:19:56,856
训练数据


541
00:19:57,236 --> 00:19:58,426
我们刚提到


542
00:19:58,426 --> 00:20:00,326
训练数据整理


543
00:20:00,366 --> 00:20:02,056
测试数据也可以用


544
00:20:02,056 --> 00:20:03,326
同样的方式整理


545
00:20:06,376 --> 00:20:08,296
训练数据和测试数据


546
00:20:08,296 --> 00:20:10,196
都准备好后


547
00:20:10,196 --> 00:20:12,246
训练文本分类器


548
00:20:12,246 --> 00:20:13,196
还需要什么步骤呢


549
00:20:16,046 --> 00:20:17,806
典型的工作流程


550
00:20:17,806 --> 00:20:18,576
大概是这样


551
00:20:20,046 --> 00:20:21,396
我们从原始文本入手


552
00:20:22,286 --> 00:20:24,206
通过语言识别


553
00:20:24,206 --> 00:20:25,906
确认原始文本的语言


554
00:20:27,286 --> 00:20:28,916
将文本转换成标记


555
00:20:30,306 --> 00:20:31,756
再将标记


556
00:20:31,756 --> 00:20:34,946
转换成相应特征值


557
00:20:34,946 --> 00:20:36,216
然后加入机器学习模型


558
00:20:36,216 --> 00:20:40,116
输出一些预测值


559
00:20:40,116 --> 00:20:42,066
再将预测值转成标签


560
00:20:42,066 --> 00:20:44,126
然后你可以将标签


561
00:20:44,126 --> 00:20:46,256
与准确标签对比


562
00:20:46,346 --> 00:20:49,206
不断重复这样的过程


563
00:20:49,466 --> 00:20:51,926
然而有了 Create ML


564
00:20:51,926 --> 00:20:54,666
整个流程变得简单


565
00:20:54,666 --> 00:20:56,696
这样你只需


566
00:20:56,696 --> 00:20:58,896
准备原始文本


567
00:20:58,896 --> 00:21:01,226
和准确标签


568
00:21:01,686 --> 00:21:02,566
再训练模型就可以了


569
00:21:03,516 --> 00:21:09,356
［ 掌声 ］


570
00:21:09,856 --> 00:21:11,686
下面我来给大家展示


571
00:21:11,686 --> 00:21:13,256
如何训练文本分类器


572
00:21:13,256 --> 00:21:15,406
并对其加以使用


573
00:21:16,186 --> 00:21:18,396
假如我们有一个简单的 App


574
00:21:18,536 --> 00:21:21,106
叫做保持正面


575
00:21:21,196 --> 00:21:23,566
App 的目的是为了激发


576
00:21:23,626 --> 00:21:24,016
正面的帖子


577
00:21:24,656 --> 00:21:27,246
如果有用户输入


578
00:21:27,246 --> 00:21:29,326
我讨厌堵车


579
00:21:29,326 --> 00:21:31,506
则帖子背景变为红色


580
00:21:31,506 --> 00:21:31,856
发帖按钮变为不可点击


581
00:21:32,706 --> 00:21:37,206
我喜欢淡定地在车流中


582
00:21:37,206 --> 00:21:40,006
以每小时 10 公里的速度


583
00:21:40,736 --> 00:21:41,416
向前行驶


584
00:21:41,626 --> 00:21:42,736
这是个正面的帖子


585
00:21:42,946 --> 00:21:44,646
我们鼓励这种帖子


586
00:21:46,116 --> 00:21:47,876
如果每个人的手机上


587
00:21:47,876 --> 00:21:49,486
都装了这个 App


588
00:21:49,836 --> 00:21:51,406
互联网会变得多好呀


589
00:21:52,516 --> 00:21:56,396
［掌声］


590
00:21:56,896 --> 00:21:58,336
想要实现这一点


591
00:21:58,336 --> 00:21:59,296
我来给大家做个演示


592
00:22:07,016 --> 00:22:09,966
要训练这样一个分类器


593
00:22:09,966 --> 00:22:11,506
我们首先要


594
00:22:11,506 --> 00:22:12,206
收集训练数据


595
00:22:12,916 --> 00:22:17,736
在桌面上 有一个训练数据文件夹


596
00:22:17,736 --> 00:22:19,436
和一个测试数据文件夹


597
00:22:20,126 --> 00:22:21,616
在训练文件里


598
00:22:21,616 --> 00:22:22,156
我们有两个文件夹


599
00:22:22,316 --> 00:22:23,816
一个命名为正面


600
00:22:23,816 --> 00:22:26,246
另一个为负面


601
00:22:26,246 --> 00:22:28,106
每个文件夹中


602
00:22:28,106 --> 00:22:28,446
有一些文章


603
00:22:29,526 --> 00:22:31,486
测试文件夹的整理方式


604
00:22:31,486 --> 00:22:32,686
基本相同


605
00:22:33,436 --> 00:22:38,116
首先 我需要


606
00:22:38,116 --> 00:22:41,196
输入 CreateML


607
00:22:41,446 --> 00:22:43,846
现在 我需要明确


608
00:22:43,846 --> 00:22:46,666
训练数据的位置


609
00:22:47,436 --> 00:22:50,056
我用的只是 URL


610
00:22:50,056 --> 00:22:53,056
然后我就可以


611
00:22:53,056 --> 00:22:54,656
用 Lizi 展示过的


612
00:22:54,656 --> 00:22:56,576
标签目录


613
00:22:56,576 --> 00:22:57,206
来训练我的模型了


614
00:22:57,556 --> 00:23:00,756
看 训练开始了


615
00:23:02,406 --> 00:23:03,656
从底下可以看到


616
00:23:03,656 --> 00:23:06,726
在这里有进度报告


617
00:23:06,926 --> 00:23:10,276
训练好像已经结束了


618
00:23:10,406 --> 00:23:12,566
现在你可以


619
00:23:12,566 --> 00:23:13,696
查看这个模型中


620
00:23:13,696 --> 00:23:14,256
的一些表现数据


621
00:23:14,496 --> 00:23:19,226
例如 model.trainingMetrics


622
00:23:19,226 --> 00:23:20,516
在训练中


623
00:23:20,516 --> 00:23:23,226
使用了 2000 多个数据


624
00:23:23,226 --> 00:23:24,786
准确率 100%


625
00:23:25,286 --> 00:23:29,796
那如果是新数据


626
00:23:29,846 --> 00:23:30,556
这个模型表现会如何呢


627
00:23:31,446 --> 00:23:33,336
我接下来要


628
00:23:33,366 --> 00:23:37,126
定义测试数据


629
00:23:38,376 --> 00:23:42,086
然后用测试数据


630
00:23:43,316 --> 00:23:43,456
评估模型


631
00:23:43,626 --> 00:23:46,336
可以看到


632
00:23:46,516 --> 00:23:49,036
这里有 77 个测试数据


633
00:23:49,446 --> 00:23:52,966
准确率 94%


634
00:23:52,966 --> 00:23:53,616
效果非常好


635
00:23:54,556 --> 00:23:56,076
为了更高的准确率


636
00:23:56,076 --> 00:23:57,296
你们可能想多训练几次


637
00:23:57,296 --> 00:23:59,906
但是这个数字


638
00:23:59,906 --> 00:24:01,936
已经很好了


639
00:24:01,936 --> 00:24:04,276
所以下面我想


640
00:24:04,276 --> 00:24:04,456
试验一下


641
00:24:05,306 --> 00:24:07,686
想要保存模型


642
00:24:07,686 --> 00:24:10,446
我需要定义


643
00:24:10,446 --> 00:24:14,496
保存路径


644
00:24:14,496 --> 00:24:16,176
然后将模型导出到桌面


645
00:24:16,736 --> 00:24:19,086
这看起来


646
00:24:19,246 --> 00:24:20,306
模型已经保存了


647
00:24:22,236 --> 00:24:23,906
现在切换到


648
00:24:23,906 --> 00:24:24,386
我的 App 来


649
00:24:25,326 --> 00:24:27,266
将模型拖拽过来


650
00:24:27,836 --> 00:24:29,396
这就可以了


651
00:24:33,636 --> 00:24:36,756
现在我就可以使用模型了


652
00:24:37,276 --> 00:24:39,686
let model = TextClassifier


653
00:24:39,686 --> 00:24:42,566
它应当会自动填充


654
00:24:43,426 --> 00:24:45,236
然后我要插入一些


655
00:24:45,236 --> 00:24:47,236
基本的推理代码


656
00:24:47,776 --> 00:24:50,716
在这个推理代码中


657
00:24:50,716 --> 00:24:52,576
我在第一行使用了


658
00:24:52,696 --> 00:24:54,826
model.prediction


659
00:24:54,826 --> 00:24:55,386
来获取预测


660
00:24:55,386 --> 00:24:56,806
为了与 App


661
00:24:56,806 --> 00:24:58,586
简洁的 UI 兼容


662
00:24:58,586 --> 00:25:00,456
我将预测结果转换成两个值


663
00:25:01,146 --> 00:25:03,566
我们来试试


664
00:25:16,456 --> 00:25:18,026
先试一下


665
00:25:18,026 --> 00:25:18,766
已经展示过的例子


666
00:25:19,676 --> 00:25:23,566
我讨厌堵车 负面情绪


667
00:25:24,666 --> 00:25:27,196
我喜欢淡定地在车流中


668
00:25:27,936 --> 00:25:30,856
以每小时 10 公里的速度


669
00:25:30,856 --> 00:25:32,666
向前行驶


670
00:25:33,416 --> 00:25:35,866
正面情绪 让我们尝试


671
00:25:35,866 --> 00:25:37,686
一些不一样的


672
00:25:38,706 --> 00:25:41,486
机器学习很难


673
00:25:41,686 --> 00:25:45,436
Create ML 让机器学习变得简单


674
00:25:46,536 --> 00:25:47,076
出现正面


675
00:25:48,516 --> 00:25:53,166
［ 掌声 ］


676
00:25:53,666 --> 00:25:55,046
这就是如何训练


677
00:25:55,046 --> 00:25:57,776
你的文本分类器


678
00:25:57,776 --> 00:25:59,926
将其拖入 App 中并使用


679
00:26:04,796 --> 00:26:06,406
我们来回顾一下


680
00:26:07,836 --> 00:26:09,726
训练这样一个分类器


681
00:26:09,866 --> 00:26:11,266
首先你要


682
00:26:11,266 --> 00:26:12,246
确定数据


683
00:26:13,216 --> 00:26:14,686
训练数据


684
00:26:14,686 --> 00:26:18,136
以及测试数据


685
00:26:18,136 --> 00:26:19,586
然后用训练数据


686
00:26:19,586 --> 00:26:20,836
创建模型


687
00:26:22,146 --> 00:26:24,646
评估模型性能时


688
00:26:24,646 --> 00:26:26,246
用测试数据


689
00:26:26,246 --> 00:26:26,466
进行评估


690
00:26:27,786 --> 00:26:30,136
最后 你只需用 write 接口


691
00:26:30,136 --> 00:26:32,716
保存模型


692
00:26:32,716 --> 00:26:35,336
就可以嵌入 App 中使用了


693
00:26:38,176 --> 00:26:41,586
总的来说


694
00:26:41,586 --> 00:26:43,676
只需几行代码


695
00:26:43,676 --> 00:26:45,986
你就可以训练自己的


696
00:26:47,136 --> 00:26:48,526
文本分类器 简单又直观


697
00:26:49,046 --> 00:26:52,196
下面 我将话筒


698
00:26:52,196 --> 00:26:53,586
转回给 Gaurav


699
00:26:53,586 --> 00:26:54,696
由他来介绍列表数据


700
00:26:55,256 --> 00:26:55,626
谢谢各位


701
00:26:56,516 --> 00:27:00,986
［ 掌声 ］


702
00:27:01,486 --> 00:27:04,576
>> 谢谢你 Tao


703
00:27:04,826 --> 00:27:07,136
除了图像和文本


704
00:27:07,136 --> 00:27:08,776
另一类在解决


705
00:27:08,776 --> 00:27:10,106
机器学习问题时


706
00:27:10,106 --> 00:27:12,556
很常见的数据来源


707
00:27:12,556 --> 00:27:12,706
就是列表数据


708
00:27:13,986 --> 00:27:15,526
列表数据是指


709
00:27:15,526 --> 00:27:17,446
有特殊格式


710
00:27:17,446 --> 00:27:19,206
或列表形式的数据


711
00:27:19,686 --> 00:27:21,716
这类数据非常常见


712
00:27:22,766 --> 00:27:24,356
举个例子 假如


713
00:27:24,356 --> 00:27:25,706
你想利用床的数量


714
00:27:25,796 --> 00:27:27,326
浴室数量


715
00:27:27,406 --> 00:27:28,716
或建筑面积


716
00:27:28,786 --> 00:27:29,196
预测房价


717
00:27:29,836 --> 00:27:31,366
这样的数据通常


718
00:27:31,446 --> 00:27:32,446
是以列表形式整理的


719
00:27:32,446 --> 00:27:35,656
你想通过


720
00:27:35,656 --> 00:27:36,996
红酒中的化学成分


721
00:27:36,996 --> 00:27:37,996
预测红酒质量


722
00:27:38,316 --> 00:27:39,336
你的数据有很大可能


723
00:27:39,336 --> 00:27:40,456
是列表形式


724
00:27:41,066 --> 00:27:42,426
或者一些简单的事


725
00:27:42,486 --> 00:27:44,116
比如用酒吧减价时段


726
00:27:44,116 --> 00:27:46,396
或酒吧消费水平


727
00:27:46,516 --> 00:27:48,516
决定今晚去哪家酒吧


728
00:27:48,776 --> 00:27:50,066
你的数据会是列表形式


729
00:27:51,696 --> 00:27:55,076
要处理列表形式的数据


730
00:27:55,076 --> 00:27:56,756
我们需要用到


731
00:27:56,936 --> 00:27:59,846
一种新的数据结构


732
00:27:59,846 --> 00:28:01,686
我们把它叫作 MLDataTable


733
00:28:02,496 --> 00:28:04,876
MLDataTable 是基于


734
00:28:04,876 --> 00:28:06,866
Turi Create 的一项技术


735
00:28:06,866 --> 00:28:08,546
我们明天会详细介绍


736
00:28:09,036 --> 00:28:11,136
这些数据表格


737
00:28:11,136 --> 00:28:12,286
有一点很有意思


738
00:28:13,876 --> 00:28:15,056
每一行包含


739
00:28:15,056 --> 00:28:17,266
一个例子的所有数据


740
00:28:17,356 --> 00:28:18,946
这里二号房子


741
00:28:19,056 --> 00:28:21,236
有四张床 三间浴室


742
00:28:21,316 --> 00:28:21,666
价格是 50 万美元


743
00:28:22,336 --> 00:28:25,006
每一列数据包含


744
00:28:25,006 --> 00:28:25,876
一种特征


745
00:28:26,306 --> 00:28:27,636
床的数量 浴室数量


746
00:28:28,636 --> 00:28:30,426
建筑面积等等


747
00:28:30,966 --> 00:28:31,886
都是特征


748
00:28:33,206 --> 00:28:34,966
我们想预测的


749
00:28:35,016 --> 00:28:37,446
是一列特殊的数据


750
00:28:37,586 --> 00:28:41,246
那就是房屋价格


751
00:28:41,246 --> 00:28:43,286
所以这一列是目标或反应变量


752
00:28:44,046 --> 00:28:45,546
列表数据处理


753
00:28:45,546 --> 00:28:47,136
其实是将目标变量


754
00:28:47,136 --> 00:28:49,456
作为所有特征的函数


755
00:28:49,646 --> 00:28:51,846
然后进行预测


756
00:28:51,896 --> 00:28:57,086
那我们都支持


757
00:28:57,086 --> 00:28:57,756
什么格式的列表数据呢


758
00:28:57,756 --> 00:28:59,926
CSV JSON


759
00:28:59,926 --> 00:29:02,306
还有代码


760
00:29:02,786 --> 00:29:04,666
我们再谈谈


761
00:29:05,436 --> 00:29:07,886
MLDataTable


762
00:29:08,396 --> 00:29:11,946
你只需用 CSV


763
00:29:11,946 --> 00:29:14,346
数据可以轻松读取


764
00:29:14,826 --> 00:29:17,536
更重要的是


765
00:29:17,536 --> 00:29:19,636
你可以用下标标注


766
00:29:19,636 --> 00:29:20,806
访问数据列


767
00:29:20,996 --> 00:29:22,426
你只需调用


768
00:29:22,496 --> 00:29:23,926
houseData[“price”]


769
00:29:23,926 --> 00:29:27,296
就可以得到整列价格数据


770
00:29:27,476 --> 00:29:30,356
你可以对两列数据


771
00:29:30,356 --> 00:29:31,886
做加减乘除


772
00:29:32,686 --> 00:29:35,376
实现该操作的语句


773
00:29:35,376 --> 00:29:36,696
非常直观


774
00:29:36,696 --> 00:29:37,956
你只需要


775
00:29:37,956 --> 00:29:39,296
用 houseData[“price”]


776
00:29:39,296 --> 00:29:41,356
除以 houseData[“sqft”]


777
00:29:41,356 --> 00:29:41,896
就得到每平方英尺的价格


778
00:29:43,136 --> 00:29:45,196
在后台运行中


779
00:29:45,226 --> 00:29:46,936
计算通过


780
00:29:46,936 --> 00:29:49,106
惰性求值


781
00:29:49,106 --> 00:29:50,196
和矢量运算完成


782
00:29:50,956 --> 00:29:53,716
还有一些其他


783
00:29:53,716 --> 00:29:54,576
有意思的地方


784
00:29:54,686 --> 00:29:56,596
例如你可以在训练中


785
00:29:56,596 --> 00:29:58,616
切分数据表格


786
00:29:58,696 --> 00:29:59,946
也可以过滤数据


787
00:30:00,746 --> 00:30:02,146
举个例子


788
00:30:02,146 --> 00:30:04,406
如果你只对大房子感兴趣


789
00:30:04,406 --> 00:30:05,956
就可以创建一个指示变量


790
00:30:05,956 --> 00:30:06,896
然后进行过滤


791
00:30:08,116 --> 00:30:09,846
列表数据支持


792
00:30:09,846 --> 00:30:11,656
很多种操作


793
00:30:11,656 --> 00:30:13,686
希望大家可以在 Xcode


794
00:30:13,686 --> 00:30:14,626
Playground 中多多尝试


795
00:30:14,766 --> 00:30:15,196
非常有意思


796
00:30:15,196 --> 00:30:19,406
现在 当你将数据


797
00:30:19,406 --> 00:30:20,706
添进表格后


798
00:30:20,746 --> 00:30:21,426
就可以开始训练了


799
00:30:22,846 --> 00:30:24,416
Create ML 支持


800
00:30:24,416 --> 00:30:25,766
很多种算法


801
00:30:25,766 --> 00:30:29,006
例如 提升树算法


802
00:30:29,006 --> 00:30:30,146
随机森林回归算法 等等


803
00:30:31,256 --> 00:30:33,526
这些算法


804
00:30:33,526 --> 00:30:34,506
有各自的级


805
00:30:34,506 --> 00:30:37,936
想要训练模型


806
00:30:37,936 --> 00:30:39,816
你只需要一行代码


807
00:30:40,246 --> 00:30:41,786
就是说 你只要


808
00:30:41,826 --> 00:30:44,036
指定目标


809
00:30:44,036 --> 00:30:45,466
明确数据位置


810
00:30:45,466 --> 00:30:46,886
指定算法 就可以了


811
00:30:47,456 --> 00:30:49,846
在示例中 假设我们采用线性回归


812
00:30:49,846 --> 00:30:52,586
或普通线性回归算法


813
00:30:52,586 --> 00:30:53,816
你只需要


814
00:30:53,816 --> 00:30:56,676
说明数据来自 houseData


815
00:30:56,676 --> 00:30:57,876
以及数据列是 price


816
00:30:58,666 --> 00:31:03,016
如果选择 BoostedTreeRegression


817
00:31:03,016 --> 00:31:04,746
就将线性回归算法


818
00:31:04,746 --> 00:31:06,676
替换掉就可以了


819
00:31:07,676 --> 00:31:09,946
RandomForest 是这个


820
00:31:11,316 --> 00:31:14,346
我们还提供


821
00:31:14,346 --> 00:31:16,186
高度提炼过的 MLRegressor


822
00:31:16,526 --> 00:31:18,066
它可以自动运行


823
00:31:18,066 --> 00:31:19,706
所有的算法


824
00:31:19,706 --> 00:31:20,666
并为你找出最合适的


825
00:31:21,516 --> 00:31:27,196
［ 掌声 ］


826
00:31:27,696 --> 00:31:28,866
这与我们的理念相吻合


827
00:31:28,866 --> 00:31:30,606
我们希望大家


828
00:31:30,606 --> 00:31:30,876
可以将精力用于其他任务


829
00:31:30,876 --> 00:31:32,476
示例中的任务就是


830
00:31:32,536 --> 00:31:32,916
预测房屋价格


831
00:31:32,916 --> 00:31:34,146
你们不应当


832
00:31:34,516 --> 00:31:36,286
花太多精力在算法的细节上


833
00:31:37,056 --> 00:31:38,776
如果你是算法方面的专家


834
00:31:38,776 --> 00:31:40,876
你也可以使用


835
00:31:40,876 --> 00:31:42,316
BoostedTree


836
00:31:42,316 --> 00:31:43,506
并自己修改其中的参数


837
00:31:48,156 --> 00:31:50,446
一个完整的开发流程


838
00:31:50,446 --> 00:31:51,126
就是这样的


839
00:31:52,016 --> 00:31:54,396
跟图像和文本的


840
00:31:54,396 --> 00:31:56,196
流程一模一样


841
00:31:56,586 --> 00:31:59,956
首先是指定数据


842
00:32:00,276 --> 00:32:02,616
第二点是


843
00:32:03,646 --> 00:32:04,096
创建自己的模型


844
00:32:04,546 --> 00:32:05,966
第三 评估模型


845
00:32:07,346 --> 00:32:09,126
一旦你感到满意就


846
00:32:09,126 --> 00:32:09,386
保存模型


847
00:32:10,536 --> 00:32:13,856
列表数据 图像数据


848
00:32:14,086 --> 00:32:15,746
文本数据的


849
00:32:15,806 --> 00:32:17,206
流程都是一样的


850
00:32:19,876 --> 00:32:21,466
现在让我们


851
00:32:21,466 --> 00:32:23,856
快速回忆一下


852
00:32:23,946 --> 00:32:24,356
本次会议的内容


853
00:32:27,676 --> 00:32:30,896
Create ML 是我们机器学习框架的新工具


854
00:32:30,896 --> 00:32:33,156
它简单易用


855
00:32:33,156 --> 00:32:34,876
功能强大


856
00:32:34,876 --> 00:32:36,836
它搭载了 Apple 的核心技术


857
00:32:36,836 --> 00:32:38,226
你可以在 Mac 上用 Swift


858
00:32:38,226 --> 00:32:40,686
完整运用机器学习


859
00:32:43,256 --> 00:32:45,116
我们还说到


860
00:32:45,176 --> 00:32:46,036
工作流程


861
00:32:46,976 --> 00:32:49,896
你需要从功能入手


862
00:32:50,576 --> 00:32:52,366
你想要实现什么样的功能


863
00:32:53,716 --> 00:32:55,196
然后发现问题


864
00:32:55,946 --> 00:32:57,176
收集数据


865
00:32:57,456 --> 00:33:00,456
要保证你的数据可以反映


866
00:33:00,456 --> 00:33:02,776
真实的使用场景


867
00:33:03,606 --> 00:33:05,156
然后训练模型


868
00:33:05,536 --> 00:33:07,186
最后评估模型


869
00:33:08,016 --> 00:33:10,406
满意之后


870
00:33:10,476 --> 00:33:14,366
保存模型


871
00:33:14,636 --> 00:33:17,046
Create ML 基于 Swift 语言


872
00:33:17,406 --> 00:33:19,496
在 macOS Mojave 中已经可以使用


873
00:33:22,836 --> 00:33:24,396
你可以在 Xcode Playground


874
00:33:24,396 --> 00:33:28,206
Swift Scripts


875
00:33:28,206 --> 00:33:29,076
及 Swift REPL 中使用


876
00:33:29,076 --> 00:33:30,536
大家多多尝试


877
00:33:32,326 --> 00:33:33,776
我们很期待大家的反馈


878
00:33:33,776 --> 00:33:35,546
我们会收集反馈


879
00:33:35,546 --> 00:33:37,946
希望你们也同样


880
00:33:37,946 --> 00:33:38,956
喜爱 Create ML


881
00:33:41,456 --> 00:33:43,146
我们之后还有


882
00:33:43,146 --> 00:33:44,656
机器学习的聚会


883
00:33:44,656 --> 00:33:45,146
以及实验室议程


884
00:33:45,296 --> 00:33:46,946
明天也有一个聚会


885
00:33:47,376 --> 00:33:49,046
我们也会在实验室


886
00:33:49,046 --> 00:33:50,236
希望届时能得到大家的反馈


887
00:33:51,346 --> 00:33:52,866
在 WWDC 的 App 中


888
00:33:52,866 --> 00:33:53,986
有相关的会议信息


889
00:33:54,146 --> 00:33:56,626
明天上午有 Core ML 的会议


890
00:33:56,626 --> 00:34:00,346
下午是机器学习的会议


891
00:34:00,346 --> 00:34:03,516
周四有一个


892
00:34:05,216 --> 00:34:05,606
视觉内容的会议


893
00:34:05,606 --> 00:34:08,795
在周三和周五 我们有实验室议程


894
00:34:09,466 --> 00:34:09,786
感谢大家


895
00:34:10,516 --> 00:34:20,370
［ 掌声 ］

