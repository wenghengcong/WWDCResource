1
00:00:17,417 --> 00:00:20,721 line:0
（创造出色AR体验 演讲805）


2
00:00:27,327 --> 00:00:30,464 line:-2
大家好
欢迎来到AR设计演讲


3
00:00:31,465 --> 00:00:35,068 line:-2
我是Grant Paul
来自Apple人机交互团队


4
00:00:35,469 --> 00:00:38,138 line:-1
希望你们本周WWDC过得愉快


5
00:00:39,406 --> 00:00:42,209 line:-1
这次演讲 我们先讲…


6
00:00:42,276 --> 00:00:46,346 line:-2
我会讲到如何
以人机界面和人机交互


7
00:00:46,413 --> 00:00:48,715 line:-1
设计出色的AR app和游戏


8
00:00:49,449 --> 00:00:52,052 line:-1
然后Omar将接替我 讲讲


9
00:00:52,119 --> 00:00:57,424 line:-2
创造在AR方面观感
和体验都很出色的3D模型


10
00:00:58,892 --> 00:01:01,428 line:-1
（增强现实）


11
00:01:01,495 --> 00:01:04,965 line:-1
开始之前 我将快速讲讲基础知识


12
00:01:05,832 --> 00:01:09,803 line:-2
如果你对此还很陌生
你可能想知道我们谈论AR时


13
00:01:09,870 --> 00:01:13,907 line:-2
究竟指的是什么
即使你是AR专家


14
00:01:14,308 --> 00:01:16,877 line:-2
我也想讲讲本次演讲里
其指的是什么


15
00:01:18,111 --> 00:01:21,815 line:-1
当然AR指的是增强现实


16
00:01:22,516 --> 00:01:24,918 line:-1
让我们分解来看


17
00:01:26,086 --> 00:01:29,456 line:-1
可以从现实开始 稍微更容易入手


18
00:01:30,057 --> 00:01:35,095 line:-1
现实指的是AR处理现实世界的事物


19
00:01:35,462 --> 00:01:36,830 line:-1
那和我们在设备上


20
00:01:36,897 --> 00:01:39,466 line:-1
处理的其他事情有些许不同


21
00:01:39,533 --> 00:01:43,804 line:-1
那些事情发生在设备上或者网络中


22
00:01:44,404 --> 00:01:47,608 line:-1
但AR处理的事情发生在现实世界


23
00:01:47,975 --> 00:01:52,412 line:-2
事情发生在你周围的房间
你所在的环境


24
00:01:52,479 --> 00:01:55,182 line:-1
或者地图上你所在的位置


25
00:01:55,816 --> 00:01:58,352 line:-1
重要的是 那是有些许不同的


26
00:01:58,752 --> 00:02:01,889 line:-1
增强现实的另一个部分在于增强


27
00:02:02,222 --> 00:02:04,124 line:-1
那指的是一些不同的事物


28
00:02:04,791 --> 00:02:07,361 line:-1
增强指的是增强


29
00:02:07,427 --> 00:02:10,264 line:-1
你对世界的认知 它可以获取


30
00:02:10,330 --> 00:02:14,067 line:-2
设备能理解的关于周围世界
的信息并反馈给你


31
00:02:14,535 --> 00:02:17,738 line:-1
可以是在周围世界放置虚拟事物


32
00:02:17,804 --> 00:02:20,107 line:-1
给虚拟事物赋予物理环境


33
00:02:20,841 --> 00:02:23,877 line:-1
它还能处理真实事物 处理你的脸


34
00:02:23,944 --> 00:02:26,079 line:-1
当你把表情符号当成面具戴在脸上


35
00:02:26,146 --> 00:02:29,449 line:-1
处理真实事物 并增强它


36
00:02:31,118 --> 00:02:33,687 line:-2
这就是我们谈到AR
谈到增强现实时


37
00:02:34,021 --> 00:02:36,056 line:-1
所指的含义


38
00:02:39,393 --> 00:02:42,229 line:-1
以此 我将开始演讲的前半段


39
00:02:42,663 --> 00:02:45,399 line:-1
我将从如何为你的AR app


40
00:02:45,465 --> 00:02:49,336 line:-2
和AR游戏设计界面
设计交互开始


41
00:02:50,537 --> 00:02:54,541 line:-1
第一部分 是如何让人们进入AR


42
00:02:54,775 --> 00:02:57,044 line:-1
如何引导人们进入AR


43
00:02:57,578 --> 00:03:01,281 line:-2
我将向你演示iOS 12
的内置AR体验


44
00:03:01,348 --> 00:03:05,285 line:-2
是如何引导人们进入AR的
你能学到一些原则


45
00:03:05,652 --> 00:03:07,654 line:-1
并运用到你的app里


46
00:03:08,822 --> 00:03:12,693 line:-2
接着 将讲到在AR里
展示内容的不同方法


47
00:03:12,960 --> 00:03:18,098 line:-2
以及ARKit开启的各种可能
还有不论打造何种AR app


48
00:03:18,398 --> 00:03:21,001 line:-1
都非常出色的方法和窍门


49
00:03:22,436 --> 00:03:25,372 line:-1
最后将谈到和周围世界的交互


50
00:03:25,806 --> 00:03:28,408 line:-2
当构建AR app时
哪种交互有意义


51
00:03:28,475 --> 00:03:32,145 line:-1
要使用哪种交互 这些都和


52
00:03:32,212 --> 00:03:34,748 line:-1
构建2D app时有些许不同


53
00:03:35,048 --> 00:03:37,384 line:-1
我们要找出在AR里仍然适用的


54
00:03:37,451 --> 00:03:40,153 line:-1
我们还需要一些新型的交互


55
00:03:41,688 --> 00:03:45,726 line:-1
首先 我要从如何进入AR开始


56
00:03:46,126 --> 00:03:50,030 line:-1
我这里讲的是某人下载了app后


57
00:03:50,230 --> 00:03:53,467 line:-2
他们找到了app里的AR体验
将其打开


58
00:03:54,067 --> 00:03:59,106 line:-2
我这里讲的是
此时ARKit需要理解周围世界


59
00:03:59,439 --> 00:04:04,811 line:-2
对每个AR app来说
ARKit需对环境某种程度的理解


60
00:04:04,878 --> 00:04:08,582 line:-1
以便开始AR体验 让其跑起来


61
00:04:08,849 --> 00:04:10,384 line:-1
因为每个AR app


62
00:04:10,450 --> 00:04:15,322 line:-2
需要理解周围世界
以便在其中放置对象


63
00:04:15,389 --> 00:04:17,224 line:-1
或者向用户显示信息


64
00:04:18,125 --> 00:04:21,495 line:-2
ARKit建立对环境
的理解的方法


65
00:04:21,894 --> 00:04:23,764 line:-1
就是让你移动你的设备


66
00:04:23,830 --> 00:04:25,332 line:-1
让你四处转转


67
00:04:26,233 --> 00:04:29,002 line:-1
那和之前你在设备里看到的


68
00:04:29,069 --> 00:04:32,506 line:-1
从相机预览里看到的


69
00:04:32,573 --> 00:04:33,640 line:-1
有些微的不同


70
00:04:34,208 --> 00:04:36,210 line:-1
比如当你拿着相机


71
00:04:36,276 --> 00:04:39,847 line:-1
只需要把设备对准要拍摄的位置


72
00:04:40,380 --> 00:04:44,351 line:-1
但在AR里 你需要四处移动


73
00:04:44,418 --> 00:04:47,688 line:-2
从不同的位置和不同的角度
观察相同的地方


74
00:04:49,189 --> 00:04:52,826 line:-2
这里的关键在于
让人们知道他们要干什么


75
00:04:52,893 --> 00:04:55,796 line:-1
让他们知道如何移动设备


76
00:04:56,296 --> 00:04:58,966 line:-2
这样做的方法
就是给他们固定的参考


77
00:04:59,032 --> 00:05:01,468 line:-1
给他们理解的基础


78
00:05:02,169 --> 00:05:04,771 line:-2
我们讲讲这个
来看一个例子


79
00:05:05,706 --> 00:05:07,808 line:-1
这是《欧几里得之地》游戏


80
00:05:08,308 --> 00:05:12,112 line:-1
这里展示的是设备在房间里移动


81
00:05:12,779 --> 00:05:15,315 line:-1
这很棒 因为你能看到


82
00:05:15,382 --> 00:05:19,753 line:-1
没有文字信息 刚好就是你要做的


83
00:05:19,820 --> 00:05:24,892 line:-2
你需要在房间里移动设备
只是转动设备


84
00:05:24,958 --> 00:05:27,494 line:-1
看向不同的角度是不够的


85
00:05:28,061 --> 00:05:30,430 line:-1
没有文字信息


86
00:05:30,497 --> 00:05:33,767 line:-2
只是房间的固定参考就清晰
指明了你要做的


87
00:05:35,569 --> 00:05:39,072 line:-2
而且通常来说 大多数情况下
也只需要做这些


88
00:05:39,673 --> 00:05:44,244 line:-2
ARKit在iOS 12里建立
对周围世界理解的速度更快


89
00:05:44,711 --> 00:05:48,415 line:-1
在更多情形下 这些就足够了


90
00:05:48,649 --> 00:05:51,151 line:-1
你只需要开始移动就可以开始了


91
00:05:52,686 --> 00:05:56,757 line:-2
当然 还有些情况对
AR来说不那么适合


92
00:05:57,224 --> 00:06:00,194 line:-2
也许在昏暗的房间里
或者有大量反射的情形


93
00:06:00,594 --> 00:06:05,666 line:-2
ARKit建立那样的理解
不怎么容易


94
00:06:05,999 --> 00:06:09,636 line:-1
ARKit需要花点时间才能开始


95
00:06:09,703 --> 00:06:11,538 line:-1
其不会立即发生


96
00:06:12,639 --> 00:06:15,943 line:-2
那些情形下 如果还被
告知移动你的设备


97
00:06:16,009 --> 00:06:18,078 line:-1
看着跟你说


98
00:06:18,145 --> 00:06:19,379 line:-1
四处移动你的设备


99
00:06:19,713 --> 00:06:21,315 line:-1
人们可能开始想


100
00:06:22,549 --> 00:06:23,851 line:-1
app怎么还不工作


101
00:06:23,917 --> 00:06:26,687 line:-1
app不能理解他们进行的动作吗？


102
00:06:26,854 --> 00:06:28,655 line:-1
这可能开始让人觉得困扰


103
00:06:29,389 --> 00:06:31,592 line:-1
因此你需要的是某种反馈


104
00:06:31,658 --> 00:06:35,095 line:-1
用以让人知道他们没做错


105
00:06:35,162 --> 00:06:38,398 line:-1
他们做的正是用来进入AR的


106
00:06:38,732 --> 00:06:42,336 line:-1
他们应该继续下去 来看一个例子


107
00:06:46,273 --> 00:06:51,512 line:-2
这是iOS 12的内置app
如何引导人们进入AR的例子


108
00:06:52,145 --> 00:06:56,316 line:-1
能看见设备在表面的固定参考上移动


109
00:06:56,617 --> 00:06:58,218 line:-1
显示你要移动它


110
00:06:58,285 --> 00:07:00,687 line:-2
你不能只在同一个地方
或者转动它


111
00:07:01,588 --> 00:07:04,992 line:-1
然后 一旦开始移动设备


112
00:07:05,526 --> 00:07:07,628 line:-1
表面变成一个立方体


113
00:07:08,362 --> 00:07:11,932 line:-1
立方体随着设备的运动旋转


114
00:07:11,999 --> 00:07:14,368 line:-1
给你真实的 关联的 直接的反馈


115
00:07:14,668 --> 00:07:17,604 line:-2
展示你的方向是正确的
你做得对


116
00:07:18,672 --> 00:07:20,974 line:-1
然后 一旦ARKit建立了理解


117
00:07:21,041 --> 00:07:23,510 line:-1
就都准备好了 立方体转开


118
00:07:23,844 --> 00:07:26,313 line:-1
你准备好进入AR体验


119
00:07:28,649 --> 00:07:29,516 line:-1
（适配app风格）


120
00:07:29,583 --> 00:07:33,654 line:-2
这就是iOS 12内置app
是如何引导人们进入AR的


121
00:07:33,987 --> 00:07:36,557 line:-1
你的app也要遵循相同的原则


122
00:07:36,790 --> 00:07:40,194 line:-1
帮助人们了解需要移动他们的设备


123
00:07:40,260 --> 00:07:42,863 line:-1
给出反馈他们做得对


124
00:07:43,363 --> 00:07:45,699 line:-1
但你的app无需遵循相同的风格


125
00:07:45,766 --> 00:07:47,668 line:-1
无需看起来像画的线条


126
00:07:47,935 --> 00:07:50,470 line:-1
AR应该像集成在app内的一部分


127
00:07:50,671 --> 00:07:53,207 line:-1
应该和app的风格相同


128
00:07:53,440 --> 00:07:55,976 line:-1
不该感觉像附加上去的


129
00:07:56,043 --> 00:07:59,313 line:-1
或者该流程是事后添加的


130
00:07:59,980 --> 00:08:02,683 line:-2
所以 重要的是帮助人们
遵循正确的流程


131
00:08:02,916 --> 00:08:05,719 line:-1
但还要让人觉得其是app的一部分


132
00:08:08,021 --> 00:08:11,458 line:-2
我要讲的关于帮助人们
进入AR的最后一条是


133
00:08:11,792 --> 00:08:15,996 line:-1
在清晰的指示引导


134
00:08:16,063 --> 00:08:17,831 line:-1
人们如何进入AR


135
00:08:17,898 --> 00:08:21,101 line:-2
和当人们已经了解该做什么
而保持高效之间找到平衡


136
00:08:22,002 --> 00:08:25,339 line:-1
如果某人已经知道要做什么


137
00:08:25,405 --> 00:08:29,142 line:-2
他会立刻开始移动设备
他不再需要任何指示


138
00:08:29,576 --> 00:08:31,678 line:-1
他不再需要什么来告诉他要做什么


139
00:08:32,078 --> 00:08:34,448 line:-1
所以不要再给他们任何指示


140
00:08:34,780 --> 00:08:38,684 line:-2
ARKit大多数情况快很多
他们开始移动


141
00:08:38,919 --> 00:08:42,688 line:-2
ARKit会开始理解周围世界
然后立即准备好


142
00:08:46,093 --> 00:08:48,462 line:-1
好了 这就是如何进入AR


143
00:08:48,795 --> 00:08:52,165 line:-2
这就是如何引导人们
进入你的AR体验


144
00:08:53,000 --> 00:08:56,470 line:-1
现在来聊聊如何在AR中展示内容


145
00:08:56,703 --> 00:09:00,040 line:-1
在AR中显示事物的不同方法


146
00:09:00,107 --> 00:09:03,010 line:-2
还有各种AR app
AR游戏的方法和窍门


147
00:09:04,311 --> 00:09:07,080 line:-1
我想从能在ARKit里构建的


148
00:09:07,414 --> 00:09:09,016 line:-1
一些更激进的事物开始


149
00:09:09,483 --> 00:09:13,620 line:-2
因为不是所有的AR体验
都得通过设备观察


150
00:09:13,687 --> 00:09:17,491 line:-2
从相机里看周围世界的预览
并置入一些对象


151
00:09:17,925 --> 00:09:19,426 line:-1
因此还有其他选择


152
00:09:21,662 --> 00:09:23,030 line:-1
这些选项之一是


153
00:09:23,096 --> 00:09:27,100 line:-1
完全只在二维世界构建AR体验


154
00:09:27,434 --> 00:09:31,371 line:-2
无需显示相机预览
无需任何3D图像


155
00:09:31,738 --> 00:09:35,242 line:-2
你用ARKit获取的
周围世界的信息


156
00:09:35,609 --> 00:09:40,714 line:-2
完全只在二维世界
展现出色的AR体验


157
00:09:41,982 --> 00:09:43,917 line:-1
让我们看一个例子


158
00:09:44,785 --> 00:09:48,355 line:-2
这是《彩虹》游戏
在《彩虹》游戏里


159
00:09:48,922 --> 00:09:52,459 line:-1
你通过上下动眉毛而控制人物


160
00:10:20,420 --> 00:10:23,657 line:-1
所以这里不需要什么相机预览


161
00:10:23,724 --> 00:10:26,293 line:-1
不需要任何3D图像


162
00:10:26,627 --> 00:10:31,665 line:-2
只在二维世界会更有意思
但仍是出色的AR体验


163
00:10:33,233 --> 00:10:34,968 line:-1
这就是2D AR


164
00:10:35,335 --> 00:10:39,573 line:-1
能用ARKit做的还有


165
00:10:39,640 --> 00:10:43,110 line:-1
在我看来完全是虚拟现实的体验


166
00:10:43,677 --> 00:10:44,945 line:-1
我那么说的意思是


167
00:10:45,012 --> 00:10:47,514 line:-1
体验将你带到一个完全不同的地方


168
00:10:47,814 --> 00:10:50,184 line:-1
其确实的让你感觉身处异地


169
00:10:50,717 --> 00:10:52,653 line:-1
你可以在环境中四处走动


170
00:10:52,853 --> 00:10:55,856 line:-1
能在其中四处移动 朝各个方向看


171
00:10:56,190 --> 00:11:00,561 line:-1
对我来说确实是虚拟现实体验


172
00:11:00,627 --> 00:11:02,162 line:-1
即使是通过设备实现


173
00:11:03,463 --> 00:11:05,065 line:-1
那样还有些好处


174
00:11:05,265 --> 00:11:07,835 line:-2
你不再需要额外的设备
到处都能运行


175
00:11:08,101 --> 00:11:10,137 line:-1
不再需要在头上戴耳机


176
00:11:10,204 --> 00:11:13,006 line:-1
只要有设备到处都能运行


177
00:11:13,073 --> 00:11:15,509 line:-1
不再需要什么追踪器或别的什么


178
00:11:16,143 --> 00:11:19,279 line:-1
通过设备观察


179
00:11:19,346 --> 00:11:21,348 line:-1
也比完全沉浸式更有好处


180
00:11:21,515 --> 00:11:24,117 line:-1
比如 不会再不小心撞到墙


181
00:11:24,184 --> 00:11:26,353 line:-1
因为能随时看到周遭环境


182
00:11:26,820 --> 00:11:30,891 line:-2
所以ARKit是打造虚拟现实
体验的不错方法


183
00:11:31,091 --> 00:11:32,159 line:-1
我们看个例子


184
00:11:33,327 --> 00:11:37,197 line:-1
这是叫做进入房间的虚拟现实体验


185
00:11:37,364 --> 00:11:40,567 line:-1
其由红十字国际委员会开发


186
00:11:41,368 --> 00:11:42,803 line:-1
在体验中


187
00:11:43,804 --> 00:11:47,174 line:-2
一旦进入房间
你能朝各个方向观察


188
00:11:47,407 --> 00:11:50,477 line:-1
你能靠近东西 仔细观察它们


189
00:11:50,544 --> 00:11:53,113 line:-1
你能移动的远一点 声音传进来


190
00:11:53,180 --> 00:11:56,183 line:-1
听起来像屋外传进来的


191
00:11:56,250 --> 00:11:57,451 line:-1
从四面八法传来


192
00:11:58,118 --> 00:12:01,121 line:-1
使其成为震撼的体验


193
00:12:01,488 --> 00:12:05,492 line:-2
那是用ARKit
在虚拟现实方面能做的


194
00:12:07,361 --> 00:12:09,630 line:-1
那是能用ARKit构建的


195
00:12:09,696 --> 00:12:14,434 line:-2
先更激进前卫的选项
我们再看一些


196
00:12:14,501 --> 00:12:17,137 line:-2
不管构建何种app
都适用的方法和窍门


197
00:12:17,204 --> 00:12:19,339 line:-1
不论是游戏


198
00:12:19,406 --> 00:12:22,543 line:-1
还是生产率app 这些都适用


199
00:12:24,244 --> 00:12:28,782 line:-1
此处第一个要讲的是AR里显示文字


200
00:12:29,249 --> 00:12:31,018 line:-1
因为文字非常重要


201
00:12:32,519 --> 00:12:36,823 line:-2
各种AR app
显示文字的原因不同


202
00:12:37,157 --> 00:12:39,726 line:-1
如果是游戏 可能要显示等级


203
00:12:39,927 --> 00:12:41,128 line:-1
或者一些指示


204
00:12:41,628 --> 00:12:45,465 line:-2
或者对其他app来说
要为周围世界的事物显示标签


205
00:12:45,532 --> 00:12:46,967 line:-1
为虚拟物体显示标签


206
00:12:47,267 --> 00:12:49,069 line:-1
或者显示注解


207
00:12:49,570 --> 00:12:50,971 line:-1
但重要的是


208
00:12:51,038 --> 00:12:53,574 line:-1
无论显示文字的原因是什么


209
00:12:53,874 --> 00:12:57,477 line:-2
都要保证文字可读
使其很容易读


210
00:13:00,013 --> 00:13:03,083 line:-1
在AR里显示文字的最简单的办法


211
00:13:03,150 --> 00:13:05,819 line:-2
是显示到周围世界
显示到环境里


212
00:13:06,587 --> 00:13:10,891 line:-2
你知道 那样看起来很酷
可那样也有缺点


213
00:13:11,458 --> 00:13:12,659 line:-1
缺点之一是


214
00:13:12,726 --> 00:13:15,462 line:-1
当从某个角度观察时


215
00:13:15,896 --> 00:13:19,132 line:-2
字母可能挤在一起
会有点难读


216
00:13:19,967 --> 00:13:23,403 line:-1
另一个问题是当退后一步


217
00:13:23,470 --> 00:13:26,707 line:-2
从远处观察时
文字变得很小


218
00:13:26,773 --> 00:13:30,210 line:-2
就像在房间的另一边
读一张纸上的内容


219
00:13:31,178 --> 00:13:33,714 line:-1
当显示标题或者其他


220
00:13:33,780 --> 00:13:36,416 line:-2
人们已经知道的东西时
也可能是另一种情况


221
00:13:36,617 --> 00:13:38,785 line:-1
显示在周围环境里可能非常酷


222
00:13:39,152 --> 00:13:42,055 line:-1
可如果要显示一些人们必须读


223
00:13:42,122 --> 00:13:45,759 line:-2
必须从中获取信息的东西
可能就要尝试另一种方法


224
00:13:47,761 --> 00:13:52,232 line:-2
能采用的另一种方法是
在屏幕空间显示文字


225
00:13:53,066 --> 00:13:57,204 line:-1
屏幕空间指的是文字大小保持不变


226
00:13:57,538 --> 00:14:00,140 line:-2
永远朝向你
永远是正的


227
00:14:00,741 --> 00:14:03,810 line:-2
那样变得很容易读
不再有


228
00:14:03,877 --> 00:14:07,114 line:-2
观察角度的问题
或者观察距离的问题


229
00:14:08,248 --> 00:14:11,185 line:-1
屏幕空间显示文字时重要的是


230
00:14:11,585 --> 00:14:14,821 line:-1
其依然是显示到现实世界某个位置


231
00:14:15,122 --> 00:14:18,992 line:-2
显示到世界的某个地方
附加到某个物体


232
00:14:19,426 --> 00:14:21,495 line:-1
或附加到某个物理特性


233
00:14:22,529 --> 00:14:25,966 line:-1
使其看起来很像AR场景的一部分


234
00:14:26,700 --> 00:14:29,703 line:-1
屏幕空间文字是给事物显示标签


235
00:14:29,770 --> 00:14:33,841 line:-2
在AR里显示注释
但保持可读的好办法


236
00:14:35,542 --> 00:14:38,111 line:-1
这是屏幕空间文字的例子


237
00:14:38,645 --> 00:14:41,381 line:-2
这来自Measure
其是iOS 12的一部分


238
00:14:42,082 --> 00:14:45,786 line:-2
Measure显示尺度时
其在屏幕空间显示


239
00:14:45,853 --> 00:14:48,622 line:-1
无论从哪个角度观察


240
00:14:48,689 --> 00:14:52,392 line:-1
或者无论离得多远 都一直可读


241
00:14:56,864 --> 00:15:00,167 line:-1
所以屏幕空间文字可读性很强


242
00:15:00,734 --> 00:15:03,270 line:-1
但你还是要保持


243
00:15:03,537 --> 00:15:06,673 line:-1
文字在AR里实际显示的尽可能小


244
00:15:07,541 --> 00:15:10,711 line:-2
那样做的原因是
当文字显示在周围世界时


245
00:15:11,011 --> 00:15:14,715 line:-1
要一直保持设备对准它以便阅读


246
00:15:15,148 --> 00:15:18,151 line:-1
如果把设备转到更容易读的位置


247
00:15:18,218 --> 00:15:19,720 line:-1
文字就没了


248
00:15:20,787 --> 00:15:24,591 line:-2
如果有更细节的文字
如果要显示


249
00:15:24,658 --> 00:15:27,160 line:-2
某种对象或者世界里
某种东西的细节


250
00:15:27,628 --> 00:15:30,197 line:-1
应该把细节显示在屏幕上


251
00:15:30,631 --> 00:15:33,667 line:-1
然后人们能利用


252
00:15:33,734 --> 00:15:36,970 line:-2
以往使用iOS和在设备上
阅读时建立的经验


253
00:15:37,704 --> 00:15:40,807 line:-1
来直接在屏幕上阅读那些细节


254
00:15:42,075 --> 00:15:45,012 line:-1
当在AR里显示那些细节时


255
00:15:45,345 --> 00:15:47,014 line:-1
很必要做个转换


256
00:15:47,548 --> 00:15:52,152 line:-2
因为那些转换能让
正在看的东西变得非常清晰


257
00:15:52,219 --> 00:15:57,524 line:-2
那些细节指的是哪些文字
哪些对象


258
00:15:57,824 --> 00:15:59,960 line:-1
获取的细节是关于什么的


259
00:16:01,562 --> 00:16:04,731 line:-2
我们看个例子
也是来自Measure的


260
00:16:05,566 --> 00:16:08,368 line:-2
Measure里
在要度量的东西上轻触一下


261
00:16:08,635 --> 00:16:13,574 line:-1
AR里会在屏幕上显示度量的细节


262
00:16:14,174 --> 00:16:16,476 line:-1
这很不错 因为很容易读


263
00:16:16,543 --> 00:16:18,445 line:-1
不必为了阅读把设备


264
00:16:18,512 --> 00:16:20,747 line:-1
把手机一直对准要度量的东西


265
00:16:21,014 --> 00:16:23,917 line:-1
但因为刚刚的转换 这也很清晰


266
00:16:24,418 --> 00:16:25,385 line:-1
转换


267
00:16:26,887 --> 00:16:31,258 line:-1
显示正在看的细节是关于什么的


268
00:16:31,792 --> 00:16:35,229 line:-2
它们来自要度量的东西
所以也不会让人感觉困扰


269
00:16:36,129 --> 00:16:37,264 line:-1
（转换确保身份）


270
00:16:37,331 --> 00:16:41,335 line:-2
在屏幕上显示细节时
转换是不错的办法


271
00:16:41,401 --> 00:16:44,838 line:-1
它们来自AR 最后又回到AR里


272
00:16:45,672 --> 00:16:49,409 line:-2
在AR里显示对象时
它们也很重要


273
00:16:50,143 --> 00:16:54,147 line:-1
因为其感觉像是对象的一个版本


274
00:16:54,548 --> 00:16:57,784 line:-1
感觉对象有自己的身份


275
00:16:58,585 --> 00:17:02,256 line:-2
那很重要 因为AR里的
事物都非常具体


276
00:17:02,322 --> 00:17:06,660 line:-2
它们有具体的感觉
在AR里看时 看起来很真实


277
00:17:07,160 --> 00:17:09,329 line:-1
而现实里的事物 不只是拷贝它们


278
00:17:09,396 --> 00:17:11,231 line:-1
不能只是做多个拷贝


279
00:17:11,798 --> 00:17:14,201 line:-1
在AR里显示事物时


280
00:17:14,268 --> 00:17:16,203 line:-1
遵循相同的原则是重要的


281
00:17:17,604 --> 00:17:20,574 line:-2
这就是在AR里观察
对象时将发生的


282
00:17:21,241 --> 00:17:24,011 line:-1
其展示了保持身份的例子


283
00:17:24,444 --> 00:17:26,847 line:-1
当从对象面板切换到AR面板


284
00:17:27,414 --> 00:17:30,617 line:-2
对象位置不变
其一直可见


285
00:17:30,684 --> 00:17:33,120 line:-1
其不会消失 再从其他地方出来


286
00:17:33,720 --> 00:17:36,723 line:-1
即使在决定何时放置对象


287
00:17:37,891 --> 00:17:40,360 line:-1
其在屏幕上一直可见


288
00:17:40,627 --> 00:17:44,198 line:-1
所以容易看到有对象的一个版本


289
00:17:44,998 --> 00:17:47,000 line:-1
即使回到


290
00:17:47,201 --> 00:17:49,169 line:-1
观察对象的app里


291
00:17:50,070 --> 00:17:53,740 line:-1
其依旧显示对象转换回原来的地方


292
00:17:54,107 --> 00:17:55,709 line:-1
感觉就像有一个对象


293
00:17:56,043 --> 00:17:58,312 line:-1
在app的不同地方移动


294
00:17:58,545 --> 00:18:00,781 line:-2
然后进入周围世界
从周围世界出来


295
00:18:00,848 --> 00:18:02,950 line:-1
感觉不像有多个拷贝


296
00:18:05,085 --> 00:18:07,821 line:-1
好了 这就是在AR里显示内容


297
00:18:08,188 --> 00:18:11,625 line:-1
的一些不同的方法


298
00:18:12,526 --> 00:18:14,194 line:-1
快速回顾一下


299
00:18:15,028 --> 00:18:19,066 line:-1
首先看了打造不同AR体验的方法


300
00:18:19,132 --> 00:18:22,970 line:-1
然后讲到AR打造完全的二维体验


301
00:18:23,036 --> 00:18:25,606 line:-1
没有相机预览 没有3D图像


302
00:18:26,473 --> 00:18:31,078 line:-2
讲到如何用ARKit
打造虚拟现实体验


303
00:18:31,144 --> 00:18:33,347 line:-1
让你觉得身处异地


304
00:18:33,780 --> 00:18:36,116 line:-1
非常震撼 完全沉浸其中


305
00:18:37,117 --> 00:18:41,121 line:-1
讲到在AR里用屏幕空间显示文字


306
00:18:41,321 --> 00:18:46,093 line:-1
使其从任何角度任何距离都可读


307
00:18:47,194 --> 00:18:49,997 line:-1
讲到在屏幕上显示细节


308
00:18:50,230 --> 00:18:52,766 line:-1
使其不用对准环境的某个


309
00:18:52,833 --> 00:18:55,035 line:-1
特定位置就可以读


310
00:18:55,802 --> 00:18:58,105 line:-1
只需使用在iOS里阅读时


311
00:18:58,172 --> 00:19:00,674 line:-1
建立的经验就够了


312
00:19:02,009 --> 00:19:03,243 line:-1
最后讲到


313
00:19:03,310 --> 00:19:06,446 line:-1
转换到AR里 从AR里转换出来


314
00:19:07,114 --> 00:19:09,283 line:-1
以在屏幕上显示细节


315
00:19:09,650 --> 00:19:12,152 line:-1
同时给对象身份感


316
00:19:12,219 --> 00:19:15,322 line:-1
物理感 这在AR里也很重要


317
00:19:19,459 --> 00:19:22,095 line:-1
好了 这就是在AR里显示内容


318
00:19:22,162 --> 00:19:23,764 line:-1
有不同方式来显示


319
00:19:23,830 --> 00:19:24,765 line:-1
在AR app里


320
00:19:25,165 --> 00:19:27,801 line:-1
显示不同类型内容的


321
00:19:27,868 --> 00:19:29,203 line:-1
一些提示


322
00:19:30,103 --> 00:19:31,104 line:-1
现在来讲讲


323
00:19:31,171 --> 00:19:33,707 line:-1
和那些内容的交互


324
00:19:33,774 --> 00:19:36,910 line:-1
讲讲环境里有意义的交互


325
00:19:38,345 --> 00:19:39,780 line:-1
先从触摸开始


326
00:19:40,447 --> 00:19:44,885 line:-1
从iOS开始时 触摸就非常重要


327
00:19:45,185 --> 00:19:48,088 line:-1
多点触摸最开始就有了


328
00:19:48,155 --> 00:19:50,691 line:-1
而且是和设备交互最重要的方法


329
00:19:51,825 --> 00:19:55,295 line:-1
触摸如此重要和出色的原因


330
00:19:55,362 --> 00:19:57,631 line:-1
在于其能直接操控


331
00:19:58,732 --> 00:20:01,869 line:-1
直接操控就是直接


332
00:20:01,935 --> 00:20:05,005 line:-2
和屏幕上的事物交互
就像是物理对象一样


333
00:20:05,405 --> 00:20:09,376 line:-1
不是使用控件来滚动或者缩放


334
00:20:09,676 --> 00:20:11,778 line:-1
而是直接和内容交互


335
00:20:12,112 --> 00:20:14,948 line:-1
就像操纵的是具体的物理对象


336
00:20:16,283 --> 00:20:20,687 line:-2
这在AR里更加重要
因为在AR里 如前所述


337
00:20:20,754 --> 00:20:23,557 line:-2
事物是物理的
对象感觉像真的一样


338
00:20:24,224 --> 00:20:26,026 line:-1
感觉是真实世界的一部分


339
00:20:26,493 --> 00:20:29,429 line:-1
所以很有必要通过直接操控


340
00:20:29,496 --> 00:20:32,699 line:-1
使其感觉在直接和那些事物交互


341
00:20:34,668 --> 00:20:38,572 line:-1
直接操控出色的原因在于使用


342
00:20:38,639 --> 00:20:39,940 line:-1
你已经了解的手势


343
00:20:40,007 --> 00:20:42,109 line:-1
iOS里已经熟悉的手势


344
00:20:42,809 --> 00:20:46,680 line:-2
因为那些手势和iOS里
其他内容的相同


345
00:20:47,147 --> 00:20:50,450 line:-1
都是些已经用了很长时间的东西


346
00:20:52,486 --> 00:20:55,789 line:-1
首先是如何在AR里通过


347
00:20:55,856 --> 00:20:58,759 line:-2
直接操控移动事物
要移动对象


348
00:20:59,059 --> 00:21:01,595 line:-1
只需按下手指并拖到新的地方


349
00:21:02,062 --> 00:21:04,164 line:-1
感觉就像你拿起了对象


350
00:21:04,231 --> 00:21:05,666 line:-1
因为它就在你的指间


351
00:21:05,732 --> 00:21:08,802 line:-1
你和移动的对象有了物理联系


352
00:21:11,438 --> 00:21:14,875 line:-1
另一个手势是缩放物体


353
00:21:15,309 --> 00:21:18,045 line:-1
在AR里 事物开始时有其物理的


354
00:21:18,111 --> 00:21:21,348 line:-2
自然的大小
但如果要改变它


355
00:21:21,415 --> 00:21:23,317 line:-1
你能拉伸对象使其变大


356
00:21:23,817 --> 00:21:26,687 line:-1
还能压缩对象使其变小


357
00:21:27,254 --> 00:21:30,390 line:-1
在AR里缩放对象时重要的是


358
00:21:30,591 --> 00:21:32,593 line:-1
做的时候给出反馈


359
00:21:32,793 --> 00:21:34,895 line:-1
因为变化非常非常大


360
00:21:34,962 --> 00:21:37,731 line:-1
当你使物体变到原来四倍大小时


361
00:21:39,199 --> 00:21:41,201 line:-1
所以有必要给出反馈


362
00:21:41,268 --> 00:21:43,003 line:-1
让人们知道发生了什么


363
00:21:43,737 --> 00:21:46,039 line:-1
其次是让物体


364
00:21:46,373 --> 00:21:50,177 line:-1
还原到自然大小非常简单


365
00:21:50,244 --> 00:21:51,945 line:-1
还原到物理世界的大小


366
00:21:52,479 --> 00:21:54,515 line:-1
所以 只需轻轻一触


367
00:21:54,848 --> 00:21:57,117 line:-1
就能还原到原来的大小 非常简单


368
00:21:59,987 --> 00:22:02,389 line:-1
另一个就是旋转物体


369
00:22:02,756 --> 00:22:06,093 line:-1
两个手指在屏幕上旋转


370
00:22:06,994 --> 00:22:10,264 line:-1
那样非常好 两个手指的手势


371
00:22:10,664 --> 00:22:13,667 line:-1
要考虑的另一个问题 是触碰目标


372
00:22:14,101 --> 00:22:17,404 line:-2
因为随着设备移动
AR里的物体也在移动


373
00:22:17,704 --> 00:22:19,973 line:-1
离得远时 或者缩小时


374
00:22:20,040 --> 00:22:21,275 line:-1
它们会非常小


375
00:22:21,742 --> 00:22:24,344 line:-1
要确保使用宽松的触碰目标


376
00:22:24,745 --> 00:22:27,581 line:-1
这样很容易把两个手指放在物体上


377
00:22:28,048 --> 00:22:32,452 line:-1
还要确保用手指中间的位置


378
00:22:32,653 --> 00:22:34,621 line:-1
来计算交互的对象


379
00:22:34,922 --> 00:22:37,457 line:-1
因为也许AR里没法放下整个手指


380
00:22:37,758 --> 00:22:39,860 line:-1
即使是宽松的触碰目标


381
00:22:41,862 --> 00:22:45,098 line:-1
所以 AR里的直接操控非常棒


382
00:22:45,165 --> 00:22:47,634 line:-1
这很重要 因为AR的物理感很强


383
00:22:48,402 --> 00:22:52,206 line:-1
但对大多AR app来说 这还不够


384
00:22:52,506 --> 00:22:53,707 line:-1
因为有大量物体时


385
00:22:53,774 --> 00:22:55,642 line:-1
要触碰正确的物体会很难


386
00:22:55,709 --> 00:22:59,313 line:-1
之前说过 当你看像不同地方时


387
00:22:59,379 --> 00:23:01,315 line:-1
屏幕上的物体一直在动


388
00:23:01,381 --> 00:23:03,750 line:-1
它们在环境里的位置保持不变


389
00:23:04,351 --> 00:23:07,888 line:-1
因此在屏幕上对准它们会有些困难


390
00:23:08,889 --> 00:23:12,726 line:-2
但最基本的、首要的
真正的原因


391
00:23:13,126 --> 00:23:16,430 line:-1
在于AR app里 触碰是不够的


392
00:23:16,797 --> 00:23:18,866 line:-1
其本质是二维的


393
00:23:19,533 --> 00:23:21,735 line:-1
你正在触摸的


394
00:23:21,802 --> 00:23:25,005 line:-2
显示表面是二维的
其正是多点触摸


395
00:23:25,072 --> 00:23:28,942 line:-2
在iOS的平面的2D
app好用的原因


396
00:23:29,610 --> 00:23:33,347 line:-2
但AR内容置于真实世界
是环境的一部分


397
00:23:34,114 --> 00:23:37,351 line:-1
那意味着我们需要一些方法


398
00:23:37,618 --> 00:23:40,921 line:-2
和三维的内容交互
因为环境是三维的


399
00:23:42,856 --> 00:23:45,192 line:-1
答案是移动设备


400
00:23:45,626 --> 00:23:48,695 line:-1
因为移动设备时 其自然是三维的


401
00:23:48,762 --> 00:23:52,032 line:-2
其本身是三维的
可以上下移动


402
00:23:52,099 --> 00:23:54,801 line:-2
可以左右移动
前后移动


403
00:23:55,135 --> 00:23:59,206 line:-2
可以转向任何方向
如果想走得远一点 可以站起来


404
00:23:59,273 --> 00:24:00,908 line:-1
走到房间另一边


405
00:24:01,475 --> 00:24:05,879 line:-1
但重要的是移动设备是完全三维的


406
00:24:05,946 --> 00:24:09,850 line:-1
那构成了AR里最重要的交互


407
00:24:10,684 --> 00:24:14,087 line:-2
事实上 我要说
对AR app来说 移动设备


408
00:24:14,154 --> 00:24:16,390 line:-1
比触碰更重要


409
00:24:17,090 --> 00:24:21,995 line:-2
其非常自然
默认内置于每个AR app


410
00:24:22,262 --> 00:24:25,999 line:-2
AR里观察不同事物是
通过移动设备


411
00:24:26,066 --> 00:24:28,836 line:-1
从不同角度和位置观察


412
00:24:29,603 --> 00:24:32,673 line:-1
所以非常自然 也非常有效


413
00:24:34,441 --> 00:24:37,344 line:-1
通过移动设备 能完成


414
00:24:37,411 --> 00:24:40,714 line:-1
2D app里多点触碰完成的任务


415
00:24:41,348 --> 00:24:43,984 line:-2
2D app里
如果想看到更多内容


416
00:24:44,318 --> 00:24:46,854 line:-1
方法是滚动显示器


417
00:24:46,920 --> 00:24:48,889 line:-1
向下滚动看到新的内容


418
00:24:49,756 --> 00:24:54,595 line:-2
那在2D app里很方便
但在AR里 3D环境你会那样做


419
00:24:54,761 --> 00:24:57,598 line:-1
要看到不同的内容 你得移动设备


420
00:24:58,065 --> 00:25:01,134 line:-1
从不同的位置和不同的角度


421
00:25:01,201 --> 00:25:02,402 line:-1
观察内容


422
00:25:03,070 --> 00:25:05,672 line:-1
其解决了看到更多内容的问题


423
00:25:06,006 --> 00:25:08,141 line:-1
但完全是三维的方式解决的


424
00:25:09,376 --> 00:25:13,080 line:-2
相似的 在传统2D app里
如果想放大某样东西


425
00:25:13,146 --> 00:25:15,716 line:-2
你拉伸它以使其变大
你拉伸以放大


426
00:25:16,483 --> 00:25:21,355 line:-2
如果想缩小某样东西
你压缩它 压缩以缩小


427
00:25:22,356 --> 00:25:24,892 line:-1
但在AR里 如果想让事物变大


428
00:25:25,058 --> 00:25:26,960 line:-1
能靠近你正观察的事物


429
00:25:27,027 --> 00:25:28,428 line:-1
可以离得更近一些


430
00:25:29,196 --> 00:25:31,064 line:-1
如果想一次看得更多


431
00:25:31,398 --> 00:25:33,867 line:-1
想从更广的角度观察


432
00:25:33,934 --> 00:25:37,804 line:-2
你能退后一步
一次性观察所有内容


433
00:25:38,672 --> 00:25:44,144 line:-1
所以移动设备代替了2D app里


434
00:25:44,211 --> 00:25:48,649 line:-1
用来看见更多内容的拉伸缩放操作


435
00:25:50,617 --> 00:25:51,952 line:-1
移动是很方便的


436
00:25:52,019 --> 00:25:55,622 line:-1
其代替了一些多点触碰操作


437
00:25:56,023 --> 00:26:01,228 line:-2
也能用它为AR app来
构建完全自定义的交互


438
00:26:01,862 --> 00:26:05,365 line:-2
其可以非常自然
就想用你的设备


439
00:26:05,432 --> 00:26:08,502 line:-2
观察不同事物
或靠近以及远离事物


440
00:26:08,936 --> 00:26:10,804 line:-1
来看个例子


441
00:26:11,638 --> 00:26:14,608 line:-2
这是Swiftshot
多人AR实例游戏


442
00:26:14,675 --> 00:26:17,411 line:-2
你看在Keynote演讲里见过
或你可能已尝试过


443
00:26:17,744 --> 00:26:20,547 line:-1
要在游戏里发射弹弓


444
00:26:20,614 --> 00:26:23,217 line:-1
你要做的是靠近弹弓


445
00:26:23,383 --> 00:26:26,253 line:-1
你无需在列表里选择要发射的弹弓


446
00:26:26,320 --> 00:26:28,922 line:-1
你无需在屏幕上瞄准


447
00:26:28,989 --> 00:26:30,190 line:-1
你只是靠近它


448
00:26:30,858 --> 00:26:34,328 line:-2
要发射弹弓时
你只是往后拉然后释放


449
00:26:35,062 --> 00:26:39,266 line:-2
其非常准确
因为能在三维世界发射


450
00:26:39,333 --> 00:26:41,201 line:-1
准确度是三维的


451
00:26:41,268 --> 00:26:43,971 line:-1
当你移动弹弓 往后拉时


452
00:26:44,304 --> 00:26:47,307 line:-1
那比用触屏能做的要多


453
00:26:47,841 --> 00:26:50,444 line:-1
移动设备 不仅非常自然


454
00:26:50,511 --> 00:26:52,112 line:-1
也比以往AR app里


455
00:26:52,479 --> 00:26:55,582 line:-1
触碰操作要准确得多


456
00:26:58,085 --> 00:27:01,922 line:-2
移动你的设备非常方便
但有时需要把


457
00:27:01,989 --> 00:27:05,259 line:-2
触碰的优势和设备移动的
优势结合起来


458
00:27:05,325 --> 00:27:07,528 line:-1
以打造最佳的交互


459
00:27:08,762 --> 00:27:10,531 line:-1
我们来看个例子


460
00:27:10,597 --> 00:27:13,600 line:-1
把直接操作和移动


461
00:27:13,667 --> 00:27:14,835 line:-1
你的设备结合起来


462
00:27:16,670 --> 00:27:20,274 line:-2
Quicklook
在AR里也提供了


463
00:27:20,340 --> 00:27:25,312 line:-1
结合设备移动和直接操控的好例子


464
00:27:26,079 --> 00:27:30,250 line:-2
如果要移动一个对象
你可以把它拖到新的位置


465
00:27:30,317 --> 00:27:33,921 line:-2
和以前见过的一样
触摸屏幕再移动到新的位置


466
00:27:34,621 --> 00:27:37,357 line:-1
但也可以按下以捡起对象


467
00:27:37,424 --> 00:27:40,260 line:-1
转动设备 然后释放到新的位置


468
00:27:40,928 --> 00:27:44,598 line:-2
那样很方便
因为通过移动设备释放到目标位置


469
00:27:44,665 --> 00:27:47,201 line:-1
其提供了全三维的控制


470
00:27:47,434 --> 00:27:51,405 line:-2
而且其还能通过捡起然后旋转
将目标移动到


471
00:27:51,471 --> 00:27:52,840 line:-1
你看不见的位置


472
00:27:53,440 --> 00:27:56,376 line:-1
但 其仍然保留了物理交互感


473
00:27:56,443 --> 00:27:58,145 line:-1
直接交互的感受


474
00:27:58,478 --> 00:28:01,281 line:-1
直接捡起物体的感受


475
00:28:01,949 --> 00:28:06,653 line:-1
如果app支持在AR里移动物体


476
00:28:07,054 --> 00:28:11,358 line:-1
绝对应该支持通过直接操控捡起对象


477
00:28:11,425 --> 00:28:14,528 line:-1
移动设备 然后在新的位置放置


478
00:28:17,965 --> 00:28:21,568 line:-1
所以移动设备和直接操控


479
00:28:21,635 --> 00:28:25,639 line:-2
是结合触碰的一种方式
另一种结合触碰


480
00:28:25,706 --> 00:28:29,009 line:-1
和移动设备的方式是通过间接控制


481
00:28:29,743 --> 00:28:33,280 line:-2
简介操控是指
控件显示在屏幕上


482
00:28:34,014 --> 00:28:36,783 line:-2
它们不在环境里
没附加到任何事物


483
00:28:36,850 --> 00:28:39,319 line:-1
它们在屏幕上的固定位置


484
00:28:39,720 --> 00:28:42,456 line:-2
你能掌握那个位置
那很方便


485
00:28:42,523 --> 00:28:44,358 line:-1
因为意味着它不在碍事


486
00:28:44,424 --> 00:28:47,594 line:-1
一旦掌握了控件在屏幕上的位置


487
00:28:48,228 --> 00:28:50,797 line:-2
其留在相同地方
你能将手指停留在其上方


488
00:28:51,098 --> 00:28:54,635 line:-1
然后关注app的其余部分


489
00:28:55,502 --> 00:28:57,104 line:-1
再看个例子


490
00:28:57,771 --> 00:29:01,441 line:-2
这是《僵尸战舰》AR
你在战舰里


491
00:29:01,508 --> 00:29:04,378 line:-2
飞行于一群僵尸之上
你得瞄准它们


492
00:29:04,444 --> 00:29:06,780 line:-1
你想集中注意瞄准而不是


493
00:29:06,847 --> 00:29:08,682 line:-1
移动手指


494
00:29:08,749 --> 00:29:12,619 line:-1
尝试在屏幕上瞄准手指以发射


495
00:29:13,020 --> 00:29:16,456 line:-1
相反 你能将手指停在发射键上方


496
00:29:16,757 --> 00:29:18,125 line:-1
全部时间用来


497
00:29:18,325 --> 00:29:20,994 line:-1
在3D环境移动设备


498
00:29:21,328 --> 00:29:24,498 line:-1
瞄准你要射击的僵尸


499
00:29:26,633 --> 00:29:31,972 line:-1
因此间接操控和设备移动结合很方便


500
00:29:32,472 --> 00:29:36,076 line:-2
它们很棒
因为它们同时还允许app单手操作


501
00:29:36,910 --> 00:29:41,782 line:-2
在AR里 无论如何
你都要用一只手


502
00:29:41,849 --> 00:29:44,551 line:-1
控制观察的方向 至少用一只手


503
00:29:44,985 --> 00:29:47,321 line:-1
如果想构建单手AR体验


504
00:29:47,688 --> 00:29:50,057 line:-1
你就需要使用


505
00:29:50,123 --> 00:29:52,025 line:-1
非常容易访问的控件


506
00:29:53,927 --> 00:29:56,029 line:-1
Measure就是个例子


507
00:29:56,597 --> 00:29:58,332 line:-1
Measure使用间接操控


508
00:29:58,398 --> 00:30:02,402 line:-1
屏幕底部的加号按钮来添加点


509
00:30:03,203 --> 00:30:05,873 line:-1
控件位置非常容易访问


510
00:30:05,939 --> 00:30:07,774 line:-1
即使用一只手


511
00:30:07,841 --> 00:30:10,043 line:-1
瞄准屏幕中间的准心


512
00:30:10,811 --> 00:30:12,579 line:-1
来准确放置你的尺子


513
00:30:12,980 --> 00:30:15,649 line:-1
还能让一只手指悬在加号上方


514
00:30:15,716 --> 00:30:18,552 line:-1
方便的添加那些点


515
00:30:19,553 --> 00:30:23,724 line:-1
使用间接控件不仅能提供


516
00:30:23,790 --> 00:30:27,528 line:-2
易于使用的AR体验
还能打造单手体验


517
00:30:31,465 --> 00:30:34,501 line:-1
上面就是AR的交互


518
00:30:34,902 --> 00:30:36,770 line:-1
能通过直接操控


519
00:30:36,837 --> 00:30:40,040 line:-1
提供物理感和物理交互


520
00:30:40,541 --> 00:30:43,610 line:-2
能移动设备
这是AR的主要交互方式


521
00:30:44,211 --> 00:30:48,549 line:-2
还能通过易于访问的
间接控件聚焦于内容


522
00:30:48,615 --> 00:30:52,019 line:-1
而不是聚焦于交互的控件或者按钮


523
00:30:53,220 --> 00:30:55,489 line:-1
那就是我今天要讲的


524
00:30:55,689 --> 00:30:58,559 line:-2
进入AR 引导人们
通过正确的流程


525
00:30:58,625 --> 00:31:01,929 line:-2
提供直接反馈
告知他们做得对


526
00:31:02,563 --> 00:31:08,268 line:-1
在2D和VR里显示内容的方式


527
00:31:08,335 --> 00:31:09,570 line:-1
如何使其容易读取


528
00:31:09,636 --> 00:31:13,207 line:-1
通过转换进出AR给对象物理身份


529
00:31:14,274 --> 00:31:16,944 line:-1
环境里能使用的交互


530
00:31:17,377 --> 00:31:20,547 line:-1
主要是移动你的设备


531
00:31:21,982 --> 00:31:23,717 line:-1
现在要让给Omar 他要讲到


532
00:31:23,784 --> 00:31:27,421 line:-1
打造AR里看起来真实的3D模型


533
00:31:27,688 --> 00:31:28,522 line:-1
谢谢


534
00:31:36,363 --> 00:31:37,731 line:-1
谢谢


535
00:31:40,601 --> 00:31:41,435 line:-1
谢谢 Grant


536
00:31:45,038 --> 00:31:48,041 line:-1
大家好 很荣幸在此聊一聊


537
00:31:48,108 --> 00:31:51,345 line:-1
开发AR体验时


538
00:31:51,411 --> 00:31:55,282 line:-1
应该记住的最佳实践


539
00:31:55,349 --> 00:31:59,186 line:-1
今天要讲的有很多


540
00:31:59,653 --> 00:32:04,024 line:-2
无论你是工程师 设计师
经理 还是美工


541
00:32:04,091 --> 00:32:05,125 line:-1
我们要向你提供


542
00:32:05,192 --> 00:32:08,762 line:-1
技巧性的工具


543
00:32:08,829 --> 00:32:11,164 line:-1
这样你就能够


544
00:32:11,231 --> 00:32:14,801 line:-1
打造出色的AR内容 让用户满意


545
00:32:16,336 --> 00:32:19,139 line:-1
让我们从一些


546
00:32:19,206 --> 00:32:22,276 line:-1
开发时要记住的关键概念开始


547
00:32:23,744 --> 00:32:25,212 line:-1
AR很棒


548
00:32:25,679 --> 00:32:28,882 line:-1
能把任何可以想到的东西


549
00:32:28,949 --> 00:32:31,151 line:-1
添加到现实世界绝对是魔法


550
00:32:31,518 --> 00:32:32,486 line:-1
因此


551
00:32:32,553 --> 00:32:36,023 line:-1
人们对AR体验的期望很高


552
00:32:37,591 --> 00:32:41,828 line:-1
他们期望3D内容以平稳帧数显示


553
00:32:42,162 --> 00:32:44,665 line:-1
如下的体验很糟


554
00:32:44,731 --> 00:32:48,902 line:-1
当你被内容吸引 开始靠近它


555
00:32:48,969 --> 00:32:52,773 line:-1
然后想了解更多细节 然后突然的


556
00:32:53,440 --> 00:32:56,109 line:-1
遭到的优化导致性能下降


557
00:32:56,176 --> 00:32:58,245 line:-1
然后你就像在看幻灯片


558
00:32:59,880 --> 00:33:03,584 line:-1
为了随时提供良好性能


559
00:33:03,650 --> 00:33:07,521 line:-1
保证用户完全被AR场景吸引


560
00:33:07,588 --> 00:33:10,757 line:-2
app需要确保每秒60帧
的渲染速度


561
00:33:11,124 --> 00:33:12,793 line:-1
整个体验过程


562
00:33:13,227 --> 00:33:16,296 line:-1
都确保这个目标非常重要


563
00:33:16,363 --> 00:33:20,734 line:-2
使用压力测试
从每个可能的角度观察


564
00:33:21,068 --> 00:33:23,270 line:-1
靠近 远离


565
00:33:23,337 --> 00:33:26,039 line:-1
确保性能不会下降


566
00:33:28,008 --> 00:33:31,512 line:-2
也许未来的某一天
电池可以持续好几天


567
00:33:32,079 --> 00:33:35,482 line:-1
但现在确保AR app


568
00:33:35,549 --> 00:33:38,385 line:-1
对电池的消耗尽可能小


569
00:33:39,052 --> 00:33:42,556 line:-2
不要给用户指责app
耗尽电池的机会


570
00:33:42,856 --> 00:33:44,391 line:-1
越省电


571
00:33:44,458 --> 00:33:47,361 line:-1
用户越可能重新尝试你的体验


572
00:33:48,862 --> 00:33:51,999 line:-2
不知道你们是怎样
但每当我看到电量计变成


573
00:33:52,065 --> 00:33:54,868 line:-1
这个样子 我都非常恐慌


574
00:33:55,202 --> 00:33:58,539 line:-1
我们绝不想要AR体验


575
00:33:58,605 --> 00:34:00,641 line:-1
到处散布电池电量的恐慌


576
00:34:01,175 --> 00:34:05,245 line:-1
记住 只有你能避免电池过度消耗


577
00:34:07,481 --> 00:34:10,984 line:-2
我愿意把AR看作有能力
将任何可以想象的事物


578
00:34:11,051 --> 00:34:13,020 line:-1
带入到现实世界


579
00:34:13,554 --> 00:34:17,690 line:-2
人们想探索你的内容
你绝对想打造良好体验


580
00:34:18,324 --> 00:34:21,962 line:-1
花时间在3D内容打造精致细节


581
00:34:22,228 --> 00:34:26,466 line:-2
构建引人入胜的内容
记住每个小细节


582
00:34:26,533 --> 00:34:29,436 line:-2
每个小触碰
都是让用户震惊的机会


583
00:34:31,205 --> 00:34:35,108 line:-1
例如我们要打造水族馆的AR体验


584
00:34:35,609 --> 00:34:38,946 line:-2
即使是最抽象的方式
我觉得也不会有人相信


585
00:34:39,012 --> 00:34:42,683 line:-1
这团棉花球代表了一条鱼


586
00:34:43,550 --> 00:34:44,918 line:-1
从好的方面讲


587
00:34:44,985 --> 00:34:47,187 line:-1
app确实有良好性能


588
00:34:47,254 --> 00:34:49,156 line:-1
当这个小东西四处游动时


589
00:34:49,690 --> 00:34:51,592 line:-1
我们再试试


590
00:34:52,726 --> 00:34:57,464 line:-2
现在好多了
这绝对是一条鱼


591
00:34:58,198 --> 00:35:00,167 line:-1
看它展示的细节


592
00:35:00,234 --> 00:35:03,837 line:-1
AR里运行时 绝对会吸引人们


593
00:35:03,904 --> 00:35:08,742 line:-1
靠近些观察更多的细节


594
00:35:09,309 --> 00:35:12,779 line:-1
我们应为水族箱里游泳


595
00:35:12,846 --> 00:35:16,517 line:-2
或者浮在水面的鱼
努力维持这样的画质


596
00:35:18,018 --> 00:35:21,021 line:-2
最后要记得人们可能
在各种不同的环境


597
00:35:21,088 --> 00:35:22,689 line:-1
里使用你的app


598
00:35:22,956 --> 00:35:27,594 line:-1
要避免你的app跳脱真实世界


599
00:35:27,661 --> 00:35:30,430 line:-1
有可能周围的光线


600
00:35:30,497 --> 00:35:33,033 line:-1
和你要讲的故事相冲突


601
00:35:34,001 --> 00:35:37,171 line:-1
所以使用素材时避免使用


602
00:35:37,237 --> 00:35:39,473 line:-1
太亮或者太暗的颜色


603
00:35:39,773 --> 00:35:42,543 line:-1
确保点亮AR场景时


604
00:35:42,609 --> 00:35:46,113 line:-1
光线投射到所有渲染的物体上


605
00:35:46,180 --> 00:35:48,182 line:-1
而且无论哪个角度看都是如此


606
00:35:49,082 --> 00:35:52,186 line:-2
你的AR内容无论白天
还是黑夜都要能工作


607
00:35:52,486 --> 00:35:56,557 line:-2
现在我们要看看ARKit里
一些非常精彩的特性


608
00:35:56,623 --> 00:35:59,626 line:-1
它会让你的用户震惊


609
00:35:59,693 --> 00:36:01,895 line:-1
当他们看见你的AR内容弯曲


610
00:36:01,962 --> 00:36:04,665 line:-1
并密切响应真实世界的环境


611
00:36:06,500 --> 00:36:08,635 line:-1
构建AR内容时


612
00:36:08,702 --> 00:36:11,138 line:-1
一个用来评价进度的工具


613
00:36:11,205 --> 00:36:15,776 line:-2
就是通过最新宣布的iOS 12
新特性 AR Quicklook


614
00:36:16,543 --> 00:36:18,645 line:-1
上传素材到iCloud云端


615
00:36:19,146 --> 00:36:21,381 line:-2
通过iOS的Files app
查看它们


616
00:36:21,448 --> 00:36:24,518 line:-1
并且快速的投射到AR场景


617
00:36:26,887 --> 00:36:29,356 line:-1
还能将你的杰作


618
00:36:29,423 --> 00:36:32,626 line:-1
上传到网站上供朋友们观赏


619
00:36:32,693 --> 00:36:35,128 line:-1
你也能在Safari里随处查看


620
00:36:35,729 --> 00:36:37,130 line:-1
这相当精彩


621
00:36:37,497 --> 00:36:40,300 line:-2
务必回头查看
Dave和David的演讲


622
00:36:40,367 --> 00:36:44,771 line:-2
他们讲解了使用AR Quicklook
的最佳实践的细节


623
00:36:45,038 --> 00:36:47,474 line:-2
而且我保证
能通过开发素材的方式


624
00:36:47,541 --> 00:36:49,009 line:-1
改变你的生活


625
00:36:50,511 --> 00:36:54,014 line:-1
既然已经考虑过


626
00:36:54,081 --> 00:36:55,616 line:-1
人们对AR体验的期望


627
00:36:55,682 --> 00:36:58,685 line:-2
我们快速计划一下要构建
哪种类型的app


628
00:36:59,353 --> 00:37:02,789 line:-1
在开始构建3D内容之前


629
00:37:02,856 --> 00:37:05,225 line:-1
提前考虑好是不会错的


630
00:37:05,826 --> 00:37:10,030 line:-1
了解要做什么有助于确定如何优化


631
00:37:10,097 --> 00:37:12,132 line:-1
AR里的内容和素材


632
00:37:13,600 --> 00:37:17,604 line:-1
你坐在桌子前 突然有了灵感


633
00:37:17,671 --> 00:37:21,708 line:-1
你想到了绝对最棒的AR体验


634
00:37:22,342 --> 00:37:25,946 line:-1
我们后退一步先问自己几个问题


635
00:37:26,547 --> 00:37:30,184 line:-2
这个体验真的需要
渲染几百个AR物体


636
00:37:30,250 --> 00:37:33,554 line:-1
或只需关注一个素材


637
00:37:34,555 --> 00:37:36,256 line:-1
需要多少细节


638
00:37:36,323 --> 00:37:40,060 line:-2
怎样的图像风格最佳
表达我们的内容


639
00:37:41,195 --> 00:37:43,897 line:-2
我们是否有注意之前
Grant提到的


640
00:37:43,964 --> 00:37:47,201 line:-1
关注用户和体验间交互的种类


641
00:37:47,734 --> 00:37:51,038 line:-1
找到这些问题的答案有助于


642
00:37:51,104 --> 00:37:55,242 line:-1
确定开发时渲染预算的安排


643
00:37:57,144 --> 00:37:59,880 line:-1
例如正在开发


644
00:37:59,947 --> 00:38:01,915 line:-1
一个类似于IKEA的app


645
00:38:01,982 --> 00:38:04,218 line:-1
人们能预览各种家具


646
00:38:04,284 --> 00:38:09,189 line:-1
置于家中或者院子里的样子


647
00:38:09,756 --> 00:38:13,727 line:-1
展示的核心是各种不同的家具


648
00:38:13,794 --> 00:38:16,029 line:-1
因此你要展示各种精细的物体


649
00:38:16,096 --> 00:38:19,466 line:-1
细致模仿其在现实世界的样子


650
00:38:20,634 --> 00:38:23,804 line:-1
这种情况下


651
00:38:23,871 --> 00:38:26,807 line:-1
就得花多一点的渲染预算


652
00:38:26,874 --> 00:38:28,141 line:-1
在这些素材上


653
00:38:28,208 --> 00:38:32,012 line:-2
因为它们的质量可能决定
销售的成功或者失败


654
00:38:34,214 --> 00:38:36,583 line:-1
另一种情况 你受够了


655
00:38:36,650 --> 00:38:41,421 line:-1
不小心踩在孩子散落在屋子周围的


656
00:38:41,488 --> 00:38:43,056 line:-1
细小的塑料砖块


657
00:38:43,123 --> 00:38:46,093 line:-1
为了保持整洁 决定构建一个app


658
00:38:46,159 --> 00:38:47,995 line:-1
他们就能玩


659
00:38:48,061 --> 00:38:51,365 line:-2
远多于想象的砖块
就像Playground AR


660
00:38:51,565 --> 00:38:54,568 line:-1
这样再也不用忍受那些砖块


661
00:38:54,868 --> 00:38:58,205 line:-1
这样的app里 需要渲染


662
00:38:58,272 --> 00:39:02,576 line:-2
和交互大量的物体
就得创建


663
00:39:02,843 --> 00:39:05,812 line:-1
简单的色彩单一的模型


664
00:39:05,879 --> 00:39:07,548 line:-1
这样就能在屏幕上显示大量物体


665
00:39:07,614 --> 00:39:09,616 line:-1
并保持优异性能


666
00:39:11,852 --> 00:39:14,054 line:-1
问过自己这些问题


667
00:39:14,121 --> 00:39:16,390 line:-1
就要构建我们的AR画布


668
00:39:16,690 --> 00:39:18,992 line:-1
就像画师开始工作前


669
00:39:19,059 --> 00:39:22,396 line:-2
铺设画布一样
我们有一些


670
00:39:22,462 --> 00:39:25,132 line:-1
设置眼前项目的建议


671
00:39:25,199 --> 00:39:27,634 line:-1
以保证项目的成功


672
00:39:29,803 --> 00:39:31,605 line:-1
我们喜欢创建一个焦点四方形


673
00:39:31,672 --> 00:39:34,074 line:-1
以确定何处开始构建AR内容


674
00:39:34,141 --> 00:39:37,077 line:-2
如果使用屏幕
底部的SceneKit


675
00:39:37,144 --> 00:39:39,980 line:-1
就可以激活统计面板


676
00:39:40,047 --> 00:39:42,316 line:-1
这让你随时查看当前帧数


677
00:39:42,382 --> 00:39:45,085 line:-1
还有屏幕上可见的多边形


678
00:39:45,152 --> 00:39:47,454 line:-1
这当你开始构建app


679
00:39:47,521 --> 00:39:50,858 line:-1
并放入不同元素时非常有用


680
00:39:52,326 --> 00:39:55,395 line:-2
现在我们有了可以运行的
初始场景 我在想


681
00:39:55,462 --> 00:39:59,867 line:-2
什么是涵盖这些最佳实践的
好的AR app的例子


682
00:40:00,400 --> 00:40:02,169 line:-1
我不是喜欢户外活动的人


683
00:40:02,236 --> 00:40:05,572 line:-1
来加利福尼亚后 发现很多人喜欢


684
00:40:06,073 --> 00:40:07,875 line:-1
我尝试过亲近自然


685
00:40:08,141 --> 00:40:10,677 line:-1
去野营 点燃篝火


686
00:40:10,744 --> 00:40:13,113 line:-1
但从未成行


687
00:40:13,180 --> 00:40:16,283 line:-2
除了想象 我们将其放入app里
看看会发生什么


688
00:40:17,451 --> 00:40:22,189 line:-2
将其称为CampfiAR
非常棒 是吧


689
00:40:23,657 --> 00:40:26,527 line:-1
我们能构建一个精细的事物


690
00:40:26,593 --> 00:40:28,562 line:-1
享受户外活动的乐趣


691
00:40:28,629 --> 00:40:31,532 line:-1
而不用担心虫子和清新空气


692
00:40:34,368 --> 00:40:36,336 line:-1
我们决定渲染风格化的


693
00:40:36,403 --> 00:40:38,672 line:-1
半真实的游戏的图像


694
00:40:39,573 --> 00:40:43,510 line:-1
将独特的细节运用到关键的


695
00:40:43,577 --> 00:40:45,445 line:-1
基于物理的材料特性上


696
00:40:45,946 --> 00:40:48,382 line:-1
这些决定意味着可能要


697
00:40:48,448 --> 00:40:52,786 line:-2
在屏幕上渲染大量多边形
但为何剥夺


698
00:40:52,853 --> 00:40:56,390 line:-2
人们花数个小时观看
我们美丽营火的权利呢？


699
00:40:56,723 --> 00:40:58,192 line:-1
让我们使用一些技巧


700
00:40:58,258 --> 00:41:01,995 line:-1
来优化场景 避免那种情况发生


701
00:41:03,530 --> 00:41:06,600 line:-1
我们从关注3D对象的


702
00:41:06,667 --> 00:41:08,535 line:-1
基础结构 网格 开始


703
00:41:09,102 --> 00:41:11,638 line:-1
讲述让你创建


704
00:41:11,705 --> 00:41:14,174 line:-1
精细的模型


705
00:41:14,241 --> 00:41:18,245 line:-2
但仍保持场景内较低多边形数
的典型开发流程


706
00:41:18,912 --> 00:41:20,347 line:-1
如你所知


707
00:41:20,414 --> 00:41:22,883 line:-1
多边形数就是多边形的个数


708
00:41:22,950 --> 00:41:25,586 line:-1
典型的网格就由三角形构成


709
00:41:26,887 --> 00:41:30,057 line:-1
要做的第一件事就是使用


710
00:41:30,123 --> 00:41:32,759 line:-2
这些简单的网格部署
AR场景的基础结构


711
00:41:33,193 --> 00:41:35,429 line:-1
我们发现使用这类白盒技术


712
00:41:35,495 --> 00:41:38,432 line:-1
有助于测试基础交互


713
00:41:38,498 --> 00:41:42,069 line:-1
以及观察事物融入


714
00:41:42,135 --> 00:41:43,604 line:-1
真实世界的程度


715
00:41:44,505 --> 00:41:47,040 line:-1
我觉得这团营火很棒


716
00:41:47,107 --> 00:41:48,876 line:-1
我们就到此结束吧


717
00:41:48,942 --> 00:41:50,544 line:-1
让我们完成并发布它


718
00:41:50,611 --> 00:41:54,181 line:-2
谢谢大家
我要参加派对过后的活动…等等


719
00:41:54,248 --> 00:41:56,717 line:-1
你们觉得它不像营火？


720
00:41:57,618 --> 00:41:59,386 line:-1
好吧 抱歉 真的吗？


721
00:42:00,053 --> 00:42:04,758 line:-1
我的错 我们继续构造营火的网格


722
00:42:05,392 --> 00:42:07,461 line:-1
我要快速的过一下


723
00:42:07,528 --> 00:42:10,831 line:-2
网格是什么
还有组成它的基本数据结构


724
00:42:11,498 --> 00:42:15,035 line:-1
你能把网格想象成一组


725
00:42:15,102 --> 00:42:17,037 line:-1
排列在3D空间的三角形


726
00:42:17,104 --> 00:42:20,207 line:-1
以构成平面让你添加材质


727
00:42:20,707 --> 00:42:24,645 line:0
三角形的角由点构成


728
00:42:24,711 --> 00:42:27,648 line:0
其称作点 其中包含各种信息


729
00:42:28,248 --> 00:42:32,286 line:0
例如空间位置 材质的UV坐标


730
00:42:32,352 --> 00:42:33,687 line:0
以及一个后面将讲到的


731
00:42:33,754 --> 00:42:35,923 line:0
称作法线的重要属性


732
00:42:37,591 --> 00:42:39,860 line:-1
既然之前没能成功发布


733
00:42:39,927 --> 00:42:40,994 line:-1
我打算建造


734
00:42:41,061 --> 00:42:45,165 line:-1
世界上最漂亮的营火来补偿


735
00:42:45,666 --> 00:42:49,403 line:-2
看看营地的细节
看看鱼和树枝


736
00:42:49,803 --> 00:42:52,539 line:-1
能看见各种复杂细节


737
00:42:52,606 --> 00:42:54,508 line:-1
以及树皮上的纹路


738
00:42:55,275 --> 00:42:57,811 line:-1
但性能受到影响


739
00:42:58,111 --> 00:43:02,182 line:-1
屏幕的多边形数快达到一百万了


740
00:43:02,916 --> 00:43:06,954 line:-1
我已准备好 不想惹上麻烦


741
00:43:07,020 --> 00:43:08,455 line:-1
所以最好回去修复它


742
00:43:08,722 --> 00:43:11,959 line:-1
因为我在意这对电池待机的影响


743
00:43:12,159 --> 00:43:15,629 line:-1
以及人们如何感受及与AR场景交互


744
00:43:15,996 --> 00:43:19,533 line:-2
我们看看能做点什么
来降低多边形数


745
00:43:21,301 --> 00:43:24,338 line:-1
大多3D构建工具有专门的工具


746
00:43:24,404 --> 00:43:27,608 line:-1
用以降低模型复杂度


747
00:43:27,941 --> 00:43:29,877 line:-1
我们降低了


748
00:43:29,943 --> 00:43:33,080 line:-1
和鱼的高密度模型关联的多边形数


749
00:43:33,914 --> 00:43:37,284 line:-1
但要注意 放大时大量细节丢失了


750
00:43:37,751 --> 00:43:41,088 line:-1
但别慌 我们能用特定的材料属性


751
00:43:41,154 --> 00:43:43,423 line:-1
将丢失的细节找回来


752
00:43:43,824 --> 00:43:47,594 line:-1
这里的关键就是用最少的多边形


753
00:43:47,661 --> 00:43:49,897 line:-1
构建网格基础


754
00:43:49,963 --> 00:43:53,233 line:-2
我们把高密度网格放到一边
然后关注构建


755
00:43:53,300 --> 00:43:55,169 line:-1
低密度的网格


756
00:43:56,703 --> 00:44:00,774 line:-1
我承认这没以前看起来好


757
00:44:00,841 --> 00:44:02,543 line:-1
但是看看app性能


758
00:44:02,609 --> 00:44:04,745 line:-1
我们不仅通过降低


759
00:44:04,811 --> 00:44:08,148 line:-2
屏幕上多边形数
节省大量开销


760
00:44:08,215 --> 00:44:12,986 line:-2
还能在场景中添加一些3D对象
使之更健壮


761
00:44:13,620 --> 00:44:16,056 line:-1
回想一下 之前的高密度网格中


762
00:44:16,123 --> 00:44:18,125 line:-1
我们运行在每秒30帧


763
00:44:18,192 --> 00:44:19,993 line:-1
现在我们回到了每秒60帧


764
00:44:20,494 --> 00:44:23,997 line:-1
我们之前有接近一百万多边形


765
00:44:24,064 --> 00:44:27,534 line:-2
现在只有9000个
这很不错


766
00:44:27,601 --> 00:44:31,672 line:-1
这样 我们满足了需要的性能规格


767
00:44:31,738 --> 00:44:36,944 line:-2
稳定的帧率
和对电池待机影响最小


768
00:44:38,846 --> 00:44:41,615 line:-1
我们有了营火场景里优化的模型


769
00:44:41,682 --> 00:44:44,751 line:-1
现在看看如何


770
00:44:44,918 --> 00:44:48,021 line:-1
使用不同材料属性和技术


771
00:44:48,088 --> 00:44:51,792 line:-2
让模型看起来
尽可能好的同时维持性能


772
00:44:51,859 --> 00:44:54,027 line:-1
以找回丢失的细节


773
00:44:55,796 --> 00:44:58,699 line:-2
也许听说过
涉及现代3D渲染的


774
00:44:58,765 --> 00:45:00,400 line:-1
物理渲染


775
00:45:00,467 --> 00:45:03,770 line:-2
这是个复杂的话题
花光演讲的


776
00:45:03,837 --> 00:45:06,173 line:-1
全部时间都讲不完


777
00:45:06,507 --> 00:45:08,842 line:-1
但基础概念就是


778
00:45:08,909 --> 00:45:12,312 line:-1
app不同材质属性


779
00:45:12,379 --> 00:45:17,417 line:-2
到网格上
以便能真实反应AR场景里


780
00:45:17,484 --> 00:45:18,952 line:-1
模拟光线的影响


781
00:45:19,353 --> 00:45:21,722 line:-1
然后我们谈到的所有材质


782
00:45:21,788 --> 00:45:23,557 line:-1
都遵循该投射技术


783
00:45:24,424 --> 00:45:26,026 line:-1
如果想要这一概念的更多细节


784
00:45:26,093 --> 00:45:29,029 line:-1
2016年WWDC有一场演讲


785
00:45:29,096 --> 00:45:31,665 line:-2
介绍SceneKit
物理渲染的细节


786
00:45:31,732 --> 00:45:34,701 line:-1
叫做SceneKit渲染进阶


787
00:45:36,403 --> 00:45:39,706 line:-1
现在谈谈第一个材质属性 反射率


788
00:45:39,773 --> 00:45:43,177 line:-1
或者有时候被称为颜色散射


789
00:45:44,578 --> 00:45:46,513 line:-1
我们回到CampfiAR


790
00:45:46,914 --> 00:45:49,049 line:-1
之前 基础网格只关联了灰色材质


791
00:45:49,116 --> 00:45:50,617 line:-1
看起来有些单调


792
00:45:50,684 --> 00:45:54,521 line:-1
但app了反射率后就好多了


793
00:45:54,821 --> 00:45:58,392 line:-1
可营火还是缺失大量


794
00:45:58,458 --> 00:46:00,727 line:-1
原来高密度网格里有的细节


795
00:46:00,928 --> 00:46:02,462 line:-1
靠近营火时


796
00:46:02,529 --> 00:46:05,432 line:-1
所有表面都相对平整


797
00:46:05,799 --> 00:46:07,801 line:-1
之后我们肯定要修正这个


798
00:46:07,868 --> 00:46:10,537 line:-1
但首先我们深入一下反射率属性


799
00:46:12,272 --> 00:46:14,975 line:-1
把反射率想象成


800
00:46:15,042 --> 00:46:16,777 line:-1
AR场景里各种物体的基础网格


801
00:46:17,444 --> 00:46:20,747 line:-1
这是向模型表面


802
00:46:20,814 --> 00:46:22,549 line:-1
添加纹理的材质属性


803
00:46:23,217 --> 00:46:25,719 line:-1
回想一下 网格有不同的点


804
00:46:25,786 --> 00:46:27,754 line:-1
包含不同信息


805
00:46:28,989 --> 00:46:32,125 line:-1
这里看到的叫做UV坐标


806
00:46:32,192 --> 00:46:35,729 line:-1
帮助确定纹理像素如何映射到模型


807
00:46:36,563 --> 00:46:38,966 line:-1
添加纹理后


808
00:46:39,032 --> 00:46:42,703 line:-1
我们应用反射率到鱼的这一属性上


809
00:46:44,004 --> 00:46:46,740 line:-1
也就是我们向鱼添加了纹理


810
00:46:46,807 --> 00:46:47,941 line:-1
我要提醒的是


811
00:46:48,008 --> 00:46:51,211 line:-1
人们将在何处体验你的app


812
00:46:51,645 --> 00:46:53,280 line:-1
你要让你的内容


813
00:46:53,347 --> 00:46:55,582 line:-1
适配尽可能多的场景


814
00:46:56,149 --> 00:46:57,351 line:-1
所以要仔细


815
00:46:57,417 --> 00:47:01,555 line:-2
选择反射率 使其不会
太高或者太低


816
00:47:01,922 --> 00:47:05,626 line:-1
以便其工作于各种不同情形


817
00:47:06,093 --> 00:47:08,328 line:-1
这样鱼有了皮肤


818
00:47:08,395 --> 00:47:11,832 line:-1
但还是缺少大量细节和场景里的对象


819
00:47:12,165 --> 00:47:15,335 line:-1
我们看看如何通过使用材质属性


820
00:47:16,170 --> 00:47:18,338 line:-1
找回大量丢失的细节


821
00:47:19,740 --> 00:47:23,010 line:-2
我们回到CampfiAR
看看如何找回


822
00:47:23,076 --> 00:47:25,546 line:-1
优化时丢失的细节


823
00:47:26,146 --> 00:47:29,416 line:-2
这能通过使用称作法线的
特殊材质实现


824
00:47:29,950 --> 00:47:31,952 line:-1
能在此看到


825
00:47:32,019 --> 00:47:33,954 line:-1
应用到AR场景的蓝色贴图


826
00:47:34,655 --> 00:47:39,026 line:-2
这些贴图让你将优质表面细节
添加回模型


827
00:47:39,092 --> 00:47:41,562 line:-1
而无需额外的几何体


828
00:47:41,862 --> 00:47:43,463 line:-1
添加法线映射后


829
00:47:43,530 --> 00:47:46,066 line:-1
能看到鱼还有树枝


830
00:47:46,133 --> 00:47:49,403 line:-1
都显示了稍微多一些的细节


831
00:47:49,837 --> 00:47:52,172 line:-1
如果看看统计面板会注意到


832
00:47:52,239 --> 00:47:54,074 line:-1
模型的多边形数


833
00:47:54,141 --> 00:47:56,343 line:-1
完全没有任何变化


834
00:47:56,410 --> 00:47:57,678 line:-1
很神奇 不是吗？


835
00:47:59,179 --> 00:48:01,515 line:-1
怎样创建法线贴图


836
00:48:02,115 --> 00:48:04,218 line:-1
仔细看看树枝


837
00:48:04,284 --> 00:48:06,320 line:-1
看看能做什么来达到目的


838
00:48:06,620 --> 00:48:08,755 line:-1
在现代3D建模app里


839
00:48:08,822 --> 00:48:10,591 line:-1
美工能通过从


840
00:48:10,657 --> 00:48:13,794 line:-1
高密度网格投射到低密度网格来


841
00:48:13,861 --> 00:48:14,828 line:-1
创建法线映射


842
00:48:15,429 --> 00:48:17,598 line:-1
这里能看到法线映射


843
00:48:17,664 --> 00:48:21,134 line:-2
从高密度网格生成后
在树枝上的样子


844
00:48:22,035 --> 00:48:25,472 line:-2
应用法线映射后
开始注意到那些精致的


845
00:48:25,539 --> 00:48:27,975 line:-1
丢失的细节再次回到模型上


846
00:48:28,041 --> 00:48:29,276 line:-1
但我们仍能保持


847
00:48:29,343 --> 00:48:31,578 line:-1
低多边形网格的高性能


848
00:48:33,347 --> 00:48:36,083 line:-2
你可能想知道为何法线贴图
看起来有点怪


849
00:48:36,149 --> 00:48:37,718 line:-1
法线贴图的颜色


850
00:48:37,784 --> 00:48:41,388 line:-1
实际是点数据的可视表达


851
00:48:41,788 --> 00:48:45,926 line:-1
决定了模型面的法线偏移


852
00:48:45,993 --> 00:48:49,196 line:-1
以改变光线反射的方式


853
00:48:49,663 --> 00:48:51,365 line:-1
也是实现效果的关键


854
00:48:52,633 --> 00:48:56,670 line:-2
那有点绕口
让我们继续深入这个属性


855
00:48:56,737 --> 00:48:59,406 line:-1
因为法线是一个重要的话题


856
00:48:59,773 --> 00:49:01,408 line:-1
我们想多花点时间


857
00:49:01,475 --> 00:49:04,845 line:-1
看看这个有多神奇


858
00:49:05,946 --> 00:49:07,481 line:-1
控制法线向量的艺术


859
00:49:07,548 --> 00:49:11,652 line:-1
是AR创建者让模型


860
00:49:11,718 --> 00:49:14,488 line:-1
找回大量细节的关键工具


861
00:49:15,055 --> 00:49:19,092 line:-2
法线向量究竟是什么
还有其他向量吗？


862
00:49:19,526 --> 00:49:22,863 line:-2
没什么别的向量了
除非你忘了高中学过的


863
00:49:22,930 --> 00:49:26,633 line:-1
法线向量垂直于网格表面


864
00:49:26,700 --> 00:49:30,838 line:-2
并关联到每个网格点
为何需要这些法线


865
00:49:32,372 --> 00:49:33,807 line:-1
为了看见物体


866
00:49:33,874 --> 00:49:36,977 line:-1
需要在3D引擎里添加模拟光线


867
00:49:37,778 --> 00:49:40,647 line:-1
法线向量让3D引擎计算


868
00:49:40,714 --> 00:49:43,350 line:-1
光线如何在材质表面反射


869
00:49:43,617 --> 00:49:45,886 line:-1
和现实世界光线的表现一样


870
00:49:45,953 --> 00:49:49,389 line:-1
要确保AR场景模拟现实情况


871
00:49:50,924 --> 00:49:53,460 line:-1
有趣的是通过修改这些法线


872
00:49:53,527 --> 00:49:55,896 line:-1
能让引擎认为


873
00:49:55,963 --> 00:49:58,065 line:-1
模型表面比实际上更精细


874
00:49:58,131 --> 00:50:00,300 line:-1
而不用添加额外几何体


875
00:50:01,201 --> 00:50:03,937 line:-1
看看这个例子能看到简单的球体


876
00:50:04,004 --> 00:50:05,539 line:-1
被平面投射渲染


877
00:50:06,006 --> 00:50:09,076 line:0
这意味着关联到网格每个面的法线


878
00:50:09,142 --> 00:50:12,779 line:0
都指向相同的方向
和2D情况一样


879
00:50:13,547 --> 00:50:17,951 line:0
光线在表面反射时


880
00:50:18,018 --> 00:50:20,754 line:0
能看到所有组成网格的多边形


881
00:50:20,821 --> 00:50:23,290 line:0
因为每个面都均匀照亮


882
00:50:24,791 --> 00:50:26,860 line:0
尽管使用完全相同的模型


883
00:50:26,927 --> 00:50:29,830 line:0
使用了称作平滑或者冯氏投影


884
00:50:30,297 --> 00:50:33,000 line:0
注意在多边形表面移动时


885
00:50:33,066 --> 00:50:35,102 line:0
法线是渐变的


886
00:50:35,736 --> 00:50:40,007 line:0
引擎计算模型反射时


887
00:50:40,073 --> 00:50:42,609 line:0
因为法线的渐变插值


888
00:50:42,676 --> 00:50:45,345 line:0
会显示平滑曲面


889
00:50:46,613 --> 00:50:48,715 line:0
有意思的是这两个模型


890
00:50:48,782 --> 00:50:51,251 line:0
关联的多边形数相同


891
00:50:51,318 --> 00:50:54,321 line:0
但通过操作法线物体看起来


892
00:50:54,388 --> 00:50:58,125 line:0
有更平滑更细节的表面


893
00:50:58,192 --> 00:51:01,094 line:0
而不用在网格上添加额外几何体


894
00:51:02,296 --> 00:51:05,199 line:-1
法线已经讲够了


895
00:51:05,265 --> 00:51:08,836 line:-1
现在看看如何让场景变得闪亮点


896
00:51:10,437 --> 00:51:15,209 line:-2
使用法线贴图
CampfiAR肯定看起来好一些


897
00:51:15,275 --> 00:51:18,679 line:-1
但这些部分看起来有点沉闷


898
00:51:18,745 --> 00:51:22,249 line:-2
特别是期望能闪亮点的物体
比如茶壶或者场景里的鱼


899
00:51:23,250 --> 00:51:26,954 line:-2
这里看到的是AR场景里
应用金属贴图的结果


900
00:51:27,321 --> 00:51:29,590 line:-1
金属贴图用来决定


901
00:51:29,656 --> 00:51:33,227 line:-1
哪个物体表面应该展现反射属性


902
00:51:33,760 --> 00:51:35,629 line:-1
一旦材质属性激活


903
00:51:35,696 --> 00:51:40,000 line:-1
注意指定成金属的区域有多闪亮


904
00:51:40,067 --> 00:51:42,469 line:-1
茶壶还有鱼的鳞片


905
00:51:44,872 --> 00:51:46,807 line:-1
现在注意这个茶壶


906
00:51:47,107 --> 00:51:50,043 line:-1
我们从移除反射填图


907
00:51:50,110 --> 00:51:52,980 line:-2
然后添加金属贴图到材质的
金属属性开始


908
00:51:53,780 --> 00:51:55,816 line:-1
应用金属贴图后


909
00:51:55,883 --> 00:51:59,720 line:-1
3D渲染会指定贴图的


910
00:51:59,786 --> 00:52:01,889 line:-1
白色区域表面为反射


911
00:52:02,356 --> 00:52:04,224 line:-1
尽管称作金属性


912
00:52:04,291 --> 00:52:07,327 line:-1
物体不一定要包含金属


913
00:52:07,528 --> 00:52:11,031 line:-1
而是让3D引擎知道该物体


914
00:52:11,098 --> 00:52:12,933 line:-1
应展示反射的表面


915
00:52:14,735 --> 00:52:19,039 line:-2
最好在模型上使用金属贴图
比如茶壶


916
00:52:19,106 --> 00:52:22,409 line:-1
当其同时有金属和非金属表面时


917
00:52:22,976 --> 00:52:24,678 line:-1
这是简单的灰度贴图


918
00:52:24,745 --> 00:52:27,447 line:-1
黑色表示非金属


919
00:52:27,514 --> 00:52:30,184 line:-1
白色表示金属


920
00:52:30,984 --> 00:52:35,722 line:-1
其允许同一物体的材质


921
00:52:35,789 --> 00:52:38,292 line:-1
同时表现出反射和非反射的表面


922
00:52:38,959 --> 00:52:42,229 line:-1
这茶壶反射得太厉害了


923
00:52:42,296 --> 00:52:45,599 line:-1
不是我们想要的样子


924
00:52:45,799 --> 00:52:49,903 line:-2
这种情况下
我们想反射度潜在的变化


925
00:52:49,970 --> 00:52:54,007 line:-1
同时模拟表面非完全平滑的现象


926
00:52:54,308 --> 00:52:58,812 line:-1
表面展现出轻微细小的磨损


927
00:53:00,480 --> 00:53:01,982 line:-1
这时候就需要


928
00:53:02,049 --> 00:53:02,983 line:-1
粗糙材质属性


929
00:53:04,051 --> 00:53:05,953 line:-1
回到CampfiAR


930
00:53:06,019 --> 00:53:08,856 line:-1
看到反射表面太光滑了


931
00:53:09,256 --> 00:53:12,326 line:-1
添加粗糙贴图后 能看到


932
00:53:12,392 --> 00:53:16,096 line:-2
同时改变了茶壶和鱼
反射光线的方式


933
00:53:16,730 --> 00:53:19,099 line:-1
然后应用粗糙材质属性


934
00:53:19,166 --> 00:53:23,036 line:-2
到这些物体之后
能看到反射度下降


935
00:53:23,704 --> 00:53:26,273 line:-1
粗糙和金属属性的结合


936
00:53:26,340 --> 00:53:29,142 line:-1
是另一个要关注的概念


937
00:53:29,209 --> 00:53:32,446 line:-1
我们继续深入粗糙材质属性


938
00:53:34,147 --> 00:53:38,151 line:-1
用粗糙度模拟细微表面细节


939
00:53:38,218 --> 00:53:41,321 line:-1
其会影响光线从表面反射的方式


940
00:53:41,822 --> 00:53:44,491 line:-1
粗糙度设置成完全光滑


941
00:53:44,558 --> 00:53:47,494 line:-1
光线会像在镜面上一样反射


942
00:53:47,895 --> 00:53:49,963 line:-1
随着材质粗糙度增加


943
00:53:50,030 --> 00:53:52,099 line:-1
光线呈一定角度反射


944
00:53:52,332 --> 00:53:55,068 line:-1
这里我们以固定值从不粗糙到


945
00:53:55,135 --> 00:53:58,839 line:-1
最大粗糙缓慢增加茶壶的粗糙度


946
00:53:59,339 --> 00:54:04,278 line:-1
这是个模拟


947
00:54:04,344 --> 00:54:06,079 line:-1
细微表面的好办法


948
00:54:06,146 --> 00:54:09,116 line:-1
并取决于值的返回


949
00:54:09,183 --> 00:54:13,120 line:-2
将反射模糊到看不见
任何反射的程度


950
00:54:14,821 --> 00:54:15,923 line:-1
对茶壶来说


951
00:54:15,989 --> 00:54:18,759 line:-1
我们取消了原来的金属表面


952
00:54:18,825 --> 00:54:23,363 line:-2
可以使用粗糙度贴图而不是
固定的粗糙度值


953
00:54:24,097 --> 00:54:26,300 line:-1
这有助于指定表面


954
00:54:26,366 --> 00:54:30,871 line:-1
比以往更散射光线


955
00:54:31,572 --> 00:54:35,442 line:-1
使用粗糙度贴图后 就能看到


956
00:54:35,509 --> 00:54:39,012 line:-2
最后茶壶反射的样子
远没以前那么亮


957
00:54:40,047 --> 00:54:43,483 line:-1
金属属性


958
00:54:43,550 --> 00:54:44,918 line:-1
和粗糙属性的结合


959
00:54:44,985 --> 00:54:47,855 line:-1
让你的AR模型的反射更真实


960
00:54:48,322 --> 00:54:50,657 line:-1
粗糙度能用于微调物体如何


961
00:54:50,724 --> 00:54:51,992 line:-1
反射周围环境


962
00:54:52,059 --> 00:54:55,796 line:-1
能让你的金属表面更真实


963
00:54:56,263 --> 00:55:00,000 line:-1
能用粗糙度贴图添加更多细节


964
00:55:00,067 --> 00:55:03,103 line:-2
像这里做的一样
让茶壶磨损更厉害


965
00:55:03,904 --> 00:55:06,640 line:-1
最后还有两个材质属性


966
00:55:06,707 --> 00:55:09,810 line:-1
可以改善你的模型


967
00:55:09,877 --> 00:55:13,313 line:-1
在性能和美观间取得平衡


968
00:55:14,948 --> 00:55:18,285 line:-1
环境光吸收是用来给模型提供


969
00:55:18,619 --> 00:55:19,820 line:-1
自投影的材质属性


970
00:55:19,887 --> 00:55:22,222 line:-1
能给AR模型添加


971
00:55:22,289 --> 00:55:23,957 line:-1
额外的深度和细节


972
00:55:25,192 --> 00:55:28,595 line:-1
法线贴图能给AR模型


973
00:55:28,662 --> 00:55:31,198 line:-1
找回大量细节


974
00:55:31,265 --> 00:55:34,868 line:-1
环境光吸收能用来精细化这些细节


975
00:55:35,369 --> 00:55:38,805 line:-2
我们看到CampfiAR
的环境光贴图


976
00:55:38,872 --> 00:55:40,908 line:-1
效果有点难演示


977
00:55:40,974 --> 00:55:42,709 line:-1
因为其相对微妙


978
00:55:43,210 --> 00:55:45,812 line:-1
看你能否注意到木头上的影子


979
00:55:45,879 --> 00:55:48,248 line:-1
还有茶壶底部的特定区域


980
00:55:48,749 --> 00:55:51,351 line:-2
这里有点像在玩
《瓦尔多在哪里？》


981
00:55:51,418 --> 00:55:54,521 line:-1
我们关注场景里的木头


982
00:55:57,057 --> 00:56:00,761 line:-1
这里展示的是木头的法线贴图


983
00:56:00,827 --> 00:56:02,296 line:-1
凸起有大量细节


984
00:56:02,362 --> 00:56:05,499 line:-1
但我们能改善这些区域


985
00:56:06,200 --> 00:56:07,968 line:-1
现在看着环境光吸收贴图


986
00:56:08,035 --> 00:56:11,305 line:-1
能看到给一些区域添加了自投影


987
00:56:11,371 --> 00:56:15,075 line:-1
在树木的底部还有小树桩


988
00:56:15,809 --> 00:56:19,246 line:-1
贴图应用到环境光吸收属性后


989
00:56:19,446 --> 00:56:22,850 line:-2
希望能看到添加
这些细节阴影的好处


990
00:56:22,916 --> 00:56:26,119 line:-1
而无需使用场景里的动态光线


991
00:56:28,322 --> 00:56:31,191 line:-1
在AR里 推荐把


992
00:56:31,258 --> 00:56:32,926 line:-1
环境光吸收制成贴图


993
00:56:33,227 --> 00:56:34,928 line:-1
就像CampfiAR里干的


994
00:56:35,162 --> 00:56:39,199 line:-1
而不是使用屏幕空间环境光吸收


995
00:56:39,266 --> 00:56:41,969 line:-1
其是基于相机的后期效果


996
00:56:42,035 --> 00:56:45,305 line:-1
可能导致场景渲染性能低下


997
00:56:47,207 --> 00:56:48,909 line:-1
最后但同样重要的是


998
00:56:49,610 --> 00:56:52,246 line:-1
谨慎使用材质的透明度


999
00:56:52,312 --> 00:56:54,014 line:-1
如果必须使用透明度


1000
00:56:54,081 --> 00:56:56,183 line:-1
推荐在能同时看见


1001
00:56:56,250 --> 00:56:59,653 line:-2
透明和不透明表面的地方
使用独立材质


1002
00:57:00,921 --> 00:57:03,390 line:-1
总的来说 在AR里


1003
00:57:03,457 --> 00:57:07,227 line:-1
大量使用透明材质会严重影响性能


1004
00:57:07,294 --> 00:57:10,430 line:-1
尤其是当你观察它们时


1005
00:57:10,497 --> 00:57:13,367 line:-1
透明表面堆叠在一起


1006
00:57:13,433 --> 00:57:15,402 line:-1
这称作重复绘图


1007
00:57:15,469 --> 00:57:17,471 line:-1
AR里一定要避免


1008
00:57:19,306 --> 00:57:20,874 line:-1
希望大家还在听


1009
00:57:20,941 --> 00:57:22,543 line:-1
因为内容有些长


1010
00:57:23,043 --> 00:57:27,114 line:-1
目前 主要关注于AR内容


1011
00:57:27,181 --> 00:57:29,883 line:-1
对3D引擎里模拟光线的相应


1012
00:57:30,083 --> 00:57:31,752 line:-1
现在要关注于


1013
00:57:31,818 --> 00:57:34,721 line:-2
一些让内容看起来是
真实世界一部分的方法


1014
00:57:35,956 --> 00:57:39,359 line:-1
补偿变化的光线条件的一个神奇方法


1015
00:57:39,426 --> 00:57:45,332 line:-2
是利用ARKit的著名特性
光线估计


1016
00:57:45,933 --> 00:57:47,434 line:-1
我们从激活这一功能开始


1017
00:57:47,501 --> 00:57:48,969 line:-1
看其如何影响茶壶


1018
00:57:49,136 --> 00:57:52,372 line:-1
真实世界的光线强度变化时


1019
00:57:52,439 --> 00:57:55,542 line:-1
AR场景的光线也随之变化


1020
00:57:56,410 --> 00:57:59,713 line:-2
实现方式是ARKit
分析视频的每一帧


1021
00:57:59,780 --> 00:58:03,016 line:-1
并用以估计真实世界的光线条件


1022
00:58:03,750 --> 00:58:07,354 line:-1
这是个神奇的特性 有助于确保


1023
00:58:07,421 --> 00:58:10,390 line:-1
AR内容的光线和真实世界的匹配


1024
00:58:12,259 --> 00:58:14,962 line:-2
现在AR场景里有了
神奇的光线向导


1025
00:58:15,028 --> 00:58:16,129 line:-1
我们来谈谈阴影


1026
00:58:16,897 --> 00:58:19,600 line:-1
AR里的阴影很难掌握


1027
00:58:20,234 --> 00:58:23,303 line:-1
阴影要在各种情形下工作


1028
00:58:23,370 --> 00:58:26,940 line:-2
记住人们可能在
各种情况下使用app


1029
00:58:27,007 --> 00:58:28,842 line:-1
如果阴影和


1030
00:58:28,909 --> 00:58:30,444 line:-1
现实世界里看到的不同


1031
00:58:30,511 --> 00:58:32,479 line:-1
会影响你的体验


1032
00:58:34,014 --> 00:58:37,584 line:-1
我们通过使用3D引擎里的


1033
00:58:38,051 --> 00:58:41,455 line:-1
方向光源错误的投射动态阴影


1034
00:58:42,055 --> 00:58:45,325 line:-2
阴影是让物体看起来
像真实世界的好方法


1035
00:58:45,392 --> 00:58:47,961 line:-1
但这里和周围环境


1036
00:58:48,028 --> 00:58:49,563 line:-1
看到的阴影不匹配


1037
00:58:49,630 --> 00:58:52,533 line:-1
就像在故意违背物理规律


1038
00:58:54,034 --> 00:58:57,571 line:-1
我们建议将方向光源置于头顶


1039
00:58:57,638 --> 00:59:00,107 line:-1
调节效果强度


1040
00:59:00,174 --> 00:59:03,577 line:-1
使其感觉更精细


1041
00:59:04,077 --> 00:59:07,247 line:-1
这会让你的阴影能工作于更多情形


1042
00:59:07,414 --> 00:59:08,949 line:-1
和更多场景


1043
00:59:09,883 --> 00:59:12,452 line:-1
替代方法是创建


1044
00:59:12,519 --> 00:59:15,756 line:-2
自己的投射阴影而不是
使用场景的动态光源


1045
00:59:15,989 --> 00:59:18,892 line:-1
渲染大量3D内容时


1046
00:59:19,193 --> 00:59:21,195 line:-1
其开销大 可能严重影响性能


1047
00:59:21,795 --> 00:59:25,199 line:-1
花时间打造精细的阴影


1048
00:59:25,265 --> 00:59:29,336 line:-1
使其适配尽可能多的真实世界


1049
00:59:31,471 --> 00:59:32,506 line:-1
环境贴图


1050
00:59:33,073 --> 00:59:36,443 line:-2
如果真的想让用户震惊
一定要使用这些贴图


1051
00:59:36,510 --> 00:59:40,013 line:-1
尤其是那些能反射的AR物体


1052
00:59:40,781 --> 00:59:44,418 line:-2
会让你的AR内容就像
存在于真实世界


1053
00:59:44,751 --> 00:59:48,822 line:-1
为了让其更易于使用 我们将展示


1054
00:59:48,889 --> 00:59:53,026 line:-2
iOS 12、ARKit 2.0
的新特性


1055
00:59:53,093 --> 00:59:56,296 line:-2
自动环境贴图
如何助你达到这一效果


1056
00:59:57,798 --> 01:00:00,133 line:-1
近距离观察茶壶 我们原来使用


1057
01:00:00,200 --> 01:00:03,170 line:-1
带蓝色光晕的环境贴图


1058
01:00:04,238 --> 01:00:06,974 line:-1
一旦激活自动环境贴图


1059
01:00:07,040 --> 01:00:09,209 line:-1
注意茶壶如何反射地面


1060
01:00:09,276 --> 01:00:12,279 line:-1
和当前环境中的周围颜色


1061
01:00:12,579 --> 01:00:15,449 line:-1
你还能看见茶壶周围


1062
01:00:15,516 --> 01:00:16,884 line:-1
草的绿色


1063
01:00:17,184 --> 01:00:20,854 line:-1
这是个神奇的特性 帮助你的物体


1064
01:00:20,921 --> 01:00:23,624 line:-2
置于真实世界
谨慎使用粗糙度


1065
01:00:24,124 --> 01:00:26,827 line:-1
能大幅增加场景可信度


1066
01:00:28,829 --> 01:00:31,331 line:-1
为何自动环境贴图


1067
01:00:31,398 --> 01:00:32,799 line:-1
如此神奇


1068
01:00:33,400 --> 01:00:38,038 line:-1
通常这些贴图用来模拟金属表面


1069
01:00:38,105 --> 01:00:40,174 line:-1
反射周围环境的能力


1070
01:00:41,041 --> 01:00:44,211 line:-1
你能看见立方体环境贴图的例子


1071
01:00:45,212 --> 01:00:47,848 line:-1
ARKit添加自动环境贴图之前


1072
01:00:47,915 --> 01:00:50,584 line:-1
你需要添加图像 期望其能在


1073
01:00:50,651 --> 01:00:54,154 line:-1
app使用的各种情形下工作


1074
01:00:54,655 --> 01:00:58,692 line:-1
现在有了ARKit 2.0


1075
01:00:58,759 --> 01:01:01,628 line:-2
不再需要担忧环境贴图
会毁了AR体验


1076
01:01:02,930 --> 01:01:04,831 line:-1
环境贴图的更多信息


1077
01:01:04,898 --> 01:01:07,334 line:-2
还有ARKit 2.0的
另一个新特性


1078
01:01:07,401 --> 01:01:11,004 line:-2
请查阅Arsalan和Reinhard的演讲
名字是ARKit 2新特性


1079
01:01:12,539 --> 01:01:15,676 line:-2
为了结束CampfiAR
我们总结一下


1080
01:01:15,742 --> 01:01:18,078 line:-1
为营火添加最后修改


1081
01:01:19,313 --> 01:01:21,582 line:-1
用少量动画效果


1082
01:01:21,648 --> 01:01:24,751 line:-1
还有app今天讨论的这些技术


1083
01:01:25,085 --> 01:01:27,187 line:-1
CampfiAR已经制作好了


1084
01:01:27,621 --> 01:01:32,059 line:-2
如果有强烈外出的冲动
就能忍住冲动


1085
01:01:32,125 --> 01:01:33,894 line:-1
安全待在桌前


1086
01:01:33,961 --> 01:01:37,598 line:-1
享受模拟户外营火的乐趣


1087
01:01:38,098 --> 01:01:40,100 line:-1
谁还需要肾上腺素 不是这家伙


1088
01:01:42,135 --> 01:01:44,238 line:-1
今天讲了很多内容


1089
01:01:44,304 --> 01:01:47,708 line:-1
我想快速回顾开发app时


1090
01:01:47,774 --> 01:01:49,309 line:-1
要记住的重点


1091
01:01:49,743 --> 01:01:53,780 line:-2
记住app可能在真实世界
的各种情况下使用


1092
01:01:53,847 --> 01:01:55,382 line:-1
随时确保审美样式


1093
01:01:55,449 --> 01:01:57,751 line:-1
允许内容能在各种情况适用


1094
01:01:58,619 --> 01:02:01,822 line:-1
一旦决定要构造怎样的AR app


1095
01:02:01,889 --> 01:02:05,092 line:-1
然后考虑渲染预算


1096
01:02:05,158 --> 01:02:06,894 line:-1
尽可能优化


1097
01:02:06,960 --> 01:02:09,763 line:-1
获取最佳性能并减少电脑消耗


1098
01:02:10,464 --> 01:02:13,333 line:-1
最后利用各种材质属性


1099
01:02:13,400 --> 01:02:18,038 line:-2
还有内置的ARKit特性
让AR内容看起来出色


1100
01:02:18,105 --> 01:02:20,007 line:-1
以便震惊使用app的用户


1101
01:02:21,375 --> 01:02:24,211 line:-1
作为参考 这是今天用来


1102
01:02:24,278 --> 01:02:27,014 line:-2
构建CampfiAR的
材质属性的列表


1103
01:02:27,948 --> 01:02:31,385 line:-1
链接里有更多信息 谢谢

