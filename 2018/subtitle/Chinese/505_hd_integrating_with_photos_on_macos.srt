1
00:00:17,251 --> 00:00:22,890 line:0
（macOS上的Photos集成
演讲505）


2
00:00:22,956 --> 00:00:24,024 line:0
早上好


3
00:00:25,425 --> 00:00:26,260 line:-1
早上好


4
00:00:26,627 --> 00:00:27,728 line:-1
我的名字叫Eric Hanson


5
00:00:27,794 --> 00:00:30,931 line:-1
我是Photos平台的技术传播者


6
00:00:31,164 --> 00:00:34,868 line:-2
我今天会和Photos工程团队的
三位同事


7
00:00:34,935 --> 00:00:39,806 line:-2
来给你们介绍一下macOS上
你的app与Photos的集成


8
00:00:42,409 --> 00:00:44,611 line:-1
我们要介绍两个关键问题


9
00:00:46,079 --> 00:00:49,917 line:-2
第一个是对于我们去年在macOS
High Sierra上


10
00:00:49,983 --> 00:00:52,819 line:-2
所介绍的
Photos项目扩展API的更新


11
00:00:53,987 --> 00:00:58,625 line:-1
然后我们要介绍的是利用拖拽


12
00:00:59,159 --> 00:01:00,360 line:-1
来跟你的app交互


13
00:01:01,128 --> 00:01:04,031 line:-2
但是首先让我们来谈一下
Photo项目扩展


14
00:01:07,668 --> 00:01:11,572 line:-2
当iPhoto于2002年
首次发布的时候


15
00:01:12,306 --> 00:01:15,442 line:-1
Apple成为了首批允许人们


16
00:01:15,509 --> 00:01:19,980 line:-1
制作漂亮的书 然后是卡片与日历的


17
00:01:20,314 --> 00:01:21,748 line:-1
公司之一


18
00:01:24,718 --> 00:01:31,191 line:-2
而至今已有超过七千万的
照片书、卡片与日历


19
00:01:31,491 --> 00:01:33,594 line:-2
是使用iPhoto
和Photos制作出来的


20
00:01:37,397 --> 00:01:38,932 line:-1
但是与此同时


21
00:01:38,999 --> 00:01:43,470 line:-2
十六年的时间 我们一直在关注着
这个蓬勃发展的市场


22
00:01:44,004 --> 00:01:46,540 line:-1
用户现在已经有了很广泛的选择


23
00:01:46,607 --> 00:01:50,711 line:-1
利用他们的物理与数码照片


24
00:01:50,777 --> 00:01:52,679 line:-1
来创建所有这些内容


25
00:01:54,381 --> 00:01:58,085 line:-1
正是因为遵照这个很棒的生态系统


26
00:01:58,685 --> 00:02:00,554 line:-1
才能让我们在去年


27
00:02:00,621 --> 00:02:03,223 line:-1
推出了基于这个生态系统的


28
00:02:03,724 --> 00:02:05,726 line:-1
Photo项目扩展API


29
00:02:08,127 --> 00:02:10,297 line:-1
我们已经看到一些不错的扩展


30
00:02:11,298 --> 00:02:13,901 line:-1
例如 Mimeo Photos


31
00:02:14,301 --> 00:02:19,039 line:-2
它可以让你创建
高质量的书、卡片和日历


32
00:02:20,641 --> 00:02:24,244 line:-1
Whitewall可让你从照片中


33
00:02:24,311 --> 00:02:25,479 line:-1
创建画廊级别的装裱印刷品


34
00:02:26,680 --> 00:02:29,516 line:-2
我们还有Wix.com
这样的数字业务


35
00:02:29,583 --> 00:02:32,486 line:-1
可以让你非常轻松地创建出


36
00:02:32,553 --> 00:02:34,488 line:-1
可以跟朋友和家人分享的网络相册


37
00:02:36,390 --> 00:02:39,259 line:-1
我们现在还看到了一些新的扩展


38
00:02:39,760 --> 00:02:42,262 line:-1
就像是这个叫Motif的扩展


39
00:02:42,696 --> 00:02:48,101 line:-2
它是一个直接集成到Photos的
全新的本地化体验


40
00:02:48,769 --> 00:02:50,170 line:-1
它会在今年夏天推出


41
00:02:53,373 --> 00:02:57,611 line:-2
所有的这些选择
还有这个生态系统


42
00:02:57,978 --> 00:03:01,615 line:-1
对于你们开发者来说是个巨大的机遇


43
00:03:02,749 --> 00:03:06,620 line:-2
你可以利用这些丰富的元数据
上下文环境


44
00:03:06,687 --> 00:03:09,556 line:-1
以及我们传到你扩展中的图像


45
00:03:10,290 --> 00:03:11,325 line:-1
来构建内容


46
00:03:11,391 --> 00:03:14,928 line:-2
在macOS上
使用这个全栈的本地框架


47
00:03:15,229 --> 00:03:18,599 line:-1
来创造一些新奇的很棒的内容


48
00:03:19,066 --> 00:03:21,168 line:-1
让全世界的用户为之倾倒


49
00:03:25,005 --> 00:03:26,373 line:-1
正是因为这个原因


50
00:03:27,808 --> 00:03:29,376 line:-1
Apple宣布


51
00:03:29,576 --> 00:03:32,579 line:-1
我们会将整个打印产品业务


52
00:03:32,646 --> 00:03:35,883 line:-2
转移到macOS Mojave
这个生态系统上


53
00:03:37,618 --> 00:03:41,622 line:-1
用户可以使用项目扩展来创建书


54
00:03:41,688 --> 00:03:44,458 line:-1
卡片以及日历等所有这些内容


55
00:03:44,691 --> 00:03:47,895 line:-2
所有这些你利用扩展创造出的
让我们大吃一惊的内容


56
00:03:49,696 --> 00:03:54,801 line:-2
利用这个生态系统 我们给大家
构建出了更好的Photos体验


57
00:03:56,170 --> 00:03:59,006 line:-2
让我们来介绍下
扩展API中的新特性吧


58
00:04:00,474 --> 00:04:01,308 line:-1
首先


59
00:04:03,177 --> 00:04:04,178 line:-1
就是UI的内容


60
00:04:05,245 --> 00:04:07,281 line:-1
现在我们会获取你扩展的UI


61
00:04:07,347 --> 00:04:10,050 line:-2
并将其直接集成到
Photos app中


62
00:04:11,018 --> 00:04:14,888 line:-1
而你所熟悉的侧边栏一直都有


63
00:04:15,622 --> 00:04:19,358 line:-1
用户可以在你的扩展中创建一个项目


64
00:04:19,426 --> 00:04:21,394 line:-1
并且能从侧边栏抓取内容


65
00:04:21,461 --> 00:04:23,830 line:-1
直接拖拽到你的项目中就可以


66
00:04:24,965 --> 00:04:27,401 line:-1
他们也可以弹出照片搜索


67
00:04:28,202 --> 00:04:30,270 line:-1
搜索他们想要用的照片


68
00:04:30,537 --> 00:04:33,640 line:-1
然后复制并粘贴到在做的项目中


69
00:04:36,009 --> 00:04:38,979 line:-1
我们还可以让你直接集成


70
00:04:39,046 --> 00:04:42,516 line:-1
Photos强大的编辑工具


71
00:04:44,551 --> 00:04:47,387 line:-1
例如 你可以让用户


72
00:04:47,454 --> 00:04:50,357 line:-1
只需双击照片


73
00:04:51,425 --> 00:04:52,292 line:-1
就可以对其进行编辑


74
00:04:52,426 --> 00:04:55,662 line:-1
你现在用个一行的API就能实现


75
00:04:55,929 --> 00:04:59,633 line:-1
你可以调用Photos的编辑器


76
00:04:59,700 --> 00:05:04,371 line:-2
我们在照片载入的时候
将编辑会话推入了视图栈的顶端


77
00:05:04,438 --> 00:05:06,940 line:-1
让用户来进行想做的调整


78
00:05:07,374 --> 00:05:08,609 line:-1
我们还让他们可以访问


79
00:05:08,675 --> 00:05:11,812 line:-1
项目中用到的所有其他资源


80
00:05:12,546 --> 00:05:14,448 line:-1
当他们的编辑会话结束时


81
00:05:14,515 --> 00:05:16,183 line:-1
只需要点击完成按钮


82
00:05:16,683 --> 00:05:19,786 line:-1
他们就可以回到正在做的项目


83
00:05:20,354 --> 00:05:23,790 line:-1
你会得到库有变化的通知


84
00:05:23,857 --> 00:05:26,760 line:-2
你可以对其进行反应
并相应地更新你的UI


85
00:05:29,496 --> 00:05:30,998 line:-1
但是如果很难找到


86
00:05:32,366 --> 00:05:34,201 line:-1
app和你创建的扩展的话


87
00:05:34,268 --> 00:05:35,836 line:-1
那一切都没有意义了


88
00:05:36,303 --> 00:05:38,272 line:-1
因此我们要进而介绍下


89
00:05:38,338 --> 00:05:41,408 line:-1
你们app的可见性


90
00:05:42,276 --> 00:05:45,879 line:-2
Photos app可以通过
创建菜单连接到Mac App Store


91
00:05:47,114 --> 00:05:51,285 line:-2
而现在有了macOS Mojave上
全新的Mac App Store


92
00:05:51,351 --> 00:05:55,589 line:-1
我们实际上可以直接连接到


93
00:05:55,789 --> 00:05:59,493 line:-1
一个致力于扩展体验的故事


94
00:06:00,127 --> 00:06:02,296 line:-1
这是个一直会存在的故事


95
00:06:02,362 --> 00:06:06,400 line:-2
我们可以对其进行更新
在新的体验中起到重要作用


96
00:06:06,466 --> 00:06:09,770 line:-2
并且教用户用
新的方式来处理他们的照片


97
00:06:11,038 --> 00:06:13,140 line:-1
当用户从这个故事中


98
00:06:14,341 --> 00:06:16,143 line:-1
下载了一个app时


99
00:06:16,777 --> 00:06:19,313 line:-1
他们下载的是包含了扩展的app


100
00:06:20,080 --> 00:06:25,419 line:-2
按原来的经验
这可能会让你们开发者要花时间


101
00:06:25,485 --> 00:06:27,788 line:-1
教用户如何在你的独立app中


102
00:06:27,855 --> 00:06:29,890 line:-1
使用Photos的扩展


103
00:06:30,190 --> 00:06:31,959 line:-1
但我们觉得可以做得更好


104
00:06:32,326 --> 00:06:36,096 line:-2
如果用户下载了app以后
马上就能获得


105
00:06:36,163 --> 00:06:38,498 line:-2
Photos中的项目
创建体验不是很好吗？


106
00:06:39,333 --> 00:06:40,734 line:-1
我们正在使其成为现实


107
00:06:41,902 --> 00:06:44,505 line:-2
我们可以在Photos中
加入定制的URL方案


108
00:06:44,771 --> 00:06:48,342 line:-1
你可以传入你的扩展标识符


109
00:06:48,709 --> 00:06:51,645 line:-1
或是传入一个分类


110
00:06:52,479 --> 00:06:56,517 line:-1
Photos会从后台到前台来


111
00:06:56,950 --> 00:07:00,921 line:-1
并且可以选择想显示给用户的扩展


112
00:07:01,955 --> 00:07:05,125 line:-1
所以它们在首次启动的时候


113
00:07:05,192 --> 00:07:06,593 line:-1
就马上被带入创建的体验了


114
00:07:06,660 --> 00:07:07,928 line:-1
我们觉得这很棒


115
00:07:11,431 --> 00:07:12,499 line:-1
最后


116
00:07:12,566 --> 00:07:14,401 line:-1
当他们创建项目的时候


117
00:07:15,102 --> 00:07:17,871 line:-1
我们想让项目运行在适合的地方


118
00:07:18,805 --> 00:07:21,041 line:-1
就在用户的Photo库中


119
00:07:22,109 --> 00:07:23,610 line:-1
我们实际上是这么实现的


120
00:07:23,677 --> 00:07:26,013 line:-1
我们在Photos中有项目总览


121
00:07:26,079 --> 00:07:28,815 line:-1
可以让用户看到他们创建的所有内容


122
00:07:28,882 --> 00:07:33,687 line:-2
而且现在我们允许该扩展
为每个项目创建一个定制的预览


123
00:07:33,954 --> 00:07:37,624 line:-1
该预览可以呈现出项目是什么样子的


124
00:07:37,824 --> 00:07:39,660 line:-1
以这个照片为例


125
00:07:41,361 --> 00:07:44,498 line:-1
用户不仅能通过双击其中的一个项目


126
00:07:44,565 --> 00:07:47,267 line:-1
来返回到你的扩展并继续工作


127
00:07:47,801 --> 00:07:50,270 line:-1
还可以从其他项目来创建项目


128
00:07:50,637 --> 00:07:53,507 line:-2
他们可以通过选择项目
进入创建菜单


129
00:07:53,574 --> 00:07:55,108 line:-1
来从中创建一些新的内容


130
00:07:55,342 --> 00:07:57,344 line:-1
我们会尽我们所能的将所有东西传入


131
00:07:57,744 --> 00:07:59,513 line:-1
来帮助你的扩展


132
00:07:59,913 --> 00:08:02,282 line:-1
让你以良好的势头开始


133
00:08:02,950 --> 00:08:06,253 line:-2
但是在Apple项目中
我们会做得更多


134
00:08:06,320 --> 00:08:07,521 line:-1
确实是的


135
00:08:08,522 --> 00:08:11,225 line:-1
我们逐张照片


136
00:08:11,291 --> 00:08:14,728 line:-2
逐页地发给你
就以它们所呈现的布局那样


137
00:08:14,962 --> 00:08:18,665 line:-2
以便可以让你的扩展
可以从Apple项目


138
00:08:18,732 --> 00:08:20,267 line:-1
创建一个完全的转换体验


139
00:08:20,501 --> 00:08:22,603 line:-1
我们强烈建议你们这么做


140
00:08:25,272 --> 00:08:27,941 line:-1
这就是从UI层面高度


141
00:08:28,008 --> 00:08:29,376 line:-1
来介绍的新内容


142
00:08:29,443 --> 00:08:31,111 line:-1
但我还想更深入介绍一下


143
00:08:31,178 --> 00:08:33,347 line:-1
我想请我的同事


144
00:08:33,413 --> 00:08:36,183 line:-2
Photos工程团队的Tobias Conradi
来给你们介绍一下


145
00:08:36,250 --> 00:08:37,083 line:-1
Tobias


146
00:08:42,121 --> 00:08:43,991 line:-1
早上好 谢谢 Eric


147
00:08:44,057 --> 00:08:46,093 line:-2
你们好 我叫
Tobias Conradi


148
00:08:46,159 --> 00:08:47,494 line:-1
我是Photos团队的工程师


149
00:08:47,561 --> 00:08:50,330 line:-1
我会详细介绍一些我们对于


150
00:08:50,397 --> 00:08:52,165 line:-1
Photos项目扩展所做的修改


151
00:08:52,833 --> 00:08:54,701 line:-1
首先就是创建菜单


152
00:08:55,135 --> 00:08:57,671 line:-2
当我们首次在macOS
High Sierra上


153
00:08:57,738 --> 00:08:59,206 line:-1
引入Photos项目扩展时


154
00:08:59,273 --> 00:09:02,910 line:-2
我们将所有扩展以平面列表的形式
放到了创建菜单里


155
00:09:03,177 --> 00:09:05,512 line:-1
但结果是 有时候


156
00:09:05,579 --> 00:09:08,649 line:-1
仅凭扩展的名字是很难猜到


157
00:09:08,715 --> 00:09:10,884 line:-1
你要创建的哪种项目的


158
00:09:11,451 --> 00:09:13,453 line:-1
我们想改善用户体验


159
00:09:13,520 --> 00:09:16,323 line:-1
所以我们引入了项目分类


160
00:09:16,990 --> 00:09:20,494 line:-2
macOS Mojave中
新的创建菜单看起来是这样的


161
00:09:20,561 --> 00:09:24,665 line:-1
我们在创建菜单中有分类和子菜单


162
00:09:25,065 --> 00:09:28,135 line:-1
我们今年引入的分类有书籍


163
00:09:28,202 --> 00:09:32,506 line:-2
日历、卡片、墙面装饰
印刷品、幻灯片展示


164
00:09:32,573 --> 00:09:35,943 line:-2
还有不适用于这些分类扩展的
其他分类


165
00:09:37,511 --> 00:09:40,414 line:-2
现在用户就可以带着
明确的目的来到菜单中了


166
00:09:40,480 --> 00:09:43,650 line:-1
例如 我想要创建墙面装饰


167
00:09:44,117 --> 00:09:48,789 line:-2
用户可以看到
支持该类项目的所有扩展


168
00:09:49,957 --> 00:09:52,025 line:-1
那么扩展是如何显示在分类中的呢？


169
00:09:52,693 --> 00:09:56,196 line:-2
我们在扩展Info.plist的
扩展属性字典中


170
00:09:56,263 --> 00:09:58,065 line:-1
有一个新的键值


171
00:09:58,131 --> 00:09:59,967 line:-2
它叫做
PHProjectCategory


172
00:10:00,033 --> 00:10:05,105 line:-2
该键的值就是
所支持的项目分类的列表


173
00:10:05,172 --> 00:10:07,708 line:-1
在本例中就是墙面装饰和其他


174
00:10:10,110 --> 00:10:12,779 line:-1
用户从扩展中所看到的下一个内容


175
00:10:12,846 --> 00:10:14,381 line:-1
就是类型选取表单


176
00:10:14,715 --> 00:10:16,617 line:-1
你给我们提供此数据


177
00:10:16,683 --> 00:10:22,823 line:-2
我们就会显示
你所提供的项目类型描述


178
00:10:23,524 --> 00:10:26,126 line:-1
我们去年介绍的那个API的问题


179
00:10:26,193 --> 00:10:31,098 line:-1
就是它有点难以提供最新的价格信息


180
00:10:31,164 --> 00:10:32,366 line:-1
或是当前的报价


181
00:10:32,566 --> 00:10:38,005 line:-2
这就是为什么我们引入了
新改进的 允许动态更新的API


182
00:10:38,071 --> 00:10:39,406 line:-1
它看起来是这样的


183
00:10:40,107 --> 00:10:42,042 line:-1
除了动态更新


184
00:10:42,109 --> 00:10:46,013 line:-1
我们现在还支持在表单底部


185
00:10:46,079 --> 00:10:47,614 line:-1
显示一个定制的页脚文本信息


186
00:10:47,681 --> 00:10:51,084 line:-2
如果你需要的话
可以在那里显示法律信息


187
00:10:53,820 --> 00:10:58,358 line:-2
在API层面上
新的动态API看起来是这样的


188
00:10:59,159 --> 00:11:03,130 line:-2
我们的新方法是在
projectExtensionsController协议中


189
00:11:03,530 --> 00:11:05,799 line:-1
我们请求了一个数据资源


190
00:11:05,866 --> 00:11:07,868 line:-1
而不是产品类型描述的列表


191
00:11:07,935 --> 00:11:11,738 line:-1
并且从扩展被选中的菜单中


192
00:11:12,139 --> 00:11:13,373 line:-1
传入分类


193
00:11:13,440 --> 00:11:15,142 line:-1
还有一个使其无效化的对象


194
00:11:15,776 --> 00:11:17,611 line:-1
在你返回数据源后


195
00:11:17,945 --> 00:11:20,981 line:-1
我们会为项目类型描述


196
00:11:21,048 --> 00:11:22,783 line:-2
以及可选的页脚文本信息
来请求该数据源


197
00:11:23,350 --> 00:11:27,487 line:-2
每当你的扩展需要将返回的信息
无效化处理时


198
00:11:27,554 --> 00:11:30,691 line:-2
你就可以用这个无效化器
来让项目类型描述


199
00:11:30,757 --> 00:11:33,260 line:-2
或是页脚文本信息变得无效
而且在需要的时候


200
00:11:33,327 --> 00:11:36,163 line:-2
Photos会从数据源
重新获取数据


201
00:11:36,230 --> 00:11:38,699 line:-1
并且在UI中显示最新的数据


202
00:11:42,302 --> 00:11:44,638 line:-2
下一个主题是
projectInfo


203
00:11:45,172 --> 00:11:47,441 line:-2
projectInfo
是关于该项目内容的


204
00:11:47,508 --> 00:11:50,344 line:-1
结构化补充信息


205
00:11:50,711 --> 00:11:53,113 line:-1
它会结构化到section


206
00:11:53,180 --> 00:11:56,884 line:-2
以及反映了创造层级的
sectionContents中


207
00:11:57,551 --> 00:12:01,688 line:-1
元素有着基本的布局暗示


208
00:12:01,755 --> 00:12:05,259 line:-1
还有资源的权重和分数


209
00:12:05,325 --> 00:12:10,898 line:-2
而且资源中还包含了资源的
意向区域中的重要区域


210
00:12:11,532 --> 00:12:14,368 line:-2
这就是对于projectInfo
的一个大概介绍


211
00:12:14,434 --> 00:12:16,436 line:-2
欲了解
projectInfo更多内容


212
00:12:16,503 --> 00:12:20,274 line:-2
我强烈建议你们看下去年的演讲
“Photos API新特性”


213
00:12:24,511 --> 00:12:29,783 line:-2
projectInfo在项目
开始时就在你的扩展中


214
00:12:30,450 --> 00:12:34,988 line:-1
每当用户将新的资源加入到项目中时


215
00:12:35,055 --> 00:12:38,158 line:-2
projectInfo就会过期
因为它是个静态对象


216
00:12:38,725 --> 00:12:41,628 line:-2
我们想引入新的API
来解决这个问题


217
00:12:41,695 --> 00:12:43,697 line:-2
新的API位于
projectExtensionsContext


218
00:12:43,764 --> 00:12:46,200 line:-1
它会用来获取更新的项目信息


219
00:12:46,266 --> 00:12:47,935 line:-1
以及项目当前的状态


220
00:12:48,635 --> 00:12:49,770 line:-1
让我们以此为例


221
00:12:49,837 --> 00:12:52,706 line:-2
我们会在项目创建时
将projectInfo给你


222
00:12:53,040 --> 00:12:55,876 line:-2
然后用户就可以向项目
加入更多的资源


223
00:12:55,943 --> 00:12:58,846 line:-2
你可以调用
updatedProjectInfo


224
00:12:58,912 --> 00:13:02,950 line:-2
还有projectInfo
我们会更新所有现有的分区


225
00:13:03,016 --> 00:13:05,719 line:-1
并且为添加的资源附上一个新的分区


226
00:13:06,119 --> 00:13:09,189 line:-2
如果用户添加了更多的资源
你可以进行同样的操作


227
00:13:09,256 --> 00:13:12,259 line:-2
传入项目信息
我们会更新现有的分区


228
00:13:12,626 --> 00:13:15,095 line:-1
并且为添加的资源附上一个新的分区


229
00:13:17,064 --> 00:13:20,334 line:-2
让我们更深入地介绍
projectInfo中一个元素


230
00:13:20,400 --> 00:13:21,802 line:-1
意向区域


231
00:13:22,302 --> 00:13:26,240 line:-2
意向区域
表明了资源中重要的区域


232
00:13:26,306 --> 00:13:28,141 line:-1
例如 人们的脸


233
00:13:28,642 --> 00:13:32,646 line:-1
如果相同的人出现在了多张图片中


234
00:13:32,713 --> 00:13:37,251 line:-2
对于相同人的
意向区域标识符就是相同的


235
00:13:38,252 --> 00:13:40,187 line:-1
让我们暂时关注于B这个人


236
00:13:41,822 --> 00:13:44,791 line:-1
除了意向区域标识符


237
00:13:44,858 --> 00:13:48,295 line:-1
我们还有意向区域的权重


238
00:13:48,362 --> 00:13:54,234 line:-1
表明了项目中意向区域的重要性


239
00:13:55,536 --> 00:13:59,673 line:-2
如果你想决定要选
哪张照片作为某个人


240
00:13:59,740 --> 00:14:03,544 line:-2
或是意向区域的话
用API来实现的话有点困难


241
00:14:04,211 --> 00:14:06,780 line:-2
这就是为什么我们
加入了一个新的质量分数


242
00:14:06,847 --> 00:14:11,385 line:-1
它代表了资源中意向区域的质量


243
00:14:12,186 --> 00:14:16,089 line:-1
在左手边 B有点失焦了


244
00:14:16,156 --> 00:14:19,259 line:-2
而且不在图片的中间
在右手边


245
00:14:19,326 --> 00:14:20,761 line:-1
他对上焦了


246
00:14:20,827 --> 00:14:23,664 line:-1
这就是为什么右手边的质量分


247
00:14:23,730 --> 00:14:25,032 line:-1
比左手边更高一些


248
00:14:27,301 --> 00:14:28,969 line:-2
在API层面上
它看起来是这样的


249
00:14:29,036 --> 00:14:30,404 line:-1
我们有这个替换的权重


250
00:14:30,470 --> 00:14:34,908 line:-2
也就是在项目环境中
意向区域的重要性


251
00:14:35,142 --> 00:14:37,811 line:-1
然后就是资源中的质量


252
00:14:39,980 --> 00:14:42,049 line:-1
我想给你们做一个快速的演示


253
00:14:42,115 --> 00:14:44,218 line:-2
看看你可以如何利用
你扩展中的意向区域


254
00:14:44,284 --> 00:14:46,587 line:-1
来改善体验


255
00:14:46,653 --> 00:14:50,457 line:-2
并在监听库通知
在资源或是项目产生变化的时候


256
00:14:50,524 --> 00:14:51,792 line:-1
会获得通知


257
00:14:52,125 --> 00:14:55,429 line:-2
而且还使用了一个新的
updateProjectInfo API


258
00:15:03,704 --> 00:15:04,738 line:-1
好了


259
00:15:05,305 --> 00:15:08,675 line:-1
我创建了一个幻灯片显示扩展


260
00:15:09,476 --> 00:15:11,678 line:-1
为了给你们看看它是什么样的


261
00:15:11,745 --> 00:15:14,214 line:-1
我在相册中选取了一些资源


262
00:15:14,815 --> 00:15:17,885 line:-2
并且会利用该扩展
来创建一个新的项目


263
00:15:20,320 --> 00:15:22,923 line:-2
这个扩展有两个视图
一个是概览


264
00:15:22,990 --> 00:15:25,292 line:-1
它包含了项目中的所有资源


265
00:15:25,425 --> 00:15:29,563 line:-2
另一个是播放该幻灯片
显示的回放程序


266
00:15:31,365 --> 00:15:36,570 line:-2
你可能会注意到 该幻灯片显示
一直会聚焦于图片的中心


267
00:15:36,637 --> 00:15:37,938 line:-1
这是有点无聊的


268
00:15:38,672 --> 00:15:40,207 line:-1
我想用意向区域


269
00:15:40,274 --> 00:15:43,443 line:-1
来聚焦于照片中有意思的区域


270
00:15:44,945 --> 00:15:47,247 line:-1
让我们切换到Xcode来修复一下


271
00:15:50,150 --> 00:15:54,288 line:-2
在我的资源模型里
有preferredZoomRect的属性


272
00:15:54,354 --> 00:15:58,225 line:-2
它总会返回相同的值
这是有点无聊的


273
00:15:58,358 --> 00:16:02,029 line:-1
让我们在代码中替换一下它


274
00:16:06,633 --> 00:16:10,237 line:-2
我要做的是从资源元素中
获取所有的意向区域


275
00:16:10,304 --> 00:16:14,308 line:-1
且按照它们的权重和质量来进行排序


276
00:16:14,808 --> 00:16:18,011 line:-1
从意向区域的排好序的列表中


277
00:16:18,078 --> 00:16:20,914 line:-1
我们想获得最后的元素并返回它的值


278
00:16:22,149 --> 00:16:24,251 line:-1
如果我们现在重新运行这个扩展


279
00:16:38,131 --> 00:16:43,403 line:-2
我们就会一直聚焦于
资源中最重要的意向区域


280
00:16:44,004 --> 00:16:45,672 line:-1
我觉得这样看起来要好得多


281
00:16:48,809 --> 00:16:51,778 line:-1
接下来我想向项目中再多加一些资源


282
00:16:51,845 --> 00:16:55,516 line:-2
我从侧边栏抓取了一个相册
并将它拖拽到扩展上


283
00:16:55,582 --> 00:16:56,950 line:-1
在指针附近有个加号


284
00:16:57,017 --> 00:16:59,052 line:-2
看起来就像是
扩展接受了这次拖拽操作


285
00:17:00,120 --> 00:17:02,489 line:-2
我松开鼠标按键的话
什么都没有发生


286
00:17:02,856 --> 00:17:04,758 line:-1
资源会被加入到项目中


287
00:17:04,825 --> 00:17:07,994 line:-1
但是我的扩展并没有列出变化通知


288
00:17:08,060 --> 00:17:11,464 line:-1
而且也不知道加入到项目中的资源


289
00:17:12,633 --> 00:17:14,768 line:-2
让我们切换回Xcode
来修复一下吧


290
00:17:16,670 --> 00:17:21,642 line:-2
在我的projectViewController中
我有begin和resumeProject方法


291
00:17:21,708 --> 00:17:24,810 line:-2
它们是projectExtensionController
协议的一部分


292
00:17:25,078 --> 00:17:28,182 line:-1
这里我想要注册观察到的变化


293
00:17:31,051 --> 00:17:34,054 line:-1
我们在两个方法中有着相同的代码


294
00:17:36,490 --> 00:17:39,626 line:-2
首先我们获得了
感兴趣的PhotoKit对象


295
00:17:39,893 --> 00:17:43,697 line:-1
我们对添加到项目中的资源感兴趣


296
00:17:43,764 --> 00:17:47,000 line:-2
所以我们获取了一份项目中
所有资源的结果


297
00:17:47,534 --> 00:17:51,338 line:-1
然后我们注册了库的资源变化观察者


298
00:17:51,772 --> 00:17:54,708 line:-1
在项目结束的时候 我们再取消注册


299
00:17:56,043 --> 00:17:59,613 line:-2
由于Xcode提示我们
没有实现这个协议


300
00:17:59,680 --> 00:18:01,181 line:-1
我们要将变化观察者


301
00:18:01,248 --> 00:18:02,449 line:-1
加到


302
00:18:02,883 --> 00:18:05,919 line:-1
下面这里


303
00:18:09,323 --> 00:18:11,725 line:-2
我们实现了
photoLibraryDidChange


304
00:18:12,693 --> 00:18:14,094 line:-1
PhotoLibraryDidChange


305
00:18:14,161 --> 00:18:17,397 line:-2
会在照片库中有内容
发生变化的时候被调用


306
00:18:18,098 --> 00:18:22,603 line:-2
我们会以方法参数的形式
获得changeInstance


307
00:18:23,537 --> 00:18:25,472 line:-2
我们可以请求
changeInstance


308
00:18:25,539 --> 00:18:28,475 line:-2
获得我们感兴趣的
changeDetails的一个对象


309
00:18:28,842 --> 00:18:33,146 line:-2
我们对项目中
fetchAllAssets的变化感兴趣


310
00:18:33,213 --> 00:18:35,082 line:-2
所以我们要传入
fetchResult


311
00:18:35,716 --> 00:18:38,785 line:-2
如果返回了
changeDetails


312
00:18:38,852 --> 00:18:45,325 line:-2
我们会利用fetchResultsAfterChanges
来更新本地缓存的结果


313
00:18:45,559 --> 00:18:49,630 line:-2
并获得projectExtensionContext
以及调用updatedProjectInfo


314
00:18:50,631 --> 00:18:52,733 line:-1
传入我们的项目信息


315
00:18:53,634 --> 00:18:56,336 line:-2
在updatedProjectInfo
被返回给我们之后


316
00:18:56,403 --> 00:18:58,372 line:-1
我们可以调用相同的设置代码


317
00:18:58,438 --> 00:19:01,175 line:-1
但是你可以实现更复杂的功能


318
00:19:02,309 --> 00:19:04,211 line:-1
让我们重新运行下这个项目


319
00:19:19,660 --> 00:19:20,661 line:-1
好了


320
00:19:23,530 --> 00:19:26,099 line:-1
我现在就可以从侧边栏拖拽相册


321
00:19:26,600 --> 00:19:32,072 line:-2
把它放到扩展
并且将资源添加到项目中


322
00:19:32,139 --> 00:19:36,710 line:-1
而且扩展会监听照片库的变化


323
00:19:36,777 --> 00:19:40,547 line:-2
在其变化以及我们更新了
项目信息的时候获得通知


324
00:19:48,488 --> 00:19:51,725 line:-1
正如你们所见 只要几步


325
00:19:51,792 --> 00:19:56,463 line:-2
我就可以通过使用
projectInfo


326
00:19:56,530 --> 00:19:58,866 line:-2
及projectInfo中
意向区域改进扩展


327
00:19:58,932 --> 00:20:02,269 line:-1
还可以注册资源变化观察器


328
00:20:02,336 --> 00:20:05,506 line:-1
在照片库有任何变化的时候获得通知


329
00:20:05,572 --> 00:20:07,474 line:-1
并更新我的项目信息


330
00:20:10,444 --> 00:20:12,946 line:-1
我想强调集成中的两个内容


331
00:20:13,280 --> 00:20:17,918 line:-2
Photos会默认处理
从Photos到扩展中


332
00:20:17,985 --> 00:20:20,654 line:-1
资源的复制和粘贴


333
00:20:20,854 --> 00:20:23,824 line:-1
但是如果你的扩展也想实现粘贴区域


334
00:20:23,891 --> 00:20:26,627 line:-2
也就是你在处理文字之类的
内容时所要做的那样


335
00:20:26,693 --> 00:20:28,161 line:-1
我们需要你的帮助以了解


336
00:20:28,228 --> 00:20:30,664 line:-1
你的扩展应该什么时候处理粘贴区域


337
00:20:30,731 --> 00:20:33,200 line:-2
以及Photos
应该什么时候处理粘贴区域


338
00:20:33,634 --> 00:20:39,306 line:-2
因此如果菜单操作是粘贴
请实现validateMenuItem


339
00:20:39,373 --> 00:20:43,210 line:-2
检查你的扩展是否可以
处理当前剪切板中的内容


340
00:20:43,343 --> 00:20:47,514 line:-2
如果不能 就返回假
我们就会将其作为Photos处理


341
00:20:47,581 --> 00:20:49,449 line:-1
否则的话 如果你要处理它


342
00:20:49,516 --> 00:20:52,719 line:-2
就返回真 那么你的
Photos就会进行粘贴操作


343
00:20:54,121 --> 00:20:56,290 line:-1
对于拖拽的操作也是类似的


344
00:20:56,657 --> 00:21:02,563 line:-2
Photos会默认处理
PhotoKit对象到扩展的拖拽


345
00:21:02,796 --> 00:21:05,399 line:-1
但是如果你注册了错误类型的话


346
00:21:05,465 --> 00:21:07,201 line:-1
你的扩展可能会受到干扰


347
00:21:07,267 --> 00:21:11,004 line:-2
所以请留意注册到
你扩展的内容的类型


348
00:21:11,238 --> 00:21:14,308 line:-1
只注册扩展内部拖拽


349
00:21:14,374 --> 00:21:16,710 line:-1
或是你确实想处理的拖拽


350
00:21:16,777 --> 00:21:20,080 line:-2
请在使用的时候
特别留意WKWebView


351
00:21:20,147 --> 00:21:23,917 line:-1
因为它默认会注册一堆拖拽类型


352
00:21:26,053 --> 00:21:28,789 line:-1
这就是关于照片项目扩展的所有内容


353
00:21:28,856 --> 00:21:33,894 line:-2
现在让我将讲台交给我的同事
Sanaa 让她来介绍一下


354
00:21:33,961 --> 00:21:36,730 line:-2
以第三方app来
与Photos进行交互


355
00:21:36,964 --> 00:21:38,031 line:-1
谢谢


356
00:21:40,601 --> 00:21:41,635 line:-1
谢谢 Tobias


357
00:21:42,402 --> 00:21:43,570 line:-1
大家好


358
00:21:43,804 --> 00:21:44,671 line:-1
我叫Sanaa


359
00:21:44,738 --> 00:21:47,241 line:-2
我是一名Photos的工程师
今天我会和我的同事Joachim


360
00:21:47,307 --> 00:21:50,010 line:-1
来介绍一些最佳的实践


361
00:21:50,077 --> 00:21:52,613 line:-2
有关我们利用拖拽
在macOS的app间


362
00:21:52,679 --> 00:21:55,716 line:-1
接收和提供图片或是视频


363
00:21:57,551 --> 00:22:00,420 line:-1
拖拽是将物品从一处移动到另一处的


364
00:22:00,487 --> 00:22:02,523 line:-1
最直观和简单的方式之一


365
00:22:03,257 --> 00:22:06,326 line:-1
但有时你可能会遇到这样的情况


366
00:22:10,130 --> 00:22:12,132 line:-1
如果你的app中出现了这样的问题


367
00:22:12,199 --> 00:22:14,034 line:-1
那你就来对地方了


368
00:22:14,601 --> 00:22:15,536 line:-1
那么


369
00:22:18,505 --> 00:22:21,041 line:-1
让我们退一步来思考下发生了什么


370
00:22:22,776 --> 00:22:25,946 line:-2
macOS上的拖拽会用到
NSPasteboard


371
00:22:26,013 --> 00:22:28,549 line:-1
当它被封装到剪切板的时候


372
00:22:28,615 --> 00:22:31,185 line:-1
读写数据会在接收和提供app时


373
00:22:31,251 --> 00:22:33,820 line:-1
发生于主交易中


374
00:22:34,254 --> 00:22:38,192 line:-2
在过去 由于只有本地的数据
才会存储在本地磁盘上


375
00:22:38,258 --> 00:22:41,261 line:-1
你可以把文件的URL放到剪切板中


376
00:22:41,428 --> 00:22:43,163 line:-1
但是现在事情有了变化


377
00:22:43,330 --> 00:22:48,869 line:-2
如果用户在使用iCloud的话
图片或者视频可能并没有在磁盘上


378
00:22:48,936 --> 00:22:52,773 line:-2
所以在Photos中 我们需要
在将文件URL放到剪切板中之前


379
00:22:52,840 --> 00:22:55,375 line:-1
首先下载完全分辨率的项目文件


380
00:22:56,643 --> 00:23:00,581 line:-2
而且Photos
是尊重拖拽的隐私设置的


381
00:23:00,647 --> 00:23:04,251 line:-1
所以如果用户选择保留位置信息


382
00:23:04,318 --> 00:23:08,488 line:-2
Photos就会导出一个
不包含此元数据的新文件


383
00:23:09,223 --> 00:23:11,992 line:-1
下载和导出文件都要花时间


384
00:23:12,059 --> 00:23:14,027 line:-1
你不应该在主交易中这么做


385
00:23:14,428 --> 00:23:17,431 line:-1
因为这样会阻塞你的app UI


386
00:23:19,499 --> 00:23:23,403 line:-2
为了能实现这一功能
我们需要一个异步API


387
00:23:24,471 --> 00:23:29,042 line:-2
其实我们有这么一个API
它叫文件承诺


388
00:23:30,344 --> 00:23:32,913 line:-1
文件承诺是一种承诺


389
00:23:32,980 --> 00:23:36,617 line:-2
某个还没有出现在
磁盘上的特定类型文件


390
00:23:36,683 --> 00:23:38,986 line:-1
会被写入到一个提供的位置上


391
00:23:39,620 --> 00:23:43,156 line:-1
它还允许发送者在后台写文件


392
00:23:45,559 --> 00:23:48,428 line:-1
有两种与文件承诺进行交互的方式


393
00:23:48,829 --> 00:23:52,099 line:-2
通过NSFilePromiseReceiver
来接收文件


394
00:23:52,165 --> 00:23:55,202 line:-2
以及通过NSFilePromiseProvider
来提供文件


395
00:23:55,936 --> 00:23:59,139 line:-1
这两个先进的API在两年前


396
00:23:59,206 --> 00:24:00,240 line:-2
就跟macOS Sierra
一起推出了


397
00:24:02,409 --> 00:24:04,945 line:-1
首先让我们看看接收文件承诺


398
00:24:08,849 --> 00:24:12,653 line:-1
基本原则就是app支持的拖拽


399
00:24:12,719 --> 00:24:16,757 line:-1
应该一直接受文件URL和文件承诺


400
00:24:16,823 --> 00:24:18,025 line:-1
我会解释下为什么


401
00:24:20,027 --> 00:24:22,729 line:-1
有很多的app提供了文件承诺


402
00:24:23,931 --> 00:24:27,167 line:-2
Photos会在拖拽图片的时候
使用文件承诺


403
00:24:27,234 --> 00:24:29,169 line:-1
对于视频或是整个相册也是这样


404
00:24:29,670 --> 00:24:32,272 line:-2
从macOS Mojave开始
你可以…


405
00:24:32,339 --> 00:24:36,443 line:-1
我们添加了拖拽人或是回忆的功能


406
00:24:36,910 --> 00:24:39,780 line:-2
我们并不是唯一使用
文件承诺的app


407
00:24:40,614 --> 00:24:43,784 line:-2
邮件会在将短信拖拽到
访达的时候使用文件承诺


408
00:24:44,117 --> 00:24:46,820 line:-1
以保存包括附件在内的整个邮件


409
00:24:47,754 --> 00:24:50,791 line:-2
Safari会在拖拽图片的时候
使用文件承诺


410
00:24:51,091 --> 00:24:56,396 line:-2
Keynote会在拖拽幻灯片
的时候使用文件承诺


411
00:24:56,463 --> 00:24:58,932 line:-1
创建一个包含了这些幻灯片的新文档


412
00:25:00,501 --> 00:25:03,370 line:-1
如果你想从这些app中接收文件


413
00:25:03,437 --> 00:25:07,574 line:-2
或是有app提供了文件承诺的话
你的app需要读取这些文件承诺


414
00:25:07,641 --> 00:25:09,142 line:-1
并且需要接受这些文件


415
00:25:09,810 --> 00:25:12,479 line:-1
让我们通过代码来看看如何实现吧


416
00:25:15,048 --> 00:25:18,685 line:-1
首先在设置时 视图必须通过调用


417
00:25:18,752 --> 00:25:21,421 line:-1
来注册接受的类型


418
00:25:21,488 --> 00:25:24,424 line:-1
为了接受文件承诺


419
00:25:24,491 --> 00:25:27,961 line:-2
你可以使用
NSFilePromiseReceiver上的


420
00:25:28,028 --> 00:25:29,730 line:-2
类属性
readableDraggedTypes


421
00:25:32,032 --> 00:25:38,772 line:-2
当执行拖拽操作 枚举或是
使用draggingItems时


422
00:25:39,439 --> 00:25:42,209 line:-2
你应该添加对于
NSFilePromiseReceiver的支持


423
00:25:42,643 --> 00:25:44,611 line:-1
以确保首先对它进行处理


424
00:25:45,145 --> 00:25:49,650 line:-2
因为它是最有可能包含
最高质量呈现的


425
00:25:52,386 --> 00:25:56,523 line:-2
对于每个filePromiseReceiver
你要调用承诺


426
00:25:57,257 --> 00:25:58,926 line:-1
当文件准备好的时候


427
00:25:59,693 --> 00:26:03,764 line:-2
读取器块会在所提供的
operationQueue上被调用


428
00:26:03,830 --> 00:26:05,399 line:-1
你可以在那里对文件进行处理


429
00:26:07,501 --> 00:26:11,171 line:-2
提供后台operationQueue
是很重要的


430
00:26:12,406 --> 00:26:17,077 line:-1
可以在等待文件下载完成


431
00:26:18,078 --> 00:26:21,515 line:-2
下载或被源文件写入时
不会阻塞主交易


432
00:26:22,249 --> 00:26:26,186 line:-1
因为这个过程会花很长时间


433
00:26:26,753 --> 00:26:30,724 line:-2
你不应该在缓慢的网络中
下载文件的时候使用它


434
00:26:33,560 --> 00:26:38,532 line:-2
为了获得更好的用户体验
你需要显示一个载入活动


435
00:26:39,099 --> 00:26:40,300 line:-1
当文件准备好的时候


436
00:26:40,367 --> 00:26:43,604 line:-1
你可以用真实的内容来替换UI


437
00:26:45,873 --> 00:26:48,442 line:-1
这里你可以看到一个邮件的例子


438
00:26:49,576 --> 00:26:52,446 line:-1
在等待通过文件承诺来下载图片时


439
00:26:52,513 --> 00:26:55,816 line:-1
会显示一个占位的URL


440
00:27:01,121 --> 00:27:03,490 line:-1
这就是接收文件承诺的内容


441
00:27:03,557 --> 00:27:06,593 line:-1
让我们看下要如何提供文件承诺


442
00:27:07,094 --> 00:27:10,931 line:-1
如果你想发送到拖拽的数据


443
00:27:11,164 --> 00:27:12,599 line:-1
在磁盘上还没有


444
00:27:12,666 --> 00:27:15,602 line:-1
那么你应该在app进行实现


445
00:27:16,436 --> 00:27:21,775 line:-2
让我们通过看这个API
来看下应该如何实现


446
00:27:25,646 --> 00:27:30,184 line:-2
首先你需要创建一个
NSFilePromiseProvider实例


447
00:27:32,486 --> 00:27:35,189 line:-2
你应该为每个承诺的文件
创建一个实例


448
00:27:35,422 --> 00:27:38,992 line:-1
在将filePromiseProvider对象


449
00:27:39,059 --> 00:27:42,262 line:-2
写入到剪切板之前
它必须包含一个类型


450
00:27:42,596 --> 00:27:43,764 line:-1
以及一个代理


451
00:27:44,298 --> 00:27:47,701 line:-1
这些代理会将文件写入磁盘中


452
00:27:48,368 --> 00:27:52,840 line:-2
在NSFilePromiseProvider
代理中只有三个方法


453
00:27:53,006 --> 00:27:56,043 line:-1
第一个方法由拖拽的目的地所调用


454
00:27:56,777 --> 00:27:59,613 line:-2
并且返回的是文件名
而不是整个路径


455
00:27:59,980 --> 00:28:06,453 line:-2
第二个方法会返回一个
operationQueue


456
00:28:06,520 --> 00:28:10,257 line:-1
文件会被写入其中


457
00:28:10,991 --> 00:28:15,395 line:-1
我们强烈建议你实现这个可选的方法


458
00:28:15,462 --> 00:28:19,366 line:-2
提供一个后台
operationQueue


459
00:28:19,433 --> 00:28:21,902 line:-1
否则主队列会被用在其他内容上


460
00:28:24,137 --> 00:28:27,941 line:0
最后writePromiseToFile
会被调用


461
00:28:28,008 --> 00:28:30,110 line:0
让你将文件写入磁盘上


462
00:28:31,645 --> 00:28:34,781 line:-2
在你完成的时候
别忘了调用完成句柄


463
00:28:37,217 --> 00:28:40,988 line:-1
这就是接收以及提供文件承诺的内容


464
00:28:41,054 --> 00:28:44,391 line:-1
我们还介绍了你可以用来


465
00:28:44,458 --> 00:28:48,762 line:-2
将你的app调整为可以
接收和提供文件承诺的API


466
00:28:48,829 --> 00:28:52,065 line:-1
现在我想请Joachim上台来


467
00:28:52,132 --> 00:28:54,201 line:-2
通过示例app
给你们展示所有这些内容


468
00:28:54,268 --> 00:28:55,335 line:-1
谢谢 Joachim？


469
00:28:59,039 --> 00:28:59,973 line:-1
谢谢


470
00:29:02,009 --> 00:29:02,976 line:-1
早上好


471
00:29:03,510 --> 00:29:06,547 line:-1
我们会看一个简单的光线生成app


472
00:29:06,613 --> 00:29:08,782 line:-1
它有些拖拽方面的问题


473
00:29:09,049 --> 00:29:12,519 line:-2
我们会进到Xcode
来一起解决这些问题


474
00:29:19,893 --> 00:29:21,461 line:-1
这就是我的简单app


475
00:29:21,528 --> 00:29:25,232 line:-1
我会从桌面上拿一个文件


476
00:29:25,699 --> 00:29:27,634 line:-1
放到它的窗口中


477
00:29:27,701 --> 00:29:28,669 line:-1
就像是这样


478
00:29:29,469 --> 00:29:31,371 line:-1
在右上角我有一个小按钮


479
00:29:31,438 --> 00:29:37,511 line:-2
我可以在这添加一个文本框
还可以在我的图片上添加一些文字


480
00:29:38,378 --> 00:29:42,382 line:-2
我可以选择它 移动它
并且在准备好的时候


481
00:29:43,750 --> 00:29:48,889 line:-1
我可以将它发送到iMessage


482
00:29:52,759 --> 00:29:54,828 line:-1
虽然这张图片很棒


483
00:29:54,895 --> 00:29:57,531 line:-1
但我还是想用我在网上找到的图片


484
00:29:57,698 --> 00:29:59,299 line:-1
让我们打开Safari


485
00:30:01,168 --> 00:30:05,172 line:-2
试着将这张图片拖放到
我们的app中


486
00:30:06,840 --> 00:30:09,009 line:-1
不幸的是 这样不行


487
00:30:09,543 --> 00:30:13,180 line:-2
让我们进入Xcode
看看能不能修复这个问题


488
00:30:17,150 --> 00:30:20,087 line:-2
我现在在app的
主ViewController中


489
00:30:20,420 --> 00:30:23,957 line:-2
我们要直接跳到
viewDidLoad中


490
00:30:24,358 --> 00:30:26,527 line:-1
看看发生了什么


491
00:30:28,662 --> 00:30:32,599 line:-1
在这里 我们只注册了文件的URL


492
00:30:33,133 --> 00:30:37,437 line:-2
让我们修复这个问题
把FilePromiseReceiver也注册了


493
00:30:41,642 --> 00:30:46,280 line:-1
然后在处理拖拽操作的时候


494
00:30:46,713 --> 00:30:50,450 line:-2
我们也需要对
FilePromiseReceiver进行处理


495
00:30:51,351 --> 00:30:55,222 line:-1
让我们跳到下面的这个方法


496
00:30:56,790 --> 00:31:01,328 line:-2
这个是所支持的类的列表
而我们只有NSURL


497
00:31:01,528 --> 00:31:05,365 line:-1
所以我们要在第一个索引那里添加


498
00:31:06,066 --> 00:31:11,205 line:-1
NSFilePromiseReceiver


499
00:31:15,375 --> 00:31:19,580 line:-2
在这里的枚举方法中
我们要添加一个新的case


500
00:31:26,954 --> 00:31:30,457 line:-1
来接收所承诺的文件


501
00:31:30,524 --> 00:31:32,326 line:-1
如果我们刚刚通过拖拽得到了一个


502
00:31:32,526 --> 00:31:36,463 line:-2
文件的URL
我们可以对其调用刚才调用过的


503
00:31:36,530 --> 00:31:39,800 line:-1
相同的方法


504
00:31:40,734 --> 00:31:42,202 line:-1
让我们看看这样行不行


505
00:31:48,208 --> 00:31:49,743 line:-1
这就是我们的简单app


506
00:31:50,377 --> 00:31:55,782 line:-2
让我们回到Safari
将这个图片拖拽到窗口中


507
00:32:00,521 --> 00:32:01,755 line:-1
这很简单


508
00:32:01,822 --> 00:32:06,727 line:-2
我只需要修改两个现有的方法
就可以接收文件承诺了


509
00:32:08,996 --> 00:32:11,732 line:-1
现在让我们添加一些文字


510
00:32:15,202 --> 00:32:16,236 line:-1
就像是这样


511
00:32:16,570 --> 00:32:20,440 line:-2
如果我还没准备好
将我的模因发给别人


512
00:32:20,507 --> 00:32:24,545 line:-2
那我可以将它拖拽到桌面就可以
将其保存为图片文件不是很棒吗？


513
00:32:27,247 --> 00:32:28,982 line:-1
正如你所见 这样是行不通的


514
00:32:29,183 --> 00:32:32,553 line:-2
让我们回到Xcode
试着解决一下这个问题


515
00:32:38,058 --> 00:32:39,193 line:-1
在这个类的底部


516
00:32:39,259 --> 00:32:44,131 line:-2
我们有这个会返回遵从于NSPasteboardWriting
对象的方法


517
00:32:44,565 --> 00:32:45,966 line:-1
如你所见


518
00:32:46,033 --> 00:32:48,735 line:-2
我们这里返回一个简单的
NSImage


519
00:32:49,403 --> 00:32:53,473 line:-2
我们会用filePromiseProvider
来替换它


520
00:32:57,010 --> 00:33:02,716 line:0
我们要创建一个文件供应器
并且我们要提供一个JPEG图片


521
00:33:03,317 --> 00:33:08,455 line:0
我们会用这个userInfo属性
来储存snapshotItem


522
00:33:08,856 --> 00:33:11,892 line:0
我们后面会用它来将文件写到磁盘上


523
00:33:13,894 --> 00:33:18,699 line:0
然后我们要遵从
NSFilePromiseProviderDelegate


524
00:33:22,169 --> 00:33:23,470 line:-1
就像是这样


525
00:33:24,538 --> 00:33:25,706 line:-1
回到下面


526
00:33:26,139 --> 00:33:29,610 line:0
实现你刚才听到的三个代理方法


527
00:33:32,179 --> 00:33:34,715 line:-1
第一个会返回文件名


528
00:33:36,450 --> 00:33:39,753 line:-2
为了简单
我们这里只返回了一个静态文件名


529
00:33:41,255 --> 00:33:43,857 line:-2
第二个代理会返回
operationQueue


530
00:33:44,758 --> 00:33:46,860 line:-1
我们这里正好有一个


531
00:33:47,895 --> 00:33:52,399 line:-1
第三个代理要将文件写入到磁盘中


532
00:33:58,739 --> 00:34:00,073 line:-1
这里所发生的是


533
00:34:00,140 --> 00:34:05,946 line:-2
我们要从filePromiseProvider对象中
拿出snapshotObject


534
00:34:06,013 --> 00:34:11,351 line:-2
并且我们要用它的JPEG呈现
来将文件写入到磁盘中


535
00:34:13,620 --> 00:34:14,688 line:-1
让我们来看一下


536
00:34:19,793 --> 00:34:22,161 line:-1
这次我们要跳到Photos中


537
00:34:24,998 --> 00:34:27,000 line:-1
我们要拿到这张图片


538
00:34:27,935 --> 00:34:32,539 line:-2
把它拖拽到我们的app中
添加一些文字


539
00:34:36,243 --> 00:34:40,447 line:-1
然后把它拖到Finder桌面上


540
00:34:42,014 --> 00:34:43,116 line:-1
这是这样了


541
00:34:55,829 --> 00:34:58,465 line:-1
如果你照着我刚刚的步骤来做


542
00:34:58,532 --> 00:35:01,235 line:-2
你就可以为你的app添加
对于文件承诺的支持


543
00:35:01,635 --> 00:35:04,304 line:-1
并改进你的用户体验


544
00:35:04,872 --> 00:35:07,174 line:-1
我想让Eric来给你们介绍一下


545
00:35:07,441 --> 00:35:08,275 line:-1
谢谢


546
00:35:08,342 --> 00:35:12,779 line:-2
（演示
为文件承诺来调整你的app）


547
00:35:12,846 --> 00:35:14,448 line:-1
非常棒的内容


548
00:35:14,515 --> 00:35:15,849 line:-1
我希望你们能喜欢


549
00:35:15,916 --> 00:35:18,685 line:-1
我就想说几句话来做下总结


550
00:35:19,520 --> 00:35:21,588 line:-1
将这些内容串连到一起


551
00:35:22,122 --> 00:35:29,029 line:-2
首先我想说的是
Photos对我们来说很重要


552
00:35:29,096 --> 00:35:31,999 line:-2
对吗？
全世界数以百万计的人


553
00:35:32,065 --> 00:35:34,835 line:-1
每天都会拍数以百万计的照片


554
00:35:35,602 --> 00:35:39,540 line:-2
所有这些照片都可以
放到Photos app中


555
00:35:41,041 --> 00:35:43,243 line:-2
但如果它们不能进行分享的话
就没什么用了


556
00:35:43,977 --> 00:35:45,512 line:-1
如果它们不能被展示


557
00:35:45,579 --> 00:35:48,982 line:-1
不能被妥善地保存起来


558
00:35:49,149 --> 00:35:52,986 line:-1
所以拍摄了这些照片的人


559
00:35:53,053 --> 00:35:55,789 line:-1
依赖于你们这些开发者


560
00:35:55,856 --> 00:35:59,993 line:-2
创造出可以让他们发挥创造力
对照片进行处理的app


561
00:36:00,494 --> 00:36:03,197 line:-2
如果你今天从这个演讲
有两个必须要记住的内容


562
00:36:03,263 --> 00:36:04,731 line:-1
就是要记住


563
00:36:05,332 --> 00:36:07,201 line:-1
支持文件承诺


564
00:36:07,634 --> 00:36:11,371 line:-1
它可以很轻松地实现


565
00:36:11,438 --> 00:36:12,539 line:-1
跟Photos app的交互


566
00:36:13,640 --> 00:36:14,808 line:-1
请一定要实现它


567
00:36:15,042 --> 00:36:17,611 line:-1
第二个就是 我们强烈建议你


568
00:36:17,678 --> 00:36:20,881 line:-1
去看看所有那些


569
00:36:20,948 --> 00:36:24,651 line:-2
在Photos的项目扩展体验中
可用的API


570
00:36:26,420 --> 00:36:30,457 line:-2
回到我最开始所讲的内容
这是个蒸蒸日上的生态系统


571
00:36:30,524 --> 00:36:33,093 line:-1
使用它的话你可以有很大的机遇


572
00:36:33,160 --> 00:36:37,698 line:-2
我们一起努力的话就可以为每个人
创造一个更好的Photos体验


573
00:36:40,367 --> 00:36:43,904 line:-2
为了这一目的
请加入我们今天下午的实验室吧


574
00:36:44,304 --> 00:36:47,441 line:-1
我们会有很多工程师


575
00:36:47,508 --> 00:36:50,511 line:-2
来帮助你们解答
任何关于PhotoKit的问题


576
00:36:50,577 --> 00:36:53,180 line:-2
不管是关于iOS还是
macOS的Photos扩展


577
00:36:53,247 --> 00:36:55,682 line:-1
我们期待着跟你们聊一聊


578
00:36:56,250 --> 00:36:58,852 line:-1
请享受WWDC剩下演讲


579
00:36:58,919 --> 00:36:59,887 line:-1
谢谢大家

