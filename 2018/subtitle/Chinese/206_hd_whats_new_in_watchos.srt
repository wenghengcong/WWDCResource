1
00:00:17,784 --> 00:00:21,488 line:0
（watchOS新特性
演讲206）


2
00:00:23,123 --> 00:00:24,124 line:-1
嗨


3
00:00:28,595 --> 00:00:29,463 line:-1
大家好


4
00:00:31,231 --> 00:00:35,269 line:-2
下午好 感谢你们参加
“watchOS新特性”演讲


5
00:00:35,903 --> 00:00:38,772 line:-2
本次演讲中
我们将以高层次概要讲述新特性


6
00:00:38,839 --> 00:00:42,009 line:-1
让开发人员、设计师


7
00:00:42,075 --> 00:00:44,978 line:-1
和产品主管可以利用这些特性


8
00:00:45,045 --> 00:00:46,647 line:-1
为用户提供良好的使用体验


9
00:00:46,880 --> 00:00:49,650 line:-2
我们还会深入了解
新API和界面生成器


10
00:00:49,716 --> 00:00:51,318 line:-1
的细节内容


11
00:00:52,019 --> 00:00:53,520 line:-1
我是Lori Hylan-Cho


12
00:00:53,820 --> 00:00:57,257 line:-2
我是Watch框架开发团队成员
今天很高兴来到这里


13
00:00:57,324 --> 00:00:59,526 line:-1
和大家分享一些新特性


14
00:00:59,593 --> 00:01:02,763 line:-2
这些特性能帮助watchOS 5
提供良好的用户体验


15
00:01:04,831 --> 00:01:08,335 line:-2
自从2015年以来
我们走过了很长的一段路


16
00:01:08,969 --> 00:01:12,339 line:-1
良好的手表体验涉及到多个方面


17
00:01:12,406 --> 00:01:14,775 line:-2
Watch app是其中的
一个很重要的环节


18
00:01:15,809 --> 00:01:20,647 line:-2
通知、信息推送
和Siri Shortcuts互相配合


19
00:01:20,714 --> 00:01:24,551 line:-2
提供流畅的手表体验
用户可以进行简单高效的操作


20
00:01:24,618 --> 00:01:27,487 line:-2
在合适的时间
获得需要的信息


21
00:01:29,056 --> 00:01:30,757 line:-1
当然Series 3手表


22
00:01:30,824 --> 00:01:33,627 line:-1
支持蜂窝网络新的Wi-Fi选项


23
00:01:33,694 --> 00:01:36,129 line:-1
让你能够直接通过手表上网


24
00:01:36,196 --> 00:01:39,366 line:-2
越来越多的穿戴式手表
正在摆脱对手机的依赖


25
00:01:39,700 --> 00:01:42,936 line:-1
因此必须提供完整的手表体验


26
00:01:44,004 --> 00:01:46,840 line:-2
让我们来看看
watchOS 5的新特性


27
00:01:46,907 --> 00:01:50,110 line:-1
它们帮助你提供良好的手表体验


28
00:01:53,080 --> 00:01:56,116 line:-2
问Apple Watch任何用户
他们最喜欢手表的什么


29
00:01:56,183 --> 00:01:59,119 line:-2
他们首先想到的功能之一
是通知功能


30
00:01:59,620 --> 00:02:01,955 line:-2
今年我们进一步
丰富了通知功能


31
00:02:02,022 --> 00:02:03,624 line:-1
加入一些重要改进


32
00:02:05,826 --> 00:02:08,395 line:-2
从watchOS 1开始
就支持使用图片和文本


33
00:02:08,461 --> 00:02:10,697 line:-1
创建动态通知


34
00:02:10,764 --> 00:02:13,600 line:-2
但是当通知到达时
如果用户未看到通知


35
00:02:14,301 --> 00:02:16,203 line:-1
可能会永远错过它


36
00:02:16,270 --> 00:02:19,373 line:-2
因为Notification Center
仅显示静态内容


37
00:02:20,007 --> 00:02:22,976 line:-2
这样设计的目的
是为了在通知到达时


38
00:02:23,043 --> 00:02:24,511 line:-1
相比于在Notification Center显示


39
00:02:24,578 --> 00:02:27,047 line:-1
有更多的时间显示通知


40
00:02:28,949 --> 00:02:33,320 line:-2
在watchOS 5中 我们将尽
最大努力显示美观的动态通知


41
00:02:33,787 --> 00:02:37,357 line:-2
而不需要你们更改代码
或重新进行编译


42
00:02:38,292 --> 00:02:40,894 line:-1
我们努力让它变得更好


43
00:02:41,261 --> 00:02:43,330 line:-1
而且也能够在Notification Center


44
00:02:43,397 --> 00:02:45,899 line:-1
显示动态通知


45
00:02:45,966 --> 00:02:48,302 line:-1
接下来我要介绍两个特性


46
00:02:50,304 --> 00:02:52,806 line:-1
第一个是分组通知


47
00:02:53,440 --> 00:02:56,743 line:-2
你可能已经知道
可以为每个通知设置


48
00:02:56,810 --> 00:02:59,847 line:-1
多个类别和不同的通知界面


49
00:03:00,080 --> 00:03:03,717 line:-2
你们可能已经设定了
线程ID和推送通知


50
00:03:03,784 --> 00:03:05,819 line:-1
从iOS发送通知到手表


51
00:03:07,855 --> 00:03:09,790 line:-2
在watchOS 5中
这将导致


52
00:03:09,857 --> 00:03:12,960 line:-1
在Notification Center自动分组通知


53
00:03:13,026 --> 00:03:14,628 line:-1
上幅幻灯片已经展示这一点


54
00:03:15,662 --> 00:03:20,234 line:-2
指定类别和线程ID
还开启另外一种可能


55
00:03:21,802 --> 00:03:24,805 line:-2
即获得与内置信息app
相同的行为模式


56
00:03:24,872 --> 00:03:27,140 line:-1
当原始通知显示在屏幕上时


57
00:03:27,207 --> 00:03:29,710 line:-1
具有相同线程ID的新通知到达时


58
00:03:30,143 --> 00:03:32,412 line:-1
会被追加到现有界面


59
00:03:33,413 --> 00:03:36,083 line:-1
这种分组操作是可选的


60
00:03:36,149 --> 00:03:37,918 line:-1
让你能够使用同一个通知接口控制器


61
00:03:37,985 --> 00:03:41,388 line:-1
多次调用句柄


62
00:03:43,957 --> 00:03:45,526 line:-1
要使用这些行为


63
00:03:45,592 --> 00:03:49,263 line:-1
应该在界面Storyboard中


64
00:03:49,329 --> 00:03:50,397 line:-1
选择通知类别


65
00:03:51,198 --> 00:03:54,468 line:-2
在属性检查器中
选中句柄分组框


66
00:03:55,602 --> 00:03:59,540 line:-2
当原始通知显示在屏幕上时
如果具有匹配类别和线程ID的


67
00:03:59,907 --> 00:04:02,543 line:-1
通知到达


68
00:04:02,843 --> 00:04:04,945 line:-1
将会在现有通知界面控制器上


69
00:04:05,012 --> 00:04:07,681 line:-2
再次调用
didReceiveNotification


70
00:04:07,915 --> 00:04:10,918 line:-2
因此 你应该准备
在现有通知界面上


71
00:04:10,984 --> 00:04:15,255 line:-2
追加内容
也许需要添加一个空白行


72
00:04:15,322 --> 00:04:17,757 line:-1
在现有标签上显示新的消息正文


73
00:04:17,824 --> 00:04:21,327 line:-2
或者为表格添加一个行
正如你在前一个例子中看到的那样


74
00:04:24,398 --> 00:04:28,802 line:-2
对于didReceiveNotification
它的签名已经在watchOS 5中发生变化


75
00:04:29,536 --> 00:04:32,806 line:-2
这个版本的completionHandler
已经被弃用


76
00:04:34,174 --> 00:04:36,443 line:-1
从而变得更加简单


77
00:04:37,177 --> 00:04:39,079 line:-1
这样我们就可以知道


78
00:04:39,146 --> 00:04:41,748 line:-1
你已经完成通知数据处理


79
00:04:41,815 --> 00:04:44,518 line:-1
并且准备在屏幕上显示通知


80
00:04:45,352 --> 00:04:48,455 line:-1
你们应该尽量简单地


81
00:04:48,522 --> 00:04:52,459 line:-2
显示通知
提高处理速度


82
00:04:54,795 --> 00:04:58,198 line:-2
另外要注意的是
用户需要抬起手腕


83
00:04:58,265 --> 00:05:01,869 line:-2
在通知到达时
看到所有具有相同线程ID的通知


84
00:05:02,302 --> 00:05:04,638 line:-1
如果你处理通知类别的


85
00:05:04,705 --> 00:05:06,206 line:-1
分组和动态界面


86
00:05:06,273 --> 00:05:10,077 line:-2
当用户轻点分组和Notification Center时
将会在表盘上显示


87
00:05:10,143 --> 00:05:12,713 line:-1
所有具有相同线程ID的消息


88
00:05:13,714 --> 00:05:16,183 line:-1
如果该线程上的其他消息到达


89
00:05:16,250 --> 00:05:19,753 line:-2
将会实时追加这些消息
并且显示在长形界面中


90
00:05:24,591 --> 00:05:25,659 line:-1
还有一项重大改进


91
00:05:26,460 --> 00:05:29,763 line:-2
在watchOS 5中
可以在你发送的通知中


92
00:05:29,830 --> 00:05:32,132 line:-1
直接加入app一些特性


93
00:05:32,199 --> 00:05:34,568 line:-2
在通知中加入一些元素
使用户能够在通知中


94
00:05:34,635 --> 00:05:36,937 line:-1
与内容进行交互


95
00:05:38,972 --> 00:05:43,076 line:-2
例如 可以让用户
支付打车费 评价司机


96
00:05:43,143 --> 00:05:45,512 line:-2
通知用户
告知他们的账单即将到期


97
00:05:45,579 --> 00:05:49,449 line:-2
延长停车时间
让餐厅不仅能够


98
00:05:49,516 --> 00:05:51,718 line:-1
确认订餐


99
00:05:51,785 --> 00:05:54,555 line:-2
而且还知道
将会有三人来进餐 而不是四人


100
00:05:56,823 --> 00:05:58,258 line:-1
让我们来看看这是如何运作的


101
00:05:58,992 --> 00:06:01,895 line:-2
如果你要创建
新的通知界面控制器


102
00:06:01,962 --> 00:06:05,799 line:-2
将会自动为你创建
一个动态交互式界面


103
00:06:07,835 --> 00:06:11,371 line:-2
如果已经为你的通知类别
创建一个交互式界面


104
00:06:11,438 --> 00:06:14,675 line:-2
请在Watch app界面
Storyboard中选择类别


105
00:06:14,741 --> 00:06:17,744 line:-1
然后选中“交互式界面”复选框


106
00:06:21,949 --> 00:06:25,085 line:-2
对于这两种界面
你会发现旧动态界面选项仍然被选中


107
00:06:25,152 --> 00:06:27,988 line:-1
同时 还选中了动态交互选项


108
00:06:28,722 --> 00:06:31,325 line:-2
在watchOS 5中
当通知首次到达时


109
00:06:31,391 --> 00:06:35,329 line:-2
将会显示动态界面而且也会在
Notification Center显示


110
00:06:35,395 --> 00:06:36,530 line:-1
前面我讲过这一点


111
00:06:37,698 --> 00:06:40,868 line:-2
早期版本的watchOS
也将会显示动态界面


112
00:06:40,934 --> 00:06:43,604 line:-1
因此你需要保持向后兼容


113
00:06:46,607 --> 00:06:49,243 line:-1
创建动态交互式界面控制器之后


114
00:06:49,309 --> 00:06:51,278 line:-1
可以从对象库中添加按钮 开关


115
00:06:51,345 --> 00:06:53,547 line:-1
和其他交互控件


116
00:06:53,614 --> 00:06:55,582 line:-1
现在 它们作为弹出菜单


117
00:06:55,649 --> 00:06:56,950 line:-1
出现在屏幕上


118
00:07:00,687 --> 00:07:03,957 line:-1
甚至可以为通知添加手势识别功能


119
00:07:04,024 --> 00:07:06,527 line:-2
但是你应该知道
系统手势的优先级


120
00:07:06,593 --> 00:07:10,564 line:-2
高于你在同一区域
添加的任何手势


121
00:07:16,436 --> 00:07:18,805 line:-1
在设计通知界面之后


122
00:07:18,872 --> 00:07:20,841 line:-1
在代码中设置交互控件


123
00:07:20,908 --> 00:07:24,778 line:-2
类似于app中的
交互控件设置方式


124
00:07:25,279 --> 00:07:26,180 line:-1
在这里可以看到


125
00:07:26,246 --> 00:07:30,217 line:-1
我在动态交互式界面中


126
00:07:30,284 --> 00:07:32,119 line:-1
添加向上按钮的操作


127
00:07:32,186 --> 00:07:34,788 line:-1
每点击按钮一次


128
00:07:34,855 --> 00:07:36,490 line:-1
时间将会增加15分钟


129
00:07:39,026 --> 00:07:40,594 line:-1
在点击这些按钮时


130
00:07:40,661 --> 00:07:43,030 line:-2
你可能已经忘记
在点击时 通知功能


131
00:07:43,096 --> 00:07:45,566 line:-1
始终会启动你的app


132
00:07:46,233 --> 00:07:51,338 line:-2
对于常规动态和静态通知
的确是这样的


133
00:07:51,572 --> 00:07:53,640 line:-1
但是对于动态交互式通知


134
00:07:53,707 --> 00:07:56,243 line:-1
我们必须禁止此行为


135
00:07:56,310 --> 00:07:58,045 line:-1
因为现在我们设置了交互控件


136
00:07:59,079 --> 00:08:01,882 line:-2
如有必要
仍然可以在交互式通知中


137
00:08:01,949 --> 00:08:02,850 line:-1
启动你的app


138
00:08:02,916 --> 00:08:06,019 line:-2
你必须进行显式操作
调用一个新方法


139
00:08:06,353 --> 00:08:08,789 line:-2
performNotification
DefaultAction


140
00:08:11,758 --> 00:08:15,028 line:-2
同样地 如果在通知界面中
加入一个按钮


141
00:08:15,095 --> 00:08:17,931 line:-1
这个按钮在接受操作之后


142
00:08:18,198 --> 00:08:19,099 line:-1
如同本例中所做的那样


143
00:08:19,166 --> 00:08:21,902 line:-2
我们点击“延长”按钮
这应该会撤消通知


144
00:08:21,969 --> 00:08:24,671 line:-1
延长我的租赁时间并且撤消通知


145
00:08:25,072 --> 00:08:27,708 line:0
应该在按钮IB操作函数末尾


146
00:08:27,774 --> 00:08:31,011 line:0
调用
performDismissAction


147
00:08:34,047 --> 00:08:37,251 line:-1
还可以使用标准操作按钮


148
00:08:37,317 --> 00:08:38,652 line:-1
处理更改和通知正文


149
00:08:39,119 --> 00:08:41,889 line:-1
因为操作按钮始终会撤消通知


150
00:08:43,657 --> 00:08:45,192 line:-1
等等 你可能在想


151
00:08:45,392 --> 00:08:48,529 line:-1
所有通知界面共享操作按钮


152
00:08:48,595 --> 00:08:50,764 line:-1
如果没有交互元素


153
00:08:50,831 --> 00:08:52,733 line:-1
那么一些按钮可能没有意义


154
00:08:53,534 --> 00:08:57,371 line:-2
作为watchOS 5中的新特性
现在你可以调整在运行时


155
00:08:57,437 --> 00:08:58,906 line:-1
显示的操作按钮


156
00:09:01,341 --> 00:09:05,279 line:-2
通知界面控制器有一个
新notificationActions属性


157
00:09:05,345 --> 00:09:06,747 line:-1
此属性返回操作数组


158
00:09:06,813 --> 00:09:08,782 line:-1
并显示给通知


159
00:09:09,249 --> 00:09:13,720 line:-1
可以在didReceive notification回调中


160
00:09:13,787 --> 00:09:15,956 line:-2
将这个属性设置为
UNNotificationAction对象数组


161
00:09:16,390 --> 00:09:19,293 line:-1
这让你能够灵活地添加或删除按钮


162
00:09:19,359 --> 00:09:21,161 line:-1
以满足交互界面需求


163
00:09:23,130 --> 00:09:25,032 line:-1
在未来版本中


164
00:09:25,098 --> 00:09:27,668 line:-2
我们将允许
在调用didReceive notification后


165
00:09:27,734 --> 00:09:29,903 line:-1
随时更改操作


166
00:09:30,304 --> 00:09:33,340 line:-1
让你能够根据用户的交互操作


167
00:09:33,407 --> 00:09:35,442 line:-1
在交互通知界面中


168
00:09:35,509 --> 00:09:37,744 line:-1
更改操作按钮


169
00:09:40,781 --> 00:09:43,483 line:-1
因此 通知和通知创建方法


170
00:09:43,550 --> 00:09:45,819 line:-1
发生了很大的改变


171
00:09:46,753 --> 00:09:49,890 line:-1
接下来我还要讲两件事情


172
00:09:52,392 --> 00:09:55,062 line:-1
关键报警是一种新类型的通知


173
00:09:55,128 --> 00:09:58,065 line:-1
会触发振动和提示音


174
00:09:58,131 --> 00:10:01,134 line:-1
即使你的手表处于静音免打扰模式


175
00:10:01,568 --> 00:10:04,738 line:-2
因此它们可以用于
发送特别紧急的信息


176
00:10:05,672 --> 00:10:08,475 line:-2
如果Watch app
与医疗器械相关联


177
00:10:08,542 --> 00:10:12,546 line:-2
或者用于紧急事件
这种类型的通知将会适合你


178
00:10:13,881 --> 00:10:16,683 line:-1
关键报警需要app授权


179
00:10:17,217 --> 00:10:19,686 line:-1
并且获得用户的显式许可


180
00:10:19,753 --> 00:10:21,855 line:-1
以区分于常规通知


181
00:10:24,391 --> 00:10:28,295 line:-1
与关键报警相反的是静默通知


182
00:10:28,729 --> 00:10:32,566 line:-1
通知出现在屏幕上时


183
00:10:32,633 --> 00:10:34,101 line:-1
不会打扰用户


184
00:10:34,468 --> 00:10:38,605 line:-2
你可以选择直接发送通知到
Notification Center


185
00:10:39,273 --> 00:10:41,675 line:-1
你会发现将不会显示图标


186
00:10:41,742 --> 00:10:43,710 line:-1
发送的通知


187
00:10:43,777 --> 00:10:45,812 line:-1
也位于Notification Center之内


188
00:10:46,647 --> 00:10:49,116 line:-1
但是 从屏幕上方扫动


189
00:10:49,183 --> 00:10:51,051 line:-1
将会显示静默发送的通知


190
00:10:56,290 --> 00:10:59,893 line:-1
如果选择在app中静默发送通知


191
00:10:59,960 --> 00:11:03,530 line:-1
你不必在app首次启动时


192
00:11:03,597 --> 00:11:05,132 line:-1
提醒用户允许发送通知


193
00:11:05,966 --> 00:11:08,702 line:-1
相反 你可以请求临时权限


194
00:11:09,369 --> 00:11:12,406 line:-2
这样 用户将会知道
你的app将会


195
00:11:12,472 --> 00:11:14,808 line:-1
发送什么类型的通知


196
00:11:14,875 --> 00:11:17,177 line:-2
以及他们是否想要
在通知到达时查看通知


197
00:11:19,413 --> 00:11:21,949 line:-2
作为开发人员
无论你选择哪个选项


198
00:11:22,015 --> 00:11:26,119 line:-2
用户都可以控制
他们接收通知的方式


199
00:11:26,854 --> 00:11:30,457 line:-1
可以选择静默发送通知


200
00:11:30,524 --> 00:11:34,061 line:-2
在Notification Center
滑扫通知、更改通知


201
00:11:34,127 --> 00:11:37,197 line:-1
或更改通知偏好和设置


202
00:11:41,401 --> 00:11:44,705 line:-1
总的来说 现在通知变得更加动态


203
00:11:45,105 --> 00:11:48,976 line:-2
在通知到达时能够看到
Notification Center


204
00:11:49,042 --> 00:11:51,578 line:-1
看到动态界面


205
00:11:52,379 --> 00:11:56,350 line:-2
我们还首次在手表上
提供按线程ID分组的功能


206
00:11:57,251 --> 00:11:59,786 line:-2
因此 你可以设计
像前面所述的那些动态通知


207
00:11:59,853 --> 00:12:01,255 line:-1
与内置的消息app一样


208
00:12:02,556 --> 00:12:04,958 line:-1
你可以在app发送的通知中


209
00:12:05,025 --> 00:12:07,861 line:-1
加入更多的app功能


210
00:12:07,928 --> 00:12:10,197 line:-1
利用交互式控件和操作按钮


211
00:12:10,264 --> 00:12:11,698 line:-1
可以在运行时定义它们


212
00:12:12,766 --> 00:12:15,302 line:-1
还可以选择所发送通知的


213
00:12:15,369 --> 00:12:17,471 line:-1
紧急级别


214
00:12:18,572 --> 00:12:20,741 line:-1
要了解关于通知的更多信息


215
00:12:22,209 --> 00:12:24,678 line:-1
可以参加一个演讲


216
00:12:25,145 --> 00:12:27,848 line:-2
我强烈建议参加
“设计通知”演讲


217
00:12:28,115 --> 00:12:30,817 line:-1
这个演讲将会介绍一些不错的技巧


218
00:12:30,884 --> 00:12:33,153 line:-2
指导你们设计
高效率的交互式通知


219
00:12:36,924 --> 00:12:37,858 line:-1
好的


220
00:12:37,925 --> 00:12:41,361 line:-1
我们已经讨论了通知功能


221
00:12:41,428 --> 00:12:43,230 line:-1
现在让我们把注意力转向


222
00:12:43,297 --> 00:12:46,366 line:-2
一些新的特性
它们帮你设计具有吸引力的app


223
00:12:47,334 --> 00:12:50,103 line:-1
首先来看本地声音播放


224
00:12:52,039 --> 00:12:55,475 line:-2
你们一些人曾经尝试过
在手表上播放音频


225
00:12:55,542 --> 00:12:59,246 line:-1
利用URL会话下载文件到手表


226
00:12:59,313 --> 00:13:02,316 line:-2
然后使用WKAudioFileQueuePlayer
进行播放


227
00:13:03,417 --> 00:13:06,553 line:-2
在watchOS 5中
我们简化了手表的


228
00:13:06,620 --> 00:13:08,255 line:-1
音频app开发工作


229
00:13:08,322 --> 00:13:11,024 line:-1
带来更好的使用体验


230
00:13:13,327 --> 00:13:16,163 line:-2
在watchOS 5中
我们提供一个新的背景模式


231
00:13:16,230 --> 00:13:18,165 line:-1
用于播放本地音乐文件


232
00:13:18,532 --> 00:13:21,768 line:-1
现在你可以专注于app的主要用途


233
00:13:21,835 --> 00:13:25,772 line:-2
即音频
让你能够开发


234
00:13:25,939 --> 00:13:29,109 line:-1
单纯的音频播放app


235
00:13:35,382 --> 00:13:39,486 line:-2
我们还提供直接AVAudioPlayer
和AVAudioEngine API访问


236
00:13:39,553 --> 00:13:41,855 line:-2
这意味着你可以使用
你已经很熟悉的


237
00:13:41,922 --> 00:13:43,357 line:-1
方法和属性


238
00:13:43,423 --> 00:13:46,326 line:-1
如果你开发iOS音频播放app


239
00:13:46,827 --> 00:13:50,831 line:-2
事实上 你可以在
iOS app和Watch app之间共享代码


240
00:13:50,898 --> 00:13:53,634 line:-2
通过将回放相关代码
迁移到框架


241
00:13:55,002 --> 00:13:57,171 line:-1
不同于iOS的是


242
00:13:58,172 --> 00:14:00,440 line:-1
在手表上播放长格式音频


243
00:14:00,507 --> 00:14:04,545 line:-1
需要耳机或外置扬声器


244
00:14:04,611 --> 00:14:07,181 line:-1
与内置音乐app播放音频一样


245
00:14:08,248 --> 00:14:12,419 line:-2
因此 蓝牙路由
是会话激活过程的一部分


246
00:14:12,486 --> 00:14:15,822 line:-1
如果将路由共享规则设置为长格式


247
00:14:17,257 --> 00:14:21,128 line:-2
将会通过Apple无线芯片
自动连接到耳机


248
00:14:21,195 --> 00:14:23,797 line:-2
例如AirPods
或Beats Studio 3


249
00:14:24,064 --> 00:14:25,365 line:-1
如果它们正在使用之中


250
00:14:25,699 --> 00:14:29,269 line:-2
将会显示一个路由选择器
让用户选择其他耳机


251
00:14:29,336 --> 00:14:30,671 line:-1
或蓝牙扬声器


252
00:14:30,737 --> 00:14:34,374 line:-2
当你在会话中调用activateWithOptions
completion API时


253
00:14:34,441 --> 00:14:35,342 line:-1
这是一项新特性


254
00:14:38,278 --> 00:14:41,381 line:-2
也可以使用
MPNowPlayingInfoCenter API


255
00:14:41,448 --> 00:14:43,283 line:-1
将app的播放信息


256
00:14:43,584 --> 00:14:45,919 line:-2
推送给
nowPlaying app


257
00:14:45,986 --> 00:14:50,157 line:-2
这意味着 你的app信息将会显示在
nowPlaying通知栏中


258
00:14:53,260 --> 00:14:55,062 line:-1
你可以处理你的app


259
00:14:55,128 --> 00:14:56,563 line:-1
媒体远程控制指令


260
00:14:56,763 --> 00:14:58,298 line:-1
例如播放 暂停


261
00:14:58,632 --> 00:15:00,033 line:-1
上一曲 下一曲


262
00:15:00,267 --> 00:15:02,102 line:-1
甚至点赞和吐槽


263
00:15:05,405 --> 00:15:06,440 line:-1
最后同样重要的是


264
00:15:06,507 --> 00:15:10,577 line:-2
现在可以在你的自定义
回放用户界面中控制音量


265
00:15:10,978 --> 00:15:12,646 line:-1
界面构建器对象库中


266
00:15:13,113 --> 00:15:15,883 line:-1
提供新的音量控制视图


267
00:15:19,686 --> 00:15:23,624 line:-2
在静止时 控件自动使用
app的颜色


268
00:15:23,690 --> 00:15:26,026 line:-1
当转动数码表冠时


269
00:15:26,193 --> 00:15:27,895 line:-1
会响应系统音量


270
00:15:27,961 --> 00:15:29,429 line:-1
控制中的颜色变化


271
00:15:32,332 --> 00:15:36,670 line:-2
有一个演讲专门介绍
创建watchOS音频app


272
00:15:36,737 --> 00:15:41,475 line:-2
强烈建议你们参加此演讲
了解新API的详细信息


273
00:15:41,542 --> 00:15:43,744 line:-1
最佳的音频处理方法


274
00:15:44,278 --> 00:15:46,813 line:-1
我们还准备在星期四


275
00:15:46,880 --> 00:15:50,117 line:-2
讨论watchOS运行时
背景音频和连通性实验室


276
00:15:52,753 --> 00:15:55,722 line:-1
如果app的主要功能不是播放音频


277
00:15:55,789 --> 00:15:58,759 line:-2
但是你的app将受益于
在系统其它位置上


278
00:15:58,825 --> 00:16:00,360 line:-1
控制音频的功能


279
00:16:00,561 --> 00:16:02,462 line:-1
无论是在Watch或手机上


280
00:16:03,497 --> 00:16:06,600 line:-2
比如在锻炼app中
在锻炼时 你可以左扫动


281
00:16:06,667 --> 00:16:08,168 line:-1
看到nowPlaying控件


282
00:16:08,702 --> 00:16:12,206 line:-2
现在你们能够将
nowPlayingView


283
00:16:12,272 --> 00:16:14,408 line:-1
嵌入你们的app


284
00:16:16,643 --> 00:16:19,012 line:-2
你可以在对象库
和界面构建器中找到


285
00:16:19,079 --> 00:16:20,214 line:-1
nowPlayingView


286
00:16:20,914 --> 00:16:23,016 line:-1
它将会铺满屏幕


287
00:16:23,083 --> 00:16:25,419 line:-1
适应各种页面布局app


288
00:16:26,687 --> 00:16:29,089 line:-2
nowPlayingView
是系统级控件


289
00:16:29,156 --> 00:16:32,092 line:-1
用于控制来自于其它app的音频


290
00:16:32,159 --> 00:16:34,761 line:-1
它会显示用户正在听什么


291
00:16:34,828 --> 00:16:36,830 line:-2
在Apple Watch
还是在iPhone上


292
00:16:39,867 --> 00:16:42,936 line:-1
这里我想介绍其他一些新选项


293
00:16:43,003 --> 00:16:44,671 line:-1
和行为变化


294
00:16:45,305 --> 00:16:49,476 line:-2
在以前版本的watchOS中
如果添加一个38毫米资产


295
00:16:49,543 --> 00:16:53,080 line:-2
但是忘记为42毫米设备
添加同样的资产


296
00:16:53,447 --> 00:16:55,949 line:-1
大尺寸设备上将会丢失资产


297
00:16:56,683 --> 00:16:59,987 line:-2
现在 资产将会自动
缩小到38毫米尺寸


298
00:17:00,053 --> 00:17:02,489 line:-1
如果没有42毫米尺寸


299
00:17:04,223 --> 00:17:07,895 line:-1
也不需要提供不同的尺寸


300
00:17:07,961 --> 00:17:11,098 line:-1
相反 你只需要


301
00:17:11,164 --> 00:17:14,367 line:-2
在资产类型全局选择中
添加一个PDF


302
00:17:14,434 --> 00:17:17,905 line:-2
将新的“自动缩放”选项
设置为自动


303
00:17:23,877 --> 00:17:27,047 line:0
这样 将会在合适的时间


304
00:17:27,114 --> 00:17:28,248 line:0
和合适的位置
显示尺寸合适的资产


305
00:17:30,651 --> 00:17:34,988 line:-2
我们还在字体菜单中提供
标题文本样式 让你有更多的选项


306
00:17:35,055 --> 00:17:38,392 line:-1
以多样化显示界面文本


307
00:17:39,226 --> 00:17:42,095 line:-1
这些文本样式兼容动态字体格式


308
00:17:42,162 --> 00:17:44,364 line:-1
可以变大或变小


309
00:17:44,431 --> 00:17:48,035 line:-2
用户可以更改字体大小和设置
它们可以按比例缩放


310
00:17:49,970 --> 00:17:53,607 line:-1
我们通过界面生成器和API


311
00:17:53,674 --> 00:17:54,808 line:-1
大标题样式


312
00:17:58,779 --> 00:18:01,915 line:-1
我在开发一个滑雪锻炼app


313
00:18:01,982 --> 00:18:04,117 line:-1
正好可以借此机会讨论


314
00:18:04,184 --> 00:18:06,286 line:-2
我们针对watchOS 5
锻炼功能所进行的改进


315
00:18:07,521 --> 00:18:10,457 line:-2
在本版本中 我们完全重写了
Workout API


316
00:18:10,524 --> 00:18:14,061 line:-2
使它变得更简单
更可靠和更具有灵活性


317
00:18:14,461 --> 00:18:17,631 line:-2
我们通过一个内置
锻炼app来使用这个API


318
00:18:18,565 --> 00:18:21,134 line:-1
希望你们的锻炼app也使用它


319
00:18:23,370 --> 00:18:27,541 line:-1
现在 更容易开始锻炼和收集数据


320
00:18:27,608 --> 00:18:30,777 line:-1
在HK锻炼会话中


321
00:18:30,844 --> 00:18:32,746 line:-1
使用新的初始化函数


322
00:18:32,813 --> 00:18:34,548 line:-1
新的Workout Builder API


323
00:18:36,016 --> 00:18:37,551 line:-1
创建锻炼会话


324
00:18:38,252 --> 00:18:41,655 line:-2
从会话中获得生成器
然后开始收集数据


325
00:18:42,022 --> 00:18:43,223 line:-1
就是这么简单


326
00:18:44,424 --> 00:18:47,461 line:-1
代码是这样的


327
00:18:47,528 --> 00:18:50,063 line:-1
你使用healthStore


328
00:18:50,130 --> 00:18:51,899 line:-2
和workoutConfiguration
创建并且配置一个会话


329
00:18:51,965 --> 00:18:53,600 line:-1
包括活动类别


330
00:18:54,935 --> 00:18:58,572 line:-2
获取与会话关联的
HK Live Workout实时锻炼生成器


331
00:18:59,373 --> 00:19:00,741 line:-1
然后开始收集数据


332
00:19:02,042 --> 00:19:05,779 line:-1
将会自动收集锻炼相关数据


333
00:19:05,846 --> 00:19:08,248 line:-1
即使发生暂停和恢复


334
00:19:08,315 --> 00:19:12,186 line:-2
从而提供正确和一致的
HK锻炼信息


335
00:19:12,252 --> 00:19:13,921 line:-1
以及正确的锻炼时间


336
00:19:16,323 --> 00:19:18,292 line:-1
任何app都不是完美的


337
00:19:18,692 --> 00:19:21,828 line:-2
如果在活跃锻炼会话期间
你的app崩溃


338
00:19:21,895 --> 00:19:23,797 line:-1
将会自动重新启动


339
00:19:28,268 --> 00:19:31,972 line:-2
只需使用HKHealthStore
recoverActiveWorkoutSession


340
00:19:32,039 --> 00:19:32,873 line:-1
API


341
00:19:32,940 --> 00:19:37,477 line:-2
会话和生成器
就会还原到先前状态


342
00:19:40,314 --> 00:19:42,916 line:-2
如果想要详细了解
新的Workout API


343
00:19:42,983 --> 00:19:45,686 line:-1
以及健康和健身数据收集方法


344
00:19:45,752 --> 00:19:47,988 line:-2
可以查阅
新的Workout使用方法


345
00:19:48,255 --> 00:19:52,059 line:-2
或参加明天下午的健康和
健身技术实验室


346
00:19:54,995 --> 00:19:55,896 line:-1
接下来


347
00:19:56,063 --> 00:19:57,764 line:-2
通过使用
Siri Shortcuts


348
00:19:57,831 --> 00:20:00,501 line:-2
现在你的app
在Siri表盘上有一个显示位置


349
00:20:01,435 --> 00:20:02,936 line:-1
在Keynote演讲中已经讲过


350
00:20:03,070 --> 00:20:06,006 line:-2
Siri Shortcuts
是为了帮助用户更轻松完成


351
00:20:06,073 --> 00:20:09,443 line:-1
他们经常执行的任务


352
00:20:10,944 --> 00:20:14,014 line:-1
在Siri表盘上…常用任务


353
00:20:14,081 --> 00:20:15,782 line:-1
出现在合适的位置和时间


354
00:20:15,916 --> 00:20:18,685 line:-1
开发人员只需要很少的工作


355
00:20:19,586 --> 00:20:21,488 line:-2
我想重点介绍
如何使用Shortcuts


356
00:20:21,555 --> 00:20:24,892 line:-2
来提供良好的手表体验
使用体验的差异取决于


357
00:20:24,958 --> 00:20:27,227 line:-1
是否安装了app


358
00:20:29,463 --> 00:20:31,932 line:-2
首先来看
良好的快捷方式是什么样的


359
00:20:33,166 --> 00:20:36,403 line:-2
顾名思义 快捷方式是
为了帮助手表用户


360
00:20:36,503 --> 00:20:40,107 line:-2
看到有用的信息
快速执行常用任务


361
00:20:40,674 --> 00:20:41,842 line:-1
无论任务是否会


362
00:20:41,909 --> 00:20:44,344 line:-2
在特定屏幕上启动app
显示预设定的选项


363
00:20:44,845 --> 00:20:47,648 line:-1
或获得令人满意的app执行结果


364
00:20:47,714 --> 00:20:51,418 line:-2
例如订购早餐咖啡
预订餐厅桌席


365
00:20:51,485 --> 00:20:53,587 line:-1
或补充你的巧克力供应


366
00:20:54,721 --> 00:20:58,392 line:-2
信息一目了然
只需要一两次点击操作


367
00:21:00,928 --> 00:21:04,364 line:-2
快捷方式以用户活动或
用户意图为基础


368
00:21:05,032 --> 00:21:07,568 line:-2
如果需要启动app
并进入特定上下文


369
00:21:07,634 --> 00:21:10,037 line:-1
例如 直接进入屏幕界面


370
00:21:10,571 --> 00:21:12,239 line:-1
记录他们的饮食量


371
00:21:12,306 --> 00:21:14,408 line:-1
这时适合使用


372
00:21:14,474 --> 00:21:15,876 line:-1
基于用户活动的快捷方式


373
00:21:18,111 --> 00:21:20,314 line:-1
对于不需要启动app的任务


374
00:21:20,380 --> 00:21:23,717 line:-1
例如 经常性的咖啡订购


375
00:21:23,784 --> 00:21:25,953 line:-2
则更适合使用
基于用户意图的快捷方式


376
00:21:26,887 --> 00:21:28,822 line:-1
如果你的快捷方式是基于意图的


377
00:21:28,889 --> 00:21:31,825 line:-2
当你在Siri界面上
点击快捷方式盘面时


378
00:21:31,892 --> 00:21:33,927 line:-1
将会显示快速确认屏幕


379
00:21:34,795 --> 00:21:36,563 line:-1
你想要订购咖啡吗？


380
00:21:37,197 --> 00:21:39,600 line:-1
如果支持后台运行


381
00:21:39,666 --> 00:21:42,903 line:-2
在用户确认后
将会运行 而不启动app


382
00:21:43,437 --> 00:21:46,240 line:-2
如果不支持后台运行
将会启动或恢复app


383
00:21:46,306 --> 00:21:47,608 line:-1
执行你的意图


384
00:21:50,010 --> 00:21:52,379 line:-1
在预测快捷方式的显示内容时


385
00:21:52,446 --> 00:21:55,716 line:-1
考虑了用户以往的app交互方式


386
00:21:56,316 --> 00:21:58,719 line:-1
在用户执行app的主要功能时


387
00:21:58,785 --> 00:22:01,388 line:-1
你应该记录用户的意图或操作


388
00:22:02,089 --> 00:22:06,493 line:-1
像Audible这样的音频app


389
00:22:06,560 --> 00:22:10,764 line:-2
当用户开始或播放音频列表时
将会记录IN媒体和音频播放意图


390
00:22:13,934 --> 00:22:17,404 line:-2
Siri表盘上的快捷方式界面
以信息相关性为基础


391
00:22:17,604 --> 00:22:21,108 line:-1
最相关的项目显示在最上方


392
00:22:21,175 --> 00:22:22,943 line:-1
不相关的项目显示在下方


393
00:22:24,878 --> 00:22:28,182 line:-2
以往的用户交互意图
无论是否已执行或记录的


394
00:22:28,582 --> 00:22:30,083 line:-1
以及记录的用户活动


395
00:22:30,150 --> 00:22:33,987 line:-1
都会用于搜索和预测


396
00:22:34,388 --> 00:22:35,556 line:-1
并且表明相关性


397
00:22:36,190 --> 00:22:38,058 line:-1
但是 如果要显示在Siri表盘上


398
00:22:38,125 --> 00:22:40,527 line:-1
必须提供明确的系统提示


399
00:22:40,594 --> 00:22:42,729 line:-1
通过创建相关的快捷方式


400
00:22:42,996 --> 00:22:44,498 line:-2
告知在什么时候
或位置显示快捷方式


401
00:22:47,034 --> 00:22:48,435 line:-1
相关快捷方式包括


402
00:22:48,502 --> 00:22:51,238 line:-2
基于用户活动或意图的
Siri Shortcuts


403
00:22:51,605 --> 00:22:55,042 line:-2
一个可选的手表模板
定义快捷方式盘面上将会显示


404
00:22:55,108 --> 00:22:57,511 line:-1
标题、副标题和图片


405
00:22:58,178 --> 00:23:01,849 line:-2
和一个相关性解释器
说明在什么时间、位置


406
00:23:01,915 --> 00:23:05,185 line:-2
或情况下
应该显示快捷方式


407
00:23:07,554 --> 00:23:10,724 line:-2
我们已经讨论基于
用户活动和用户意图的快捷方式


408
00:23:10,791 --> 00:23:13,861 line:-2
现在来看相关性快捷方式
的另外两个方面


409
00:23:16,296 --> 00:23:20,067 line:-2
手表模块是一个可选的
IN默认卡片模板


410
00:23:20,133 --> 00:23:24,137 line:-1
包括标题、可选标题和可选图片


411
00:23:24,905 --> 00:23:28,842 line:-2
如果你不提供手表模板
我们将通过IN快捷方式


412
00:23:28,909 --> 00:23:30,310 line:-1
提供必要的信息


413
00:23:30,577 --> 00:23:34,281 line:-1
但是你应该提供信息字符串


414
00:23:34,348 --> 00:23:37,851 line:-2
这样 当用户点击快捷方式盘面时
就知道他们将会获取什么内容


415
00:23:40,721 --> 00:23:44,591 line:-2
相关性解释器说明
在什么时间、地点或情况下


416
00:23:44,658 --> 00:23:46,560 line:-1
快捷方式最具有价值


417
00:23:47,594 --> 00:23:50,731 line:-2
考虑一下在什么时候和地点
将会需要你的快捷方式


418
00:23:51,131 --> 00:23:55,335 line:-2
是用户随时需要查看
或点击的信息吗？


419
00:23:56,003 --> 00:23:58,472 line:-2
还是仅在特定日期和时间
才需要这些信息？


420
00:23:59,173 --> 00:24:00,874 line:-1
或者与位置有关？


421
00:24:02,776 --> 00:24:05,846 line:-2
由于相关性快捷方式
使用一组相关性解释器


422
00:24:06,213 --> 00:24:08,682 line:-1
因此可以指定多种相关性


423
00:24:09,016 --> 00:24:13,187 line:-2
例如 可以为快捷方式
指定时间和地点相关性


424
00:24:15,722 --> 00:24:19,193 line:-1
这些相关性解释器会提醒系统


425
00:24:19,660 --> 00:24:21,695 line:-1
当用户与你的内容交互时


426
00:24:21,995 --> 00:24:24,131 line:-1
系统会记录用户的操作


427
00:24:24,798 --> 00:24:27,201 line:-2
如果用户没有与Siri界面上
显示的快捷方式


428
00:24:27,267 --> 00:24:30,137 line:-2
进行交互
将会取消相关性


429
00:24:32,840 --> 00:24:34,474 line:-1
在你创建快捷方式后


430
00:24:34,541 --> 00:24:37,811 line:-2
接下来需要把它们放入
相关性快捷方式库


431
00:24:37,945 --> 00:24:40,414 line:-1
Siri表盘将选择性使用它们


432
00:24:41,415 --> 00:24:45,819 line:-2
iOS app和Watch app
都可以提供快捷方式


433
00:24:46,887 --> 00:24:50,924 line:-2
iOS相关性快捷方式定期
从iPhone同步到Apple Watch


434
00:24:51,325 --> 00:24:54,828 line:-2
在显示手表相关快捷方式时
可能会对它们进行合并


435
00:24:56,029 --> 00:24:58,465 line:-1
如果你的手表支持iOS快捷方式


436
00:24:58,665 --> 00:25:00,501 line:-1
Watch app将会处理执行


437
00:25:01,235 --> 00:25:04,171 line:-2
如果不支持
或者未安装Watch app


438
00:25:05,706 --> 00:25:08,575 line:-2
将通过英特网
在手机上执行快捷方式


439
00:25:11,411 --> 00:25:15,182 line:-2
相关性快捷方式
可以显示在Siri表盘上


440
00:25:15,249 --> 00:25:20,320 line:-2
而不需要watchOS支持
如果它们是基于意图的快捷方式


441
00:25:20,721 --> 00:25:22,456 line:-1
并且支持后台运行


442
00:25:22,756 --> 00:25:25,225 line:-1
可以运行 而不需要


443
00:25:25,526 --> 00:25:26,727 line:-1
访问单独的加密数据


444
00:25:28,095 --> 00:25:32,266 line:-2
再次说明 这些快捷方式将会
通过英特网在iPhone上执行


445
00:25:32,733 --> 00:25:35,636 line:-2
Watch app始终能够带来
最丰富的用户体验


446
00:25:35,702 --> 00:25:37,504 line:-1
可以本地处理快捷方式


447
00:25:37,804 --> 00:25:39,273 line:-1
通过启动app


448
00:25:39,473 --> 00:25:42,009 line:-1
或者在后台执行意图


449
00:25:44,144 --> 00:25:47,114 line:-2
你应该定期更新
你的相关性快捷方式


450
00:25:47,681 --> 00:25:49,316 line:-1
如果用户启动你的app


451
00:25:49,750 --> 00:25:52,452 line:-2
例如在Siri界面
点击一个快捷方式


452
00:25:53,053 --> 00:25:55,622 line:-1
运行时将会完成更新


453
00:25:56,323 --> 00:25:58,458 line:-1
提供即视信息的快捷方式


454
00:25:58,525 --> 00:26:00,861 line:-2
对于用户来说很有用
它们无需启动app


455
00:26:01,228 --> 00:26:04,331 line:-2
回忆一下前面的饮食
和天气app例子


456
00:26:04,598 --> 00:26:05,632 line:-1
只需要看一下表盘


457
00:26:05,699 --> 00:26:08,669 line:-1
就可知道温度是72度 多云


458
00:26:08,902 --> 00:26:09,736 line:-1
不必进行点击


459
00:26:11,238 --> 00:26:12,573 line:-1
为了更好实现这个功能


460
00:26:12,906 --> 00:26:15,075 line:-1
我们添加了一个后台刷新任务：


461
00:26:15,142 --> 00:26:18,111 line:-2
WKRelevantShortcut
RefreshBackgroundTask


462
00:26:19,179 --> 00:26:22,783 line:-2
当你使用此任务时
应该检查你的数据是否需要更新


463
00:26:22,850 --> 00:26:26,119 line:-1
然后提供新的相关性快捷方式


464
00:26:27,421 --> 00:26:29,423 line:-1
在安排这些后台任务时


465
00:26:29,489 --> 00:26:31,391 line:-1
我们会考虑用户活动


466
00:26:31,625 --> 00:26:35,095 line:-1
和信息查看次数


467
00:26:38,699 --> 00:26:42,703 line:-2
如果基于意图的快捷方式
当app在后台运行时


468
00:26:42,769 --> 00:26:45,072 line:-2
快捷方式的意图
可能会更新app


469
00:26:46,540 --> 00:26:49,710 line:-1
由于意图扩展是一个独立于


470
00:26:49,776 --> 00:26:51,178 line:-1
WatchKit扩展的过程


471
00:26:51,445 --> 00:26:54,748 line:-2
现在我们提供一个
新的刷新后台任务 名为


472
00:26:54,815 --> 00:26:57,985 line:-2
WKIntentDidRun
RefreshBackgroundTask


473
00:26:58,418 --> 00:27:02,656 line:-2
以运行你的主扩展
并且在你的意图执行之后


474
00:27:02,723 --> 00:27:06,293 line:-1
更新任何可能过时的快照或通知内容


475
00:27:09,029 --> 00:27:12,766 line:-2
现在 只需要转动手腕
点击就可以看到快捷方式


476
00:27:13,867 --> 00:27:16,737 line:-2
你应该知道 用户可以在
手机上设置快捷方式短语


477
00:27:16,803 --> 00:27:19,339 line:-1
使用它们随时执行快捷方式


478
00:27:20,507 --> 00:27:23,076 line:-2
这些快捷方式短语
被同步到Apple Watch


479
00:27:23,143 --> 00:27:25,946 line:-1
这样你可以进行方便的操作


480
00:27:26,013 --> 00:27:28,715 line:-1
比如说 在菲尔咖啡


481
00:27:28,782 --> 00:27:31,785 line:-1
订购薄荷味莫吉托咖啡


482
00:27:33,220 --> 00:27:36,690 line:-2
不需要在Siri表盘上显示
快捷方式界面


483
00:27:36,857 --> 00:27:39,660 line:-2
就可以使用快捷方式短语
调用你的快捷方式


484
00:27:41,662 --> 00:27:46,300 line:-2
总结一下 你们可以使用
Siri Shortcuts


485
00:27:46,366 --> 00:27:48,302 line:-1
提供相关的信息


486
00:27:49,236 --> 00:27:52,973 line:-2
在iPhone和Apple Watch上
创建相关性快捷方式


487
00:27:53,040 --> 00:27:54,508 line:-1
将它们添加到快捷方式库


488
00:27:54,575 --> 00:27:56,777 line:-2
从而可以在Siri表盘上
选择性使用它们


489
00:27:57,644 --> 00:28:02,049 line:-2
最后 你的watchOS app
将会为用户带来最佳使用体验


490
00:28:02,649 --> 00:28:05,853 line:-2
他们能够在手表上
使用快捷方式做更多的事情


491
00:28:07,688 --> 00:28:09,890 line:-2
如果想要详细了解
Siri Shortcuts


492
00:28:10,457 --> 00:28:13,493 line:-1
建议你们观看一个演讲或实验室


493
00:28:14,361 --> 00:28:18,298 line:-2
尤其是关于Siri表盘上的
快捷方式的演讲


494
00:28:18,365 --> 00:28:22,035 line:-2
此演讲更详细地讲解
今天我提到的API


495
00:28:24,771 --> 00:28:26,940 line:-1
今天我们讲了很多的内容


496
00:28:27,641 --> 00:28:28,575 line:-1
这是我们讲过的内容


497
00:28:29,343 --> 00:28:33,580 line:-2
希望你们通过创建
动态交互式通知界面


498
00:28:33,814 --> 00:28:37,518 line:-2
使你们的通知更有吸引力
支持更多交互操作


499
00:28:38,585 --> 00:28:41,021 line:-2
现在 使用AV基础API
媒体远程控制指令


500
00:28:41,088 --> 00:28:44,391 line:-1
可以在后台播放音频


501
00:28:44,458 --> 00:28:46,159 line:-1
访问nowPlaying信息


502
00:28:47,461 --> 00:28:49,997 line:-2
利用新的
Workout Builder API


503
00:28:50,063 --> 00:28:52,032 line:-1
可以增强锻炼app的可靠性


504
00:28:52,933 --> 00:28:55,502 line:-1
通过创建相关性快捷方式


505
00:28:55,569 --> 00:28:57,471 line:-2
可以在Siri表盘上
提供有价值的信息


506
00:28:59,940 --> 00:29:02,676 line:-1
如果对今天的内容


507
00:29:03,043 --> 00:29:05,012 line:-1
或你的watchOS开发工作


508
00:29:05,412 --> 00:29:08,348 line:-2
有任何疑问
请拜访我们的实验室


509
00:29:08,715 --> 00:29:10,684 line:-1
我们想要看看你在做些什么


510
00:29:11,051 --> 00:29:13,887 line:-2
欢迎来访
祝你们在WWDC上收获良多

