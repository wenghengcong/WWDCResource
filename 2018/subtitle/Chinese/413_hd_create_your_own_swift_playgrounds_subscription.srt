1
00:00:07,516 --> 00:00:15,500
[ 音乐 ]


2
00:00:23,516 --> 00:00:30,186
[ 掌声 ]


3
00:00:30,686 --> 00:00:31,516
>> 早上好


4
00:00:31,736 --> 00:00:33,276
>> 欢迎来到 “Create Your Own


5
00:00:33,276 --> 00:00:34,756
Swift Playgrounds Subscription”


6
00:00:34,926 --> 00:00:35,956
>> 我希望你们昨晚在晚宴中


7
00:00:35,956 --> 00:00:37,186
度过了一段美好的时光 


8
00:00:37,186 --> 00:00:38,406
我们也知道你们现在


9
00:00:38,406 --> 00:00:39,836
充满活力 迫不及待地


10
00:00:39,836 --> 00:00:40,986
想要了解一些关于 Swift Playgrounds 的知识


11
00:00:41,496 --> 00:00:42,456
我叫 Grace


12
00:00:42,456 --> 00:00:43,536
>> 我叫 Holly


13
00:00:43,736 --> 00:00:44,766
>> 我是 Swift Playgrounds 部门的


14
00:00:44,766 --> 00:00:45,476
软件工程师


15
00:00:45,576 --> 00:00:46,846
>> 我是 Xcode 源码编辑器的


16
00:00:46,896 --> 00:00:48,086
软件工程师


17
00:00:48,516 --> 00:00:51,496
《Swift Playgrounds》是一款能让


18
00:00:51,496 --> 00:00:53,036
所有人都能在 iPad 上


19
00:00:53,036 --> 00:00:55,126
用 Swift 语言编程的 App


20
00:00:55,536 --> 00:00:57,676
作为作者 你可以


21
00:00:57,676 --> 00:00:59,006
通过主持你自己的订阅


22
00:00:59,006 --> 00:01:00,466
来与他人分享你的


23
00:01:00,916 --> 00:01:02,096
>> 今天我们会讨论一下


24
00:01:02,096 --> 00:01:03,216
如何从制作 Swift Playgrounds


25
00:01:03,556 --> 00:01:04,965
和 Playground Book 开始


26
00:01:04,965 --> 00:01:06,206
制作订阅 并进一步讲解


27
00:01:06,206 --> 00:01:07,356
如何在线为你的订阅者


28
00:01:07,356 --> 00:01:09,786
以 Feed 的形式主持你的内容


29
00:01:11,226 --> 00:01:12,176
>> 今天的讨论会


30
00:01:12,176 --> 00:01:13,756
将分为四个部分


31
00:01:14,616 --> 00:01:16,106
首先我们会很快地看一下


32
00:01:16,106 --> 00:01:17,786
Playground Book 格式


33
00:01:17,786 --> 00:01:19,086
以及 Xcode 9.3 中全新的


34
00:01:19,086 --> 00:01:20,846
“Swift Playgrounds Author Template”


35
00:01:21,406 --> 00:01:22,676
然后我们会一起看看


36
00:01:22,676 --> 00:01:24,156
Swift Playgrounds 订阅格式


37
00:01:24,456 --> 00:01:25,736
并了解一下如何在线


38
00:01:25,736 --> 00:01:27,146
主持你的 Feed


39
00:01:27,906 --> 00:01:29,086
>> 我先在台下看你


40
00:01:29,086 --> 00:01:32,000
稍后见


41
00:01:33,436 --> 00:01:34,756
>> Grace 和我一直在


42
00:01:34,806 --> 00:01:36,976
开发一套 Playground Book


43
00:01:36,976 --> 00:01:39,986
以让你们能够探索 Core Image API


44
00:01:40,476 --> 00:01:41,966
今天我们会创建


45
00:01:41,966 --> 00:01:43,446
一本新的 Playground Book


46
00:01:43,446 --> 00:01:45,286
以让你们能够探索一些


47
00:01:45,516 --> 00:01:47,416
内置的 CIFilter 


48
00:01:47,786 --> 00:01:49,536
你在这里可以看到


49
00:01:49,536 --> 00:01:51,106
我在浏览我们的 Book 中


50
00:01:51,106 --> 00:01:53,116
失真滤镜的教学章节的时候


51
00:01:53,116 --> 00:01:54,676
玩得很开心


52
00:01:54,676 --> 00:01:56,516
这些是我最喜欢的滤镜


53
00:01:58,296 --> 00:02:00,036
Playground Book 是一种机制


54
00:02:00,036 --> 00:02:01,706
它让你能够


55
00:02:01,916 --> 00:02:03,606
为某个特定的主题创建一个


56
00:02:03,606 --> 00:02:04,676
引导性的互动探索


57
00:02:05,106 --> 00:02:06,726
使用 Playground Book 你可以


58
00:02:06,726 --> 00:02:07,766
通过一系列章节


59
00:02:07,766 --> 00:02:09,425
来引导你的学习者


60
00:02:09,425 --> 00:02:11,566
这些章节还可以细分为页面


61
00:02:12,576 --> 00:02:14,046
每一页都包含一个


62
00:02:14,046 --> 00:02:16,026
源码编辑器 正如你在屏幕左侧看到的


63
00:02:16,486 --> 00:02:17,776
你也可以选择


64
00:02:17,776 --> 00:02:19,956
实现一个可选的 一直激活的


65
00:02:19,956 --> 00:02:22,676
实况视图 也就是你在屏幕右侧看到的


66
00:02:23,396 --> 00:02:24,776
实况视图


67
00:02:24,776 --> 00:02:26,246
是用来可视化


68
00:02:26,246 --> 00:02:27,416
一个页面中源码编辑器中的


69
00:02:27,416 --> 00:02:28,586
代码运行结果的


70
00:02:29,856 --> 00:02:32,056
为了把所有的这些都打包成


71
00:02:32,056 --> 00:02:34,386
一个单独的文件 我们使用了一个基于包的


72
00:02:34,386 --> 00:02:35,546
文件格式


73
00:02:36,076 --> 00:02:38,226
这意味着一个 Playground Book 本身


74
00:02:38,226 --> 00:02:40,236
就是一个文件结构


75
00:02:41,146 --> 00:02:43,156
它包含了为每个章节


76
00:02:43,156 --> 00:02:45,416
创建的子目录


77
00:02:45,416 --> 00:02:47,236
而每个章节中还有为每一个页面


78
00:02:47,286 --> 00:02:48,796
创建的文件夹


79
00:02:50,246 --> 00:02:51,766
每个 Playground 页面


80
00:02:51,766 --> 00:02:53,226
都包含了在源码编辑器运行代码


81
00:02:53,226 --> 00:02:54,606
以及显示实况视图


82
00:02:54,606 --> 00:02:56,326
所需要的


83
00:02:56,326 --> 00:02:58,356
所有资源


84
00:03:02,156 --> 00:03:03,836
Playground Book 结构中的每一个层级


85
00:03:03,836 --> 00:03:05,466
也都包含了一个属性列表文件


86
00:03:05,466 --> 00:03:07,376
其中存储着 Swift Playgrounds 用来


87
00:03:07,376 --> 00:03:09,496
配置 Book 构造


88
00:03:09,496 --> 00:03:10,536
以及构建内容表格


89
00:03:10,536 --> 00:03:12,946
所需要的元数据


90
00:03:13,536 --> 00:03:16,286
最后 除了你在页面中


91
00:03:16,286 --> 00:03:17,676
展示给你的学习者的内容


92
00:03:17,676 --> 00:03:19,636
Playground Book 还有可能会包含


93
00:03:19,636 --> 00:03:21,076
额外的 Swift 文件


94
00:03:21,076 --> 00:03:23,356
叫做 “Auxiliary Sources（辅助资源）”


95
00:03:24,526 --> 00:03:26,416
这些资源会被存储在一个


96
00:03:26,416 --> 00:03:27,446
叫做 “Sources（资源）”的文件夹中


97
00:03:28,276 --> 00:03:29,856
辅助资源让你能够


98
00:03:29,856 --> 00:03:31,566
提供额外的 Swift 代码


99
00:03:31,826 --> 00:03:33,646
比如类  Helper 函数等


100
00:03:33,826 --> 00:03:34,866
它们能够在你 Playground Book 的


101
00:03:34,866 --> 00:03:36,906
页面中使用


102
00:03:37,776 --> 00:03:39,706
你可以用辅助资源


103
00:03:39,706 --> 00:03:41,916
来完成很多任务


104
00:03:42,186 --> 00:03:43,916
通过利用这些资源


105
00:03:44,186 --> 00:03:45,476
你可以大幅简化


106
00:03:45,476 --> 00:03:46,746
你需要在你 Book 的页面中


107
00:03:47,046 --> 00:03:49,906
编写的代码


108
00:03:50,396 --> 00:03:51,616
让我们来看一个例子


109
00:03:51,616 --> 00:03:53,016
来了解一下如何用辅助资源


110
00:03:53,016 --> 00:03:55,186
来简化与实况视图之间的交流


111
00:03:55,746 --> 00:03:59,766
你可以通过调用


112
00:03:59,766 --> 00:04:01,736
PlaygroundLiveViewMessageHandler 


113
00:04:01,736 --> 00:04:03,206
协议中的 send() 方法来向


114
00:04:03,206 --> 00:04:04,956
实况视图发送信息


115
00:04:04,956 --> 00:04:06,176
这个协议是在 PlaygroundSupport 框架中


116
00:04:06,176 --> 00:04:07,086
声明的


117
00:04:07,086 --> 00:04:10,536
信息是以 PlaygroundValue 的形式


118
00:04:10,536 --> 00:04:12,056
发送到实况视图的


119
00:04:12,836 --> 00:04:14,316
PlaygroundValue 是一个枚举


120
00:04:14,316 --> 00:04:16,716
它同样也是在 PlaygroundSupport 框架中声明的


121
00:04:17,366 --> 00:04:20,826
为了简化把对象转化为


122
00:04:20,906 --> 00:04:22,596
PlaygroundValue 的过程


123
00:04:22,596 --> 00:04:23,536
我在一个叫做 LiveViewSupport.swift 的


124
00:04:23,536 --> 00:04:25,336
文件中 写了一个叫做


125
00:04:25,336 --> 00:04:27,536
PlaygroundValueConvertible 的协议


126
00:04:27,916 --> 00:04:29,406
我把这个文件包括到


127
00:04:29,406 --> 00:04:31,086
每本 Playground Book 中


128
00:04:31,146 --> 00:04:32,756
Book 层级的资源文件夹中


129
00:04:33,446 --> 00:04:35,376
然后 如果我想发送任何类型的对象


130
00:04:35,376 --> 00:04:38,706
比如一个 CIFilter


131
00:04:38,706 --> 00:04:40,376
我可以扩展那个类型


132
00:04:40,376 --> 00:04:42,846
以遵循 PlaygroundValueConvertible 协议


133
00:04:42,846 --> 00:04:45,436
然后实现 asPlaygroundValue() 方法


134
00:04:45,846 --> 00:04:47,096
这个方法将会把原始对象


135
00:04:47,096 --> 00:04:49,326
转换成一个 PlaygroundValue


136
00:04:51,196 --> 00:04:52,796
我还写了一个 Helper 函数


137
00:04:52,796 --> 00:04:54,836
叫做 sendValue 它可以获取一个


138
00:04:54,866 --> 00:04:56,646
PlaygroundValueConvertible 并把它


139
00:04:56,646 --> 00:04:58,046
以 PlaygroundValue 的形式发送到


140
00:04:58,046 --> 00:05:00,106
当且页面的实况视图中


141
00:05:00,916 --> 00:05:03,426
最后 当我在 Playground 页面中


142
00:05:03,426 --> 00:05:05,526
有一个想要发送到


143
00:05:05,526 --> 00:05:06,776
实况视图的对象


144
00:05:06,776 --> 00:05:08,536
我只需要简单地调用


145
00:05:08,536 --> 00:05:10,356
sendValue() 函数


146
00:05:10,356 --> 00:05:12,416
并传入该对象 这个对象会作为


147
00:05:12,416 --> 00:05:13,666
PagesContents.swift 中


148
00:05:13,666 --> 00:05:15,376
隐藏代码块的参数


149
00:05:15,816 --> 00:05:17,886
所以 如你所见


150
00:05:17,886 --> 00:05:19,556
我在辅助资源文件中


151
00:05:19,556 --> 00:05:21,576
写的代码 极大地简化了


152
00:05:21,576 --> 00:05:23,036
我在 Playground 页面中


153
00:05:23,096 --> 00:05:24,546
为了把一个值发送到实况视图 


154
00:05:24,546 --> 00:05:26,000
所需要写的代码


155
00:05:28,336 --> 00:05:29,996
若要了解更多


156
00:05:29,996 --> 00:05:31,466
关于 Playground Book 包的信息


157
00:05:31,466 --> 00:05:32,976
我建议你去看看


158
00:05:33,006 --> 00:05:35,256
“Playground Book Format Reference” 


159
00:05:35,256 --> 00:05:38,486
你可以在 developer.apple.com 上找到它


160
00:05:38,846 --> 00:05:40,306
现在 我们来看看


161
00:05:40,306 --> 00:05:41,326
Swift Playgrounds 作者模版


162
00:05:41,326 --> 00:05:42,896
你可以用它来


163
00:05:42,896 --> 00:05:44,076
开始撰写你的


164
00:05:44,126 --> 00:05:45,556
Playground Book


165
00:05:46,796 --> 00:05:48,226
Swift Playgrounds 作者模版


166
00:05:48,226 --> 00:05:50,096
是一个起始 Xcode 项目


167
00:05:50,096 --> 00:05:51,476
它会帮你创建


168
00:05:51,476 --> 00:05:54,756
调试 以及生产 Playground Book


169
00:05:55,726 --> 00:05:57,426
使用这个模版


170
00:05:57,426 --> 00:05:58,726
你可以逐步为你的实况视图


171
00:05:58,726 --> 00:06:00,756
调试代码 就好像它是一款 App 一样


172
00:06:00,756 --> 00:06:02,316
所以你可以更轻松地


173
00:06:02,316 --> 00:06:04,086
找到 Bug 并为你 Playground Book 的开发


174
00:06:04,086 --> 00:06:06,566
规划一个更高效的工作流


175
00:06:07,026 --> 00:06:08,546
这里你可以看到我在


176
00:06:08,546 --> 00:06:09,706
逐步调试我之前给你展示过的


177
00:06:09,706 --> 00:06:11,646
为 CIFilter 设计的 Playground Book 中的


178
00:06:11,646 --> 00:06:12,986
实况视图对应的代码


179
00:06:14,796 --> 00:06:16,416
Swift Playgrounds 作者模版


180
00:06:16,416 --> 00:06:18,576
可以在 


181
00:06:18,576 --> 00:06:22,426
developer.apple.com 上直接下载


182
00:06:22,906 --> 00:06:24,736
这个 Xcode 项目兼容


183
00:06:24,736 --> 00:06:26,776
Swift Playgrounds 2.1 以及


184
00:06:26,776 --> 00:06:29,996
Xcode 9.3  它们都是在今年早些时候发布的


185
00:06:31,276 --> 00:06:32,286
这个项目包括了一些


186
00:06:32,286 --> 00:06:33,686
使用 Swift 4.1 编译器构建的框架


187
00:06:33,686 --> 00:06:35,706
因为这正是


188
00:06:35,756 --> 00:06:36,956
Swift Playgrounds 2.1 


189
00:06:37,016 --> 00:06:38,576
正在使用的框架


190
00:06:39,106 --> 00:06:40,296
所以很重要的一点是


191
00:06:40,296 --> 00:06:41,636
你为这个项目


192
00:06:41,636 --> 00:06:43,836
使用的 Xcode 版本 也在使用


193
00:06:43,896 --> 00:06:45,406
Swift 4.1


194
00:06:46,536 --> 00:06:48,416
Swift Playgrounds 作者模版


195
00:06:48,416 --> 00:06:49,966
包括了三个不同的 Target


196
00:06:49,966 --> 00:06:51,296
它们的 Product 将会


197
00:06:51,296 --> 00:06:53,336
帮助你撰写你的 Playground Book


198
00:06:53,906 --> 00:06:55,816
第一个 Target 叫做 PlaygroundBook


199
00:06:56,446 --> 00:06:58,266
第二个叫做 Book_Sources


200
00:06:58,626 --> 00:07:00,156
第三个叫做


201
00:07:00,156 --> 00:07:01,486
LiveViewTestApp


202
00:07:02,396 --> 00:07:04,246
PlaygroundBook Target


203
00:07:04,246 --> 00:07:06,346
会生产一个 Playground Book 作为输出


204
00:07:06,646 --> 00:07:07,976
你可以在 Xcode 的 “Project 


205
00:07:07,976 --> 00:07:10,566
Navigator” 中的 “Products” 群组中看到它


206
00:07:11,356 --> 00:07:12,996
这个 Target 的所有文件


207
00:07:12,996 --> 00:07:15,186
都在 Xcode 的 PlaygroundBook 群组中


208
00:07:15,566 --> 00:07:16,996
这个模版包括了


209
00:07:16,996 --> 00:07:18,386
一本 Playground Book 的起始文件


210
00:07:18,386 --> 00:07:20,866
有一个章节和一个页面


211
00:07:22,186 --> 00:07:24,336
模版还包括了


212
00:07:24,336 --> 00:07:25,796
两个 Book 层级的辅助资源文件


213
00:07:25,796 --> 00:07:27,456
它们为 Playground Book 中


214
00:07:27,456 --> 00:07:29,346
一直激活的实况视图


215
00:07:29,346 --> 00:07:30,906
提供了默认的执行


216
00:07:31,286 --> 00:07:34,656
第二个 Book_Sources Target


217
00:07:34,656 --> 00:07:36,256
会编译所有的 Book 层级


218
00:07:36,256 --> 00:07:37,376
辅助资源


219
00:07:37,656 --> 00:07:39,186
你可以看到 这个 Target 的


220
00:07:39,186 --> 00:07:41,086
所有文件都放在


221
00:07:41,086 --> 00:07:42,146
Xcode 项目导航器中的


222
00:07:42,206 --> 00:07:44,726
“Sources” 群组中


223
00:07:46,126 --> 00:07:47,906
编译这些资源


224
00:07:47,906 --> 00:07:49,466
让你能够开发


225
00:07:49,466 --> 00:07:51,946
集成了完整编辑器功能的 Book 层级资源


226
00:07:52,426 --> 00:07:53,646
这意味着你将能够使用


227
00:07:53,646 --> 00:07:55,186
在所有其他 Xcode 项目中可用的


228
00:07:55,186 --> 00:07:56,936
Xcode 源码编辑器功能


229
00:07:56,936 --> 00:07:58,726
比如自动完成代码


230
00:07:58,726 --> 00:08:00,896
或是快速帮助


231
00:08:00,896 --> 00:08:02,986
此外 LiveViewTestApp


232
00:08:02,986 --> 00:08:05,056
会使用这个 Target 来显示


233
00:08:05,056 --> 00:08:05,876
实况视图


234
00:08:06,256 --> 00:08:07,486
所以 你针对 Book 中的


235
00:08:07,486 --> 00:08:09,186
实况视图的实现


236
00:08:09,186 --> 00:08:10,646
必须要在你的 Book 层级资源中


237
00:08:10,646 --> 00:08:13,926
如果你想要使用测试 App 


238
00:08:14,206 --> 00:08:14,416
来进行调试


239
00:08:14,416 --> 00:08:16,906
最后 我们还有 LiveViewTestApp Target


240
00:08:17,616 --> 00:08:18,806
你可以在 Xcode 的


241
00:08:18,806 --> 00:08:19,916
“LiveViewTestApp” 群组中找到


242
00:08:19,916 --> 00:08:22,056
这个 Target 的所有文件


243
00:08:23,556 --> 00:08:25,426
这个 Target 会产生一个 App


244
00:08:25,426 --> 00:08:26,986
展示你 Playground Book 的实况视图


245
00:08:26,986 --> 00:08:28,776
与它将在 Swift Playgrounds 中


246
00:08:28,776 --> 00:08:30,496
展示的样子相似


247
00:08:31,046 --> 00:08:33,326
如我之前提到的


248
00:08:33,326 --> 00:08:34,556
你针对实况视图的实现


249
00:08:34,556 --> 00:08:36,366
必须要在你的 Book 层级的


250
00:08:36,366 --> 00:08:37,385
辅助资源中


251
00:08:38,506 --> 00:08:40,446
LiveViewTestApp 让你能够


252
00:08:40,446 --> 00:08:42,356
以全屏或是分屏模式


253
00:08:42,356 --> 00:08:44,436
调试你的实况视图


254
00:08:44,436 --> 00:08:45,746
无需先把你的 Playground Book 导出到


255
00:08:45,746 --> 00:08:48,116
Swift Playgrounds 中


256
00:08:49,036 --> 00:08:50,766
LiveViewTestApp 可以在


257
00:08:50,946 --> 00:08:53,096
iPad 或是 iOS 模拟器中使用


258
00:08:53,656 --> 00:08:56,506
Swift Playgrounds 作者模版


259
00:08:56,506 --> 00:08:58,856
还有三个支持框架


260
00:09:00,026 --> 00:09:02,436
前两个分别是 PlaygroundSupport 和


261
00:09:02,436 --> 00:09:03,726
PlaygroundBluetooth 框架


262
00:09:03,726 --> 00:09:04,636
它们来自 Swift Playgrounds


263
00:09:05,346 --> 00:09:06,486
在项目中包括这些框架


264
00:09:06,486 --> 00:09:08,036
让 Book_Sources 和 LiveViewTestApp


265
00:09:08,036 --> 00:09:09,926
这两个 Target 


266
00:09:09,926 --> 00:09:11,506
能充分利用这些框架


267
00:09:11,506 --> 00:09:13,366
提供的 API


268
00:09:14,456 --> 00:09:16,116
第三个支持的框架


269
00:09:16,116 --> 00:09:18,116
叫做 LiveViewHost


270
00:09:18,536 --> 00:09:21,526
这个框架可以被 LiveViewTestApp 使用


271
00:09:21,526 --> 00:09:23,000
来显示实况视图


272
00:09:26,046 --> 00:09:28,806
为了实现你的实况视图 你需要把你所有的的代码


273
00:09:28,806 --> 00:09:30,336
添加到你的 Playground Book 中的


274
00:09:30,336 --> 00:09:32,296
Book 层级辅助资源中


275
00:09:32,516 --> 00:09:34,176
在模版中 包括了一个


276
00:09:34,176 --> 00:09:35,536
针对你的实况视图的视图控制器


277
00:09:35,536 --> 00:09:36,976
它在一个叫做 LiveViewController.Swift


278
00:09:37,076 --> 00:09:38,626
的文件中


279
00:09:39,566 --> 00:09:40,996
同样被包括在模版中的


280
00:09:40,996 --> 00:09:42,406
还有一个 Helper 函数


281
00:09:42,406 --> 00:09:44,376
它的作用是加载一个你的


282
00:09:44,376 --> 00:09:45,016
实况视图的实例 位于一个叫做


283
00:09:45,016 --> 00:09:46,446
LiveViewSupport.swift 的文件中


284
00:09:47,296 --> 00:09:50,186
你可以添加任何其他 实现实况视图所需的文件


285
00:09:50,186 --> 00:09:52,416
并且你可以使用你 Book_Sources 代码中


286
00:09:52,416 --> 00:09:54,856
所有的 Playground 框架


287
00:09:55,326 --> 00:09:58,766
模版中还包括一个


288
00:09:58,766 --> 00:10:00,046
Storyboard 让你能


289
00:10:00,046 --> 00:10:01,896
为你的实况视图配置 UI


290
00:10:02,846 --> 00:10:04,366
你可以在 “PrivateResources” 群组中


291
00:10:04,366 --> 00:10:05,686
添加任何其他你的 Playground Book


292
00:10:05,806 --> 00:10:07,276
所需要的资源


293
00:10:07,686 --> 00:10:10,626
最后 为了配置你测试 App 的


294
00:10:10,626 --> 00:10:12,926
实况视图测试


295
00:10:13,276 --> 00:10:14,546
你需要在 AppDelegate.swift 中


296
00:10:14,546 --> 00:10:16,446
实现一个方法


297
00:10:16,956 --> 00:10:18,386
具体来说 你需要实现


298
00:10:18,386 --> 00:10:20,186
setUpLiveView() 方法


299
00:10:21,066 --> 00:10:22,936
默认情况下 这个方法


300
00:10:22,936 --> 00:10:24,566
会从我刚刚在 LiveViewSupport.swift 中


301
00:10:24,566 --> 00:10:26,596
提到过的 LiveView.storyboard 中的


302
00:10:26,596 --> 00:10:27,536
Helper 方法 加载一个


303
00:10:27,536 --> 00:10:29,526
LiveViewController 的实例


304
00:10:29,716 --> 00:10:31,526
它叫做 instantiateLiveView()


305
00:10:33,236 --> 00:10:35,396
现在我想把 Grace 请回舞台


306
00:10:35,396 --> 00:10:36,976
来看看我们一直在


307
00:10:36,976 --> 00:10:38,096
使用 Swift Playgrounds 


308
00:10:38,096 --> 00:10:40,726
作者模版做的那本 Playground Book


309
00:10:42,516 --> 00:10:48,746
[ 掌声 ]


310
00:10:49,246 --> 00:10:51,966
好的 现在我们看到的就是


311
00:10:51,966 --> 00:10:54,026
我之前给你们粗略看过的


312
00:10:54,026 --> 00:10:57,286
用于测试 CIFilter 的 Playground Book


313
00:10:57,886 --> 00:10:59,616
这本 Book 的作用是


314
00:10:59,616 --> 00:11:01,376
学习者可以用它来


315
00:11:01,376 --> 00:11:03,546
在源码编辑器中


316
00:11:03,546 --> 00:11:04,916
创建并操作 Core Image 中的 CIFilter


317
00:11:04,916 --> 00:11:06,426
并且这些滤镜将会被发送到


318
00:11:06,426 --> 00:11:08,556
实况视图中 并加载到


319
00:11:08,556 --> 00:11:09,926
实况摄像头输出中 来让用户看看


320
00:11:09,926 --> 00:11:11,336
这些滤镜是什么样的


321
00:11:12,346 --> 00:11:13,956
我们在这里看到的是


322
00:11:13,956 --> 00:11:15,756
LiveViewController.swift 文件夹


323
00:11:16,776 --> 00:11:18,566
我已经实现了一个


324
00:11:18,566 --> 00:11:19,846
在模版中自带的方法


325
00:11:19,846 --> 00:11:22,016
在它的下面


326
00:11:22,056 --> 00:11:23,386
我添加了 要在实况视图中


327
00:11:23,386 --> 00:11:24,896
显示实况摄像头输出


328
00:11:24,896 --> 00:11:26,856
所需要的剩余代码


329
00:11:27,866 --> 00:11:29,436
我之前提到过 我还想


330
00:11:29,436 --> 00:11:31,766
在实况摄像头输出的每一帧


331
00:11:31,766 --> 00:11:33,366
应用 Core Image 滤镜


332
00:11:33,366 --> 00:11:35,396
所以我在我的 Book 层级资源中


333
00:11:35,396 --> 00:11:37,376
添加了一些新的文件


334
00:11:37,606 --> 00:11:38,946
并实现了一个滤镜渲染器


335
00:11:38,946 --> 00:11:40,226
来把这个滤镜应用到


336
00:11:40,226 --> 00:11:42,546
实况摄像头输出上


337
00:11:43,406 --> 00:11:45,226
现在如果我选中


338
00:11:45,226 --> 00:11:47,966
LiveViewTestApp Target


339
00:11:47,966 --> 00:11:50,776
我其实可以直接运行这段代码


340
00:11:50,776 --> 00:11:52,366
来看看我的实况视图会是什么样子


341
00:11:53,296 --> 00:11:54,986
并且我把这个 App


342
00:11:54,986 --> 00:11:56,296
配置成以分屏模式


343
00:11:56,296 --> 00:11:57,356
显示实况视图


344
00:11:59,086 --> 00:12:00,396
我们在这里可以看到


345
00:12:00,396 --> 00:12:02,366
实况视图在分屏模式中


346
00:12:02,366 --> 00:12:03,866
看起来是什么样子的


347
00:12:03,866 --> 00:12:05,076
这与它之后在 Swift Playgrounds 中的


348
00:12:05,076 --> 00:12:06,476
源码编辑器旁展示的样子


349
00:12:06,476 --> 00:12:06,986
很接近


350
00:12:07,306 --> 00:12:10,276
为了模拟向实况视图发送滤镜


351
00:12:10,276 --> 00:12:11,906
我们还添加了几个按钮


352
00:12:11,906 --> 00:12:13,096
你可以在左侧看到它们


353
00:12:13,416 --> 00:12:15,626
这些按钮在我的测试 App 代码中 已经实现了


354
00:12:15,816 --> 00:12:17,466
如果 Grace 轻点其中的一个滤镜


355
00:12:17,466 --> 00:12:19,566
我们就能看到


356
00:12:19,566 --> 00:12:21,446
那个滤镜会应用到实况摄像头输出上


357
00:12:22,076 --> 00:12:23,216
这看起来很棒


358
00:12:23,576 --> 00:12:26,966
我还想试试别的滤镜 Grace 


359
00:12:26,966 --> 00:12:28,926
我真的喜欢 CIPointillize 滤镜


360
00:12:28,926 --> 00:12:32,576
如果它轻点一下这个


361
00:12:32,576 --> 00:12:34,866
这看起来差不多了


362
00:12:34,866 --> 00:12:37,836
但是你可能已经


363
00:12:37,836 --> 00:12:39,536
注意到了之前的粉色滤镜


364
00:12:39,536 --> 00:12:41,946
仍然存在于一些边缘上


365
00:12:41,946 --> 00:12:43,116
并且 Pointillize 滤镜比我们想要的


366
00:12:43,116 --> 00:12:44,146
要小一点


367
00:12:44,446 --> 00:12:45,536
所以我回到 Xcode


368
00:12:45,536 --> 00:12:47,256
因为我认为我们在


369
00:12:47,256 --> 00:12:49,236
我写的一个叫做 Render 的函数中的


370
00:12:49,236 --> 00:12:51,716
滤镜渲染器中有一个 Bug


371
00:12:52,026 --> 00:12:53,136
我使用 Command-Shift-O 来


372
00:12:53,136 --> 00:12:55,616
用 Open Quickly 功能前往那个函数


373
00:12:56,766 --> 00:12:58,356
我还要在这个方法


374
00:12:58,356 --> 00:13:01,136
返回之前设置一个断点


375
00:13:01,526 --> 00:13:03,426
由于实况摄像头输出的


376
00:13:03,506 --> 00:13:04,926
每一帧 都会获得一个


377
00:13:04,926 --> 00:13:06,536
应用在它上面的滤镜


378
00:13:06,536 --> 00:13:07,806
我们应该立即激活这个断点


379
00:13:07,806 --> 00:13:09,956
因为这个方法经常被调用


380
00:13:10,886 --> 00:13:12,616
好的 我们激活了这个断点


381
00:13:12,676 --> 00:13:15,106
现在我可以使用调试控制台


382
00:13:15,106 --> 00:13:17,346
来审查我这里的所有变量


383
00:13:17,606 --> 00:13:19,456
我具体想要看看


384
00:13:19,456 --> 00:13:21,766
源图像的尺寸


385
00:13:22,326 --> 00:13:26,166
以及加了滤镜的图像的尺寸


386
00:13:26,166 --> 00:13:28,976
看看它们的差别在哪


387
00:13:32,056 --> 00:13:34,096
好的 我们可以看到


388
00:13:34,096 --> 00:13:35,796
加了滤镜的图像尺寸


389
00:13:35,796 --> 00:13:37,306
要比源图像尺寸大


390
00:13:37,896 --> 00:13:40,066
在第 59 行 我在以


391
00:13:40,066 --> 00:13:42,826
滤镜图像的尺寸渲染


392
00:13:42,826 --> 00:13:44,396
但是其实我想要的是


393
00:13:44,396 --> 00:13:46,436
以源图像的尺寸来渲染


394
00:13:46,436 --> 00:13:47,576
我来把这个修复一下


395
00:13:48,586 --> 00:13:52,976
禁用断点 再运行一次


396
00:13:53,346 --> 00:13:54,806
我们回到 iPad 看一看


397
00:13:58,196 --> 00:14:00,986
我们让 Grace 用相同的步骤 再来一次


398
00:14:01,386 --> 00:14:03,146
轻点 CIColorMatrix


399
00:14:03,276 --> 00:14:05,276
再轻点 CIPointillize


400
00:14:06,356 --> 00:14:07,676
现在我们看到 Pointillize 滤镜


401
00:14:07,676 --> 00:14:10,126
能以正确的尺寸呈现了


402
00:14:10,126 --> 00:14:11,986
也就是与原始实况摄像头输出


403
00:14:12,356 --> 00:14:14,926
相同的尺寸


404
00:14:14,926 --> 00:14:16,366
所以现在我想我所有的代码


405
00:14:16,366 --> 00:14:18,256
都是正确的了 我会把我的


406
00:14:18,256 --> 00:14:19,496
Playground 群组打包 并把它拷贝到


407
00:14:19,496 --> 00:14:21,396
Swift Playgrounds 来看看这个


408
00:14:21,646 --> 00:14:23,226
实况视图到底看起来怎样


409
00:14:23,266 --> 00:14:24,716
所以我回到 Xcode


410
00:14:25,116 --> 00:14:27,036
选择 Playground Book Scheme


411
00:14:27,126 --> 00:14:30,186
按下构建按钮


412
00:14:30,186 --> 00:14:32,136
然后在项目导航器中


413
00:14:32,136 --> 00:14:33,266
就能看到我们的 Playground Book


414
00:14:33,266 --> 00:14:34,366
出现在了 “Build Products” 群组中


415
00:14:34,836 --> 00:14:36,246
这时 你可以通过隔空投送


416
00:14:36,246 --> 00:14:37,656
或者 iCloud 把你的 Playground Book 


417
00:14:37,656 --> 00:14:39,106
拷贝到 Swift Playgrounds 中


418
00:14:39,106 --> 00:14:41,126
但由于时间有限


419
00:14:41,126 --> 00:14:42,706
我已经做好了这件事


420
00:14:42,706 --> 00:14:43,966
如果我们回到 iPad 上


421
00:14:44,136 --> 00:14:46,276
并麻烦 Grace 打开 Swift Playgrounds


422
00:14:46,276 --> 00:14:48,706
我们就可以看到我的


423
00:14:48,706 --> 00:14:50,176
“Test Out CIFilter!” 


424
00:14:50,176 --> 00:14:51,176
这本 Playground Book 已经在里面了


425
00:14:51,446 --> 00:14:52,656
我们麻烦 Grace 打开它


426
00:14:52,746 --> 00:14:53,866
就能看到我们的实况视图


427
00:14:53,866 --> 00:14:54,846
是什么样子的了


428
00:14:55,416 --> 00:14:58,496
你可以看到我们在源码编辑器中


429
00:14:58,496 --> 00:15:00,466
有一个 CIFilter


430
00:15:00,466 --> 00:15:01,646
我们已经为这个滤镜


431
00:15:01,646 --> 00:15:03,026
设置了一些输入值


432
00:15:03,026 --> 00:15:05,306
所以如果她点按 “Run My Code（运行我的代码）”


433
00:15:05,306 --> 00:15:06,636
我们应该就能看见这个滤镜


434
00:15:06,636 --> 00:15:07,776
应用到了摄像头输出上


435
00:15:12,046 --> 00:15:13,556
好的 我真的很喜欢这个滤镜


436
00:15:14,086 --> 00:15:17,156
我喜欢这个颜色 对了 Grace 你知道我们


437
00:15:17,156 --> 00:15:18,046
看起来像什么吗


438
00:15:18,196 --> 00:15:18,656
>> 什么？


439
00:15:19,066 --> 00:15:20,766
>> 我觉得我们看起来像工程师


440
00:15:21,116 --> 00:15:21,476
>> 那当然


441
00:15:23,556 --> 00:15:23,956
>> 必须的 [ 笑声 ]


442
00:15:24,516 --> 00:15:27,546
[ 掌声 ]


443
00:15:28,046 --> 00:15:29,836
>> 所以你刚刚看到了我们用


444
00:15:29,836 --> 00:15:30,796
Swift Playgrounds 作者模板


445
00:15:30,796 --> 00:15:32,886
编写并且调试了


446
00:15:32,886 --> 00:15:34,106
我们 Playground Book 中的


447
00:15:34,106 --> 00:15:35,676
实况视图 我们希望这些新的工作流


448
00:15:35,676 --> 00:15:37,086
能够帮你在撰写你自己的 Playground Book 时


449
00:15:37,086 --> 00:15:38,856
效率更高


450
00:15:39,436 --> 00:15:40,486
现在我将把舞台交给 Grace


451
00:15:40,486 --> 00:15:42,026
学习一下关于


452
00:15:42,076 --> 00:15:43,996
Swift Playground 订阅的知识


453
00:15:45,516 --> 00:15:48,626
[ 掌声 ]


454
00:15:49,126 --> 00:15:49,516
>> 太棒了


455
00:15:50,186 --> 00:15:50,916
非常感谢你 Holly


456
00:15:52,326 --> 00:15:53,726
现在我们已经了解了


457
00:15:53,726 --> 00:15:55,056
Playground Book 格式


458
00:15:55,126 --> 00:15:56,036
并学习了有关 Swift Playgrounds


459
00:15:56,036 --> 00:15:57,336
作者模板的知识


460
00:15:57,636 --> 00:15:58,876
我们现在来看看


461
00:15:58,876 --> 00:16:00,226
如何把这些文稿


462
00:16:00,226 --> 00:16:01,316
放到订阅中去


463
00:16:02,716 --> 00:16:04,796
首先 什么是订阅


464
00:16:05,586 --> 00:16:06,166
你应该会想到


465
00:16:06,166 --> 00:16:09,316
播客或者杂志那样的订阅


466
00:16:09,796 --> 00:16:11,196
也就是说 当作者发布新的内容时


467
00:16:11,196 --> 00:16:14,256
订阅者会收到通知


468
00:16:14,686 --> 00:16:16,516
订阅内容和 Apple 的内容


469
00:16:16,516 --> 00:16:17,636
一起在这里出现


470
00:16:18,266 --> 00:16:19,586
当你在你的订阅频道


471
00:16:19,586 --> 00:16:21,126
发布了一个新的文稿时


472
00:16:21,126 --> 00:16:22,376
Swift Playgrounds 会把它取来


473
00:16:22,376 --> 00:16:23,666
并作为一个新的文稿


474
00:16:23,666 --> 00:16:27,106
展示给用户 供他们查阅


475
00:16:27,376 --> 00:16:28,736
用户可以通过访问你的网站


476
00:16:28,736 --> 00:16:31,000
来订阅你的订阅频道


477
00:16:35,236 --> 00:16:37,016
订阅以你发布的


478
00:16:37,016 --> 00:16:38,696
可下载内容的 Feed 的形式


479
00:16:38,696 --> 00:16:39,586
存在于线上


480
00:16:40,486 --> 00:16:41,486
你将会通过发布 JSON 文件


481
00:16:41,486 --> 00:16:42,446
来发布你的内容


482
00:16:42,446 --> 00:16:44,466
这个 JSON 文件中包含了 Swift Playgrounds


483
00:16:44,466 --> 00:16:48,000
要下载你的内容 所需要的一切数据


484
00:16:50,486 --> 00:16:51,486
如果你没有用过 JSON 文件


485
00:16:51,486 --> 00:16:53,576
JSON 是一个基于文本的


486
00:16:53,576 --> 00:16:55,296
文稿格式 它的作用是存储


487
00:16:55,296 --> 00:16:56,156
以及交换数据


488
00:16:57,096 --> 00:16:58,426
我们的目标是让


489
00:16:58,426 --> 00:17:00,016
JSON 对象的使用者了解


490
00:17:00,276 --> 00:17:01,826
你的内容在每一个 Key 上应该是


491
00:17:01,826 --> 00:17:02,806
什么值


492
00:17:03,376 --> 00:17:04,376
举个例子


493
00:17:04,376 --> 00:17:07,076
在我们的订阅中 “title” 这个 Key


494
00:17:07,076 --> 00:17:09,756
的值是 “WWDC Photo Filters”


495
00:17:10,435 --> 00:17:14,915
Playground Feed 格式 分为两个部分


496
00:17:15,465 --> 00:17:16,786
一部分是为了确定


497
00:17:16,786 --> 00:17:18,266
你的订阅的


498
00:17:18,266 --> 00:17:19,976
某些整体特征 


499
00:17:19,976 --> 00:17:21,685
而另一个部分


500
00:17:21,685 --> 00:17:23,136
是为了告诉我们你的订阅中


501
00:17:23,136 --> 00:17:24,116
每个文稿的信息


502
00:17:25,415 --> 00:17:26,896
所以我们来看看


503
00:17:26,896 --> 00:17:28,136
你在创建你自己的订阅时


504
00:17:28,136 --> 00:17:30,016
需要用到的 Playground Feed 格式


505
00:17:30,576 --> 00:17:34,426
我们的第一个 Key 是 “title”


506
00:17:35,206 --> 00:17:36,546
这个值应该是一个字符串


507
00:17:36,746 --> 00:17:38,106
对应你的订阅的标题


508
00:17:38,856 --> 00:17:39,766
这里是它在 JSON 文件中应该的样子


509
00:17:39,766 --> 00:17:41,096
而这里是在


510
00:17:41,096 --> 00:17:42,696
《Swift Playgrounds》App 中


511
00:17:42,826 --> 00:17:44,276
你的订阅区中


512
00:17:44,546 --> 00:17:46,076
标题显示的地方


513
00:17:47,616 --> 00:17:49,246
下一个 Key 是


514
00:17:49,286 --> 00:17:50,556
“publisherName” 也就是你


515
00:17:51,566 --> 00:17:53,036
这个 Key 的值也应该是一个


516
00:17:53,036 --> 00:17:54,586
字符串 它代表着


517
00:17:54,586 --> 00:17:56,156
该订阅的发布者的名字


518
00:17:56,506 --> 00:17:57,916
它会在你的订阅中的


519
00:17:57,916 --> 00:17:59,416
每个文稿的详细视图中


520
00:17:59,416 --> 00:18:01,000
显示出来


521
00:18:04,046 --> 00:18:05,076
接下来是 “feedIdentifier”


522
00:18:05,766 --> 00:18:07,156
它应该是主持你 Feed 的


523
00:18:07,336 --> 00:18:09,676
域名的反向 DNS


524
00:18:10,136 --> 00:18:11,326
我们在稍后会讲到


525
00:18:11,326 --> 00:18:12,976
关于域名的内容 现在你只需要知道


526
00:18:13,256 --> 00:18:15,686
反向 DNS 就是把网址反过来写


527
00:18:16,176 --> 00:18:17,706
举个例子 如果我在


528
00:18:17,706 --> 00:18:20,216
developer.apple.com 上主持我的 Feed


529
00:18:20,546 --> 00:18:22,306
那么我的 feedIdentifier 将会是


530
00:18:22,416 --> 00:18:23,566
com.apple.developer


531
00:18:26,056 --> 00:18:28,036
下一个 Key 是 “contactURL”


532
00:18:28,186 --> 00:18:33,886
这将用来报告关于你的 Feed 的问题


533
00:18:34,466 --> 00:18:36,216
接下来是 Feed 的 “formatVersion”


534
00:18:36,856 --> 00:18:38,036
它代表着你的 Feed 所遵循的


535
00:18:38,036 --> 00:18:40,306
Feed 格式版本


536
00:18:41,286 --> 00:18:42,276
这里我们


537
00:18:42,276 --> 00:18:44,596
讨论的 Feed 格式是版本 1.0


538
00:18:45,176 --> 00:18:46,526
一旦 Feed 格式有了更新


539
00:18:46,526 --> 00:18:47,756
并且你想让你的订阅


540
00:18:47,756 --> 00:18:48,586
也进行更新


541
00:18:48,586 --> 00:18:50,226
你就可以更改你的


542
00:18:50,226 --> 00:18:51,726
feed.json 文件


543
00:18:51,726 --> 00:18:53,166
进行更新 并在你的 feed.json 文件中


544
00:18:53,166 --> 00:18:55,136
更改 “formatVersion” 的 Key 值


545
00:18:55,706 --> 00:18:56,886
别忘了这个是一个字符串


546
00:18:56,886 --> 00:18:58,386
所以它应该被引号括起来


547
00:19:00,046 --> 00:19:02,866
最后是 “documents” Key


548
00:19:03,406 --> 00:19:04,466
它是 Playground Feed 格式


549
00:19:04,466 --> 00:19:06,876
第二个部分的开始


550
00:19:07,716 --> 00:19:09,186
这个 Key 的值应该是


551
00:19:09,186 --> 00:19:10,986
一个对象数组


552
00:19:10,986 --> 00:19:12,636
其中的对象代表着你的 Feed 中的


553
00:19:12,636 --> 00:19:13,266
Playground Book


554
00:19:13,946 --> 00:19:14,956
接下来我们会讨论一下


555
00:19:14,956 --> 00:19:17,966
这些对象的格式


556
00:19:18,216 --> 00:19:21,646
“documents” 是一个对象数组


557
00:19:22,726 --> 00:19:24,276
其中的对象用 Key 值对


558
00:19:24,276 --> 00:19:25,126
来表示文稿


559
00:19:25,666 --> 00:19:27,306
我们来一一讲解一下


560
00:19:27,306 --> 00:19:28,856
要表示一个文稿你都需要什么


561
00:19:28,856 --> 00:19:29,686
然后在把它们总结起来


562
00:19:31,596 --> 00:19:34,436
“title” 和 “overviewSubtitle” 是字符串


563
00:19:35,096 --> 00:19:36,296
它们应该是


564
00:19:36,296 --> 00:19:37,376
你每个文稿的


565
00:19:37,376 --> 00:19:38,046
标题和副标题


566
00:19:38,546 --> 00:19:39,886
它们会在你的


567
00:19:39,886 --> 00:19:42,276
订阅区中出现


568
00:19:42,276 --> 00:19:44,586
也会在你每个文稿的详细视图中出现


569
00:19:48,176 --> 00:19:50,096
“detailSubtitle” 是一个可选的字符串


570
00:19:50,096 --> 00:19:51,866
你可以用它来创建一个


571
00:19:51,866 --> 00:19:53,236
在详细视图中不同的


572
00:19:53,236 --> 00:19:55,146
副标题 像这里一样


573
00:19:56,076 --> 00:19:57,496
如果你不提供这个 Key 值


574
00:19:57,496 --> 00:19:59,000
我们可以直接省略


575
00:20:02,046 --> 00:20:03,396
“description” 是描述你的


576
00:20:03,396 --> 00:20:05,306
文稿目的的文本


577
00:20:05,556 --> 00:20:06,926
它也会在 Swift Playgrounds


578
00:20:06,926 --> 00:20:08,396
中的详细视图中显示


579
00:20:10,996 --> 00:20:12,926
“contentIdentifier” 是另一个


580
00:20:12,926 --> 00:20:14,506
反向 DNS 标识符


581
00:20:15,176 --> 00:20:16,516
它在 Book 中必须是唯一的


582
00:20:16,516 --> 00:20:17,496
它也必须与你 Book 的 manifest.plist 


583
00:20:17,496 --> 00:20:20,756
文件中的 “contentIdentifier” 相匹配


584
00:20:21,756 --> 00:20:23,026
它应该以包含这本 Book


585
00:20:23,026 --> 00:20:25,486
的 Feed 的 feedIdentifier 作为开始


586
00:20:25,656 --> 00:20:26,696
所以在这个例子中是


587
00:20:26,696 --> 00:20:29,486
io.github.WWDCPhotoFilters


588
00:20:30,976 --> 00:20:32,326
你主持你的内容的位置


589
00:20:32,326 --> 00:20:33,636
应该与你主持你


590
00:20:33,636 --> 00:20:34,596
feed.json 文件的位置相同


591
00:20:35,126 --> 00:20:36,376
但如果你不这样做也没问题


592
00:20:36,376 --> 00:20:37,856
你只需要包括一个


593
00:20:37,856 --> 00:20:39,546
你的压缩的 Playground Book 的加密哈希值


594
00:20:39,606 --> 00:20:41,046
作为另一个 Key


595
00:20:41,566 --> 00:20:42,746
你可以在 Feed 格式的在线文档中


596
00:20:42,746 --> 00:20:45,000
学到更多关于这一点的知识


597
00:20:47,326 --> 00:20:48,526
这就是 “contentIdentifier”


598
00:20:50,776 --> 00:20:52,136
“contentVersion” 是你可以


599
00:20:52,136 --> 00:20:53,776
对你的 Book 进行版本管理的方式


600
00:20:54,416 --> 00:20:55,596
当你更新你的 Book 时


601
00:20:55,596 --> 00:20:57,156
你需要提高这个值


602
00:20:57,156 --> 00:20:58,506
且它必须一直与你的 Book 的 Manifest


603
00:20:58,506 --> 00:21:01,000
中的 contentVersion 匹配


604
00:21:03,066 --> 00:21:04,036
下一个是 “url”


605
00:21:04,776 --> 00:21:06,106
这一条非常重要因为


606
00:21:06,106 --> 00:21:07,356
当你的用户想要下载你的 Book 时


607
00:21:07,356 --> 00:21:08,406
“url” 会告诉 


608
00:21:08,406 --> 00:21:09,716
Swift Playgrounds 去哪里下载


609
00:21:10,376 --> 00:21:11,376
它应该是一个


610
00:21:11,376 --> 00:21:12,986
到达你的 Playground Book 的压缩副本


611
00:21:13,876 --> 00:21:14,000
的链接


612
00:21:17,046 --> 00:21:18,316
“additionalInformation” 数组


613
00:21:18,316 --> 00:21:19,556
让你能够存储你的文稿的


614
00:21:19,556 --> 00:21:21,066
额外元数据


615
00:21:21,066 --> 00:21:22,506
你可以在任意位置存储它


616
00:21:23,296 --> 00:21:24,706
它的结构是一个


617
00:21:24,706 --> 00:21:26,416
对象数组 其中的每个数组都有


618
00:21:26,416 --> 00:21:28,106
一对 Key 和值


619
00:21:28,896 --> 00:21:31,226
在这个例子中 一对是 “name” 和 “Made for”


620
00:21:31,226 --> 00:21:33,646
另一对是 “value” 和 “WWDC18”


621
00:21:33,646 --> 00:21:34,946
它们会像这样 在 Swift Playgrounds 的


622
00:21:34,946 --> 00:21:35,586
详细视图中显示


623
00:21:35,816 --> 00:21:40,126
你需要包括你的内容的


624
00:21:40,126 --> 00:21:42,956
“publishedDate” 借 “lastUpdatedDate”


625
00:21:43,716 --> 00:21:46,436
这些日期需要符合 ISO 8601


626
00:21:46,436 --> 00:21:48,416
标准 并应该反映你发布


627
00:21:48,416 --> 00:21:49,806
这部分内容的日期


628
00:21:49,806 --> 00:21:51,506
以及你最后一次更新


629
00:21:51,506 --> 00:21:53,276
这部分内容的日期


630
00:21:53,796 --> 00:21:58,586
最后 还有三个针对


631
00:21:58,586 --> 00:22:00,506
你在订阅中使用的图像的 Key


632
00:22:01,316 --> 00:22:02,976
“thumbnailURL” 会在


633
00:22:02,976 --> 00:22:04,416
Swift Playgrounds 中的这里显示


634
00:22:05,956 --> 00:22:07,206
也会在你任一个文稿的


635
00:22:07,206 --> 00:22:09,266
详细视图中显示


636
00:22:10,236 --> 00:22:12,376
“previewImageURLs” 会在


637
00:22:12,376 --> 00:22:14,606
你每个文稿的详细视图的


638
00:22:14,606 --> 00:22:16,126
这个部分显示


639
00:22:16,126 --> 00:22:17,366
它会展示一些


640
00:22:17,366 --> 00:22:19,086
你的 Playground 的额外信息


641
00:22:19,566 --> 00:22:22,596
在老版本的 Swift Playgrounds 中


642
00:22:22,596 --> 00:22:24,596
我们会把这张图像作为


643
00:22:24,596 --> 00:22:25,576
“bannerImageURLs” 的值


644
00:22:25,726 --> 00:22:27,646
所以为了支持使用


645
00:22:27,646 --> 00:22:28,866
旧版本 Swift Playgrounds 的用户


646
00:22:28,906 --> 00:22:30,846
你还需要包括这张图像


647
00:22:33,116 --> 00:22:35,866
好的 我们现在已经


648
00:22:35,866 --> 00:22:37,766
讲完了 Feed 格式


649
00:22:37,766 --> 00:22:38,636
我们来讲讲发布


650
00:22:39,126 --> 00:22:41,036
你可能想知道


651
00:22:41,036 --> 00:22:42,836
我怎样发布我做的这些文件呢


652
00:22:43,576 --> 00:22:44,556
你将需要把你的


653
00:22:44,556 --> 00:22:46,896
feed.json 文件以及你


654
00:22:46,896 --> 00:22:48,606
所写的所有文稿都放到网上


655
00:22:48,606 --> 00:22:51,586
为了实现这一点 你需要一个网络主机


656
00:22:52,676 --> 00:22:54,706
发布你的订阅


657
00:22:54,756 --> 00:22:55,876
需要一个网络主句


658
00:22:56,556 --> 00:22:57,466
你有很多方式


659
00:22:57,466 --> 00:22:59,146
可以做到这点


660
00:22:59,146 --> 00:23:00,716
比如使用 GitHub 页面


661
00:23:00,716 --> 00:23:03,026
使用 Squarespace 以及其他


662
00:23:03,026 --> 00:23:05,846
但今天我们会以 GitHub 页面作为例子


663
00:23:06,446 --> 00:23:09,616
GitHub 页面是一个让你


664
00:23:09,616 --> 00:23:11,256
能够为你和你的项目创建一个网站的工具


665
00:23:11,256 --> 00:23:12,866
而且它是直接在


666
00:23:12,866 --> 00:23:14,586
一个 GitHub 库中主持的


667
00:23:15,266 --> 00:23:16,826
它使用 Git 来管理内容


668
00:23:18,176 --> 00:23:19,156
我们来一步一步看看


669
00:23:19,156 --> 00:23:20,086
要使用 GitHub 页面


670
00:23:20,086 --> 00:23:21,396
所需要的步骤


671
00:23:23,036 --> 00:23:25,286
首先你需要一个 GitHub 帐号


672
00:23:26,606 --> 00:23:27,456
你可以在 GitHub 的网站上


673
00:23:27,456 --> 00:23:28,276
创建一个


674
00:23:30,436 --> 00:23:31,376
然后 你需要创建一个库


675
00:23:31,376 --> 00:23:34,446
叫做 username.github.io


676
00:23:34,946 --> 00:23:36,436
你必须要用这样的方式命名它


677
00:23:36,436 --> 00:23:37,066
不然它就不会工作


678
00:23:37,576 --> 00:23:38,896
这将会是你


679
00:23:38,896 --> 00:23:42,616
存储你内容的库


680
00:23:43,076 --> 00:23:43,896
一旦你把这个库


681
00:23:43,896 --> 00:23:45,996
克隆到你的 Mac 上


682
00:23:45,996 --> 00:23:48,236
你就可以创建一个 index.html 文件


683
00:23:48,236 --> 00:23:49,956
作为你网站的主页


684
00:23:50,636 --> 00:23:51,966
我们这里的这个文件只会显示


685
00:23:51,966 --> 00:23:53,156
Hello WWDC


686
00:23:55,036 --> 00:23:56,546
要了解更多关于在 Xcode 中的


687
00:23:56,546 --> 00:23:57,916
源码控制工作流的内容


688
00:23:58,206 --> 00:23:59,316
可以看看这周早些时候的


689
00:23:59,316 --> 00:24:01,000
这个讨论会


690
00:24:04,046 --> 00:24:05,456
当你创建了这个文件之后


691
00:24:05,626 --> 00:24:06,486
你要确保它在你的库中


692
00:24:06,486 --> 00:24:08,686
确认更改 推送


693
00:24:08,916 --> 00:24:10,056
然后访问你位于 username.github.io


694
00:24:10,056 --> 00:24:12,956
的网站


695
00:24:13,896 --> 00:24:15,096
当你继续添加


696
00:24:15,096 --> 00:24:16,166
更多文件和文件夹


697
00:24:16,166 --> 00:24:17,606
到你的库中 并继续


698
00:24:17,606 --> 00:24:18,876
确认并把它们推送到网站上时


699
00:24:18,876 --> 00:24:20,896
它会自动更新你的库


700
00:24:20,896 --> 00:24:22,836
以及 GitHub 网站


701
00:24:25,096 --> 00:24:27,196
现在这个文件夹中只有


702
00:24:27,196 --> 00:24:28,996
一个文件 index.html


703
00:24:29,396 --> 00:24:31,706
它会作为你的网站的欢迎页面


704
00:24:32,066 --> 00:24:33,546
但我们之前也讨论过


705
00:24:33,546 --> 00:24:34,736
你需要更多的一些文件


706
00:24:34,766 --> 00:24:35,936
来支持你的订阅


707
00:24:36,786 --> 00:24:38,696
Holly 刚刚提到过


708
00:24:38,696 --> 00:24:39,906
我们一直在做一个叫做


709
00:24:39,906 --> 00:24:41,816
“WWDC Photo Filters” 的订阅


710
00:24:41,816 --> 00:24:42,896
它有很多很酷的


711
00:24:42,896 --> 00:24:44,246
使用了 Core Image 的滤镜内容


712
00:24:44,246 --> 00:24:45,486
在 Swift Playgrounds 中可用


713
00:24:45,696 --> 00:24:46,916
作为示例 我将会一步一步带你看看


714
00:24:46,916 --> 00:24:48,536
我们的库的层级


715
00:24:48,536 --> 00:24:50,156
来展示一下我们是如何组织它的


716
00:24:52,536 --> 00:24:54,456
第一个需要被包括的文件


717
00:24:54,456 --> 00:24:56,506
是你的 feed.json 文件


718
00:24:57,096 --> 00:24:58,676
我们把我们的 feed.json 文件放到了


719
00:24:58,676 --> 00:24:59,856
我们库中与 index.html


720
00:24:59,856 --> 00:25:01,376
同样的那一层


721
00:25:01,926 --> 00:25:05,036
然后你将需要把你所有的文稿


722
00:25:05,036 --> 00:25:05,906
都存储进去


723
00:25:07,166 --> 00:25:08,086
我们所发布的每一个 Playground


724
00:25:08,136 --> 00:25:09,616
都独立地储存在一个文件夹中


725
00:25:09,616 --> 00:25:11,226
来让我们的库看起来清爽整洁


726
00:25:11,956 --> 00:25:13,056
我们的每一部分内容


727
00:25:13,146 --> 00:25:14,016
都有它自己的文件夹


728
00:25:14,376 --> 00:25:18,316
比如 “ImageTransitions”“IntrotoCI” 等等


729
00:25:19,096 --> 00:25:20,556
在库的最顶层


730
00:25:20,556 --> 00:25:22,206
放着的是我们的


731
00:25:22,296 --> 00:25:24,746
index.html 文件 feed.json 文件


732
00:25:24,746 --> 00:25:27,000
以及每个文稿的文件夹


733
00:25:29,506 --> 00:25:30,906
如果我打开其中一个文稿


734
00:25:30,906 --> 00:25:32,746
的文件夹 我会看到四个文件


735
00:25:33,456 --> 00:25:35,616
一个 zips.playgroundbook 文件


736
00:25:35,616 --> 00:25:36,206
和三个图像文件


737
00:25:37,006 --> 00:25:38,506
这三个图像分别是


738
00:25:38,506 --> 00:25:41,716
横幅图 预览图 以及缩略图


739
00:25:42,476 --> 00:25:43,576
压缩的 Playground Book 文件


740
00:25:43,576 --> 00:25:45,256
将会是用户下载的 Playground Book


741
00:25:45,986 --> 00:25:48,876
我们来把这个与我们的


742
00:25:48,876 --> 00:25:51,386
feed.json 文件比较一下


743
00:25:52,436 --> 00:25:54,316
在最高层级 我们可以看到


744
00:25:54,316 --> 00:25:55,586
“feedIdentifier” 就是


745
00:25:55,586 --> 00:25:57,366
我们的网站的反向 DNS


746
00:25:57,736 --> 00:26:01,000
io.github.WWDCPhotoFilters


747
00:26:05,046 --> 00:26:06,626
在“documents”数组中


748
00:26:06,626 --> 00:26:07,996
针对每一个我们发布的文稿


749
00:26:07,996 --> 00:26:09,406
都有一个对应的元素


750
00:26:09,806 --> 00:26:13,586
如果我们看看我们的


751
00:26:13,586 --> 00:26:15,646
第一个文稿 会发现 “contentIdentifier”


752
00:26:15,646 --> 00:26:17,586
与 “feedIdentifier” 相匹配


753
00:26:17,586 --> 00:26:19,000
只是在最后加上了 Book 的标题


754
00:26:22,586 --> 00:26:24,146
我们的 Book 的 “url” 是


755
00:26:24,146 --> 00:26:24,796
我们的网站域名 后面加上


756
00:26:25,636 --> 00:26:28,926
/IntrotoCI/IntrotoCI


757
00:26:29,216 --> 00:26:30,006
.playgroundbook.zip


758
00:26:30,006 --> 00:26:31,776
再次强调一下 


759
00:26:31,776 --> 00:26:33,246
把这个弄对非常关键


760
00:26:33,246 --> 00:26:34,266
因为这是 Swift Playgrounds


761
00:26:34,266 --> 00:26:35,486
去下载你的内容的地方


762
00:26:35,486 --> 00:26:40,526
你图像的 URL 可以是


763
00:26:40,526 --> 00:26:41,466
相对 URL


764
00:26:41,466 --> 00:26:43,086
你只需要包括


765
00:26:43,086 --> 00:26:44,466
你的 feed.json 文件


766
00:26:44,466 --> 00:26:46,686
所在的文件夹下面的路径


767
00:26:47,126 --> 00:26:48,206
所以在这里我只有


768
00:26:48,256 --> 00:26:50,316
“IntrotoCI/thumbnail.png”


769
00:26:50,316 --> 00:26:52,526
你的订阅中的每个文稿


770
00:26:52,526 --> 00:26:56,626
都应该遵循这个格式


771
00:26:57,176 --> 00:26:58,146
当一切都上线的时候


772
00:26:58,496 --> 00:27:00,006
任何人都可以订阅你的 Feed


773
00:27:00,856 --> 00:27:02,066
他们可以手动输入


774
00:27:02,066 --> 00:27:03,766
指向你的 feed.json 文件


775
00:27:03,766 --> 00:27:06,846
的 URL 或者你也可以使用


776
00:27:06,846 --> 00:27:08,366
通用链接 这样用户就可以


777
00:27:08,366 --> 00:27:10,326
在 Safari 浏览器中轻点一个链接


778
00:27:10,326 --> 00:27:13,366
并重定向至 Swift Playgrounds


779
00:27:14,676 --> 00:27:17,556
为了做到这一点 你需要把你 Feed 的 URL


780
00:27:17,996 --> 00:27:19,516
和 Swift Playgrounds 的通用链接前缀


781
00:27:19,516 --> 00:27:20,636
结合起来


782
00:27:21,266 --> 00:27:24,276
这里就是我们 index.html 文件中


783
00:27:24,276 --> 00:27:26,106
针对链接的代码


784
00:27:26,396 --> 00:27:28,886
我把通用链接前缀


785
00:27:29,796 --> 00:27:33,536
https/developer.apple.com/ul/ 


786
00:27:34,616 --> 00:27:36,586
就是这个 [ 笑声 ]


787
00:27:36,586 --> 00:27:38,226
和 URL 结合了起来


788
00:27:39,156 --> 00:27:41,446
然后你可以把这个链接


789
00:27:41,446 --> 00:27:43,326
嵌入到一个含有 href 属性的钩子元素中


790
00:27:43,326 --> 00:27:45,046
这样用户就能通过


791
00:27:45,046 --> 00:27:47,136
轻点 “Subscribe” 来被导向


792
00:27:47,136 --> 00:27:48,066
Swift Playgrounds


793
00:27:49,716 --> 00:27:51,566
接下来我想要做一个演示


794
00:27:51,616 --> 00:27:53,306
来展示你要添加一本 Book 到你的订阅


795
00:27:53,306 --> 00:27:54,616
所需要的步骤


796
00:27:55,516 --> 00:28:01,926
[ 掌声 ]


797
00:28:02,426 --> 00:28:03,526
好的 我之前说过


798
00:28:03,526 --> 00:28:04,766
我们正在做这个


799
00:28:04,766 --> 00:28:05,916
照片滤镜订阅


800
00:28:05,916 --> 00:28:06,436
我觉得它很酷


801
00:28:07,136 --> 00:28:08,556
我其实刚完成了另一本 Book


802
00:28:08,556 --> 00:28:11,176
它是关于内容感知大小调整的


803
00:28:12,366 --> 00:28:14,076
内容感知大小调整 是一种调整


804
00:28:14,076 --> 00:28:15,586
你的图像大小的方式


805
00:28:15,586 --> 00:28:16,566
使用这种方式 你不会丢失图像中


806
00:28:16,566 --> 00:28:17,766
最重要的部分


807
00:28:18,246 --> 00:28:19,706
我这里有一张纪念碑谷的照片


808
00:28:19,706 --> 00:28:21,496
我觉得它非常美


809
00:28:21,496 --> 00:28:23,416
但我确实想


810
00:28:23,596 --> 00:28:24,816
把它修剪一下


811
00:28:24,856 --> 00:28:26,026
让它的宽度窄一点


812
00:28:26,156 --> 00:28:28,076
但我并不想缩放它


813
00:28:28,076 --> 00:28:29,366
或者简单地裁剪


814
00:28:29,366 --> 00:28:30,406
因为我不想丢失


815
00:28:30,406 --> 00:28:32,206
照片中美丽的日落和孤峰


816
00:28:33,476 --> 00:28:36,116
有了内容感知大小调整


817
00:28:36,206 --> 00:28:38,066
我可以把这张照片中


818
00:28:38,066 --> 00:28:39,176
所有不同的的像素


819
00:28:39,176 --> 00:28:40,786
遍历一遍 找到


820
00:28:40,786 --> 00:28:42,586
其中最不重要的纵向像素条


821
00:28:42,656 --> 00:28:44,436
并把它们一一移除


822
00:28:44,436 --> 00:28:45,506
每次宽度都会变窄一点


823
00:28:45,576 --> 00:28:47,446
但我最后还是会


824
00:28:47,446 --> 00:28:48,346
在照片上看到最重要的


825
00:28:48,346 --> 00:28:50,696
孤峰 日落 公路


826
00:28:50,726 --> 00:28:52,976
所有的重要元素都在


827
00:28:54,696 --> 00:28:56,366
我把所有的代码


828
00:28:56,366 --> 00:28:58,496
都写到了一本 Playground Book 中


829
00:28:58,496 --> 00:29:00,146
我把它称为 “ContentAwareResizing”


830
00:29:00,646 --> 00:29:01,756
它储存在我的


831
00:29:01,756 --> 00:29:03,196
“ContentAwareResizing” 文件夹中


832
00:29:05,246 --> 00:29:07,106
这已经差不多完成了


833
00:29:07,296 --> 00:29:09,616
我要做的只是把它压缩打包


834
00:29:09,726 --> 00:29:11,216
所以我选择 “File（文件）”


835
00:29:12,096 --> 00:29:13,856
“Compress ‘ContentAwareResizing.


836
00:29:14,026 --> 00:29:14,496
playgroundbook’”


837
00:29:15,116 --> 00:29:16,316
现在我有了一个我的 Playground Book 的


838
00:29:16,316 --> 00:29:17,506
压缩文件 


839
00:29:17,506 --> 00:29:21,236
然后我要把之前的这个移到废纸篓


840
00:29:21,796 --> 00:29:23,126
最后 我需要为了


841
00:29:23,126 --> 00:29:24,706
缩略图和横幅图


842
00:29:24,706 --> 00:29:25,816
移入一些图像


843
00:29:25,816 --> 00:29:27,656
这两个图像是 Feed 格式


844
00:29:27,656 --> 00:29:28,406
所要求的


845
00:29:29,086 --> 00:29:31,436
碰巧我的桌面上


846
00:29:31,436 --> 00:29:33,866
有两个图像 分别叫做 “thumbnail.png”


847
00:29:33,866 --> 00:29:34,896
和 “bannerImage.png”


848
00:29:35,716 --> 00:29:37,506
只需要这两个完美


849
00:29:37,506 --> 00:29:40,936
我把它们拖放到我的文件夹中


850
00:29:41,546 --> 00:29:45,276
如果看看我的 


851
00:29:45,276 --> 00:29:47,616
“WWDCPhotoFilters” 库


852
00:29:47,616 --> 00:29:50,426
我这里有三个文件夹


853
00:29:50,426 --> 00:29:52,276
每一个中都有一个图像


854
00:29:52,276 --> 00:29:53,866
一本压缩的 Playground Book


855
00:29:53,866 --> 00:29:54,996
还有另一个为缩略图准备的图像


856
00:29:55,186 --> 00:29:56,266
这看起来还不错


857
00:29:56,716 --> 00:29:58,786
我认为我的文件夹完美地


858
00:29:58,836 --> 00:29:59,366
遵循了那个格式


859
00:30:00,176 --> 00:30:02,786
所以我准备把它发布出去


860
00:30:03,336 --> 00:30:04,996
我为我的库创建了一个


861
00:30:04,996 --> 00:30:05,846
工作区域


862
00:30:05,846 --> 00:30:07,206
我要按住这个文件夹


863
00:30:08,266 --> 00:30:12,036
把它拖过来


864
00:30:12,036 --> 00:30:14,146
放到我的库中 现在我有一个新的


865
00:30:14,146 --> 00:30:16,366
“ContentAwareResizing” 文件夹了


866
00:30:17,406 --> 00:30:18,676
再检查一下是不是所有东西都在


867
00:30:18,746 --> 00:30:20,536
看起来很不错


868
00:30:21,196 --> 00:30:22,986
我们要做的最后一步是


869
00:30:22,986 --> 00:30:24,516
更新我们的


870
00:30:24,516 --> 00:30:25,646
feed.json 文件


871
00:30:25,916 --> 00:30:29,046
这就是那个文件


872
00:30:29,046 --> 00:30:30,856
你可以看到在我的 “documents” 数组中


873
00:30:30,906 --> 00:30:33,076
我有我的 “Image Transitions” 对象


874
00:30:33,076 --> 00:30:34,926
“Intro to Core Image” 对象


875
00:30:34,926 --> 00:30:36,726
还有我的 “Test Out CIFilters!” 对象


876
00:30:36,846 --> 00:30:38,796
所以我需要为内容感知大小调整


877
00:30:38,796 --> 00:30:40,076
添加一个对象


878
00:30:40,586 --> 00:30:43,946
幸运的是 我之前已经做了一个快捷键


879
00:30:43,986 --> 00:30:47,626
所以 一下就出来了


880
00:30:47,926 --> 00:30:48,796
我已经填好了大部分


881
00:30:48,796 --> 00:30:50,396
因为我刚做了美甲


882
00:30:50,936 --> 00:30:52,646
[ 笑声 ] 所以我需要做的就是


883
00:30:52,646 --> 00:30:54,676
把标题输入进去


884
00:30:55,696 --> 00:30:57,456
我想把它叫做


885
00:30:58,236 --> 00:30:59,186
“Content Aware Resizing”


886
00:31:01,126 --> 00:31:02,246
我决定省略


887
00:31:02,246 --> 00:31:03,736
“detailedSubtitle” 


888
00:31:03,736 --> 00:31:05,506
有这个 “overviewSubtitle” 就够了


889
00:31:05,506 --> 00:31:06,886
“Try out content aware


890
00:31:07,006 --> 00:31:07,236
resizing in Swift.”


891
00:31:07,726 --> 00:31:09,976
我这里有一个 “description”


892
00:31:10,046 --> 00:31:11,266
我的 “contentIdentifier” 是


893
00:31:11,266 --> 00:31:13,856
“io.github.WWDCPhotoFilters


894
00:31:14,056 --> 00:31:15,866
.contentAwareResizing” 也就是


895
00:31:15,866 --> 00:31:16,226
我 Book 的名字


896
00:31:16,886 --> 00:31:18,996
这是我第一次发布它 所以我的


897
00:31:18,996 --> 00:31:20,006
“contentVersion” 是 “1.0”


898
00:31:20,746 --> 00:31:22,836
我的 “url” 会映射到我的网站


899
00:31:22,836 --> 00:31:25,076
后面是我的文件夹名称


900
00:31:25,076 --> 00:31:26,136
“ContentAwareResizing


901
00:31:26,696 --> 00:31:28,366
/ContentAwareResizing


902
00:31:28,366 --> 00:31:29,566
.playgroundbook.zip”


903
00:31:31,606 --> 00:31:33,636
我的 “publishedDate” 是现在


904
00:31:33,846 --> 00:31:34,506
时间是 09:40 [ 笑声 ]


905
00:31:34,646 --> 00:31:37,056
我的 “lastUpdatedDate” 也是


906
00:31:37,056 --> 00:31:39,036
今天的 09:40 因为发布也算是


907
00:31:39,036 --> 00:31:39,716
一次更新


908
00:31:39,756 --> 00:31:42,526
我还包括了我的 “thumbnailURL”


909
00:31:42,526 --> 00:31:44,186
和我的 “bannerImageURL”


910
00:31:44,996 --> 00:31:46,276
在 “additionalInformation” 中我写上了


911
00:31:46,276 --> 00:31:48,066
语言是英文


912
00:31:48,536 --> 00:31:50,796
至于 “previewImageURLs”


913
00:31:50,796 --> 00:31:53,426
我决定暂时空着


914
00:31:53,646 --> 00:31:55,186
好的 一切看起来都很不错


915
00:31:55,186 --> 00:31:58,556
我现在需要做的就是


916
00:31:58,556 --> 00:31:59,936
前往 Xcode 源代码控制


917
00:32:00,586 --> 00:32:03,246
点击 “Commit（确认）” 并确保这四个文件


918
00:32:03,246 --> 00:32:04,436
都被选中


919
00:32:04,496 --> 00:32:06,526
因为我添加了三个新文件


920
00:32:06,526 --> 00:32:07,876
并且编辑了 feed.json


921
00:32:08,706 --> 00:32:10,046
我将要在确认信息中写


922
00:32:10,936 --> 00:32:15,466
“Adding our demo book!”


923
00:32:15,696 --> 00:32:16,846
勾选 “Push to remote（推送到远程）”


924
00:32:18,476 --> 00:32:20,000
祝我好运


925
00:32:24,046 --> 00:32:25,096
把 Holly 请回到舞台


926
00:32:25,786 --> 00:32:26,276
好的


927
00:32:26,276 --> 00:32:26,616
成功了


928
00:32:26,746 --> 00:32:26,996
酷


929
00:32:28,516 --> 00:32:32,896
[ 掌声 ]


930
00:32:33,396 --> 00:32:34,566
现在我想麻烦 Holly 


931
00:32:34,666 --> 00:32:36,286
前往我们的网站


932
00:32:36,286 --> 00:32:38,236
并从那里订阅


933
00:32:38,436 --> 00:32:40,506
很好 这是我们的网站


934
00:32:40,506 --> 00:32:41,826
你可以看到我们在这有一个漂亮的


935
00:32:41,826 --> 00:32:42,796
“Subscribe（订阅）” 按钮


936
00:32:43,056 --> 00:32:45,546
如果 Holly 轻点一下它


937
00:32:45,546 --> 00:32:50,000
她就会被导航到 Swift Playgrounds 订阅


938
00:32:54,176 --> 00:32:56,000
重启 QuickTime Player


939
00:33:05,656 --> 00:33:07,000
能看到 Holly 了 [ 笑声 ]


940
00:33:12,596 --> 00:33:14,256
总之它是一个很酷的 Book


941
00:33:14,316 --> 00:33:14,436
[ 笑声 ]


942
00:33:14,526 --> 00:33:16,876
其实你们所有人都可以下载它


943
00:33:16,876 --> 00:33:18,136
因为我们现在已经


944
00:33:18,136 --> 00:33:19,556
把它发布到我们的订阅中了


945
00:33:19,556 --> 00:33:20,426
它的 URL 是


946
00:33:20,426 --> 00:33:24,066
WWDCPhotoFilters.GitHub.io


947
00:33:24,066 --> 00:33:25,346
所以你们可以下载我们所有


948
00:33:25,416 --> 00:33:26,696
已经发布的四本 Book


949
00:33:27,006 --> 00:33:28,266
一个是 “Intro to Core Image”


950
00:33:28,636 --> 00:33:30,456
一个是 “Image Transitions” 它使用了


951
00:33:30,456 --> 00:33:31,886
内建的 Core Image 中的


952
00:33:31,886 --> 00:33:32,716
Transition 滤镜


953
00:33:33,256 --> 00:33:36,196
一个是 “Combining Filters”


954
00:33:36,196 --> 00:33:36,826
它也在 Core Image 中


955
00:33:36,916 --> 00:33:38,386
你可以把它们相互叠加起来


956
00:33:38,946 --> 00:33:40,256
最后一个就是这本


957
00:33:40,256 --> 00:33:41,576
“Content Aware Resizing”


958
00:33:42,016 --> 00:33:43,666
[ 欢呼声 ]


959
00:33:43,666 --> 00:33:43,976
谢谢你们


960
00:33:44,036 --> 00:33:46,036
[ 掌声 ]


961
00:33:46,056 --> 00:33:48,406
来看看 [ 笑声 ]


962
00:33:48,406 --> 00:33:50,000
稍等一下


963
00:33:53,336 --> 00:33:54,056
终于好了


964
00:33:54,056 --> 00:33:55,456
这就是我们的订阅


965
00:33:55,456 --> 00:33:56,016
[ 笑声 ]


966
00:33:56,516 --> 00:34:00,056
[ 掌声 ]


967
00:34:00,556 --> 00:34:01,606
现在如果 Holly 试着下载


968
00:34:01,656 --> 00:34:03,000
“Content Aware Resizing”


969
00:34:05,076 --> 00:34:05,866
并且打开它


970
00:34:08,496 --> 00:34:09,516
酷 成功了


971
00:34:10,406 --> 00:34:11,406
在右侧的实况视图中


972
00:34:11,406 --> 00:34:13,005
我们有这个美丽的


973
00:34:13,005 --> 00:34:14,795
纪念碑谷的图片


974
00:34:14,795 --> 00:34:15,926
我想让 Holly 把它


975
00:34:15,926 --> 00:34:17,005
稍稍裁剪一下 再重新运行代码 


976
00:34:17,005 --> 00:34:19,000
看看会产生什么


977
00:34:25,045 --> 00:34:26,866
这个算法做的是


978
00:34:26,866 --> 00:34:28,735
遍历一张图片所有的


979
00:34:28,826 --> 00:34:31,166
垂直像素条 决定


980
00:34:31,166 --> 00:34:33,676
其中的哪些与周围的像素条


981
00:34:33,676 --> 00:34:35,766
最相似 然后再把它们一个个移除


982
00:34:36,196 --> 00:34:37,516
现在我们可以看到


983
00:34:37,516 --> 00:34:39,275
它被裁剪了一部分


984
00:34:39,306 --> 00:34:40,000
看起来很漂亮


985
00:34:43,516 --> 00:34:49,556
[ 掌声 ]


986
00:34:50,056 --> 00:34:51,226
这就是我们今天全部的内容


987
00:34:51,485 --> 00:34:52,886
要了解更多的信息


988
00:34:52,886 --> 00:34:54,315
请在今天中午来我们的 “Creating Content 


989
00:34:54,315 --> 00:34:56,396
for Swift Playgrounds” 实验室


990
00:34:56,795 --> 00:34:58,016
>> 要了解更多


991
00:34:58,016 --> 00:34:59,056
关于这个讨论会和订阅的信息


992
00:34:59,056 --> 00:35:00,696
你可以在 developer.apple.com


993
00:35:00,696 --> 00:35:02,396
上访问 413 号讨论会


994
00:35:02,396 --> 00:35:03,646
的网站


995
00:35:04,716 --> 00:35:06,236
>> 谢谢你们今天的到来


996
00:35:06,656 --> 00:35:08,106
>> 我们迫不及待地


997
00:35:08,106 --> 00:35:09,156
想订阅你们发布的


998
00:35:09,156 --> 00:35:09,736
所有 Playground


999
00:35:10,126 --> 00:35:10,686
谢谢大家


1000
00:35:11,516 --> 00:35:20,500
[ 掌声 ]

