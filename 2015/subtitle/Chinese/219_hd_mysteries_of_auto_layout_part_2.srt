1
00:00:20,387 --> 00:00:23,390
欢迎来到自动布局迷宫 第二部分


2
00:00:23,690 --> 00:00:24,358
大家好


3
00:00:24,992 --> 00:00:26,660
感谢来参加讲座
我是杰西


4
00:00:27,094 --> 00:00:28,662
负责AppKit中的


5
00:00:28,762 --> 00:00:30,697
Auto Layout和
Foundation框架部分的工作


6
00:00:31,098 --> 00:00:33,200
布局是我们
设计应用时


7
00:00:33,400 --> 00:00:36,603
最基础的工作之一
Auto Layout 


8
00:00:36,670 --> 00:00:39,573
非常干净简洁
但是有时似乎


9
00:00:39,640 --> 00:00:42,176
也有些神秘
今天我来介绍


10
00:00:42,242 --> 00:00:44,978
Auto Layout
不为人知的几方面


11
00:00:45,045 --> 00:00:46,613
并会做详细解释


12
00:00:47,314 --> 00:00:49,850
这是两部分讲座
的第二部分内容


13
00:00:49,917 --> 00:00:50,951
这里是我们


14
00:00:51,018 --> 00:00:52,920
准备介绍的
话题简介


15
00:00:53,420 --> 00:00:55,055
我希望先从
布局循环讲起


16
00:00:55,622 --> 00:00:59,059
大家可能都知道
怎样配置用户界面


17
00:00:59,593 --> 00:01:03,163
但是Auto Layout
还是有些内容存在未知


18
00:01:03,497 --> 00:01:04,831
可以进行配置


19
00:01:04,897 --> 00:01:07,835
运行应用
获得布局


20
00:01:08,368 --> 00:01:11,205
希望这就是你
想要的布局 但如果不是


21
00:01:11,271 --> 00:01:12,873
很难知道
该从哪里下手


22
00:01:13,073 --> 00:01:15,943
我想了解
中间这里出了什么问题


23
00:01:16,043 --> 00:01:18,579
也就是怎样从视图中
获得约束


24
00:01:18,645 --> 00:01:21,148
再到将框架
安排到这些视图中


25
00:01:22,482 --> 00:01:25,319
这里是整个流程的
高度概述


26
00:01:25,385 --> 00:01:27,855
先是应用高兴地运行
循坏 如此往复


27
00:01:28,288 --> 00:01:30,657
直至约束改变
使得计算出的


28
00:01:30,724 --> 00:01:33,227
布局需要
有所不同


29
00:01:33,660 --> 00:01:36,330
这会导致需要安排
延迟布局过程


30
00:01:36,730 --> 00:01:38,699
当布局过程
最终出现时


31
00:01:38,999 --> 00:01:40,133
我们经过层次


32
00:01:40,200 --> 00:01:41,835
并且升级
视图的所有框架


33
00:01:41,902 --> 00:01:45,672
这有点抽象
我来举个简单例子


34
00:01:46,473 --> 00:01:49,877
也就是说 当我们
不勾选顶部的复选框时


35
00:01:50,244 --> 00:01:52,779
我们将调整约束
收缩窗口


36
00:01:52,846 --> 00:01:55,382
并隐藏底部的
复选框


37
00:01:55,449 --> 00:01:58,318
开始时 框架是
这样的


38
00:01:58,652 --> 00:02:01,522ddle
调整约束时
布局引擎关于


39
00:01:58,652 --> 00:02:01,522
调整约束时
布局引擎关于


40
00:02:01,588 --> 00:02:03,390
每个内容的位置概念
都已发生改变


41
00:02:03,457 --> 00:02:05,125
但是UI还没有更新


42
00:02:05,526 --> 00:02:07,561
接着当布局过程
继续时 


43
00:02:07,861 --> 00:02:10,797
UI实际上的改变
是与引擎认为的方式相匹配


44
00:02:11,932 --> 00:02:13,534
我们来谈谈
约束改变


45
00:02:14,568 --> 00:02:16,803
你所创造的
约束变成了


46
00:02:16,870 --> 00:02:19,840
数学表达式 
保存在Layout Engine中


47
00:02:20,340 --> 00:02:23,744
因此约束改变
实际上是可以影响


48
00:02:23,810 --> 00:02:26,980
这些表达式的任何内容
这其中包部分


49
00:02:27,047 --> 00:02:28,549
很明显的内容
例如激活或


50
00:02:28,615 --> 00:02:31,451
关闭约束
改变优先级


51
00:02:31,518 --> 00:02:34,788
或约束的常数
但是也有不那么明显的


52
00:02:34,855 --> 00:02:36,757
例如操控
视图层次


53
00:02:36,823 --> 00:02:38,926
或是重新配置
部分控件


54
00:02:38,992 --> 00:02:41,728
因为这些可能会
间接导致约束改变


55
00:02:43,330 --> 00:02:45,399
那么 约束改变时
会发生什么


56
00:02:46,333 --> 00:02:47,434
首先会发生
的是 


57
00:02:47,501 --> 00:02:49,236
Layout Engine
会重新计算布局


58
00:02:49,570 --> 00:02:52,773
表达式由这些变量构成
以代表诸如


59
00:02:52,840 --> 00:02:56,076
特定视图的原点
或大小尺寸


60
00:02:56,410 --> 00:02:58,111
当我们重新计算
布局时


61
00:02:58,178 --> 00:03:00,480iddle
这些变量可能会
收到新的值


62
00:02:58,178 --> 00:03:00,480
这些变量可能会
收到新的值


63
00:03:00,981 --> 00:03:02,516
出现这些情况时


64
00:03:02,583 --> 00:03:03,984
它们所代表的视图
会得到通知


65
00:03:04,117 --> 00:03:05,853
并将父视图
标为需要布局


66
00:03:06,286 --> 00:03:09,423
这实际是导致
安排延迟布局过程


67
00:03:11,358 --> 00:03:13,660
如果来看
这里的示例


68
00:03:14,361 --> 00:03:17,364
大家会在这里看到
框架实际会在


69
00:03:17,431 --> 00:03:20,234
Layout Engine发生改变
但在视图层次中尚未变化


70
00:03:21,602 --> 00:03:24,438
当延迟布局过程
继续时


71
00:03:24,771 --> 00:03:27,808
目的当然是要
将位置不对的视图


72
00:03:27,875 --> 00:03:29,109
进行重新排布


73
00:03:29,243 --> 00:03:31,512
我们完成后
所有内容都各就各位


74
00:03:32,779 --> 00:03:35,082
过程一词实际
有些不太恰当


75
00:03:35,148 --> 00:03:37,551
这里出现的
是两个过程


76
00:03:38,485 --> 00:03:40,587
第一个是为了
更新约束


77
00:03:40,654 --> 00:03:42,656
其中的想法是
要确保


78
00:03:42,723 --> 00:03:45,559
约束是否有任何
未决改变


79
00:03:45,626 --> 00:03:48,228
在我们需要费力通过
视图层次 对所有视图


80
00:03:48,295 --> 00:03:51,231
重新定位之前 这些问题
现在就出现了


81
00:03:51,999 --> 00:03:54,968
接着 第二个过程发生在
视图重新定位的时候


82
00:03:56,203 --> 00:03:58,005
我们来谈谈
更新约束


83
00:03:58.805 --> 00:04:01.008 align:middle
视图需要显性请求


84
00:03:58,805 --> 00:04:01,008
视图需要显性请求


85
00:04:01,375 --> 00:04:03,844
来调用升级
约束方式


86
00:04:03,911 --> 00:04:06,780
这和setNeedsDisplay
的运作方式大体相同


87
00:04:07,347 --> 00:04:08,982
调用
setNeedsUpdateConstraints


88
00:04:09,383 --> 00:04:12,853
不久之后 
将会调用升级约束方式


89
00:04:13,554 --> 00:04:17,858
的确 所有这些都是
让视图为


90
00:04:17,925 --> 00:04:20,027
下一个布局过程
有机会


91
00:04:20,194 --> 00:04:23,997
及时修改约束
但实际上并不常常需要


92
00:04:25,199 --> 00:04:27,501
所有的初始约束设置
都应该理想地出现在


93
00:04:27,568 --> 00:04:28,936
Interface Builder
中


94
00:04:29,002 --> 00:04:30,470
或者如果当真
发现需要


95
00:04:30,537 --> 00:04:32,706
在程序中
分配约束


96
00:04:32,940 --> 00:04:34,942
viewDidLoad
这样的位置则更好些


97
00:04:35,242 --> 00:04:37,244
升级约束只是
针对需要


98
00:04:37,311 --> 00:04:39,112
定期重复的工作


99
00:04:39,880 --> 00:04:42,182
而且还
非常简单


100
00:04:42,249 --> 00:04:45,886
当发现有必要时
相应修改约束即可


101
00:04:47,054 --> 00:04:48,856
不过如果将逻辑
从另一个


102
00:04:48,922 --> 00:04:50,958
相关代码中拿开 
并将之移至


103
00:04:51,024 --> 00:04:53,794
稍后会执行的
不同的方式中


104
00:04:54,161 --> 00:04:56,597
代码就会很难继续
更难去


105
00:04:56,663 --> 00:04:58,398
继续维护
更难以让


106
00:04:58.465 --> 00:05:00.300 align:middle
其他人理解


107
00:04:58,465 --> 00:05:00,300
其他人理解


108
00:05:01,235 --> 00:05:03,704
那么在应用中
更新约束


109
00:05:04,371 --> 00:05:06,106
最后 会影响到
性能表现


110
00:05:07,140 --> 00:05:09,309
如果发现单纯
相应改变约束


111
00:05:09,376 --> 00:05:10,577
速度太慢的话


112
00:05:10,644 --> 00:05:13,380
升级约束可能
会帮你解决问题


113
00:05:13,881 --> 00:05:16,517
结果就是在更新
约束内部改变约束


114
00:05:16,583 --> 00:05:17,951
实际要比


115
00:05:18,085 --> 00:05:20,120
在其他时候
改变约束快得多


116
00:05:20,187 --> 00:05:22,656
原因在于引擎
可以分批处理


117
00:05:22,723 --> 00:05:26,426
在这一过程中
发生的所有约束改变


118
00:05:26,994 --> 00:05:29,363
通过调用整个数组约束 
来激活约束


119
00:05:29,429 --> 00:05:32,366
而不是单独激活
每个约束 


120
00:05:32,432 --> 00:05:34,768
这样会
实现


121
00:05:34,835 --> 00:05:36,370
同样的
性能优势


122
00:05:38,172 --> 00:05:40,474
如果有个视图
根据某种配置调整 


123
00:05:40,607 --> 00:05:43,110
需要重建约束 
我们所发现的


124
00:05:43,377 --> 00:05:47,181
一个常见模式
会非常有用


125
00:05:47,881 --> 00:05:50,651
结果就是这对
具有这类需要


126
00:05:50,717 --> 00:05:53,053
配置视图而不是 
属性的客户端非常常见


127
00:05:53,353 --> 00:05:55,756
这对视图而言
非常容易


128
00:05:55,822 --> 00:05:58,258
最后是需要对约束
多次重建


129
00:05:58.325 --> 00:05:59.793 align:middle
这会产生需要
无用功


130
00:06:00,260 --> 00:06:02,863
在这类情况下效率则要高很多
即视图要调用


131
00:06:02,930 --> 00:06:06,466
setNeedsUpdateCon
straints接着当升级


132
00:06:06,867 --> 00:06:09,403
约束过程出现时 
可以重建


133
00:06:09,469 --> 00:06:11,138
一次约束
以便与


134
00:06:11,238 --> 00:06:12,940
当前配置
相匹配


135
00:06:14,474 --> 00:06:17,010
在任何情况下
一旦这一过程完成


136
00:06:17,077 --> 00:06:19,246
我们了解约束均已
更新 我们可以


137
00:06:19,313 --> 00:06:21,315
在重新定位后的视图
基础上继续


138
00:06:22,282 --> 00:06:25,552
我们在这里需要
从上到下穿过


139
00:06:25,619 --> 00:06:28,121
视图层次我们将调用layoutSu
bviews


140
00:06:28,188 --> 00:06:30,224
到标为所需
布局的任何视图上


141
00:06:31,058 --> 00:06:33,660
在OS X上 这种方法
称之为布局


142
00:06:33,727 --> 00:06:34,962
不过思路是一样的


143
00:06:35,495 --> 00:06:39,266
接收方的目的是
重新定位子视图


144
00:06:39,633 --> 00:06:41,802
不是让接收方
重新定位自己


145
00:06:43,637 --> 00:06:46,507
因此框架执行的工作
是将通过


146
00:06:46,573 --> 00:06:48,275
Layout Engine


147
00:06:48,342 --> 00:06:50,310
读出子视图
然后进行安排


148
00:06:50,744 --> 00:06:54,047
在Mac上 我们用的是
setFrame 在iOS


149
00:06:54,114 --> 00:06:56,116
是setBounds和setCen
ter不过思路是一样的


150
00:06:57,551 --> 00:06:59,219
那么如果再来看
这个示例


151
00:06:59,286 --> 00:07:01,588ddle
你在这会看到
UI升级与


152
00:06:59,286 --> 00:07:01,588
你在这会看到
UI升级与


153
00:07:01,655 --> 00:07:03,957
Layout Engine的
框架相匹配


154
00:07:05,292 --> 00:07:07,528
还需要注意的是
layoutSubviews:


155
00:07:07,728 --> 00:07:10,597
很多人为
获得某种自定义


156
00:07:10,664 --> 00:07:13,700
布局将之覆盖
如果需要这样做<c.blue>的话</c>


157
00:07:14,101 --> 00:07:16,570
当然可以
但是需要了解一些内容


158
00:07:16,637 --> 00:07:18,805
因为这里所做的事情
很容易给你


159
00:07:18,872 --> 00:07:19,873
带来麻烦


160
00:07:19,940 --> 00:07:21,675
所以我想
详细介绍一下


161
00:07:23,377 --> 00:07:26,213
如果需要
某种布局


162
00:07:26,280 --> 00:07:27,714
不能使用
约束来表达


163
00:07:27,781 --> 00:07:31,118
那么应该只是将
layoutSubviews覆盖


164
00:07:31,185 --> 00:07:32,986
如果可以发现使用
约束来实现的方法


165
00:07:33,053 --> 00:07:36,056
那么将非常强大
而且不会有麻烦


166
00:07:37,891 --> 00:07:42,529
如果选择覆盖
需要牢记


167
00:07:42,596 --> 00:07:45,632
我们此刻是处于
布局形式当中


168
00:07:45,766 --> 00:07:47,968
部分视图
已经安排


169
00:07:48,035 --> 00:07:50,671
部分视图还没有
但是可能很快就会<c.blue>有</c>


170
00:07:51,104 --> 00:07:53,774
因此 这是个
微妙的关头


171
00:07:53,974 --> 00:07:56,243
需要遵循一些
特殊的规则


172
00:07:58,178 --> 00:08:01,815
其一是需要
<c.blue>触</c>出发超类执行


173
00:08:02,182 --> 00:08:04,351
出于若干簿记目的
我们都需要这么做


174
00:08:05,252 --> 00:08:08,255
而且可以关闭
字树中的


175
00:08:08,322 --> 00:08:11,792
视图布局
但是需要在调用


176
00:08:11,859 --> 00:08:13,360
超类执行前
完成这项工作


177
00:08:16,797 --> 00:08:20,767
其二 若不想调用setNeeds
UpdateConstraints


178
00:08:20,834 --> 00:08:22,536
存在一个升级
约束过程


179
00:08:22,603 --> 00:08:23,637
我们走一遍


180
00:08:23,737 --> 00:08:27,007
完成
结果错过了


181
00:08:27,174 --> 00:08:28,742
如果还需要它时
已经太晚了


182
00:08:29,610 --> 00:08:32,346
同样还要确保
并未在子树以外


183
00:08:32,412 --> 00:08:34,181
关闭视图布局


184
00:08:34,381 --> 00:08:37,049
如果这么做
很容易会导致


185
00:08:37,116 --> 00:08:39,186
布局反馈循环
这样执行


186
00:08:39,453 --> 00:08:42,089
布局的做法
实际会导致布局


187
00:08:42,155 --> 00:08:43,090
再次变脏


188
00:08:43,457 --> 00:08:45,425
那么我们会
周而复始 停不下来


189
00:08:45,492 --> 00:08:46,860
这对谁都不好


190
00:08:48,629 --> 00:08:52,232
大家会常常看到在layoutSub
views覆盖内


191
00:08:52,299 --> 00:08:54,468
需要调整约束
以便将视图


192
00:08:54,535 --> 00:08:57,704
放在正确的
位置 这样也可以


193
00:08:57,771 --> 00:08:59,239
但还是要
非常小心才行


194
00:08:59.673 --> 00:09:01.208 align:middle
在调整约束时 


195
00:08:59,673 --> 00:09:01,208
在调整约束时 


196
00:09:01,408 --> 00:09:03,944
很难预料在层次中
的其他视图


197
00:09:04,011 --> 00:09:05,546
会不会
受到影响


198
00:09:05,946 --> 00:09:08,015
因此 如果在修改
约束 很容易偶然间


199
00:09:08,081 --> 00:09:11,351
在子树之外
关闭了布局


200
00:09:13,120 --> 00:09:15,656
在任何情况下 
假设一切顺利


201
00:09:15,822 --> 00:09:18,125
布局循环在这里
完成 所有内容


202
00:09:18,192 --> 00:09:21,061
都各就各位
约束改变就已完全应用了


203
00:09:22,362 --> 00:09:25,032
关于布局循环
需要记住几点<c.blue> </c>首先


204
00:09:25,465 --> 00:09:27,668
不要指望调整约束时 
视图框架


205
00:09:27,734 --> 00:09:28,836
会立刻改变


206
00:09:28,902 --> 00:09:31,138
我们所经过的
全过程是关于


207
00:09:31,205 --> 00:09:32,506
稍后会发生什么


208
00:09:33,040 --> 00:09:36,276
如果发现
需要覆盖layoutSubview


209
00:09:36,677 --> 00:09:39,046
则要非常小心
避免布局反馈循环


210
00:09:39,112 --> 00:09:41,148
因为调试过程
并不容易


211
00:09:42,850 --> 00:09:45,919
接下来我会聊聊
Auto Layout怎样和


212
00:09:45,986 --> 00:09:47,421
Legacy Layout系统互动


213
00:09:48,922 --> 00:09:52,125
传统而言我们通过
设置框架定位视图


214
00:09:52,793 --> 00:09:54,695
然后就有了
autoresizingMask


215
00:09:54,761 --> 00:09:57,931
以规定视图
在父视图改变大小时


216
00:09:58.498 --> 00:10:00.000 align:middle
应该怎样调整大小


217
00:10:00,267 --> 00:10:03,403
接着在Auto Layout
用约束实现所有目的


218
00:10:03,704 --> 00:10:06,073
实际上 子框架
不会按照所预期


219
00:10:06,139 --> 00:10:07,341
方式进行工作


220
00:10:07,407 --> 00:10:10,410
你仍可以设置
视图框架 但是...


221
00:10:11,011 --> 00:10:13,180
它可以移到
所放置的位置


222
00:10:13,547 --> 00:10:15,782
不过 如果布局
过程继续


223
00:10:15,849 --> 00:10:19,520
框架从Layout Engine
复制框架内容


224
00:10:19,586 --> 00:10:21,321
并在视图中应用
框架可能随时被重写


225
00:10:21,788 --> 00:10:23,257
导致有时


226
00:10:23,323 --> 00:10:26,159
需要设置
框架


227
00:10:26,226 --> 00:10:28,695
例如 如果覆盖
layoutSubview


228
00:10:29,429 --> 00:10:31,498
可能会需要为
这些视图设置框架


229
00:10:32,666 --> 00:10:34,768
幸好 这里有
<c.blue>有</c>个旗标


230
00:10:35,269 --> 00:10:38,438
名为translatesAutoResizingMask
IntoConstraints


231
00:10:38,505 --> 00:10:41,041
是有点拗口
不过功能也如文字所述


232
00:10:41,108 --> 00:10:43,243
它可以使视图按照
Legacy Layout


233
00:10:43,343 --> 00:10:46,413
的状态下表现是在Auto
Layout的环境下


234
00:10:47,314 --> 00:10:51,218
因此 如果在有这个旗标的
视图中设置框架


235
00:10:51,585 --> 00:10:53,720
框架实际上会
生成约束


236
00:10:53,787 --> 00:10:56,456
并在 Layout Engine中
执行这一框架


237
00:10:57,257 --> 00:11:00,360
这意味着你可以
随时按照自己的想法


238
00:11:00,427 --> 00:11:02,596
设置框架
还可以依赖Auto Layout


239
00:11:02,663 --> 00:11:04,131
把视图保留在
所放置的位置


240
00:11:05,465 --> 00:11:08,569
此外 这些约束
实际上执行了


241
00:11:09,002 --> 00:11:10,504
autoresizingMask的
行为


242
00:11:10,571 --> 00:11:13,507
例如如果有
部分应用


243
00:11:13,574 --> 00:11:16,844
并未升级到
Auto Layout 你需要


244
00:11:16,910 --> 00:11:18,512
依赖自动重新调整大小的行为


245
00:11:18,879 --> 00:11:20,681
它应仍按照你所
希望的方式行为


246
00:11:22,082 --> 00:11:25,519
最后 通过实际运用Auto
Layout Engine 


247
00:11:25,586 --> 00:11:28,889
来执行设置的框架
使之可以使用


248
00:11:28,956 --> 00:11:32,259
约束定位
其他视图相对与这个视图的位置


249
00:11:33,327 --> 00:11:35,395
因为设置了框架
你不可以在周围


250
00:11:35,462 --> 00:11:38,932
移动视图
但是如果没有告知


251
00:11:38,999 --> 00:11:41,468
Layout Engine这个视图
应该所处的位置


252
00:11:41,535 --> 00:11:44,938
那么一旦提供约束为参考
就会出现问题


253
00:11:45,005 --> 00:11:48,509
你会看到尺寸大小
或原点和零点冲突


254
00:11:48,575 --> 00:11:51,411
如果不希望出现这种效果
这类行为会


255
00:11:51,512 --> 00:11:52,946
<c.blue>会</c>非常奇怪


256
00:11:54,181 --> 00:11:58,585
那么这里需要注意的是
当计划


257
00:11:58,652 --> 00:12:00,687iddle
使用约束
定位视图时


258
00:11:58,652 --> 00:12:00,687
使用约束
定位视图时


259
00:12:00,754 --> 00:12:02,055
你需要确保
这是关闭状态


260
00:12:02,122 --> 00:12:03,290
如果是在Interface
Builder中


261
00:12:03,357 --> 00:12:04,458
构建UI 它会处理得很好


262
00:12:04,525 --> 00:12:07,494
并妥善设置
这个旗标


263
00:12:08,028 --> 00:12:10,364
但是如果是在用编码
分配UI


264
00:12:10,430 --> 00:12:12,165
这会默认为是
开启状态


265
00:12:12,232 --> 00:12:14,735
之所以这样
是因为有许多代码


266
00:12:14,801 --> 00:12:16,470
会分配给视图
并希望按照


267
00:12:16,537 --> 00:12:18,172
一定方式来执行


268
00:12:19,473 --> 00:12:22,910
所以是默认开启状态
如果通过编码分配UI


269
00:12:22,976 --> 00:12:24,845
并且忘记
关闭这里


270
00:12:24,912 --> 00:12:27,247
这会导致一系列
意想不到的问题


271
00:12:27,814 --> 00:12:29,550
我们来看一下
如果忘记会怎样


272
00:12:30,350 --> 00:12:32,486
这里是个很简单
的代码


273
00:12:32,553 --> 00:12:34,555
我们分配一个按钮
并进行配置


274
00:12:34,621 --> 00:12:36,590
然后生成
两个约束来


275
00:12:36,657 --> 00:12:39,092
定位这个按钮
顶部10点


276
00:12:39,259 --> 00:12:40,994
距离左边10点


277
00:12:41,061 --> 00:12:42,596
这非常简单


278
00:12:42,663 --> 00:12:44,231
但是运行一下
结果却是这样


279
00:12:44,765 --> 00:12:46,667
窗口太小
没有按照


280
00:12:46,733 --> 00:12:48,735
预想来执行
按钮也不见了


281
00:12:49,770 --> 00:12:52,206
会全都喷到
控制台上


282
00:12:53,073 --> 00:12:56,210
实际上这说明
存在问题


283
00:12:56,276 --> 00:12:59,613
大家看到的是NSAutoresizingMask
LayoutConstraint


284
00:12:59.880 --> 00:13:01.782 align:middle
这是布局约束类
是框架


285
00:12:59,880 --> 00:13:01,782
这是布局约束类
是框架


286
00:13:02,216 --> 00:13:03,584
为有需要设置


287
00:13:03,650 --> 00:13:07,354
translatesAutoResizingMask
IntoConstraints 的视图而生成的


288
00:13:08,722 --> 00:13:11,325
这里实际发生的情况
是因为我们忘记


289
00:13:11,592 --> 00:13:15,195
清理旗标
框架为按钮上的


290
00:13:15,262 --> 00:13:16,897
初始框架生成
约束


291
00:13:17,264 --> 00:13:19,900
框架为空 尺寸和原点
也都是零值


292
00:13:20,467 --> 00:13:22,936
所以没什么用
不过当我们添加


293
00:13:23,003 --> 00:13:24,738
约束 想把按钮定位
在10,10的位置


294
00:13:24,805 --> 00:13:26,707
就会出现真正的问题


295
00:13:27,207 --> 00:13:29,843
它不可能同时出现在
0,0和10,10两个位置


296
00:13:29,910 --> 00:13:32,246
因此 Layout Engine
突然无法满足


297
00:13:32,312 --> 00:13:35,148
约束的要求 就会导致
出现意想不到的问题


298
00:13:36,483 --> 00:13:39,920
如果返回代码
加上一行


299
00:13:39,987 --> 00:13:42,589
清理旗标
效果就会好得多


300
00:13:43,891 --> 00:13:46,627
我们得到想要的布局
按钮的位置


301
00:13:46,693 --> 00:13:49,062
也没问题
窗口的表现也正常


302
00:13:50,597 --> 00:13:52,799
需要记住的是


303
00:13:52,866 --> 00:13:55,536
translatesAutoResizingMask
IntoConstraints 


304
00:13:55,602 --> 00:13:58,672
通常都不会用到
这个旗标


305
00:13:58,739 --> 00:14:00,807
但是如果有视图
需要通过直接设置


306
00:14:00,908 --> 00:14:04,178
框架来定位
这就会很有用


307
00:14:04,912 --> 00:14:07,181
而且 如果计划
用约束来定位


308
00:14:07,247 --> 00:14:09,883
需要确定这是
关闭状态


309
00:14:09,950 --> 00:14:11,752
如果你没有使用Interface
Builder的话


310
00:14:13,787 --> 00:14:15,989
接下来我会聊聊
约束生成


311
00:14:16,990 --> 00:14:20,394
我觉得这更容易
只要看看


312
00:14:20,460 --> 00:14:22,229
我们刚刚在
屏幕上的代码就明白


313
00:14:22,629 --> 00:14:24,331
特别是
结尾的那一段


314
00:14:24,398 --> 00:14:25,933
我们构建的是
这些约束


315
00:14:26,934 --> 00:14:30,304
这和在Auto
Layout开始之初我们就有的约束


316
00:14:30,370 --> 00:14:31,872
工厂方法
完全一样


317
00:14:31,939 --> 00:14:33,106
而且相当有效


318
00:14:33,273 --> 00:14:35,275
但是用起来
有点麻烦


319
00:14:35,943 --> 00:14:37,678
代码相当冗长


320
00:14:38,111 --> 00:14:40,013
不是很好
读出来


321
00:14:40,080 --> 00:14:42,049
我们这里真正想
表达的是


322
00:14:42,115 --> 00:14:44,218
我们想把按钮
定位在距离顶部10点


323
00:14:44,351 --> 00:14:45,752
距离左边10点


324
00:14:46,253 --> 00:14:48,322
但是为了理解这一点
需要仔细


325
00:14:48,388 --> 00:14:49,823
了解代码
再把这些


326
00:14:49,890 --> 00:14:51,158
都拼在一起


327
00:14:51,558 --> 00:14:54,261
那么在新版OS X
和iOS中


328
00:14:54,328 --> 00:14:56,797
我们介绍了
更简洁的新语句


329
00:14:56,897 --> 00:14:57,965
来生成约束


330
00:14:58.532 --> 00:14:59.933 align:middle
大概是这样


331
00:15:01,235 --> 00:15:03,971
这个语句使用的对象
叫做布局锚点


332
00:15:11,111 --> 00:15:12,946
谢谢很高兴大家喜欢


333
00:15:15,048 --> 00:15:16,817
布局锚点代表
具体视图的


334
00:15:16,917 --> 00:15:20,320
具体属性
锚点对象会


335
00:15:20,387 --> 00:15:23,423
<c.blue>会</c>面对多种工厂方式
来生成不同的约束形式


336
00:15:24,024 --> 00:15:26,894
本例中 我们是在
约束上端锚点


337
00:15:26,960 --> 00:15:30,564
使之等于视图上端锚点
再加10


338
00:15:31,665 --> 00:15:33,333
如果你们还在用
Objective-C


339
00:15:33,400 --> 00:15:35,102
其中也有这些
而且


340
00:15:35,469 --> 00:15:37,104
差别会
更为显著


341
00:15:37,171 --> 00:15:40,174
从将近7行降到了
仅仅两行


342
00:15:41,375 --> 00:15:43,243
这个新语句还
遵守我们所有的


343
00:15:43,310 --> 00:15:45,979
命名规范
但读起来更


344
00:15:46,046 --> 00:15:48,081
像是表达式
我感觉这样


345
00:15:48,148 --> 00:15:49,716
更容易看清代码的意图


346
00:15:50,951 --> 00:15:53,520
约束的所有有效形式
都可以运用这个语句


347
00:15:53,587 --> 00:15:57,624
来创建 你实际上
还会得到许多无效的


348
00:15:57,691 --> 00:15:59,393e
约束形式的
编译器错误


349
00:16:00,227 --> 00:16:03,664
此刻 你只能得到
Objective-C的错误 


350
00:16:03,730 --> 00:16:05,299
但是这些也会
变成Swift 


351
00:16:06,400 --> 00:16:08,602
例如 视图的左对齐
边缘应为100


352
00:16:08,669 --> 00:16:11,605
这样就不合理
因为没有上下文


353
00:16:11,705 --> 00:16:14,474
可以诠释
这个100


354
00:16:14,875 --> 00:16:17,244
因此错误在于
这个方式在


355
00:16:17,377 --> 00:16:18,979
位置锚点不存在


356
00:16:20,080 --> 00:16:22,916
与之相似 视图的
左对齐边缘


357
00:16:22,983 --> 00:16:25,185
和不同视图同宽
这也不合理


358
00:16:25,886 --> 00:16:29,089
位置和尺寸大小在
Auto Layout基本上


359
00:16:29,223 --> 00:16:32,893
是不兼容的类型
因此得到的不兼容指针类型


360
00:16:34,962 --> 00:16:37,865
以往 这些内容
仍属于错误


361
00:16:38,165 --> 00:16:39,666
但是仅可以在
运行时间出现


362
00:16:39,867 --> 00:16:42,603
因此我觉得
将确定编译时间错误


363
00:16:42,669 --> 00:16:44,404
将有助于我们一开始
就把约束设置正确


364
00:16:44,938 --> 00:16:47,140
并可以编写更好读
更可维护的代码


365
00:16:54,848 --> 00:16:58,085
接下来我会聊聊
约束负面空间


366
00:16:58,418 --> 00:17:00,521
有几种不同布局
会时常出现


367
00:17:00,587 --> 00:17:04,156
具体
实现方法却不很明显


368
00:17:04,691 --> 00:17:06,693
这里有两个例子


369
00:17:06,760 --> 00:17:10,196
在第一种情况中
目标是让


370
00:17:10,263 --> 00:17:11,898
这些按钮间
的空间在重新调整


371
00:17:12,065 --> 00:17:13,367
窗口大小时保持相同


372
00:17:13,867 --> 00:17:16,170
在底部 我们有
图像和标签


373
00:17:16,970 --> 00:17:20,574
我们想把它们
居中做成一组


374
00:17:20,641 --> 00:17:23,544
而不是各自将每个
内容居中


375
00:17:24,144 --> 00:17:25,546
结果就是
这些布局问题的


376
00:17:25,612 --> 00:17:27,580
解决方案
都是相同的


377
00:17:27,981 --> 00:17:29,483
也就是要用到虚拟视图


378
00:17:30,083 --> 00:17:33,020
实际上是分配空视图
把它们进行约束


379
00:17:33,086 --> 00:17:34,922
填充到按钮之间
的空间中


380
00:17:34,988 --> 00:17:37,257
一旦视图
位于这些点


381
00:17:37,624 --> 00:17:39,927
我们可以使用等宽约束
来确保其尺寸大小


382
00:17:39,993 --> 00:17:42,629
在重新调整窗口大小时 
保持相同


383
00:17:43,697 --> 00:17:46,033
在底部 我们
也是同样


384
00:17:46,099 --> 00:17:47,201
使用空视图


385
00:17:48,001 --> 00:17:50,604
对边缘 图像和标签
进行约束


386
00:17:51,238 --> 00:17:53,040
然后我们可以在
空视图上安排


387
00:17:53,106 --> 00:17:55,576
居中约束
而不是


388
00:17:55,642 --> 00:17:57,144
处理内容视图本身


389
00:17:57,911 --> 00:18:00,581
很有效 传统上 
我们就是这样解决


390
00:18:00,647 --> 00:18:03,483
这些视图问题
但是这种技巧


391
00:18:03,550 --> 00:18:04,918
知道的人太少 对吧？


392
00:18:04,985 --> 00:18:07,754
而且也不够有效
特别是在iOS上


393
00:18:07,821 --> 00:18:09,890
这里每个视图都有
相关的图层


394
00:18:10,757 --> 00:18:11,992
那么在新版中


395
00:18:12,526 --> 00:18:16,797
我们面对的是布局指南的
新的公共类 


396
00:18:17,764 --> 00:18:20,334
布局指南只
代表Layout Engine中


397
00:18:20,400 --> 00:18:21,134
的矩形


398
00:18:22,002 --> 00:18:23,770
这很容易使用


399
00:18:23,971 --> 00:18:27,441
只需要将之进行分配
再加入


400
00:18:27,508 --> 00:18:29,977
所属视图
然后就可以将其


401
00:18:30,043 --> 00:18:30,844
按照视图处理方式来约束


402
00:18:31,345 --> 00:18:33,046
它们面对的是
锚点对象 因此可以


403
00:18:33,113 --> 00:18:35,182
运用新约束
生成语句


404
00:18:35,349 --> 00:18:36,850
但是还可以将之


405
00:18:37,451 --> 00:18:39,620
交给现有的
约束工厂方法


406
00:18:39,686 --> 00:18:42,956
这样就可以和视觉格式语言配合使用
是这样的效果


407
00:18:44,091 --> 00:18:46,093
我们把现有的
布局指南做转换


408
00:18:46,159 --> 00:18:49,162
把这些进行内部使用


409
00:18:49,596 --> 00:18:51,932
这里有很好的示例


410
00:18:51,999 --> 00:18:55,335
大家可能注意到
UIView针对边距属性


411
00:18:55,435 --> 00:18:56,537
并未真正面对布局锚点


412
00:18:57,070 --> 00:19:00,073
相反 UI View有着
新的布局边距指南


413
00:19:00,274 --> 00:19:02,709
这一布局指南
代表边距内


414
00:19:02,776 --> 00:19:04,545
视图的区域


415
00:19:05,679 --> 00:19:08,715
如果需要对边距
进行约束


416
00:19:08,782 --> 00:19:11,218
最简单的做法是
通过布局指南


417
00:19:12,452 --> 00:19:16,823
因此布局指南并未从根本上启动
任何全新行为


418
00:19:16,890 --> 00:19:20,227
现在使用视图
可以实现所有这些功能


419
00:19:20,694 --> 00:19:22,462
但是它们可以
用更轻量级的方式


420
00:19:22,529 --> 00:19:24,898
来解决这些问题
而且不需


421
00:19:24,965 --> 00:19:28,402
搞乱层次
因为那些视图


422
00:19:28,468 --> 00:19:29,937
并不需要
真正拖动


423
00:19:31,371 --> 00:19:35,676
接下来我请会卡西亚
回到台上 来介绍


424
00:19:35,742 --> 00:19:38,879
Auto Layout
出现问题的调试策略


425
00:19:46,920 --> 00:19:47,688
大家好


426
00:19:47,754 --> 00:19:49,656
上午我见过
在座的部分听众


427
00:19:50,123 --> 00:19:50,824
我是卡西亚


428
00:19:50,891 --> 00:19:53,760
我在iOS Keyboards
Team就职 我来这里和大家


429
00:19:53,827 --> 00:19:55,863
介绍如何调试布局
当出现问题时


430
00:19:55,929 --> 00:19:56,897
该怎么办


431
00:19:57,631 --> 00:19:59,900
以前用过
Auto Layout的朋友


432
00:19:59,967 --> 00:20:03,470
希望大部分都用过
可能遇到像这样的情况：


433
00:20:04,304 --> 00:20:07,207
设计一个UI非常漂亮


434
00:20:07,541 --> 00:20:09,009
然后准备
在代码中执行


435
00:20:09,076 --> 00:20:10,544
你把所有约束
都小心放入其中


436
00:20:10,611 --> 00:20:11,345
也做了调整


437
00:20:11,678 --> 00:20:13,680
构建和运行时
出现了问题


438
00:20:14,882 --> 00:20:17,351
完全都不对
在调试器中


439
00:20:17,451 --> 00:20:19,786
你看到这样的内容


440
00:20:20,053 --> 00:20:21,989
文本内容很多
有点吓人


441
00:20:22,055 --> 00:20:23,991
但是这的确是
相当有用的日志


442
00:20:24,758 --> 00:20:28,462
遇到不满意的约束错误时
就会出现这些


443
00:20:28,962 --> 00:20:30,998
引擎在看所提供的
约束设置


444
00:20:31,398 --> 00:20:33,834
决定它无法
解决布局问题


445
00:20:33,901 --> 00:20:35,836
因为其中有
部分内容彼此冲突


446
00:20:36,270 --> 00:20:37,871
若要解决视图问题
需要打破


447
00:20:37,938 --> 00:20:39,606
一个约束才行


448
00:20:40,007 --> 00:20:43,143
于是抛出这个错误
告诉你它做了什么


449
00:20:43,944 --> 00:20:47,147
你明白 接下来要继续
深入 找到那个


450
00:20:47,214 --> 00:20:48,415
额外的竞争性约束才行


451
00:20:49,183 --> 00:20:51,318
我们试着读一下
这个日志


452
00:20:51,585 --> 00:20:54,154
这里是刚才看的视图
以及我们的日志


453
00:20:54,221 --> 00:20:55,923
从上端移走
部分内容


454
00:20:55,989 --> 00:20:57,357
使之和屏幕吻合


455
00:20:57,858 --> 00:21:00,294le
但是要先从底部
开始处理


456
00:20:57,858 --> 00:21:00,294
但是要先从底部
开始处理


457
00:21:01,161 --> 00:21:04,131
大家看到的最后内容是
实际上打破的约束


458
00:21:04,631 --> 00:21:06,867
不一定必须是
导致问题约束


459
00:21:06,934 --> 00:21:09,670
引擎必须打破的约束
是为了解决


460
00:21:09,736 --> 00:21:12,239
布局问题
因此从这里入手很好


461
00:21:13,207 --> 00:21:16,844
先检查该视图的translates
AutoResizingMaskIntoConstraints


462
00:21:16,910 --> 00:21:19,713
在杰西的例子中
大家看到 日志中


463
00:21:19,780 --> 00:21:21,515
也会出现
但是确保你已经


464
00:21:21,582 --> 00:21:23,116
事先完成这些内容
肯定是没错的


465
00:21:23,584 --> 00:21:26,553
本例中 我们
打破的是


466
00:21:26,620 --> 00:21:27,721
Saturn纵横比约束


467
00:21:28,422 --> 00:21:30,090
我们在日志上
提高一些 以示强调


468
00:21:30,157 --> 00:21:32,025
在日志本身中
也会出现


469
00:21:32,092 --> 00:21:36,230
接下来要做的是
发现影响日志中


470
00:21:36,296 --> 00:21:38,198
出现的视图的
其他约束


471
00:21:39,032 --> 00:21:42,803
本例中 我们接下来
<c.blue>看</c>按到父视图约束的左对齐


472
00:21:42,870 --> 00:21:46,406
和父视图约束的右对齐
以及上端的一个


473
00:21:47,341 --> 00:21:49,243
还有下面
标签视图的一个


474
00:21:50,210 --> 00:21:51,044
这些都没问题


475
00:21:51,111 --> 00:21:52,679
没有一个
产生直接冲突


476
00:21:53,313 --> 00:21:55,883
接下来要看
相关的视图


477
00:21:55,949 --> 00:21:56,917
本例中 是标签


478
00:21:58,051 --> 00:22:00,254
因此这个标签
有着和Saturn底部


479
00:22:00,320 --> 00:22:03,390
相同的关联约束
下一个约束


480
00:22:03,457 --> 00:22:04,892
关联到
父视图上端


481
00:22:05,659 --> 00:22:07,995
因为Saturn
高度应该


482
00:22:08,061 --> 00:22:11,131
超过100点
约束告诉它应该如此


483
00:22:11,765 --> 00:22:14,635
你会注意到
标签旁的约束


484
00:22:14,701 --> 00:22:19,306
确实告诉你
这个约束看似


485
00:22:19,373 --> 00:22:22,075
非常像以往
你可能用来


486
00:22:22,142 --> 00:22:24,511
生成约束的视觉格式语言


487
00:22:24,678 --> 00:22:27,414
我们看到
从父视图上端


488
00:22:27,915 --> 00:22:29,716
是100点 还因为
Saturn需要比这个多


489
00:22:30,083 --> 00:22:31,218
只能打破
一个约束


490
00:22:31,285 --> 00:22:32,252
才能解决布局问题


491
00:22:33,020 --> 00:22:35,255
所以其实
并不难读


492
00:22:36,123 --> 00:22:38,725
现在我们让问题
更简单些


493
00:22:38,892 --> 00:22:41,495
因为你可能习惯于
看到这样效果的


494
00:22:41,562 --> 00:22:43,997
约束日志
其中有一组


495
00:22:44,064 --> 00:22:47,534
内存地址和类名称
除非在视图中


496
00:22:47,601 --> 00:22:49,837
有导航文本 否则
不会告知各自是什么


497
00:22:50,771 --> 00:22:52,639
如果是这样的效果
则会容易很多


498
00:22:53,740 --> 00:22:55,175
为实现这一点
你只需要


499
00:22:55,242 --> 00:22:57,144
在约束中
增添标识符


500
00:22:57,778 --> 00:22:59,112
那么我可以有两种
方便的方法来实现


501
00:22:59.780 --> 00:23:01.949 align:middle
如果使用的是
显性约束


502
00:22:59,780 --> 00:23:01,949
如果使用的是
显性约束


503
00:23:02,015 --> 00:23:02,883
那只是一个属性


504
00:23:03,650 --> 00:23:06,386
建议命名标识符
和命名约束的方法


505
00:23:06,453 --> 00:23:08,322
相同 这样如果之后
需要找出


506
00:23:08,388 --> 00:23:10,757
代码的话
则会容易很多


507
00:23:11,391 --> 00:23:14,962
但是你可以把它
任意命名 我们就这么做


508
00:23:15,028 --> 00:23:17,965
如果使用Visual Format
Language会得到数组


509
00:23:18,031 --> 00:23:19,867
你不会获得约束
因此只能循环那个数组


510
00:23:19,933 --> 00:23:22,636
在每个约束上
设置标识符


511
00:23:23,170 --> 00:23:25,005
可以在数组的每个约束上
设置相同的


512
00:23:25,072 --> 00:23:27,040
标识符
这一般都很好


513
00:23:27,374 --> 00:23:29,576
如果想找出单独约束
并设置标识符


514
00:23:29,643 --> 00:23:32,045
之后还要在数组中
做些改变


515
00:23:32,112 --> 00:23:33,714
顺序就要
做调整


516
00:23:33,780 --> 00:23:34,615
那么需要返回
同样来改变


517
00:23:34,681 --> 00:23:36,383
标识符
的顺序


518
00:23:37,017 --> 00:23:40,754
此外 一旦看到了
日志中的短语


519
00:23:40,821 --> 00:23:42,189
你一定会知道
该怎么找问题


520
00:23:42,256 --> 00:23:45,692
因此不必当真
把具体约束都摆着那里


521
00:23:46,460 --> 00:23:47,461
最后 在约束检测器中的


522
00:23:48,095 --> 00:23:50,564
Interface Builder
有个标识符属性


523
00:23:50,631 --> 00:23:53,233
那么就太简单了


524
00:23:54,268 --> 00:23:55,235
我们来看一下


525
00:23:55,302 --> 00:23:58,105
我们来谈谈
怎么理解这个日志


526
00:23:58,539 --> 00:24:01,508ddle
更容易了解
目前发生的情况


527
00:23:58,539 --> 00:24:01,508
更容易了解
目前发生的情况


528
00:24:02,576 --> 00:24:06,213
首先 如果在视图设置
用户友好标识符


529
00:24:07,047 --> 00:24:08,882
这些标识符会
在日志中与相应视图


530
00:24:08,949 --> 00:24:11,185
成对出现
因此就可以找到所需视图


531
00:24:11,251 --> 00:24:13,921
我就是这样从刚才
看到的约束中


532
00:24:13,987 --> 00:24:16,390
找到Saturn 它有用户
友好标识符名为Saturn


533
00:24:17,157 --> 00:24:19,526
还可以在新的布局向导中
设置标识符


534
00:24:20,060 --> 00:24:22,229
这是个平铺
标识符属性


535
00:24:22,296 --> 00:24:25,232
没有什么特别的
这会让运用布局指南


536
00:24:25,699 --> 00:24:27,301
调试布局变得
非常简单


537
00:24:27,668 --> 00:24:30,204
因为效果很棒
我很确定大家迟早都会用上


538
00:24:30,938 --> 00:24:31,972
加上它们再继续


539
00:24:32,806 --> 00:24:35,876
如果想试试
现在就用很复杂的


540
00:24:35,943 --> 00:24:37,477
视图 把所有标识符
都加进去 你可以完成的


541
00:24:37,544 --> 00:24:38,312
但是需要些时间


542
00:24:38,378 --> 00:24:40,981
因为你可以以后
读这个日志 所以也值得


543
00:24:41,048 --> 00:24:43,851
但是如果你继续的时候
这么做 以后就会少费工夫


544
00:24:43,917 --> 00:24:45,919
因为 你也拿不准
什么时候


545
00:24:45,986 --> 00:24:47,721
会遇到这个问题
所以有必要


546
00:24:48,055 --> 00:24:50,257
先备着
以供不时之需


547
00:24:51,058 --> 00:24:53,994
最后 如果
约束日志不理想


548
00:24:54,061 --> 00:24:55,362
其中包含
信息太多


549
00:24:55,729 --> 00:24:57,831
就会导致布局非常复杂
其中会有


550
00:24:57.898 --> 00:24:59.933 align:middle
数百行
可以看看


551
00:25:00,000 --> 00:25:02,069
底部的视图 特别是
你在看的其他视图


552
00:25:02,135 --> 00:25:04,638
并且实际上要查看
在调试器中影响


553
00:25:04,705 --> 00:25:05,873
这些视图的约束


554
00:25:06,473 --> 00:25:08,976
在iOS中 是constraints
AffectingLayoutForAxis


555
00:25:09,042 --> 00:25:12,045
在OS X中 是constraints
AffectingLayoutForOrientation


556
00:25:12,579 --> 00:25:15,182
这可以告知你
哪些约束在


557
00:25:15,249 --> 00:25:18,919
影响这个或那个
坐标轴的视图


558
00:25:19,553 --> 00:25:20,921
我们现在来看
效果怎样


559
00:25:22,856 --> 00:25:26,126
这就是刚刚


560
00:25:28,729 --> 00:25:31,465
在看的视图


561
00:25:31,732 --> 00:25:33,033
我们看到这里是同样的日志


562
00:25:33,800 --> 00:25:35,769
我们先擦去这些
因为我希望


563
00:25:35,836 --> 00:25:38,805
给大家看看
另外的内容


564
00:25:38,872 --> 00:25:41,074
我设置了一个
两指双击来断开这里


565
00:25:41,141 --> 00:25:42,209
所以现在
不用内存地址


566
00:25:42,276 --> 00:25:43,777
我用的是设置好的名称


567
00:25:43,844 --> 00:25:46,980
我们要进入
调试器


568
00:25:47,381 --> 00:25:51,718
让它打印出Saturn的


569
00:25:53,921 --> 00:25:56,723
constraintsAffectingLayoutForAxis
以及垂直坐标轴


570
00:25:57,457 --> 00:26:00,894
垂直轴是1 水平轴是0


571
00:26:00,961 --> 00:26:02,729
如果用错了
那就是另一种选项


572
00:26:02,796 --> 00:26:04,631
返回这里
也相当简单


573
00:26:04,831 --> 00:26:07,334
现在我们看到
视图在上端有布局向导


574
00:26:07,467 --> 00:26:10,270
没问题


575
00:26:10,504 --> 00:26:11,738
那是视图的约束


576
00:26:12,472 --> 00:26:14,341
命名视图中的
约束还有


577
00:26:14,408 --> 00:26:15,809
一个好处 就是说
你会很快知道


578
00:26:15,876 --> 00:26:18,045
在约束外
设置了哪些


579
00:26:18,111 --> 00:26:19,313
哪些是由
你设置的


580
00:26:19,580 --> 00:26:22,816
在Saturn的垂直布局中
我们了解到


581
00:26:22,883 --> 00:26:23,884
它是和上端布局指南关联


582
00:26:24,952 --> 00:26:25,786
非常好


583
00:26:25,853 --> 00:26:29,189
它还表示
Saturn和下面的标签关联


584
00:26:30,157 --> 00:26:32,292
那么在另一个影响
Saturn的约束中


585
00:26:32,392 --> 00:26:33,827
不过不是直接
关联Saturn


586
00:26:34,127 --> 00:26:36,396
我们看到约束
在视图上端


587
00:26:36,463 --> 00:26:37,364
关联了标签


588
00:26:37,865 --> 00:26:39,733
因为它并未在
任何地方提及Saturn


589
00:26:39,800 --> 00:26:42,035
这是很好的线索
说明这就是问题所在


590
00:26:42,369 --> 00:26:43,804
而且整个Saturn
应该是


591
00:26:43,871 --> 00:26:46,173
超过100多才行
我碰巧知道


592
00:26:46,240 --> 00:26:48,342
因为是我做的编码


593
00:26:48,609 --> 00:26:51,812
现在我拿到了
非常不错的标签


594
00:26:51,879 --> 00:26:54,515
我可以搜索它
找到我做的约束


595
00:26:54,581 --> 00:26:55,849
好了


596
00:26:55,916 --> 00:26:58,252
把它关联到上端锚点
定为100点


597
00:26:58.952 --> 00:27:01.655 align:middle
来看看会在
哪里激活


598
00:26:58,952 --> 00:27:01,655
来看看会在
哪里激活


599
00:27:02,623 --> 00:27:04,057
删掉


600
00:27:05,025 --> 00:27:05,726
重新构建


601
00:27:06,460 --> 00:27:08,629
这次好多了


602
00:27:08,695 --> 00:27:10,130
我就是要
这样子


603
00:27:10,564 --> 00:27:12,833
深入研究这些
问题 其实


604
00:27:12,900 --> 00:27:13,834
相当简单


605
00:27:13,901 --> 00:27:15,536
即便布局
相当复杂也是如此


606
00:27:15,702 --> 00:27:18,972
如果使用标识符
方法得当


607
00:27:19,907 --> 00:27:23,477
有关日志 我们讲到哪里了？


608
00:27:24,478 --> 00:27:25,913
从底部开始


609
00:27:26,680 --> 00:27:28,348
找到打破的约束
从中了解到许多


610
00:27:28,415 --> 00:27:31,518
它为何会打破的
相关信息


611
00:27:31,885 --> 00:27:35,022
先来查看translatesAutoResizingMask
IntoConstraints


612
00:27:35,088 --> 00:27:37,891
它是许多状况的
罪魁祸首


613
00:27:37,958 --> 00:27:41,128
在约束和视图上
都设置标识符


614
00:27:41,828 --> 00:27:44,198
最后 如果日志
太过复杂使用


615
00:27:44,531 --> 00:27:47,201
constraintsAffectingLayoutForAxis
来缩小范围


616
00:27:48,268 --> 00:27:53,407
好这就是引擎
看到约束 了解自己


617
00:27:53,473 --> 00:27:57,211
没有解决方案后
发生的一切


618
00:27:57,277 --> 00:27:59,246
没有办法满足
所有的约束要求


619
00:27:59,613 --> 00:28:01,782
可是如果有着
不只一个解决方案会怎样？


620
00:28:02,082 --> 00:28:03,450
这就会出现歧义


621
00:28:04,251 --> 00:28:06,587
这就是我们最后的
谜题 祝贺大家


622
00:28:06,653 --> 00:28:07,487
进行到这里


623
00:28:07,955 --> 00:28:09,156
此外再无其他
更多内容


624
00:28:09,923 --> 00:28:11,692
我们来看一下
歧义布局


625
00:28:11,925 --> 00:28:13,660
造成歧义布局的


626
00:28:13,727 --> 00:28:16,997
两个可能原因
只能是约束太少


627
00:28:17,865 --> 00:28:21,468
如果是在做
这样的行星布局


628
00:28:21,535 --> 00:28:22,569
希望将Saturn
放在中间


629
00:28:23,237 --> 00:28:25,639
但是水平方向的约束
设置不当


630
00:28:25,806 --> 00:28:27,074
视图只能猜测
该把它放在哪里


631
00:28:28,041 --> 00:28:29,276
再次提醒一下
应该是在中心


632
00:28:29,343 --> 00:28:32,513
引擎把它放得
偏到了这边


633
00:28:32,880 --> 00:28:35,249
还有一个解决方案
是把它偏到另一边


634
00:28:35,315 --> 00:28:36,950
可就是不能
落在中间的位置


635
00:28:37,017 --> 00:28:39,620
因为如果不知道
该放在哪里 它就会


636
00:28:39,686 --> 00:28:41,188
找个地方放 这就会是
问题所在


637
00:28:41,321 --> 00:28:42,756
因为不是你想要的


638
00:28:42,823 --> 00:28:44,825
需要返回 在视图上
加上约束


639
00:28:45,592 --> 00:28:47,194
另一个歧义布局的
原因是属性


640
00:28:47,261 --> 00:28:48,295
存在冲突


641
00:28:48,729 --> 00:28:51,365
在第一部分中
我们谈过一点


642
00:28:51,431 --> 00:28:54,334
在视图的底部
我们刚做过调整


643
00:28:54,401 --> 00:28:56,603
大家会看到结果会
是文本域


644
00:28:56,670 --> 00:28:59,072
按钮的比例
有问题


645
00:28:59.139 --> 00:29:00.474 align:middle
我希望它
是这个样子


646
00:28:59,139 --> 00:29:00,474
我希望它
是这个样子


647
00:29:02,342 --> 00:29:04,611
文本域占据
视图的主要部分


648
00:29:05,212 --> 00:29:07,548
最后变成这个样子
是因为引擎


649
00:29:07,614 --> 00:29:10,150
在两个布局中
替我做出选择


650
00:29:11,084 --> 00:29:13,520
它这么做是因为
两个视图的内容


651
00:29:13,587 --> 00:29:15,255
吸附性优先级相同


652
00:29:15,322 --> 00:29:17,991
都是250
我没有其他方法


653
00:29:18,058 --> 00:29:19,860
我也没有告诉
引擎用其他方法在水平方向


654
00:29:19,927 --> 00:29:21,962
来确定这些
视图的大小


655
00:29:22,429 --> 00:29:24,131
那它只能是猜
所以猜测也许


656
00:29:24,231 --> 00:29:27,401
我是想让文本视图
吸附最近的内容


657
00:29:27,734 --> 00:29:29,169
于是继续
还把输出了标签


658
00:29:29,703 --> 00:29:30,838
但是我实际上希望
它做的是


659
00:29:30,971 --> 00:29:32,439
吸附靠近
按钮的内容


660
00:29:33,106 --> 00:29:36,343
这部分要
反复强调


661
00:29:36,410 --> 00:29:38,111
但是按钮的内容
吸附优先级


662
00:29:38,178 --> 00:29:40,814
设置的低于
文字域


663
00:29:41,315 --> 00:29:45,519
视图的边缘会
从内容中伸出一块


664
00:29:45,586 --> 00:29:48,088
因为这不太重要
它吸附了最近的内容


665
00:29:48,255 --> 00:29:49,523
或者你在告知引擎
这不太重要


666
00:29:49,590 --> 00:29:51,158
视图吸附
附近的内容


667
00:29:51,892 --> 00:29:54,595
与此同时 如果设置了以上
文本视图的


668
00:29:54,661 --> 00:29:57,965
内容吸附性优先级
按钮吸附了靠近的内容


669
00:29:58,131 --> 00:29:59,299
且文本域有所延伸


670
00:29:59,733 --> 00:30:02,035le
在这种特殊情况下
引擎始终都会这样


671
00:29:59,733 --> 00:30:02,035
在这种特殊情况下
引擎始终都会这样


672
00:30:02,102 --> 00:30:03,537
解决布局问题


673
00:30:03,704 --> 00:30:06,874
因此 如果妥当
设置这些属性


674
00:30:06,940 --> 00:30:09,810
就可以解决这些
遇到的歧义布局


675
00:30:09,877 --> 00:30:13,380
我们还有解决
歧义的两个工具


676
00:30:14,548 --> 00:30:15,949
Interface Builder
会很有用处


677
00:30:16,283 --> 00:30:20,554
它在边缘有这些
小图标 如果点击


678
00:30:20,687 --> 00:30:23,624
它会告诉你布局出现了
哪些它不明白的内容


679
00:30:24,625 --> 00:30:26,293
在很多情况下
它会告知


680
00:30:26,360 --> 00:30:29,897
你遗漏了约束
它无法解决


681
00:30:30,264 --> 00:30:32,432
我需要Y点
或者高度的约束


682
00:30:32,699 --> 00:30:37,571
当你构建并运行
的app存在这样的问题时


683
00:30:38,005 --> 00:30:41,742
最后这些视图
就会出现在


684
00:30:41,808 --> 00:30:45,312
Y轴的某处
这是引擎的决定所致


685
00:30:45,379 --> 00:30:46,780
因为它没有
从我们这里获得任何信息


686
00:30:47,548 --> 00:30:48,315
这就让它相当容易


687
00:30:48,382 --> 00:30:52,085
当没有使用Interface
Builder或者你解决问题后


688
00:30:52,152 --> 00:30:53,253
仍然会遇到
这样的情况


689
00:30:53,320 --> 00:30:55,556
我们还有一个很酷的方法
叫做autolayoutTrace


690
00:30:56,390 --> 00:30:59,693
可以在视图中的
调试器来使用


691
00:30:59,793 --> 00:31:03,463le
它会用全部大写
告诉你出现


692
00:30:59,793 --> 00:31:03,463
它会用全部大写
告诉你出现


693
00:31:03,530 --> 00:31:05,566
歧义布局的视图
你可以随即去


694
00:31:05,632 --> 00:31:07,901
查看该视图的
问题所在


695
00:31:08,869 --> 00:31:11,238
在调试菜单中
我们还有视图调试器


696
00:31:11,972 --> 00:31:15,542
可以帮你查看
布局引擎为视图


697
00:31:15,843 --> 00:31:17,811
计算得出的
框架和对齐矩形


698
00:31:18,512 --> 00:31:19,379
效果
就像这样


699
00:31:19,446 --> 00:31:22,115
它会将拽到
正在看的视图上


700
00:31:22,683 --> 00:31:25,185
这里你们可以看到
Saturn 本应对齐矩形中


701
00:31:25,252 --> 00:31:27,955
与内容十分靠近
可是现在


702
00:31:28,021 --> 00:31:29,690
被延伸得
非常宽


703
00:31:30,057 --> 00:31:32,092
这种状况
不是我想要的


704
00:31:32,893 --> 00:31:37,364
可是这里
它的实际尺寸没问题


705
00:31:37,431 --> 00:31:39,433
只是被固定到边上
这不是我想要的


706
00:31:39,499 --> 00:31:40,901
但是我知道这不是
尺寸问题


707
00:31:41,268 --> 00:31:45,272
而是应该与哪里
关联的问题


708
00:31:46,773 --> 00:31:48,308
另一个解决方案是
来看视图解调器


709
00:31:48,375 --> 00:31:50,744
在所有的
断点导航旁边


710
00:31:50,811 --> 00:31:52,012
这里有个
小按钮


711
00:31:52,145 --> 00:31:54,648
按下这个的时候
就会把布局拉开


712
00:31:54,715 --> 00:31:57,451
可以点击并查看
约束等内容


713
00:31:57,851 --> 00:32:00,654le
是视图的线框图
还可以看3D效果


714
00:31:57,851 --> 00:32:00,654
是视图的线框图
还可以看3D效果


715
00:32:01,021 --> 00:32:02,789
可以看到所有
图层的视图 很清楚


716
00:32:03,257 --> 00:32:06,593
还有很多视图调试场景
会很有帮助


717
00:32:07,261 --> 00:32:09,263
最后 我们还有
一种调试器方法


718
00:32:09,329 --> 00:32:10,797
因为我非常喜欢
使用LLDB


719
00:32:11,198 --> 00:32:12,966
名为exerciseAmbigui
tyInLayout


720
00:32:13,200 --> 00:32:16,203
如果有存在
歧义的视图


721
00:32:16,270 --> 00:32:18,972
可以运行这个
在调试器上查看再继续


722
00:32:19,039 --> 00:32:21,608
Layout Engine会显示
所具备的另外解决方案


723
00:32:22,309 --> 00:32:24,244
当你想找到问题
具体出在哪里时


724
00:32:24,311 --> 00:32:25,712
这会提供很大的
帮助


725
00:32:26,446 --> 00:32:27,614
我给大家展示
这是什么样子


726
00:32:28,916 --> 00:32:32,152
好现在我们回到这个视图
刚才我们看到过


727
00:32:32,653 --> 00:32:36,423
当处于正常布局时
Saturn跑到边上


728
00:32:36,924 --> 00:32:39,226
所以我再次
用调试手势


729
00:32:39,293 --> 00:32:42,062
可以这么用是因为
我需要简单地插入


730
00:32:42,663 --> 00:32:44,731
首先我来看看
整个视图在发生什么


731
00:32:44,798 --> 00:32:48,836
运行了自动布局
来跟踪效果


732
00:32:49,770 --> 00:32:52,439
大家看 都没问题
除了Saturn


733
00:32:52,506 --> 00:32:53,507
存在歧义布局


734
00:32:53,574 --> 00:32:55,475
我会努力集中精力
解决这个问题


735
00:32:56,410 --> 00:32:58,478
这还是个Boolean
逐个视图告知


736
00:32:58.545 --> 00:33:01.715 align:middle
是否存在
歧义布局


737
00:32:58,545 --> 00:33:01,715
是否存在
歧义布局


738
00:33:01,915 --> 00:33:04,084
这是个hasAmbiguousLa
yout


739
00:33:04,918 --> 00:33:07,321
很容易记住
在Saturn的这个例子中 是真


740
00:33:08,388 --> 00:33:12,793
如果存在这种情况
还还可以练习布局歧义


741
00:33:12,860 --> 00:33:14,161
并且继续


742
00:33:14,962 --> 00:33:18,665
它会给你提供 它为此
问题准备的另一个解决方案


743
00:33:18,732 --> 00:33:20,534
我们再来运行一遍


744
00:33:21,401 --> 00:33:22,669
哎呀


745
00:33:22,970 --> 00:33:24,171
真不该再运行


746
00:33:24,738 --> 00:33:30,110
现在又跑到
一边去了


747
00:33:30,577 --> 00:33:32,412
在这种情况下
看似出于某种原因


748
00:33:32,479 --> 00:33:35,015
布局指南放在
Saturn的哪一侧都不行


749
00:33:35,382 --> 00:33:39,052
那我继续找
关联行星


750
00:33:39,119 --> 00:33:40,888
到特定
区域的约束


751
00:33:40,954 --> 00:33:44,958
它们在各边都有
布局指南比率


752
00:33:45,025 --> 00:33:47,261
以此来确定
其位置


753
00:33:47,327 --> 00:33:49,129
这里找到了Saturn
的那个


754
00:33:49,830 --> 00:33:51,899
应该在各边
有着相同的布局指南


755
00:33:51,965 --> 00:33:53,534
应该是正好
放在中间在对


756
00:33:53,600 --> 00:33:58,172
问题好似
我根本没有把这个


757
00:33:58,272 --> 00:34:01,875
加入为视图激活的
约束数组中


758
00:34:02,209 --> 00:34:07,014
如果我加入的话
效果就会好得多


759
00:34:07,414 --> 00:34:10,050
Saturn就会准确
待在我希望它在的位置


760
00:34:10,449 --> 00:34:12,252
在分析歧义问题时
确实只需要


761
00:34:12,386 --> 00:34:14,321
做这些即可


762
00:34:15,289 --> 00:34:17,491
一旦开始用了这个功能
就会觉得


763
00:34:17,558 --> 00:34:20,460
非常简单


764
00:34:21,728 --> 00:34:22,829
来调试布局


765
00:34:23,130 --> 00:34:25,098
最重要的是要
仔细考虑


766
00:34:25,431 --> 00:34:27,034
引擎所需的
信息


767
00:34:27,601 --> 00:34:28,635
今天上午 我们谈论了


768
00:34:28,702 --> 00:34:32,105
许多为Layout Engine
提供所有信息


769
00:34:32,172 --> 00:34:34,208
这样可以在各种
自适配场景中


770
00:34:34,274 --> 00:34:35,809
妥善计算布局


771
00:34:36,409 --> 00:34:40,746
如果把所有这些汇总在一起
遇到的问题


772
00:34:40,813 --> 00:34:43,350
就会少很多
而不是只是


773
00:34:43,417 --> 00:34:44,885
在这里或那里
做两个约束


774
00:34:44,952 --> 00:34:46,587
再把它扔进来


775
00:34:47,721 --> 00:34:50,489
但是如果遇到问题
约束也不理想的话


776
00:34:50,757 --> 00:34:52,125
可以使用
日志


777
00:34:52,192 --> 00:34:53,893
它会提供
很多有用信息


778
00:34:54,061 --> 00:34:56,830
为了充分利用日志
可以为所有的约束


779
00:34:57,364 --> 00:34:58,465
和视图添加
标识符


780
00:34:58,866 --> 00:35:01,034dle
如果想经常性
检查歧义


781
00:34:58,866 --> 00:35:01,034
如果想经常性
检查歧义


782
00:35:01,335 --> 00:35:03,270
在第一次运行时
不一定会看到


783
00:35:03,704 --> 00:35:05,839
可以加入
比如单元测试


784
00:35:05,906 --> 00:35:08,041
并在所有视图上
经常性运行


785
00:35:08,108 --> 00:35:11,111
如果遇到歧义布局
可以在看到它之前进行分析


786
00:35:12,179 --> 00:35:13,580
我们还有好几种工具


787
00:35:13,647 --> 00:35:14,781
可以帮助解决
这类问题


788
00:35:15,015 --> 00:35:17,851
Interface builder
就很有用当然还有视图调试器


789
00:35:17,951 --> 00:35:20,153
以及lldb中的各种方法


790
00:35:21,922 --> 00:35:25,192
好 今天讲了
很多内容


791
00:35:26,059 --> 00:35:29,029
如果上午就听了
我们的讲座


792
00:35:29,096 --> 00:35:30,831
你会听到用到堆栈视图的
可维护布局


793
00:35:31,265 --> 00:35:32,833
以及妥当
改变约束


794
00:35:33,267 --> 00:35:35,536
配合使用视图大小和
进行自适应调整


795
00:35:35,636 --> 00:35:37,738
还有运用优先级
和对齐安排


796
00:35:37,804 --> 00:35:39,606
确保视图
在各种


797
00:35:39,673 --> 00:35:41,708
自适配环境下
完全符合要求


798
00:35:42,476 --> 00:35:45,312
刚才 我们深入探讨了
布局循环


799
00:35:46,113 --> 00:35:49,316
和旧布局的互动
用布局锚点而不是


800
00:35:49,383 --> 00:35:52,886
旧方法来
生成约束


801
00:35:52,953 --> 00:35:55,389
以及用布局指南
约束负面空间


802
00:35:56,023 --> 00:35:58,725
我们还谈到
不理想的约束


803
00:35:58,792 --> 00:36:00,894ddle
和如何解决歧义
这两个问题


804
00:35:58,792 --> 00:36:00,894
和如何解决歧义
这两个问题


805
00:36:00,961 --> 00:36:02,729
人们会在使用
Auto Layout时


806
00:36:02,796 --> 00:36:03,764
经常遇到


807
00:36:03,931 --> 00:36:06,500
这就是所有的
谜题内容


808
00:36:07,234 --> 00:36:09,169
希望我们都为
大家解释清楚了


809
00:36:09,903 --> 00:36:13,173
如果还没有
听过第一部分内容


810
00:36:13,240 --> 00:36:15,742
建议大家找来看看
因为其中的很多


811
00:36:16,009 --> 00:36:18,946
内容都非常有用
相关视频应该


812
00:36:19,012 --> 00:36:20,247
很快就能
做出来


813
00:36:20,514 --> 00:36:22,282
或者大家可以
回到11:00的时候


814
00:36:22,516 --> 00:36:27,087
怎么都行
当然想要了解更多详情


815
00:36:27,154 --> 00:36:29,823
网站上有文档资料
我们还有行星代码


816
00:36:29,890 --> 00:36:32,526
很多是在第一部分中
提到 不过我们


817
00:36:32,593 --> 00:36:33,493
这里也有用到


818
00:36:33,560 --> 00:36:36,763
你们在这看到的行星代码
并没有问题


819
00:36:36,830 --> 00:36:38,031
实际上运行正常


820
00:36:38,098 --> 00:36:40,200
如果希望使用这里
介绍的调试方法


821
00:36:40,267 --> 00:36:41,568
可以人为地
破坏它


822
00:36:41,635 --> 00:36:43,904
我们还有几个相关讲座


823
00:36:44,171 --> 00:36:47,374
再说一下 第一部分讲座
是在今天早些时候


824
00:36:47,441 --> 00:36:49,109
明天还有两个
大家可能会有兴趣


825
00:36:49,176 --> 00:36:51,712
在这之后 我们还要
直接返回实验室


826
00:36:52,246 --> 00:36:54,281
如果大家对
Auto Layout


827
00:36:54,348 --> 00:36:55,349
和
Interface Builder


828
00:36:55,415 --> 00:36:56,783
有问题的话 我们可以回答


829
00:36:56,850 --> 00:36:58,185
今天就是
这些内容


830
00:36:58.519 --> 00:36:59.453 align:middle
希望大家过的愉快

