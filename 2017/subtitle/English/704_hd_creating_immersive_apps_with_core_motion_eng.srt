WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:20.516 --> 00:00:21.686 A:middle
&gt;&gt; Hello everyone.

00:00:22.276 --> 00:00:23.286 A:middle
My name is John Blackwell.

00:00:23.446 --> 00:00:24.676 A:middle
And I'm an engineer on the Core

00:00:24.676 --> 00:00:25.426 A:middle
Motion framework.

00:00:25.956 --> 00:00:27.336 A:middle
Today, we're going to be talking

00:00:27.416 --> 00:00:28.496 A:middle
about creating immersive

00:00:28.496 --> 00:00:29.776 A:middle
applications with the Core

00:00:29.776 --> 00:00:30.496 A:middle
Motion framework.

00:00:30.836 --> 00:00:31.886 A:middle
And we're also going to discuss

00:00:31.966 --> 00:00:33.636 A:middle
a number of best practices along

00:00:33.636 --> 00:00:33.886 A:middle
the way.

00:00:35.366 --> 00:00:37.376 A:middle
So today we're going to be

00:00:37.376 --> 00:00:38.386 A:middle
covering a number of things.

00:00:38.896 --> 00:00:40.746 A:middle
The first is a brief overview of

00:00:40.746 --> 00:00:42.116 A:middle
what Core Motion provides.

00:00:42.536 --> 00:00:43.816 A:middle
Next, we're going to talk about

00:00:43.816 --> 00:00:45.816 A:middle
authorization, a frequent pain

00:00:45.816 --> 00:00:46.526 A:middle
point for many of our

00:00:46.526 --> 00:00:47.096 A:middle
developers.

00:00:47.676 --> 00:00:48.746 A:middle
Then we're going to look at some

00:00:48.746 --> 00:00:50.066 A:middle
new additions to Historical

00:00:50.066 --> 00:00:50.726 A:middle
Accelerometer.

00:00:51.286 --> 00:00:53.066 A:middle
And then we're going to dig into

00:00:53.066 --> 00:00:55.076 A:middle
DeviceMotion, the sensor fusion

00:00:55.196 --> 00:00:56.916 A:middle
that we provide in Core Motion.

00:00:57.346 --> 00:00:58.526 A:middle
And finally, we're going to look

00:00:58.526 --> 00:01:00.556 A:middle
at Badger with Attitude, a game

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.526 --> 00:01:00.556 A:middle
at Badger with Attitude, a game

00:01:00.556 --> 00:01:01.536 A:middle
where we'll take some of the

00:01:01.536 --> 00:01:03.116 A:middle
concepts that we've talked about

00:01:03.116 --> 00:01:04.796 A:middle
in DeviceMotion and put them

00:01:04.885 --> 00:01:05.556 A:middle
into practice.

00:01:06.686 --> 00:01:08.376 A:middle
And with that, let's take a

00:01:08.376 --> 00:01:09.836 A:middle
closer look at the Core Motion

00:01:09.836 --> 00:01:10.356 A:middle
framework.

00:01:13.656 --> 00:01:15.266 A:middle
The Core Motion framework

00:01:15.476 --> 00:01:16.686 A:middle
provides access to the

00:01:16.686 --> 00:01:18.186 A:middle
accelerometer, the gyroscope,

00:01:18.436 --> 00:01:19.556 A:middle
the magnetometer, and the

00:01:19.556 --> 00:01:20.056 A:middle
altimeter.

00:01:20.366 --> 00:01:21.626 A:middle
And through the framework, you

00:01:21.626 --> 00:01:22.926 A:middle
can access raw forms of the

00:01:22.926 --> 00:01:24.536 A:middle
sensor data as well as processed

00:01:24.536 --> 00:01:26.226 A:middle
forms and use these in your

00:01:26.226 --> 00:01:26.886 A:middle
applications.

00:01:28.206 --> 00:01:29.546 A:middle
Now, there are a number of

00:01:29.546 --> 00:01:30.996 A:middle
interfaces available through

00:01:30.996 --> 00:01:31.626 A:middle
Core Motion.

00:01:32.166 --> 00:01:35.446 A:middle
The first is CMMotionManager,

00:01:35.726 --> 00:01:37.406 A:middle
which provides access to the raw

00:01:37.486 --> 00:01:38.806 A:middle
sensor data as well as the

00:01:38.806 --> 00:01:40.116 A:middle
sensor fusion in the form of

00:01:40.116 --> 00:01:40.916 A:middle
DeviceMotion.

00:01:42.226 --> 00:01:44.156 A:middle
CMAltimeter provides access to

00:01:44.156 --> 00:01:45.606 A:middle
relative altitude updates for

00:01:45.606 --> 00:01:45.976 A:middle
the device.

00:01:47.456 --> 00:01:49.216 A:middle
CMPedometer provides access to

00:01:49.216 --> 00:01:50.836 A:middle
step counts as separate related

00:01:50.836 --> 00:01:52.706 A:middle
information as well as work out

00:01:52.706 --> 00:01:53.996 A:middle
pause and resume events.

00:01:55.396 --> 00:01:56.996 A:middle
MotionActivityManager provides

00:01:56.996 --> 00:01:58.636 A:middle
access to the activity context

00:01:58.636 --> 00:02:00.006 A:middle
for the device, for example,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.636 --> 00:02:00.006 A:middle
for the device, for example,

00:02:00.006 --> 00:02:02.106 A:middle
walking, running, or automotive,

00:02:02.296 --> 00:02:02.706 A:middle
etcetera.

00:02:03.486 --> 00:02:06.736 A:middle
And CMSensorRecorder provides

00:02:06.736 --> 00:02:07.966 A:middle
access to historical

00:02:07.966 --> 00:02:08.826 A:middle
accelerometer data.

00:02:11.616 --> 00:02:13.576 A:middle
So that's a brief overview of

00:02:13.576 --> 00:02:14.616 A:middle
what the Core Motion framework

00:02:14.616 --> 00:02:15.156 A:middle
provides.

00:02:15.696 --> 00:02:17.166 A:middle
Next, let's take a closer look

00:02:17.166 --> 00:02:18.196 A:middle
at authorization.

00:02:19.426 --> 00:02:21.456 A:middle
So of the APIs that I just

00:02:21.456 --> 00:02:23.906 A:middle
mentioned, these following four

00:02:23.906 --> 00:02:25.636 A:middle
are sensitive due to the nature

00:02:25.636 --> 00:02:26.846 A:middle
of the private information that

00:02:26.846 --> 00:02:28.106 A:middle
they expose about the user.

00:02:29.376 --> 00:02:31.936 A:middle
So to handle this, we have a

00:02:31.936 --> 00:02:33.426 A:middle
prompt that appears the first

00:02:33.426 --> 00:02:34.806 A:middle
time you invoke one of the

00:02:34.806 --> 00:02:35.746 A:middle
sensitive APIs.

00:02:37.056 --> 00:02:39.056 A:middle
Keep in mind that the first time

00:02:39.056 --> 00:02:40.966 A:middle
you invoke the sensitive APIs, a

00:02:40.966 --> 00:02:41.946 A:middle
prompt will appear for your

00:02:41.946 --> 00:02:42.336 A:middle
users.

00:02:42.626 --> 00:02:44.056 A:middle
But after that first time, your

00:02:44.056 --> 00:02:45.106 A:middle
users will need to go into

00:02:45.106 --> 00:02:46.006 A:middle
settings to change the

00:02:46.006 --> 00:02:47.216 A:middle
authorization state for your

00:02:47.216 --> 00:02:47.986 A:middle
applications.

00:02:49.306 --> 00:02:50.916 A:middle
Now, let's take a look at what

00:02:50.916 --> 00:02:51.996 A:middle
it looks like the first time you

00:02:51.996 --> 00:02:53.036 A:middle
call one of these APIs.

00:02:53.816 --> 00:02:55.406 A:middle
At this point, your users will

00:02:55.406 --> 00:02:56.346 A:middle
need to decide if they want to

00:02:56.346 --> 00:02:57.796 A:middle
grant access to the motion and

00:02:57.796 --> 00:02:59.576 A:middle
fitness data or deny access.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.016 --> 00:03:01.446 A:middle
And, as a developer, you're

00:03:01.446 --> 00:03:02.416 A:middle
going to want to handle the case

00:03:02.556 --> 00:03:05.166 A:middle
where they deny access.

00:03:05.286 --> 00:03:07.446 A:middle
Now, in the past we've asked you

00:03:07.446 --> 00:03:09.316 A:middle
to do something like this where

00:03:09.566 --> 00:03:11.006 A:middle
you call any of our APIs that

00:03:11.306 --> 00:03:13.206 A:middle
are sensitive, in this case

00:03:13.366 --> 00:03:13.826 A:middle
we're calling

00:03:13.826 --> 00:03:15.756 A:middle
QueryPedometerData, and then you

00:03:15.756 --> 00:03:17.346 A:middle
ignore the result that you get

00:03:17.346 --> 00:03:19.336 A:middle
back from the API and only look

00:03:19.336 --> 00:03:20.146 A:middle
at the error code.

00:03:21.026 --> 00:03:22.536 A:middle
And if the error code is not

00:03:22.536 --> 00:03:24.376 A:middle
authorized, at this point you

00:03:24.376 --> 00:03:25.536 A:middle
know your application has been

00:03:25.536 --> 00:03:26.886 A:middle
denied access to that motion and

00:03:26.886 --> 00:03:27.476 A:middle
fitness data.

00:03:28.646 --> 00:03:30.126 A:middle
Now, we realize that this is

00:03:30.126 --> 00:03:30.846 A:middle
less than ideal.

00:03:32.166 --> 00:03:33.196 A:middle
You need to jump through hoops

00:03:33.266 --> 00:03:34.816 A:middle
to get access to your

00:03:34.816 --> 00:03:35.696 A:middle
authorization state.

00:03:36.036 --> 00:03:37.426 A:middle
And once you get it, you can't

00:03:37.426 --> 00:03:39.086 A:middle
tell exactly why your app has

00:03:39.146 --> 00:03:42.076 A:middle
been denied access and that's

00:03:42.076 --> 00:03:43.836 A:middle
why, this year, we're providing

00:03:43.836 --> 00:03:45.326 A:middle
an Authorization Status API.

00:03:46.226 --> 00:03:47.606 A:middle
This API is available in the

00:03:47.686 --> 00:03:48.816 A:middle
same four classes that I

00:03:48.816 --> 00:03:50.086 A:middle
mentioned before, and it's

00:03:50.086 --> 00:03:52.076 A:middle
available on iOS and watchOS.

00:03:52.886 --> 00:03:54.366 A:middle
Let's take a closer look at the

00:03:54.366 --> 00:03:56.226 A:middle
CMAuthorizationStatus value that

00:03:56.226 --> 00:03:57.666 A:middle
you'll get back from this API.

00:03:59.386 --> 00:04:01.596 A:middle
The first state not determined

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.386 --> 00:04:01.596 A:middle
The first state not determined

00:04:01.866 --> 00:04:03.566 A:middle
represents the state before the

00:04:03.566 --> 00:04:04.866 A:middle
user has been asked about

00:04:04.866 --> 00:04:05.856 A:middle
authorization in your

00:04:05.856 --> 00:04:06.466 A:middle
application.

00:04:07.026 --> 00:04:08.806 A:middle
Restricted represents the state

00:04:09.126 --> 00:04:11.386 A:middle
where the user is unable to

00:04:11.386 --> 00:04:12.756 A:middle
change the authorization state

00:04:12.916 --> 00:04:13.826 A:middle
for your application

00:04:13.826 --> 00:04:14.516 A:middle
specifically.

00:04:14.866 --> 00:04:16.616 A:middle
And this can happen when motion

00:04:16.616 --> 00:04:18.065 A:middle
and fitness is disabled in

00:04:18.065 --> 00:04:18.546 A:middle
privacy.

00:04:19.406 --> 00:04:20.926 A:middle
The next state, denied, means

00:04:20.926 --> 00:04:21.596 A:middle
what it sounds like.

00:04:21.776 --> 00:04:22.526 A:middle
You're application has been

00:04:22.526 --> 00:04:24.256 A:middle
specifically denied access by

00:04:24.256 --> 00:04:24.746 A:middle
the users.

00:04:25.156 --> 00:04:26.906 A:middle
And authorized means your app is

00:04:26.906 --> 00:04:28.346 A:middle
ready to access the users motion

00:04:28.346 --> 00:04:29.006 A:middle
and fitness data.

00:04:30.586 --> 00:04:32.746 A:middle
Now, let's come back to the

00:04:32.746 --> 00:04:33.836 A:middle
authorization check that we were

00:04:33.836 --> 00:04:34.606 A:middle
looking at before.

00:04:34.856 --> 00:04:37.176 A:middle
One of the first best practices

00:04:37.176 --> 00:04:38.796 A:middle
that I want to talk about is

00:04:39.126 --> 00:04:40.266 A:middle
making sure that you check for

00:04:40.266 --> 00:04:42.006 A:middle
the availability of a given API

00:04:42.006 --> 00:04:44.006 A:middle
first before you ask for the

00:04:44.006 --> 00:04:44.946 A:middle
authorization status.

00:04:45.656 --> 00:04:46.926 A:middle
In this case, we're asking for

00:04:46.926 --> 00:04:47.896 A:middle
isStepCountingAvailable.

00:04:48.816 --> 00:04:50.136 A:middle
And the next thing that you're

00:04:50.136 --> 00:04:51.476 A:middle
going to want to do is query for

00:04:51.476 --> 00:04:52.496 A:middle
the authorization status.

00:04:53.106 --> 00:04:54.446 A:middle
And at this point, it's up to

00:04:54.446 --> 00:04:55.856 A:middle
you, as a developer, to decide

00:04:56.076 --> 00:04:57.566 A:middle
how you want to handle the

00:04:57.566 --> 00:04:59.196 A:middle
authorization that you get back

00:04:59.396 --> 00:05:00.176 A:middle
from the framework.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.396 --> 00:05:00.176 A:middle
from the framework.

00:05:00.596 --> 00:05:01.966 A:middle
You now have a simple mechanism

00:05:01.966 --> 00:05:04.256 A:middle
for doing this on both iOS and

00:05:04.366 --> 00:05:04.876 A:middle
watchOS.

00:05:06.336 --> 00:05:08.896 A:middle
I encourage you to consider how

00:05:08.896 --> 00:05:09.956 A:middle
you can use the authorization

00:05:10.026 --> 00:05:12.546 A:middle
app, authorization status API in

00:05:12.546 --> 00:05:13.756 A:middle
your applications, and you

00:05:13.756 --> 00:05:14.716 A:middle
should definitely use it.

00:05:15.516 --> 00:05:16.836 A:middle
Next, we're going to talk about

00:05:16.836 --> 00:05:18.066 A:middle
Historical Accelerometer.

00:05:19.056 --> 00:05:20.756 A:middle
Historical Accelerometer, also

00:05:20.756 --> 00:05:22.196 A:middle
known as CMSensorRecorder,

00:05:22.536 --> 00:05:24.336 A:middle
provides 50Hz accelerometer

00:05:24.336 --> 00:05:24.636 A:middle
data.

00:05:24.966 --> 00:05:26.096 A:middle
And we can record this for your

00:05:26.096 --> 00:05:27.646 A:middle
applications while your apps are

00:05:27.646 --> 00:05:28.356 A:middle
in the background.

00:05:29.556 --> 00:05:31.426 A:middle
You can request up to 36 hours

00:05:31.426 --> 00:05:32.416 A:middle
of accelerometer data.

00:05:32.476 --> 00:05:34.496 A:middle
And this data will be stored on

00:05:34.496 --> 00:05:35.986 A:middle
your behalf for up to three

00:05:35.986 --> 00:05:36.386 A:middle
days.

00:05:37.786 --> 00:05:39.696 A:middle
Now, Historical Accelerometer is

00:05:39.696 --> 00:05:41.176 A:middle
currently available on Apple

00:05:41.176 --> 00:05:41.476 A:middle
Watch.

00:05:42.026 --> 00:05:43.476 A:middle
And today, I'm excited to

00:05:43.476 --> 00:05:45.126 A:middle
announce that it's now available

00:05:45.126 --> 00:05:46.826 A:middle
on iPone 7 and 7 Plus.

00:05:47.886 --> 00:05:49.406 A:middle
This opens up a whole new set of

00:05:49.406 --> 00:05:50.996 A:middle
use cases for your applications.

00:05:51.216 --> 00:05:52.206 A:middle
And to get you thinking about

00:05:52.206 --> 00:05:53.626 A:middle
how you can use Historical

00:05:53.626 --> 00:05:55.376 A:middle
Accelerometer on iPhone, let

00:05:55.376 --> 00:05:56.316 A:middle
walk through one sample

00:05:56.316 --> 00:05:58.646 A:middle
application now.

00:05:59.056 --> 00:06:00.496 A:middle
So let's say you're a big

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.056 --> 00:06:00.496 A:middle
So let's say you're a big

00:06:00.496 --> 00:06:01.756 A:middle
automotive enthusiast.

00:06:01.916 --> 00:06:02.996 A:middle
And you want to build an

00:06:02.996 --> 00:06:04.396 A:middle
application to enable you to

00:06:04.396 --> 00:06:05.736 A:middle
track your car's performance

00:06:05.836 --> 00:06:06.926 A:middle
over a long track day.

00:06:07.736 --> 00:06:09.086 A:middle
How would we go about building

00:06:09.086 --> 00:06:09.306 A:middle
this?

00:06:09.746 --> 00:06:10.986 A:middle
Well, the first thing that we

00:06:10.986 --> 00:06:12.256 A:middle
want to figure out is when the

00:06:12.256 --> 00:06:13.156 A:middle
user is driving.

00:06:13.676 --> 00:06:15.236 A:middle
And for that, we can use Motion

00:06:15.236 --> 00:06:15.726 A:middle
Activity.

00:06:16.266 --> 00:06:17.476 A:middle
Motion Activity provides an

00:06:17.476 --> 00:06:18.296 A:middle
automotive state.

00:06:18.616 --> 00:06:20.056 A:middle
And we can use this to determine

00:06:20.056 --> 00:06:21.186 A:middle
the periods in which the user is

00:06:21.186 --> 00:06:21.576 A:middle
driving.

00:06:22.996 --> 00:06:24.316 A:middle
Now, I want to take a brief

00:06:24.316 --> 00:06:25.636 A:middle
minute to talk about the

00:06:25.636 --> 00:06:26.706 A:middle
automotive detection.

00:06:27.336 --> 00:06:29.566 A:middle
In iOS 11, the automotive

00:06:29.566 --> 00:06:31.036 A:middle
detection has received special

00:06:31.036 --> 00:06:32.156 A:middle
attention to ensure

00:06:32.156 --> 00:06:33.626 A:middle
best-in-class performance.

00:06:34.166 --> 00:06:35.956 A:middle
This automotive state in Motion

00:06:35.956 --> 00:06:37.746 A:middle
Activity is the same state

00:06:37.746 --> 00:06:39.016 A:middle
that's being used to power Do

00:06:39.016 --> 00:06:40.566 A:middle
Not Disturb While Driving and is

00:06:40.566 --> 00:06:42.236 A:middle
also available for you to use in

00:06:42.236 --> 00:06:44.176 A:middle
your applications if, say, you

00:06:44.176 --> 00:06:45.516 A:middle
wanted to personalize your

00:06:45.516 --> 00:06:46.856 A:middle
applications UI while the user

00:06:46.856 --> 00:06:47.406 A:middle
is driving.

00:06:48.426 --> 00:06:49.766 A:middle
Now, coming back to our

00:06:49.766 --> 00:06:51.156 A:middle
automotive performance tracking

00:06:51.156 --> 00:06:52.666 A:middle
application, the next thing we

00:06:52.666 --> 00:06:54.526 A:middle
want to do is we want to gather

00:06:54.766 --> 00:06:55.776 A:middle
the accelerometer data.

00:06:56.256 --> 00:06:58.156 A:middle
And for that we can use Sensor

00:06:58.156 --> 00:06:58.546 A:middle
Recorder.

00:06:58.846 --> 00:07:00.566 A:middle
We can gather the accelerometer

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.846 --> 00:07:00.566 A:middle
We can gather the accelerometer

00:07:00.566 --> 00:07:02.056 A:middle
data for the periods in which

00:07:02.106 --> 00:07:03.336 A:middle
the user is driving and

00:07:03.336 --> 00:07:05.276 A:middle
translate that into metrics for

00:07:05.276 --> 00:07:07.066 A:middle
the user such as how many Gs

00:07:07.066 --> 00:07:08.376 A:middle
they were pulling through a turn

00:07:08.556 --> 00:07:10.376 A:middle
or maximum lateral Gs or

00:07:10.376 --> 00:07:11.366 A:middle
longitudinal Gs.

00:07:12.006 --> 00:07:14.236 A:middle
Now, there are many different

00:07:14.236 --> 00:07:16.036 A:middle
ways you could consider building

00:07:16.256 --> 00:07:17.956 A:middle
this kind of application, but by

00:07:18.066 --> 00:07:19.816 A:middle
using the Motion APIs you can

00:07:19.816 --> 00:07:20.786 A:middle
provide your users with a

00:07:20.786 --> 00:07:22.796 A:middle
low-power, all-day experience.

00:07:23.516 --> 00:07:26.206 A:middle
Now, there are a number of best

00:07:26.206 --> 00:07:28.036 A:middle
practices to keep in mind with

00:07:28.036 --> 00:07:29.196 A:middle
Historical Accelerometer.

00:07:29.766 --> 00:07:31.216 A:middle
The first is that you want to

00:07:31.216 --> 00:07:32.926 A:middle
choose the minimum duration that

00:07:32.926 --> 00:07:34.096 A:middle
makes sense for your

00:07:34.096 --> 00:07:34.836 A:middle
applications.

00:07:35.536 --> 00:07:36.606 A:middle
So for our automotive

00:07:36.606 --> 00:07:37.286 A:middle
performance tracking

00:07:37.286 --> 00:07:39.356 A:middle
application, we may not need the

00:07:39.356 --> 00:07:42.426 A:middle
full 36 hours of data, something

00:07:42.426 --> 00:07:43.946 A:middle
more like 8 to 12 hours would

00:07:43.946 --> 00:07:44.706 A:middle
make more sense.

00:07:45.896 --> 00:07:47.326 A:middle
And the next best practice to

00:07:47.326 --> 00:07:48.516 A:middle
keep in mind is to consider

00:07:48.516 --> 00:07:50.506 A:middle
decimating or dropping samples

00:07:50.506 --> 00:07:52.736 A:middle
if you don't need the full 50Hz

00:07:52.736 --> 00:07:53.626 A:middle
accelerometer data.

00:07:54.326 --> 00:07:56.176 A:middle
These two suggestions, these two

00:07:56.176 --> 00:07:58.206 A:middle
best practices will reduce the

00:07:58.206 --> 00:07:59.316 A:middle
amount of processing that your

00:07:59.316 --> 00:08:00.906 A:middle
application is doing and, in

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.316 --> 00:08:00.906 A:middle
application is doing and, in

00:08:00.906 --> 00:08:02.256 A:middle
turn, save the user's battery

00:08:02.256 --> 00:08:02.666 A:middle
life.

00:08:03.656 --> 00:08:05.836 A:middle
Now, I encourage you to consider

00:08:06.086 --> 00:08:07.736 A:middle
how you can use Historical

00:08:07.736 --> 00:08:09.546 A:middle
Accelerometer on iPhone.

00:08:10.046 --> 00:08:13.636 A:middle
Next, let's talk about

00:08:13.636 --> 00:08:14.566 A:middle
DeviceMotion.

00:08:15.126 --> 00:08:16.686 A:middle
DeviceMotion is the name for the

00:08:16.766 --> 00:08:18.536 A:middle
sensory fusion algorithm that we

00:08:18.536 --> 00:08:19.826 A:middle
provide in the Core Motion

00:08:19.826 --> 00:08:20.306 A:middle
framework.

00:08:21.146 --> 00:08:23.106 A:middle
Now, there are a number of

00:08:23.106 --> 00:08:23.846 A:middle
things that go into

00:08:23.846 --> 00:08:24.686 A:middle
DeviceMotion.

00:08:25.966 --> 00:08:27.396 A:middle
The first sensor that we use in

00:08:27.396 --> 00:08:28.176 A:middle
DeviceMotion is the

00:08:28.176 --> 00:08:28.916 A:middle
accelerometer.

00:08:29.216 --> 00:08:30.686 A:middle
And the accelerometer enables us

00:08:30.686 --> 00:08:31.776 A:middle
to measure the accelerations

00:08:31.776 --> 00:08:33.336 A:middle
imparted by the user as well as

00:08:33.336 --> 00:08:34.535 A:middle
the acceleration imparted by

00:08:34.535 --> 00:08:35.025 A:middle
gravity.

00:08:36.176 --> 00:08:37.466 A:middle
The gyroscope enables us to

00:08:37.466 --> 00:08:38.885 A:middle
precisely measure the rotation

00:08:38.885 --> 00:08:39.716 A:middle
rate of the device.

00:08:40.236 --> 00:08:41.946 A:middle
And the magnetometer allows us

00:08:41.946 --> 00:08:43.566 A:middle
to measure local fields around

00:08:43.566 --> 00:08:44.876 A:middle
the device as well as the

00:08:44.876 --> 00:08:45.906 A:middle
Earth's magnetic field.

00:08:47.226 --> 00:08:48.886 A:middle
Now, when dealing with the raw

00:08:48.886 --> 00:08:49.866 A:middle
sensors, there's a number of

00:08:49.866 --> 00:08:51.096 A:middle
challenges to keep in mind.

00:08:51.956 --> 00:08:53.176 A:middle
With the accelerometer, it can

00:08:53.176 --> 00:08:54.916 A:middle
be difficult to distinguish from

00:08:54.916 --> 00:08:55.996 A:middle
the accelerations imparted by

00:08:55.996 --> 00:08:57.376 A:middle
the user and from those

00:08:57.376 --> 00:08:58.866 A:middle
accelerated -- from those

00:08:58.866 --> 00:09:00.166 A:middle
imparted by the force of

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.866 --> 00:09:00.166 A:middle
imparted by the force of

00:09:01.836 --> 00:09:02.276 A:middle
gravity.

00:09:02.376 --> 00:09:03.566 A:middle
With the gyroscope, we can have

00:09:03.566 --> 00:09:04.706 A:middle
bias in the measurements over

00:09:04.706 --> 00:09:05.036 A:middle
time.

00:09:05.996 --> 00:09:07.076 A:middle
And with the magnetometer, it

00:09:07.076 --> 00:09:08.266 A:middle
can be difficult to distinguish

00:09:08.266 --> 00:09:10.006 A:middle
between the local fields and the

00:09:10.006 --> 00:09:10.936 A:middle
Earth's magnet field.

00:09:11.326 --> 00:09:13.346 A:middle
And this is where DeviceMotion

00:09:13.346 --> 00:09:13.876 A:middle
comes in.

00:09:14.566 --> 00:09:16.306 A:middle
DeviceMotion provides 3D

00:09:16.306 --> 00:09:17.716 A:middle
attitude tracking while the

00:09:17.716 --> 00:09:19.236 A:middle
device is undergoing free space

00:09:19.336 --> 00:09:19.846 A:middle
motion.

00:09:20.636 --> 00:09:22.156 A:middle
And it does this by fusing

00:09:22.156 --> 00:09:23.886 A:middle
together all of the sensors to

00:09:23.886 --> 00:09:25.546 A:middle
give the advantages of each

00:09:25.676 --> 00:09:26.476 A:middle
while minimizing the

00:09:26.476 --> 00:09:27.286 A:middle
disadvantages.

00:09:28.246 --> 00:09:30.026 A:middle
And as a developer, what this

00:09:30.026 --> 00:09:31.546 A:middle
really means is that it enables

00:09:31.546 --> 00:09:33.946 A:middle
you to focus on how you want to

00:09:33.946 --> 00:09:35.216 A:middle
use the motion data rather than

00:09:35.216 --> 00:09:36.706 A:middle
the mechanics of trying to get

00:09:36.706 --> 00:09:38.036 A:middle
the best from the sensors.

00:09:39.776 --> 00:09:41.016 A:middle
Now, we've talked about

00:09:41.016 --> 00:09:42.496 A:middle
DeviceMotion in a number of

00:09:42.496 --> 00:09:43.376 A:middle
previous sessions.

00:09:43.626 --> 00:09:44.796 A:middle
I encourage you to check them

00:09:44.796 --> 00:09:45.116 A:middle
out.

00:09:45.436 --> 00:09:46.606 A:middle
We go into details about the

00:09:46.636 --> 00:09:48.116 A:middle
sensors and the DeviceMotion

00:09:48.116 --> 00:09:48.756 A:middle
algorithms.

00:09:49.216 --> 00:09:51.036 A:middle
But today, we're going to think

00:09:51.036 --> 00:09:52.886 A:middle
about how we can use certain

00:09:52.886 --> 00:09:54.426 A:middle
aspects of DeviceMotion to

00:09:54.426 --> 00:09:55.696 A:middle
create immersive applications

00:09:55.696 --> 00:09:56.386 A:middle
for your users.

00:09:56.386 --> 00:10:00.666 A:middle
So as a developer, when you're

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:56.386 --> 00:10:00.666 A:middle
So as a developer, when you're

00:10:00.666 --> 00:10:01.616 A:middle
first getting started with

00:10:01.616 --> 00:10:03.136 A:middle
DeviceMotion, the first thing

00:10:03.136 --> 00:10:04.256 A:middle
that you need to consider are

00:10:04.256 --> 00:10:04.976 A:middle
the reference frames.

00:10:05.136 --> 00:10:07.076 A:middle
The reference frames determine

00:10:07.396 --> 00:10:08.906 A:middle
which sensors are used in the

00:10:08.906 --> 00:10:11.006 A:middle
fusion and how attitude is

00:10:11.006 --> 00:10:11.886 A:middle
calculated for your

00:10:11.886 --> 00:10:12.656 A:middle
applications.

00:10:13.616 --> 00:10:14.786 A:middle
The first reference frame,

00:10:14.956 --> 00:10:17.046 A:middle
xArbitraryZVertical fuses

00:10:17.046 --> 00:10:18.166 A:middle
together the accelerometer and

00:10:18.166 --> 00:10:19.406 A:middle
the gyroscope but does not use

00:10:19.406 --> 00:10:20.166 A:middle
the magnetometer.

00:10:20.716 --> 00:10:21.886 A:middle
And the last three reference

00:10:21.886 --> 00:10:23.536 A:middle
frames, xArbitraryCorrected,

00:10:23.856 --> 00:10:25.076 A:middle
xMagnaticNorth, and

00:10:25.076 --> 00:10:26.936 A:middle
xTrueNorthZVertical use all

00:10:26.936 --> 00:10:27.626 A:middle
three sensors.

00:10:28.776 --> 00:10:30.216 A:middle
Now, let's talk about the first

00:10:30.216 --> 00:10:31.846 A:middle
reference frame in more detail.

00:10:33.166 --> 00:10:34.786 A:middle
Let's say you've got an awesome

00:10:34.786 --> 00:10:35.876 A:middle
racing game where you're

00:10:35.876 --> 00:10:37.376 A:middle
currently using touch controls

00:10:37.596 --> 00:10:39.176 A:middle
to allow your users to steer in

00:10:39.176 --> 00:10:39.646 A:middle
the game.

00:10:40.306 --> 00:10:41.556 A:middle
This is great, but we could

00:10:41.556 --> 00:10:42.716 A:middle
provide a more immersive

00:10:42.716 --> 00:10:44.526 A:middle
experience using motion.

00:10:44.886 --> 00:10:47.646 A:middle
And what we want to do is we

00:10:47.646 --> 00:10:49.096 A:middle
want to enable our users to

00:10:49.216 --> 00:10:50.536 A:middle
steer using their device.

00:10:50.996 --> 00:10:52.476 A:middle
So when they tilt a car, tilt

00:10:52.476 --> 00:10:53.676 A:middle
their device to the left, the

00:10:53.676 --> 00:10:55.996 A:middle
car will turn left.

00:10:56.206 --> 00:10:57.496 A:middle
Now, as long as a device is

00:10:57.496 --> 00:10:59.466 A:middle
relatively static, we can use

00:10:59.466 --> 00:11:01.226 A:middle
the accelerometer to estimate

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.466 --> 00:11:01.226 A:middle
the accelerometer to estimate

00:11:01.306 --> 00:11:02.106 A:middle
the force of gravity.

00:11:02.816 --> 00:11:04.686 A:middle
And once we have gravity, we can

00:11:04.686 --> 00:11:06.056 A:middle
use that to determine the tilt

00:11:06.216 --> 00:11:07.566 A:middle
or the angle offset from

00:11:07.566 --> 00:11:07.966 A:middle
gravity.

00:11:08.616 --> 00:11:11.656 A:middle
One thing to keep in mind,

00:11:11.656 --> 00:11:13.126 A:middle
though, is that if you were

00:11:13.126 --> 00:11:14.776 A:middle
using the accelerometer on its

00:11:14.776 --> 00:11:17.126 A:middle
own, certain gestures can be

00:11:17.126 --> 00:11:17.786 A:middle
ambiguous.

00:11:18.846 --> 00:11:20.476 A:middle
Tilting the device to the right

00:11:20.856 --> 00:11:21.896 A:middle
can look the same to the

00:11:21.896 --> 00:11:23.506 A:middle
accelerometer as sliding the

00:11:23.506 --> 00:11:24.536 A:middle
device to the left.

00:11:25.306 --> 00:11:26.636 A:middle
Now, one way you could consider

00:11:26.636 --> 00:11:28.106 A:middle
dealing with this is by

00:11:28.106 --> 00:11:29.846 A:middle
averaging over the accelerometer

00:11:29.916 --> 00:11:30.236 A:middle
signal.

00:11:31.276 --> 00:11:32.886 A:middle
In doing so, you would reduce

00:11:32.936 --> 00:11:34.446 A:middle
the short-term effects from the

00:11:34.446 --> 00:11:35.916 A:middle
user and leave only the

00:11:35.916 --> 00:11:37.506 A:middle
long-term effects such as the

00:11:37.506 --> 00:11:38.226 A:middle
force of gravity.

00:11:38.906 --> 00:11:40.786 A:middle
However, in doing this, you

00:11:40.786 --> 00:11:41.836 A:middle
would notice your application

00:11:41.836 --> 00:11:43.196 A:middle
would now respond more slowly

00:11:43.336 --> 00:11:45.396 A:middle
and this where DeviceMotion

00:11:45.396 --> 00:11:45.916 A:middle
comes in.

00:11:46.736 --> 00:11:48.516 A:middle
DeviceMotion means that your

00:11:48.516 --> 00:11:49.816 A:middle
application doesn't need to

00:11:49.816 --> 00:11:51.316 A:middle
build up filtering logic to get

00:11:51.316 --> 00:11:53.036 A:middle
great performance from sensors.

00:11:55.276 --> 00:11:57.846 A:middle
With the xArbitraryZVertical

00:11:57.846 --> 00:11:59.706 A:middle
reference frame, this is the

00:11:59.706 --> 00:12:00.786 A:middle
default reference frame that

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.706 --> 00:12:00.786 A:middle
default reference frame that

00:12:00.786 --> 00:12:02.276 A:middle
your application will receive if

00:12:02.276 --> 00:12:03.886 A:middle
you don't explicitly specify one

00:12:04.116 --> 00:12:05.616 A:middle
when you start DeviceMotion

00:12:05.616 --> 00:12:06.106 A:middle
updates.

00:12:06.476 --> 00:12:08.136 A:middle
And this reference frame is

00:12:08.136 --> 00:12:09.646 A:middle
great for use cases where you

00:12:09.646 --> 00:12:10.936 A:middle
want to track the tip and the

00:12:10.936 --> 00:12:13.706 A:middle
tilt of the device.

00:12:13.706 --> 00:12:15.516 A:middle
And for our use case in the

00:12:15.516 --> 00:12:17.306 A:middle
game, the accelerometer and the

00:12:17.306 --> 00:12:18.596 A:middle
gyroscope are going to fuse

00:12:18.596 --> 00:12:19.976 A:middle
together to allow us some more

00:12:19.976 --> 00:12:21.486 A:middle
quickly and precisely track

00:12:21.486 --> 00:12:21.936 A:middle
gravity.

00:12:22.526 --> 00:12:24.256 A:middle
And once we have gravity we can

00:12:24.256 --> 00:12:25.726 A:middle
translate that into tilt for our

00:12:25.726 --> 00:12:26.076 A:middle
game.

00:12:27.326 --> 00:12:28.926 A:middle
Now to walk through exactly how

00:12:28.926 --> 00:12:30.596 A:middle
to do this, my co-worker Ahmad

00:12:30.596 --> 00:12:31.456 A:middle
is going to come to the stage a

00:12:31.456 --> 00:12:33.386 A:middle
bit later and show us.

00:12:33.936 --> 00:12:36.146 A:middle
This reference frame is also

00:12:36.146 --> 00:12:37.816 A:middle
great for use cases where you

00:12:37.816 --> 00:12:39.576 A:middle
want to track gestures from the

00:12:39.576 --> 00:12:39.976 A:middle
user.

00:12:40.546 --> 00:12:41.926 A:middle
I encourage you to check out our

00:12:41.926 --> 00:12:43.646 A:middle
sample application SwingWatch.

00:12:44.356 --> 00:12:46.166 A:middle
SwingWatch is an app that runs

00:12:46.436 --> 00:12:47.906 A:middle
on the watch that uses

00:12:48.066 --> 00:12:49.696 A:middle
DeviceMotion to track when

00:12:49.696 --> 00:12:51.416 A:middle
you've made a forehand or a

00:12:51.416 --> 00:12:53.116 A:middle
backhand gesture during a tennis

00:12:53.156 --> 00:12:53.486 A:middle
game.

00:12:54.236 --> 00:12:55.336 A:middle
Both the sample code and the

00:12:55.336 --> 00:12:56.106 A:middle
session are online.

00:12:56.106 --> 00:12:57.036 A:middle
And I encourage you to check

00:12:57.036 --> 00:12:58.146 A:middle
them out.

00:12:58.956 --> 00:13:00.936 A:middle
So let's say you've got another

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.956 --> 00:13:00.936 A:middle
So let's say you've got another

00:13:00.936 --> 00:13:01.346 A:middle
game.

00:13:02.096 --> 00:13:03.386 A:middle
Let's say it's a shooter game

00:13:03.586 --> 00:13:05.666 A:middle
where you allow the user to aim

00:13:05.736 --> 00:13:07.066 A:middle
using virtual thumbsticks.

00:13:07.486 --> 00:13:09.496 A:middle
This is great but we could

00:13:09.496 --> 00:13:10.446 A:middle
provide a more immersive

00:13:10.446 --> 00:13:12.156 A:middle
experience using Motion.

00:13:15.906 --> 00:13:17.976 A:middle
And what we want to do is we

00:13:17.976 --> 00:13:19.776 A:middle
want to determine where the user

00:13:19.776 --> 00:13:21.386 A:middle
is pointing their device and

00:13:21.386 --> 00:13:23.566 A:middle
have that translate into aiming

00:13:23.656 --> 00:13:24.216 A:middle
in the game.

00:13:24.656 --> 00:13:25.746 A:middle
And for that we want to use

00:13:25.746 --> 00:13:26.346 A:middle
Attitude.

00:13:27.686 --> 00:13:29.496 A:middle
Attitude provides the rotation

00:13:29.496 --> 00:13:31.306 A:middle
from the reference frame fixed

00:13:31.306 --> 00:13:32.186 A:middle
when you first start

00:13:32.186 --> 00:13:34.086 A:middle
DeviceMotion updates to where

00:13:34.086 --> 00:13:35.406 A:middle
the user is currently holding

00:13:35.406 --> 00:13:38.346 A:middle
the device in 3D space.

00:13:38.556 --> 00:13:39.946 A:middle
Now, one way you could consider

00:13:39.946 --> 00:13:41.966 A:middle
getting Attitude is by taking

00:13:41.966 --> 00:13:43.306 A:middle
the integral of the raw

00:13:43.306 --> 00:13:44.226 A:middle
gyroscope signal.

00:13:44.846 --> 00:13:47.256 A:middle
Your sway will determine the

00:13:47.256 --> 00:13:47.746 A:middle
attitude.

00:13:48.236 --> 00:13:50.106 A:middle
However, this method for

00:13:50.106 --> 00:13:51.506 A:middle
determining the attitude would

00:13:51.506 --> 00:13:53.846 A:middle
drift overtime due to bias in

00:13:53.846 --> 00:13:56.756 A:middle
the gyroscope and that's where

00:13:56.756 --> 00:13:58.616 A:middle
the xArbitraryCorrectedZVertical

00:13:58.616 --> 00:13:59.606 A:middle
reference frame comes in.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.196 --> 00:14:01.376 A:middle
This reference frame uses the

00:14:01.376 --> 00:14:03.076 A:middle
magnetometer to improve the

00:14:03.076 --> 00:14:04.686 A:middle
horizontal attitude estimation

00:14:04.956 --> 00:14:05.636 A:middle
that we provide.

00:14:06.756 --> 00:14:08.316 A:middle
And, as a developer, what this

00:14:08.316 --> 00:14:09.816 A:middle
reference frame means to you is

00:14:09.816 --> 00:14:11.546 A:middle
it provides reliable attitude

00:14:11.546 --> 00:14:13.386 A:middle
performance with a fixed center

00:14:13.386 --> 00:14:13.916 A:middle
reference.

00:14:14.286 --> 00:14:16.206 A:middle
So in the game your users can

00:14:16.206 --> 00:14:17.706 A:middle
move the device around and then

00:14:17.746 --> 00:14:19.046 A:middle
come back to a known center

00:14:19.046 --> 00:14:19.666 A:middle
location.

00:14:21.166 --> 00:14:22.546 A:middle
Now, there are many other ways

00:14:22.546 --> 00:14:23.756 A:middle
you can consider using this

00:14:23.756 --> 00:14:24.426 A:middle
reference frame.

00:14:25.046 --> 00:14:26.176 A:middle
Let's say you wanted to build a

00:14:26.176 --> 00:14:28.356 A:middle
360 degree photo and video

00:14:28.356 --> 00:14:29.236 A:middle
player application.

00:14:29.236 --> 00:14:30.906 A:middle
Your users would be able to move

00:14:30.906 --> 00:14:32.356 A:middle
their device around and then

00:14:32.356 --> 00:14:33.966 A:middle
bring it back towards the center

00:14:34.126 --> 00:14:35.336 A:middle
towards the dock overlooking the

00:14:35.336 --> 00:14:35.646 A:middle
lake.

00:14:37.286 --> 00:14:38.296 A:middle
Now, another way you could

00:14:38.296 --> 00:14:39.736 A:middle
consider using this reference

00:14:39.736 --> 00:14:41.366 A:middle
frame is for something like a

00:14:41.366 --> 00:14:42.766 A:middle
virtual reality real estate

00:14:42.766 --> 00:14:44.646 A:middle
application where you want to

00:14:44.646 --> 00:14:46.636 A:middle
allow your users to look around

00:14:46.636 --> 00:14:47.656 A:middle
at different parts of a room

00:14:47.886 --> 00:14:48.866 A:middle
just by moving their device.

00:14:50.486 --> 00:14:51.596 A:middle
Now, let's say you build this

00:14:51.596 --> 00:14:53.046 A:middle
application out and your users

00:14:53.116 --> 00:14:55.066 A:middle
love it, but they want to get a

00:14:55.066 --> 00:14:56.356 A:middle
better sense of in which

00:14:56.356 --> 00:14:58.936 A:middle
direction the windows face or in

00:14:58.936 --> 00:15:00.056 A:middle
which direction they can expect

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.936 --> 00:15:00.056 A:middle
which direction they can expect

00:15:00.056 --> 00:15:02.256 A:middle
the sun to rise and for that we

00:15:02.256 --> 00:15:03.676 A:middle
want a world reference.

00:15:05.366 --> 00:15:07.076 A:middle
Now, you could consider using

00:15:07.076 --> 00:15:08.136 A:middle
the magnetometer for this.

00:15:08.136 --> 00:15:09.466 A:middle
This would provide a world

00:15:09.466 --> 00:15:10.556 A:middle
reference and enable your

00:15:10.556 --> 00:15:11.906 A:middle
applications to orient with

00:15:11.906 --> 00:15:12.806 A:middle
respect to the world.

00:15:13.646 --> 00:15:14.966 A:middle
However, using the raw

00:15:14.966 --> 00:15:16.846 A:middle
magnetometer, you would find the

00:15:16.846 --> 00:15:17.946 A:middle
outputs susceptible to

00:15:17.946 --> 00:15:18.626 A:middle
disturbances.

00:15:19.556 --> 00:15:21.406 A:middle
Some of these are inherent to

00:15:21.406 --> 00:15:23.306 A:middle
the device, and some of these

00:15:23.306 --> 00:15:24.346 A:middle
are external to the device.

00:15:25.706 --> 00:15:26.936 A:middle
This is where the final two

00:15:26.936 --> 00:15:28.026 A:middle
reference frames come in.

00:15:28.566 --> 00:15:30.706 A:middle
These reference frames use the

00:15:30.706 --> 00:15:32.586 A:middle
magnetometer to orient the

00:15:32.586 --> 00:15:34.356 A:middle
device with respect to -- with

00:15:34.356 --> 00:15:35.226 A:middle
respect to the world.

00:15:35.426 --> 00:15:37.356 A:middle
And these reference frames

00:15:37.506 --> 00:15:39.276 A:middle
handle magnet device level

00:15:39.276 --> 00:15:41.146 A:middle
effects as well as in

00:15:41.146 --> 00:15:42.396 A:middle
challenging magnetometer

00:15:42.396 --> 00:15:43.066 A:middle
situations.

00:15:43.316 --> 00:15:44.696 A:middle
We can stabilize the output.

00:15:46.176 --> 00:15:48.046 A:middle
Now, choosing between these two

00:15:48.046 --> 00:15:49.656 A:middle
reference frames is going to be

00:15:49.656 --> 00:15:50.576 A:middle
based on the needs of your

00:15:50.576 --> 00:15:51.206 A:middle
application.

00:15:51.646 --> 00:15:52.886 A:middle
If you've already got data

00:15:53.076 --> 00:15:54.276 A:middle
that's referencing true north,

00:15:54.486 --> 00:15:56.006 A:middle
for example map data, it would

00:15:56.006 --> 00:15:57.166 A:middle
make sense to use the

00:15:57.166 --> 00:15:58.786 A:middle
xTrueNorthZVertical reference

00:15:58.786 --> 00:15:59.106 A:middle
frame.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.326 --> 00:16:03.356 A:middle
Now, how can we consider using

00:16:03.356 --> 00:16:04.326 A:middle
these reference frames?

00:16:04.916 --> 00:16:07.106 A:middle
Well, one example is things like

00:16:07.106 --> 00:16:08.816 A:middle
star gazing applications where

00:16:08.816 --> 00:16:09.846 A:middle
you want to allow your users to

00:16:09.846 --> 00:16:11.506 A:middle
point their device at a star in

00:16:11.506 --> 00:16:14.056 A:middle
the sky and identify it.

00:16:14.316 --> 00:16:15.186 A:middle
Another way you could consider

00:16:15.186 --> 00:16:16.696 A:middle
using these reference frames are

00:16:16.696 --> 00:16:17.736 A:middle
for things like augmented

00:16:17.736 --> 00:16:19.526 A:middle
reality applications where you

00:16:19.526 --> 00:16:20.836 A:middle
want to fuse the camera data

00:16:21.176 --> 00:16:23.266 A:middle
with a world reference and for

00:16:23.266 --> 00:16:24.486 A:middle
that we encourage you to check

00:16:24.486 --> 00:16:25.106 A:middle
out ARKit.

00:16:25.496 --> 00:16:26.746 A:middle
ARKit's session follows

00:16:26.746 --> 00:16:27.876 A:middle
immediately after this one.

00:16:27.876 --> 00:16:32.196 A:middle
Now, let's come back to our

00:16:32.196 --> 00:16:33.516 A:middle
virtual reality real estate

00:16:33.516 --> 00:16:34.116 A:middle
application.

00:16:35.286 --> 00:16:35.916 A:middle
Let's say you built an

00:16:35.916 --> 00:16:37.276 A:middle
application out and your users

00:16:37.276 --> 00:16:39.306 A:middle
love it, but you want to provide

00:16:39.306 --> 00:16:40.696 A:middle
them with more features.

00:16:41.186 --> 00:16:42.416 A:middle
Let's say you want to put

00:16:42.416 --> 00:16:44.166 A:middle
landmarks on the horizon in the

00:16:44.166 --> 00:16:45.296 A:middle
direction that they actually

00:16:45.296 --> 00:16:45.576 A:middle
are.

00:16:46.506 --> 00:16:48.166 A:middle
How would we go about doing

00:16:48.166 --> 00:16:48.346 A:middle
this?

00:16:49.096 --> 00:16:51.006 A:middle
Well, what we want is Heading.

00:16:52.376 --> 00:16:54.266 A:middle
Heading gives us the direction

00:16:54.266 --> 00:16:55.376 A:middle
the device is pointing with

00:16:55.376 --> 00:16:56.346 A:middle
respect to north.

00:16:56.786 --> 00:16:58.226 A:middle
So when the device is pointing

00:16:58.306 --> 00:17:00.086 A:middle
straight towards north, Heading

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.306 --> 00:17:00.086 A:middle
straight towards north, Heading

00:17:00.086 --> 00:17:01.546 A:middle
would return 0 degrees.

00:17:02.246 --> 00:17:04.195 A:middle
And as the user rotates their

00:17:04.195 --> 00:17:05.915 A:middle
device around, the Heading angle

00:17:06.076 --> 00:17:06.586 A:middle
would update.

00:17:08.106 --> 00:17:09.556 A:middle
Now, one way you could consider

00:17:09.556 --> 00:17:11.086 A:middle
getting Heading is by using

00:17:11.086 --> 00:17:11.846 A:middle
CoreLocation.

00:17:12.316 --> 00:17:14.306 A:middle
CoreLocation provides a start

00:17:14.306 --> 00:17:17.006 A:middle
updating Heading API that you

00:17:17.006 --> 00:17:18.796 A:middle
could then use the heading from

00:17:18.796 --> 00:17:20.445 A:middle
and fuse that in with the data

00:17:20.445 --> 00:17:21.476 A:middle
that you're already getting from

00:17:21.476 --> 00:17:22.236 A:middle
DeviceMotion.

00:17:24.366 --> 00:17:25.256 A:middle
One thing to keep in mind,

00:17:25.256 --> 00:17:26.965 A:middle
though, is that CoreLocation's

00:17:26.965 --> 00:17:28.926 A:middle
Heading can fuse course.

00:17:29.846 --> 00:17:31.216 A:middle
Course is the direction of

00:17:31.216 --> 00:17:32.066 A:middle
travel for the device.

00:17:32.896 --> 00:17:34.646 A:middle
Now, this may make sense for

00:17:34.646 --> 00:17:35.746 A:middle
things like turn-by-turn

00:17:35.746 --> 00:17:37.886 A:middle
navigation applications, but for

00:17:37.886 --> 00:17:39.226 A:middle
things like augmented reality,

00:17:39.436 --> 00:17:40.496 A:middle
this may make less sense.

00:17:40.846 --> 00:17:42.296 A:middle
I encourage you to check out

00:17:42.296 --> 00:17:44.226 A:middle
CoreLocation session on Thursday

00:17:44.426 --> 00:17:45.266 A:middle
for more details.

00:17:46.596 --> 00:17:48.126 A:middle
Now, another way you could

00:17:48.126 --> 00:17:49.806 A:middle
consider getting Heading is by

00:17:49.806 --> 00:17:51.376 A:middle
calculating it from the attitude

00:17:51.376 --> 00:17:53.276 A:middle
estimation that we provide in

00:17:53.276 --> 00:17:54.066 A:middle
DeviceMotion.

00:17:54.586 --> 00:17:56.266 A:middle
However, getting this right in

00:17:56.266 --> 00:17:57.476 A:middle
all circumstances is

00:17:57.476 --> 00:17:58.126 A:middle
non-trivial.

00:17:58.526 --> 00:18:00.796 A:middle
And this is why, this year,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.526 --> 00:18:00.796 A:middle
And this is why, this year,

00:18:00.916 --> 00:18:02.136 A:middle
we're now adding Heading as a

00:18:02.136 --> 00:18:03.716 A:middle
first class property in

00:18:03.716 --> 00:18:04.546 A:middle
DeviceMotion.

00:18:05.896 --> 00:18:07.716 A:middle
Heading fuses together the

00:18:07.716 --> 00:18:09.156 A:middle
accelerometer, the gyroscope,

00:18:09.156 --> 00:18:09.896 A:middle
and most importantly the

00:18:09.896 --> 00:18:11.306 A:middle
magnetometer to give us the

00:18:11.306 --> 00:18:12.736 A:middle
direction the device is pointing

00:18:12.736 --> 00:18:13.656 A:middle
with respect to north.

00:18:15.366 --> 00:18:16.746 A:middle
Keep in mind that Heading is

00:18:16.746 --> 00:18:19.026 A:middle
only available on iOS where the

00:18:19.026 --> 00:18:20.206 A:middle
magnet field property is

00:18:20.206 --> 00:18:20.606 A:middle
available.

00:18:22.156 --> 00:18:23.576 A:middle
Now, let's take a closer look at

00:18:23.576 --> 00:18:23.976 A:middle
the API.

00:18:25.386 --> 00:18:27.066 A:middle
Heading is only valid for the

00:18:27.066 --> 00:18:28.986 A:middle
XMagneticNorth and XTrueNorth

00:18:28.986 --> 00:18:29.766 A:middle
reference frames.

00:18:30.126 --> 00:18:31.106 A:middle
For the other two reference

00:18:31.106 --> 00:18:32.146 A:middle
frames, you'll receive a

00:18:32.146 --> 00:18:33.326 A:middle
negative value back from

00:18:33.326 --> 00:18:33.656 A:middle
Heading.

00:18:35.026 --> 00:18:37.626 A:middle
And Heading will give you from 0

00:18:37.686 --> 00:18:40.326 A:middle
to 359 degrees from the x-axis

00:18:40.326 --> 00:18:41.786 A:middle
that you've chosen in your

00:18:41.786 --> 00:18:42.856 A:middle
application, either

00:18:42.856 --> 00:18:44.356 A:middle
MagneticNorth or TrueNorth.

00:18:44.986 --> 00:18:48.186 A:middle
Now that we have Heading, we can

00:18:48.186 --> 00:18:50.096 A:middle
use that to overlay the Golden

00:18:50.096 --> 00:18:51.916 A:middle
Gate Bridge on the horizon in

00:18:51.916 --> 00:18:54.266 A:middle
the direction that it actually

00:18:55.116 --> 00:18:55.216 A:middle
is.

00:18:55.946 --> 00:18:57.496 A:middle
Now, with DeviceMotion, there

00:18:57.496 --> 00:18:58.686 A:middle
are a number of best practices

00:18:58.686 --> 00:18:59.446 A:middle
to keep in mind.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.266 --> 00:19:02.226 A:middle
The first is that you want to

00:19:02.226 --> 00:19:03.456 A:middle
make sure that you check for the

00:19:03.456 --> 00:19:04.546 A:middle
availability of a given

00:19:04.546 --> 00:19:06.196 A:middle
reference frame before you start

00:19:06.196 --> 00:19:06.746 A:middle
updates.

00:19:07.566 --> 00:19:09.666 A:middle
And to do that you can use the

00:19:09.666 --> 00:19:10.966 A:middle
available attitude reference

00:19:10.966 --> 00:19:11.586 A:middle
frames API.

00:19:12.216 --> 00:19:13.176 A:middle
This will return you a

00:19:13.336 --> 00:19:14.766 A:middle
CMAttitudeReferenceFrame

00:19:14.766 --> 00:19:16.566 A:middle
bit-mask that you can then and

00:19:16.826 --> 00:19:17.626 A:middle
with the reference frame that

00:19:17.626 --> 00:19:18.746 A:middle
you're interested in to

00:19:18.746 --> 00:19:19.756 A:middle
determine availability.

00:19:21.086 --> 00:19:22.736 A:middle
And the next thing to keep in

00:19:22.736 --> 00:19:23.866 A:middle
mind is that the choice of

00:19:23.866 --> 00:19:25.556 A:middle
reference frame is key for your

00:19:25.556 --> 00:19:26.326 A:middle
applications.

00:19:26.506 --> 00:19:28.416 A:middle
This is going to determine how

00:19:28.416 --> 00:19:29.876 A:middle
attitude is calculated in your

00:19:29.876 --> 00:19:32.246 A:middle
applications as well as which

00:19:32.246 --> 00:19:34.056 A:middle
sensors go into the sensor

00:19:34.056 --> 00:19:34.686 A:middle
fusion.

00:19:36.286 --> 00:19:37.806 A:middle
Now, we've talked about a number

00:19:37.806 --> 00:19:39.686 A:middle
of things in DeviceMotion, but

00:19:39.686 --> 00:19:40.596 A:middle
let's get a little bit more

00:19:40.596 --> 00:19:41.146 A:middle
practical.

00:19:41.806 --> 00:19:45.126 A:middle
Let's take some of the concepts

00:19:45.266 --> 00:19:46.296 A:middle
that we've talked about in

00:19:46.296 --> 00:19:47.816 A:middle
DeviceMotion and put them in the

00:19:47.816 --> 00:19:49.936 A:middle
practice -- into practice using

00:19:50.016 --> 00:19:50.516 A:middle
a game.

00:19:51.466 --> 00:19:53.076 A:middle
Badger with Attitude is a game

00:19:53.256 --> 00:19:54.246 A:middle
where we're going to apply

00:19:54.536 --> 00:19:56.776 A:middle
DeviceMotion to translate into

00:19:56.776 --> 00:19:57.986 A:middle
controls for the game.

00:19:58.196 --> 00:19:59.716 A:middle
And for that I'd like to invite

00:19:59.716 --> 00:20:01.206 A:middle
my co-worker Ahmad to the stage

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.716 --> 00:20:01.206 A:middle
my co-worker Ahmad to the stage

00:20:01.456 --> 00:20:02.326 A:middle
to walk us through this.

00:20:03.516 --> 00:20:08.500 A:middle
[ Applause ]

00:20:14.406 --> 00:20:15.186 A:middle
&gt;&gt; Thank you, John.

00:20:16.676 --> 00:20:17.576 A:middle
Hello and welcome.

00:20:18.346 --> 00:20:19.406 A:middle
Today, I'm going to be taking

00:20:19.406 --> 00:20:21.246 A:middle
some of those concepts that John

00:20:21.246 --> 00:20:22.606 A:middle
just talked about and help you

00:20:22.606 --> 00:20:23.656 A:middle
put them through a practical

00:20:23.656 --> 00:20:24.126 A:middle
example.

00:20:24.876 --> 00:20:25.706 A:middle
My name is Ahmad.

00:20:25.706 --> 00:20:26.906 A:middle
And I'm an engineer on the Core

00:20:26.906 --> 00:20:27.536 A:middle
Motion team.

00:20:29.036 --> 00:20:30.296 A:middle
I'll be using the Badger app

00:20:30.446 --> 00:20:31.666 A:middle
which has been developed by our

00:20:31.666 --> 00:20:32.496 A:middle
colleagues over at [inaudible].

00:20:32.556 --> 00:20:34.626 A:middle
You may have seen this app in

00:20:34.626 --> 00:20:35.456 A:middle
last year's session.

00:20:36.096 --> 00:20:37.476 A:middle
In it, you play a cute a little

00:20:37.476 --> 00:20:38.686 A:middle
badger called Bob.

00:20:39.106 --> 00:20:41.156 A:middle
He sits in a mining cart rolling

00:20:41.156 --> 00:20:42.766 A:middle
down some tracks collecting gems

00:20:42.766 --> 00:20:43.876 A:middle
and power ups along the way.

00:20:44.466 --> 00:20:46.396 A:middle
So we're going to take this

00:20:46.396 --> 00:20:48.156 A:middle
Apple existing swipe controls

00:20:48.616 --> 00:20:50.206 A:middle
and use DeviceMotion to

00:20:50.206 --> 00:20:52.216 A:middle
transform it to motion-based

00:20:52.216 --> 00:20:52.806 A:middle
gestures.

00:20:57.436 --> 00:20:58.546 A:middle
Here's what we've got in store

00:20:58.546 --> 00:20:59.276 A:middle
for you today.

00:20:59.876 --> 00:21:01.046 A:middle
First, we're going to talk about

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.876 --> 00:21:01.046 A:middle
First, we're going to talk about

00:21:01.046 --> 00:21:02.786 A:middle
the existing controls and what

00:21:02.786 --> 00:21:03.926 A:middle
we're trying to accomplish.

00:21:04.816 --> 00:21:06.446 A:middle
Then we'll show you some of the

00:21:06.446 --> 00:21:08.126 A:middle
basics of using DeviceMotion.

00:21:08.906 --> 00:21:10.456 A:middle
And finally the algorithms we

00:21:10.456 --> 00:21:12.046 A:middle
use to detect those gestures.

00:21:12.586 --> 00:21:16.206 A:middle
So the Badger app allows you to

00:21:16.206 --> 00:21:17.746 A:middle
swipe your finger up across the

00:21:17.746 --> 00:21:19.206 A:middle
screen to make the badger jump

00:21:20.186 --> 00:21:21.166 A:middle
and if you swipe your finger

00:21:21.166 --> 00:21:22.956 A:middle
down, the badger ducks and hides

00:21:22.956 --> 00:21:24.186 A:middle
inside the cart to avoid

00:21:24.186 --> 00:21:24.746 A:middle
obstacles.

00:21:25.876 --> 00:21:27.366 A:middle
And swiping left or right will

00:21:27.366 --> 00:21:29.306 A:middle
make the badger swing to reach

00:21:29.306 --> 00:21:30.196 A:middle
out for those gems.

00:21:31.406 --> 00:21:33.176 A:middle
If you've worked on beautiful

00:21:33.176 --> 00:21:34.346 A:middle
graphics like these, it's a

00:21:34.346 --> 00:21:35.356 A:middle
shame to have to hide them

00:21:35.356 --> 00:21:36.516 A:middle
behind your finger while you

00:21:36.516 --> 00:21:37.086 A:middle
play the game.

00:21:38.516 --> 00:21:39.596 A:middle
So let's use the phone as our

00:21:39.596 --> 00:21:42.456 A:middle
controller here and have the

00:21:42.456 --> 00:21:43.806 A:middle
user fully immersed in the

00:21:43.806 --> 00:21:45.156 A:middle
experience that we've built for

00:21:47.136 --> 00:21:47.266 A:middle
them.

00:21:47.456 --> 00:21:48.806 A:middle
So first we'll detect if the

00:21:48.806 --> 00:21:50.656 A:middle
user has rotated the device

00:21:50.686 --> 00:21:52.226 A:middle
towards them to make the badger

00:21:52.226 --> 00:21:52.636 A:middle
jump up.

00:21:54.456 --> 00:21:55.856 A:middle
A slight bump in the device

00:21:55.856 --> 00:21:57.336 A:middle
downwards will make the badger

00:21:57.336 --> 00:21:58.906 A:middle
squat and hide in the cart.

00:21:59.796 --> 00:22:02.346 A:middle
And tilting the device left or

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.796 --> 00:22:02.346 A:middle
And tilting the device left or

00:22:02.346 --> 00:22:04.226 A:middle
right will make the badger lean

00:22:04.226 --> 00:22:04.786 A:middle
either way.

00:22:05.336 --> 00:22:09.076 A:middle
Now, I want you to focus on

00:22:09.076 --> 00:22:11.286 A:middle
those couple of points and think

00:22:11.286 --> 00:22:12.776 A:middle
about them when you're looking

00:22:12.776 --> 00:22:14.776 A:middle
at the sample code later or

00:22:14.776 --> 00:22:15.986 A:middle
thinking about incorporating

00:22:15.986 --> 00:22:17.366 A:middle
motion into your application.

00:22:17.876 --> 00:22:20.646 A:middle
As John has mentioned earlier,

00:22:20.726 --> 00:22:22.236 A:middle
Core Motion allows you to

00:22:22.316 --> 00:22:23.386 A:middle
interact directly with the

00:22:23.386 --> 00:22:23.896 A:middle
sensors.

00:22:24.776 --> 00:22:26.166 A:middle
Let's take the accelerometer for

00:22:26.166 --> 00:22:26.636 A:middle
example.

00:22:27.926 --> 00:22:29.616 A:middle
That input may look fine as long

00:22:29.616 --> 00:22:31.246 A:middle
as the user is semi-stationary.

00:22:31.506 --> 00:22:32.946 A:middle
But if you start walking around

00:22:32.946 --> 00:22:34.846 A:middle
or get on a bus, then you're

00:22:34.846 --> 00:22:35.776 A:middle
going to have to account for

00:22:35.776 --> 00:22:37.236 A:middle
these additional accelerations.

00:22:38.286 --> 00:22:39.756 A:middle
So with DeviceMotion, we've

00:22:39.756 --> 00:22:41.216 A:middle
taken other sensors like the

00:22:41.216 --> 00:22:43.046 A:middle
gyro and the magnetometer that

00:22:43.046 --> 00:22:44.296 A:middle
complement the accelerometer

00:22:44.296 --> 00:22:44.926 A:middle
really well.

00:22:45.576 --> 00:22:46.896 A:middle
And we've fused those inputs for

00:22:46.896 --> 00:22:47.166 A:middle
you.

00:22:48.066 --> 00:22:49.416 A:middle
So we can minimize those

00:22:49.416 --> 00:22:51.176 A:middle
environmental factors and let

00:22:51.176 --> 00:22:52.866 A:middle
you focus on capturing those

00:22:52.866 --> 00:22:54.856 A:middle
motion controls rather than how

00:22:54.856 --> 00:22:58.286 A:middle
to process the sensor input.

00:22:58.896 --> 00:23:01.276 A:middle
The DeviceMotion APIs allow you

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.896 --> 00:23:01.276 A:middle
The DeviceMotion APIs allow you

00:23:01.276 --> 00:23:03.336 A:middle
to query for samples in two

00:23:03.336 --> 00:23:06.126 A:middle
different ways: the push and the

00:23:06.126 --> 00:23:06.986 A:middle
pull mechanism.

00:23:07.376 --> 00:23:09.046 A:middle
Let's take a closer look at

00:23:09.046 --> 00:23:10.176 A:middle
those two.

00:23:12.196 --> 00:23:13.886 A:middle
The push mechanism is a great

00:23:13.886 --> 00:23:15.576 A:middle
way for you to detect a discrete

00:23:15.576 --> 00:23:17.336 A:middle
gesture across a small window of

00:23:17.336 --> 00:23:17.656 A:middle
time.

00:23:19.046 --> 00:23:21.216 A:middle
In the SwingWatch app from last

00:23:21.216 --> 00:23:23.716 A:middle
year's session, we used the push

00:23:23.716 --> 00:23:25.376 A:middle
mechanism so that the framework

00:23:25.376 --> 00:23:27.226 A:middle
will push to us updates as they

00:23:27.226 --> 00:23:28.906 A:middle
are available at a fixed

00:23:29.206 --> 00:23:29.666 A:middle
interval.

00:23:31.026 --> 00:23:32.056 A:middle
Then we would capture those

00:23:32.056 --> 00:23:34.256 A:middle
updates and detect if the user

00:23:34.256 --> 00:23:35.746 A:middle
swung their arm to perform a

00:23:35.746 --> 00:23:36.906 A:middle
backhand or a forehand.

00:23:38.936 --> 00:23:40.696 A:middle
This is what the API looks like.

00:23:41.286 --> 00:23:43.076 A:middle
You use the CMMotionManagers

00:23:43.436 --> 00:23:44.746 A:middle
startDeviceMotionUpdates

00:23:44.746 --> 00:23:45.256 A:middle
function.

00:23:45.796 --> 00:23:47.646 A:middle
You provide a reference frame of

00:23:47.646 --> 00:23:48.076 A:middle
interest.

00:23:49.466 --> 00:23:51.606 A:middle
Provide an OperationQueue for

00:23:51.606 --> 00:23:53.206 A:middle
your Motion Handler to run on as

00:23:53.206 --> 00:23:54.556 A:middle
soon as those samples are ready.

00:23:57.156 --> 00:24:00.416 A:middle
However, if you want to know

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.156 --> 00:24:00.416 A:middle
However, if you want to know

00:24:00.416 --> 00:24:01.486 A:middle
what the current state of the

00:24:01.486 --> 00:24:04.126 A:middle
device is then you want to use

00:24:04.126 --> 00:24:05.226 A:middle
the pull mechanism here.

00:24:05.836 --> 00:24:07.266 A:middle
As we'll show you later on in

00:24:07.266 --> 00:24:09.086 A:middle
the Badger app for the tilt

00:24:09.156 --> 00:24:11.366 A:middle
gesture, we want to make the

00:24:11.366 --> 00:24:13.366 A:middle
badger lean at the same angle

00:24:13.366 --> 00:24:16.586 A:middle
that the phone is in so we

00:24:16.586 --> 00:24:18.196 A:middle
ensure we provide the responsive

00:24:18.196 --> 00:24:20.406 A:middle
and a smooth experience for our

00:24:20.406 --> 00:24:21.426 A:middle
graphical application.

00:24:23.056 --> 00:24:24.996 A:middle
The API for the pull mechanism

00:24:24.996 --> 00:24:25.826 A:middle
is a bit simpler.

00:24:26.416 --> 00:24:26.836 A:middle
You call

00:24:26.836 --> 00:24:28.896 A:middle
startDeviceMotionUpdates and you

00:24:28.896 --> 00:24:30.036 A:middle
provide the reference frame.

00:24:31.006 --> 00:24:32.156 A:middle
And whenever you're ready, you

00:24:32.156 --> 00:24:33.706 A:middle
can pull for the latest device

00:24:33.706 --> 00:24:34.916 A:middle
motion sample from the

00:24:34.916 --> 00:24:35.366 A:middle
framework.

00:24:35.856 --> 00:24:39.226 A:middle
We'll be releasing the sample

00:24:39.226 --> 00:24:39.816 A:middle
code for you.

00:24:39.816 --> 00:24:41.036 A:middle
So you'll be able to take a look

00:24:41.246 --> 00:24:41.896 A:middle
at it later.

00:24:42.396 --> 00:24:43.426 A:middle
But let's focus on the Core

00:24:43.426 --> 00:24:44.336 A:middle
Motion parts for now.

00:24:44.956 --> 00:24:47.416 A:middle
So to get started we'll import

00:24:47.416 --> 00:24:49.216 A:middle
the CoreMotion framework and

00:24:49.216 --> 00:24:50.616 A:middle
then instantiate an instance of

00:24:50.616 --> 00:24:51.696 A:middle
the CMMotionManager.

00:24:52.936 --> 00:24:54.796 A:middle
Then we'll check if DeviceMotion

00:24:54.796 --> 00:24:56.236 A:middle
updates are available on this

00:24:56.236 --> 00:24:56.756 A:middle
platform.

00:24:57.266 --> 00:25:00.026 A:middle
And if you recall from John's

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.266 --> 00:25:00.026 A:middle
And if you recall from John's

00:25:00.026 --> 00:25:02.126 A:middle
talk, the tip and tilt gestures

00:25:02.126 --> 00:25:03.806 A:middle
that we're interested in track

00:25:03.806 --> 00:25:05.406 A:middle
where gravity is in the device

00:25:05.406 --> 00:25:05.656 A:middle
frame.

00:25:06.386 --> 00:25:07.676 A:middle
So we'll check -- so we'll be

00:25:07.676 --> 00:25:09.506 A:middle
using the XArbitraryZVertical

00:25:09.506 --> 00:25:10.226 A:middle
reference frame.

00:25:10.766 --> 00:25:11.626 A:middle
And we'll check if it's

00:25:11.626 --> 00:25:12.646 A:middle
available on the platform.

00:25:13.606 --> 00:25:15.616 A:middle
You may have noticed, I did not

00:25:15.906 --> 00:25:17.736 A:middle
check for the authorization here

00:25:17.876 --> 00:25:19.066 A:middle
and that's because I'm using the

00:25:19.066 --> 00:25:21.006 A:middle
MotionManager API which does not

00:25:21.006 --> 00:25:22.796 A:middle
access sensitive data.

00:25:24.766 --> 00:25:27.896 A:middle
For the rest of the talk, we'll

00:25:27.896 --> 00:25:29.706 A:middle
assume the device is in the last

00:25:29.706 --> 00:25:31.186 A:middle
state orientation, but in the

00:25:31.186 --> 00:25:32.446 A:middle
sample code we'll show you how

00:25:32.526 --> 00:25:34.306 A:middle
to detect and handle other

00:25:34.306 --> 00:25:35.406 A:middle
device orientations.

00:25:38.956 --> 00:25:41.126 A:middle
For the first gesture, when

00:25:41.336 --> 00:25:42.976 A:middle
rotating the device towards you

00:25:43.186 --> 00:25:45.296 A:middle
makes the badger jump up, we

00:25:45.296 --> 00:25:47.366 A:middle
want to capture the magnitude of

00:25:47.366 --> 00:25:49.156 A:middle
that rotation rate along the

00:25:49.156 --> 00:25:50.986 A:middle
horizontal axis of the phone.

00:25:51.736 --> 00:25:53.206 A:middle
In this case, it's the y-axis.

00:25:55.816 --> 00:25:57.286 A:middle
So we'll be looking at the

00:25:57.286 --> 00:25:59.836 A:middle
rotation rate property from the

00:25:59.836 --> 00:26:00.906 A:middle
DeviceMotion object.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.836 --> 00:26:00.906 A:middle
DeviceMotion object.

00:26:01.486 --> 00:26:02.946 A:middle
And we chose that specifically

00:26:02.946 --> 00:26:04.736 A:middle
because we're not interested in

00:26:04.736 --> 00:26:06.376 A:middle
the current angle the device is

00:26:06.376 --> 00:26:08.366 A:middle
making but rather a quick change

00:26:08.366 --> 00:26:09.006 A:middle
in that angle.

00:26:10.286 --> 00:26:12.046 A:middle
So if we use the rotation rate,

00:26:12.096 --> 00:26:14.246 A:middle
we'll be able to detect a quick

00:26:14.316 --> 00:26:16.036 A:middle
pulse and make the badger jump

00:26:16.036 --> 00:26:16.646 A:middle
accordingly.

00:26:17.136 --> 00:26:19.676 A:middle
This is a gesture that we're

00:26:19.676 --> 00:26:21.786 A:middle
detecting across a small period

00:26:21.786 --> 00:26:23.156 A:middle
of time, so we're going to be

00:26:23.156 --> 00:26:26.346 A:middle
using the push mechanism for it.

00:26:26.616 --> 00:26:27.606 A:middle
Let's see how that will look in

00:26:27.606 --> 00:26:27.976 A:middle
the code.

00:26:28.306 --> 00:26:31.106 A:middle
So start off, we'll set the

00:26:31.106 --> 00:26:32.586 A:middle
update interval to 50Hz.

00:26:33.176 --> 00:26:34.176 A:middle
And you want to be careful when

00:26:34.176 --> 00:26:34.736 A:middle
you set that.

00:26:35.466 --> 00:26:36.496 A:middle
You want the samples to be

00:26:36.496 --> 00:26:38.006 A:middle
coming in fast enough so that

00:26:38.006 --> 00:26:40.006 A:middle
you can capture that gesture but

00:26:40.006 --> 00:26:41.126 A:middle
not too fast that you're

00:26:41.126 --> 00:26:42.626 A:middle
increasing your computational

00:26:42.976 --> 00:26:44.206 A:middle
and memory requirements.

00:26:45.656 --> 00:26:46.346 A:middle
Then we'll

00:26:46.346 --> 00:26:49.096 A:middle
startDeviceMotionUpdates using

00:26:49.196 --> 00:26:51.416 A:middle
the push mechanism, provide our

00:26:51.416 --> 00:26:53.166 A:middle
XArbitraryZVertical reference

00:26:53.166 --> 00:26:53.466 A:middle
frame.

00:26:54.656 --> 00:26:56.216 A:middle
A queue, and I'm using a

00:26:56.216 --> 00:26:57.586 A:middle
standard operation queue here

00:26:58.376 --> 00:26:59.796 A:middle
and finally our motionHandler.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:02.636 --> 00:27:04.186 A:middle
This is what our motionHandler

00:27:04.186 --> 00:27:04.686 A:middle
will look like.

00:27:04.946 --> 00:27:06.426 A:middle
It will get called as soon as

00:27:06.426 --> 00:27:07.206 A:middle
samples are ready.

00:27:07.926 --> 00:27:08.966 A:middle
The first thing we'll do is

00:27:08.966 --> 00:27:11.606 A:middle
check for any errors and then

00:27:11.606 --> 00:27:13.076 A:middle
grab that rotation rate from the

00:27:13.076 --> 00:27:15.426 A:middle
DeviceMotion object and look at

00:27:15.696 --> 00:27:17.516 A:middle
the y-component that we were

00:27:17.516 --> 00:27:18.776 A:middle
interested in.

00:27:19.336 --> 00:27:21.016 A:middle
Then we store that in a buffer.

00:27:21.416 --> 00:27:22.786 A:middle
And I'm using a circular buffer

00:27:22.786 --> 00:27:23.006 A:middle
here.

00:27:23.526 --> 00:27:24.796 A:middle
So as soon as the samples are

00:27:24.796 --> 00:27:26.726 A:middle
coming in, we'll accumulate more

00:27:27.136 --> 00:27:29.566 A:middle
of them.

00:27:29.966 --> 00:27:31.226 A:middle
Since we're using the SceneKit

00:27:31.226 --> 00:27:33.266 A:middle
Renderer for this application, I

00:27:33.266 --> 00:27:34.126 A:middle
chose the renderer's

00:27:34.126 --> 00:27:35.336 A:middle
updateAtTime function.

00:27:35.826 --> 00:27:37.256 A:middle
This will get called just before

00:27:37.296 --> 00:27:38.276 A:middle
you render a new scene.

00:27:39.756 --> 00:27:40.976 A:middle
And this is the ideal place for

00:27:40.976 --> 00:27:42.246 A:middle
me to check for the state of

00:27:42.246 --> 00:27:44.296 A:middle
that buffer and then update the

00:27:44.296 --> 00:27:44.576 A:middle
game.

00:27:45.106 --> 00:27:47.986 A:middle
And I'll leave it up to you to

00:27:47.986 --> 00:27:48.746 A:middle
find out where in the

00:27:48.746 --> 00:27:50.136 A:middle
application is the best place to

00:27:50.136 --> 00:27:51.126 A:middle
do that.

00:27:52.766 --> 00:27:54.426 A:middle
And then I simply check if the

00:27:54.426 --> 00:27:55.816 A:middle
mean of that buffer has crossed

00:27:55.816 --> 00:27:57.336 A:middle
a certain threshold and make the

00:27:57.336 --> 00:27:58.306 A:middle
badger jump.

00:27:59.676 --> 00:28:01.286 A:middle
Keep in mind this threshold is

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.676 --> 00:28:01.286 A:middle
Keep in mind this threshold is

00:28:01.336 --> 00:28:03.216 A:middle
tunable and adjustable to your

00:28:03.216 --> 00:28:04.256 A:middle
app's specific needs.

00:28:08.316 --> 00:28:10.446 A:middle
Next, we'll take a look at the

00:28:10.446 --> 00:28:12.246 A:middle
second control where bumping the

00:28:12.246 --> 00:28:13.816 A:middle
device downwards will make the

00:28:13.816 --> 00:28:14.976 A:middle
badger duck.

00:28:16.386 --> 00:28:18.216 A:middle
For this one, we want to measure

00:28:18.216 --> 00:28:20.996 A:middle
the user acceleration along the

00:28:20.996 --> 00:28:22.136 A:middle
gravity vector.

00:28:25.076 --> 00:28:26.636 A:middle
So we'll be looking at the user

00:28:26.636 --> 00:28:27.916 A:middle
acceleration property.

00:28:28.376 --> 00:28:30.526 A:middle
And here we chose that because

00:28:31.166 --> 00:28:32.696 A:middle
even if the device is slightly

00:28:32.696 --> 00:28:34.466 A:middle
tilted or rotated at an angle,

00:28:34.466 --> 00:28:35.976 A:middle
the user acceleration is still

00:28:35.976 --> 00:28:37.046 A:middle
going to still look the same

00:28:37.736 --> 00:28:39.036 A:middle
regardless of the attitude.

00:28:43.316 --> 00:28:45.546 A:middle
So this is one of the gestures,

00:28:45.546 --> 00:28:46.896 A:middle
again, where you're detecting

00:28:46.896 --> 00:28:48.266 A:middle
over a window of time, so we'll

00:28:48.266 --> 00:28:49.706 A:middle
use the push mechanism as well.

00:28:51.386 --> 00:28:52.546 A:middle
Since we're already set up for

00:28:52.546 --> 00:28:54.576 A:middle
the push mechanism, we'll head

00:28:54.576 --> 00:28:56.246 A:middle
back to our motionHandler where

00:28:56.246 --> 00:28:57.646 A:middle
we were storing those rotation

00:28:57.646 --> 00:28:58.496 A:middle
rates previously.

00:28:59.006 --> 00:29:02.106 A:middle
But this time we'll pull out the

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.006 --> 00:29:02.106 A:middle
But this time we'll pull out the

00:29:02.106 --> 00:29:03.806 A:middle
gravity property out of the

00:29:03.806 --> 00:29:06.426 A:middle
device motion object and the

00:29:06.646 --> 00:29:08.146 A:middle
user acceleration as well.

00:29:08.686 --> 00:29:11.916 A:middle
We compute the magnitude of that

00:29:11.916 --> 00:29:13.716 A:middle
user acceleration along the

00:29:13.716 --> 00:29:17.536 A:middle
gravity vector and store that in

00:29:17.536 --> 00:29:17.896 A:middle
a buffer.

00:29:18.626 --> 00:29:19.976 A:middle
And once the threshold of that

00:29:19.976 --> 00:29:21.306 A:middle
-- once the mean of that buffer

00:29:21.306 --> 00:29:23.376 A:middle
crosses a certain threshold then

00:29:23.376 --> 00:29:25.206 A:middle
we'll make the badger duck down

00:29:25.206 --> 00:29:27.366 A:middle
and hide in the cart.

00:29:28.136 --> 00:29:29.826 A:middle
So we've taken a look at two

00:29:29.826 --> 00:29:31.886 A:middle
controls where we were

00:29:31.886 --> 00:29:33.506 A:middle
monitoring motion across a small

00:29:33.506 --> 00:29:34.236 A:middle
window of time.

00:29:34.816 --> 00:29:35.986 A:middle
And we used the push mechanism

00:29:35.986 --> 00:29:36.346 A:middle
for that.

00:29:37.216 --> 00:29:38.716 A:middle
Let's take a look at our final

00:29:38.766 --> 00:29:40.976 A:middle
control where our requirements

00:29:40.976 --> 00:29:41.826 A:middle
are slightly different.

00:29:43.516 --> 00:29:48.046 A:middle
For the tilt control, in the

00:29:48.046 --> 00:29:49.686 A:middle
simple case where the device is

00:29:49.686 --> 00:29:52.976 A:middle
held in a vertical position, you

00:29:52.976 --> 00:29:54.606 A:middle
can breakdown the gravity vector

00:29:54.606 --> 00:29:56.416 A:middle
into its x-component and its

00:29:56.416 --> 00:29:57.266 A:middle
y-component.

00:29:58.456 --> 00:29:59.496 A:middle
And by applying simple

00:29:59.496 --> 00:30:01.276 A:middle
trigonometry, you can arrive at

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.496 --> 00:30:01.276 A:middle
trigonometry, you can arrive at

00:30:01.276 --> 00:30:01.646 A:middle
the tilt.

00:30:03.006 --> 00:30:05.086 A:middle
But since we want this gesture

00:30:05.086 --> 00:30:06.476 A:middle
to be slightly more flexible,

00:30:07.186 --> 00:30:08.636 A:middle
we're going to break gravity

00:30:08.636 --> 00:30:10.306 A:middle
into its y-component and its

00:30:10.306 --> 00:30:12.586 A:middle
component in the x-z plane of

00:30:12.586 --> 00:30:13.216 A:middle
the device.

00:30:14.066 --> 00:30:15.386 A:middle
This will allow us to tilt the

00:30:15.386 --> 00:30:19.826 A:middle
phone even if the device is

00:30:19.826 --> 00:30:21.286 A:middle
slightly rotated at an angle.

00:30:22.576 --> 00:30:23.856 A:middle
What's different about this

00:30:23.856 --> 00:30:25.326 A:middle
control is that we want to know

00:30:25.766 --> 00:30:27.296 A:middle
the current state of the device

00:30:27.356 --> 00:30:28.766 A:middle
and not the discrete motion that

00:30:28.766 --> 00:30:29.156 A:middle
occurred.

00:30:30.536 --> 00:30:33.486 A:middle
This will allow us to make the

00:30:33.486 --> 00:30:35.416 A:middle
badger lean at the same angle

00:30:35.416 --> 00:30:37.166 A:middle
the device is leaning in and

00:30:37.166 --> 00:30:38.616 A:middle
provide a very responsive

00:30:38.616 --> 00:30:39.286 A:middle
experience.

00:30:39.786 --> 00:30:42.416 A:middle
And for those reasons, we'll be

00:30:42.416 --> 00:30:44.546 A:middle
using the pull mechanism for

00:30:45.026 --> 00:30:47.076 A:middle
this control.

00:30:47.146 --> 00:30:48.366 A:middle
Since we're already set up for

00:30:48.366 --> 00:30:50.656 A:middle
the push mechanism, the

00:30:50.656 --> 00:30:51.996 A:middle
framework is ready for us to

00:30:51.996 --> 00:30:54.396 A:middle
pull for samples at any point in

00:30:54.396 --> 00:30:54.716 A:middle
time.

00:30:56.716 --> 00:30:58.606 A:middle
So we'll go back to our renderer

00:30:58.606 --> 00:30:59.226 A:middle
function.

00:30:59.456 --> 00:31:00.626 A:middle
If you recall, this is getting

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.456 --> 00:31:00.626 A:middle
If you recall, this is getting

00:31:00.626 --> 00:31:02.356 A:middle
called just before you render a

00:31:02.356 --> 00:31:02.886 A:middle
new scene.

00:31:03.616 --> 00:31:05.406 A:middle
That makes it a perfect place

00:31:05.406 --> 00:31:06.926 A:middle
for me to pull for the latest

00:31:06.926 --> 00:31:09.076 A:middle
sample, make a calculation, and

00:31:09.076 --> 00:31:12.516 A:middle
then update the graphics.

00:31:12.516 --> 00:31:13.756 A:middle
So we'll ask the motionManager

00:31:13.756 --> 00:31:14.986 A:middle
for the latest DeviceMotion

00:31:14.986 --> 00:31:18.016 A:middle
sample, grab the gravity

00:31:18.016 --> 00:31:21.706 A:middle
property out of that, compute

00:31:21.956 --> 00:31:24.106 A:middle
the vector in the x-z plane, and

00:31:24.106 --> 00:31:27.956 A:middle
arrive at the tilt as the

00:31:27.956 --> 00:31:29.096 A:middle
arc-tan between that

00:31:29.096 --> 00:31:30.306 A:middle
x-z-component and the

00:31:30.306 --> 00:31:31.056 A:middle
y-component.

00:31:31.546 --> 00:31:34.686 A:middle
Don't forget to let the

00:31:34.686 --> 00:31:36.176 A:middle
framework know that you're no

00:31:36.176 --> 00:31:37.076 A:middle
longer interested in

00:31:37.076 --> 00:31:39.106 A:middle
DeviceMotion updates if they

00:31:39.106 --> 00:31:40.186 A:middle
were previously active.

00:31:41.266 --> 00:31:42.556 A:middle
This is a great thing to do when

00:31:42.556 --> 00:31:44.166 A:middle
your game is paused or has ended

00:31:45.126 --> 00:31:46.786 A:middle
to make sure you're not wasting

00:31:46.786 --> 00:31:47.856 A:middle
more battery than you need.

00:31:48.846 --> 00:31:50.246 A:middle
So here you'll see the results.

00:31:50.866 --> 00:31:52.426 A:middle
The user is able to play the

00:31:52.426 --> 00:31:54.766 A:middle
game by tilting the device from

00:31:54.766 --> 00:31:57.326 A:middle
side to side to make the badger

00:31:57.326 --> 00:31:58.246 A:middle
lean either way.

00:31:59.146 --> 00:32:00.726 A:middle
And tipping the device towards

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.146 --> 00:32:00.726 A:middle
And tipping the device towards

00:32:00.726 --> 00:32:02.146 A:middle
them makes the badger jump up.

00:32:03.386 --> 00:32:06.546 A:middle
And finally duck, a small push

00:32:06.546 --> 00:32:07.736 A:middle
of the device downwards will

00:32:07.736 --> 00:32:09.276 A:middle
make the badger squat and hide

00:32:09.276 --> 00:32:10.026 A:middle
inside the cart.

00:32:10.496 --> 00:32:12.586 A:middle
It's pretty cool.

00:32:12.586 --> 00:32:14.166 A:middle
We've taken an app with swipe

00:32:14.196 --> 00:32:16.416 A:middle
controls and used DeviceMotion

00:32:17.366 --> 00:32:18.046 A:middle
to replace them with

00:32:18.046 --> 00:32:18.856 A:middle
motion-based ones.

00:32:27.386 --> 00:32:29.126 A:middle
I'm excited to see how far you

00:32:29.126 --> 00:32:30.636 A:middle
can push the DeviceMotion APIs.

00:32:35.516 --> 00:32:44.576 A:middle
[ Applause ]

00:32:45.076 --> 00:32:46.196 A:middle
So to wrap up some of the key

00:32:46.196 --> 00:32:47.246 A:middle
points that we talked about

00:32:47.306 --> 00:32:50.276 A:middle
today, we encourage you to look

00:32:50.276 --> 00:32:52.356 A:middle
at the authorization API and

00:32:52.356 --> 00:32:53.106 A:middle
check for your apps

00:32:53.106 --> 00:32:55.616 A:middle
authorization if you're using

00:32:55.616 --> 00:32:57.226 A:middle
one of the sensitive APIs.

00:32:59.666 --> 00:33:00.986 A:middle
While you might have your use

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.666 --> 00:33:00.986 A:middle
While you might have your use

00:33:00.986 --> 00:33:02.926 A:middle
case for using the sensor data

00:33:02.926 --> 00:33:05.166 A:middle
directly, we encourage you to

00:33:05.166 --> 00:33:07.626 A:middle
look at the DeviceMotion APIs

00:33:08.016 --> 00:33:09.176 A:middle
because our sensor fusion

00:33:09.176 --> 00:33:10.916 A:middle
algorithms handle the most

00:33:10.916 --> 00:33:11.526 A:middle
common case.

00:33:11.936 --> 00:33:13.026 A:middle
It eliminates those

00:33:13.026 --> 00:33:14.966 A:middle
environmental factors so that

00:33:14.966 --> 00:33:17.126 A:middle
you're able to focus on the

00:33:17.126 --> 00:33:18.496 A:middle
motion controls of your user.

00:33:20.546 --> 00:33:23.346 A:middle
The APIs provide you a smooth

00:33:23.346 --> 00:33:24.936 A:middle
and consistent experience across

00:33:24.936 --> 00:33:26.176 A:middle
all our supported devices.

00:33:26.726 --> 00:33:29.806 A:middle
And we've made enhancements this

00:33:29.806 --> 00:33:31.566 A:middle
release to make sure that when

00:33:31.566 --> 00:33:33.136 A:middle
you query for those updates you

00:33:33.136 --> 00:33:34.186 A:middle
do that in a very power

00:33:34.186 --> 00:33:34.796 A:middle
efficient manner.

00:33:34.796 --> 00:33:40.566 A:middle
Remember the two different ways

00:33:41.076 --> 00:33:42.276 A:middle
to query for updates.

00:33:43.156 --> 00:33:44.686 A:middle
Use the push when you want to

00:33:44.686 --> 00:33:46.476 A:middle
detect a gesture across a small

00:33:46.476 --> 00:33:47.226 A:middle
window of time.

00:33:48.646 --> 00:33:49.786 A:middle
And use the pull when

00:33:49.786 --> 00:33:51.816 A:middle
responsiveness is key, and you

00:33:51.816 --> 00:33:52.756 A:middle
want to know what the current

00:33:52.756 --> 00:33:57.436 A:middle
state of the device is.

00:33:58.116 --> 00:33:59.256 A:middle
Here are a couple of these

00:33:59.256 --> 00:34:00.356 A:middle
sessions that we think you might

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.256 --> 00:34:00.356 A:middle
sessions that we think you might

00:34:00.356 --> 00:34:01.196 A:middle
be interested in.

00:34:02.256 --> 00:34:03.386 A:middle
Please check them out.

00:34:04.196 --> 00:34:05.116 A:middle
And if you're interested in

00:34:05.116 --> 00:34:06.246 A:middle
learning more about the Badger

00:34:06.246 --> 00:34:07.426 A:middle
app, check out last year's

00:34:07.426 --> 00:34:08.246 A:middle
SceneKit session.

00:34:09.676 --> 00:34:11.085 A:middle
If you follow this link, you'll

00:34:11.085 --> 00:34:13.446 A:middle
be able to get at the sample

00:34:13.446 --> 00:34:14.496 A:middle
code and other Core Motion

00:34:14.496 --> 00:34:15.286 A:middle
documentation.

00:34:15.815 --> 00:34:19.476 A:middle
We thank you all for being here

00:34:19.476 --> 00:34:20.596 A:middle
and have a wonderful evening.

00:34:21.507 --> 00:34:23.507 A:middle
[ Applause ]

