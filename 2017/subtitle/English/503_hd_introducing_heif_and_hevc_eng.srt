WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:25.396 --> 00:00:27.536 A:middle
&gt;&gt; Welcome everyone and thank

00:00:27.536 --> 00:00:28.976 A:middle
you for coming to this session.

00:00:29.926 --> 00:00:31.226 A:middle
My name is Athar Shah.

00:00:31.226 --> 00:00:32.956 A:middle
And I'm a manager here at Apple

00:00:32.956 --> 00:00:34.286 A:middle
in the CoreMedia software team.

00:00:34.286 --> 00:00:36.276 A:middle
And we at Apple are really

00:00:36.276 --> 00:00:37.696 A:middle
excited to talk to you today

00:00:37.696 --> 00:00:39.396 A:middle
about two new media

00:00:39.396 --> 00:00:40.156 A:middle
technologies.

00:00:41.166 --> 00:00:42.326 A:middle
In particular, we're going to be

00:00:42.326 --> 00:00:44.756 A:middle
talking about a new codec for

00:00:44.756 --> 00:00:46.206 A:middle
video and image compression

00:00:46.776 --> 00:00:49.976 A:middle
called HEVC and a file format

00:00:49.976 --> 00:00:51.596 A:middle
for images that we're adopting

00:00:52.136 --> 00:00:52.816 A:middle
called HEIF.

00:00:54.156 --> 00:00:55.236 A:middle
But before we get into the

00:00:55.236 --> 00:00:57.516 A:middle
details, if you've downloaded

00:00:57.776 --> 00:00:59.666 A:middle
the developer seed, the latest

00:00:59.666 --> 00:01:01.526 A:middle
build, then on certain iOS

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.666 --> 00:01:01.526 A:middle
build, then on certain iOS

00:01:01.566 --> 00:01:03.926 A:middle
devices you are already

00:01:03.926 --> 00:01:06.206 A:middle
capturing and using these new

00:01:06.206 --> 00:01:08.026 A:middle
technologies and file formats.

00:01:08.806 --> 00:01:10.326 A:middle
And if you pay close attention,

00:01:10.326 --> 00:01:13.006 A:middle
you'll notice that these files

00:01:13.006 --> 00:01:15.016 A:middle
are a lot smaller than they used

00:01:15.016 --> 00:01:15.896 A:middle
to be.

00:01:16.006 --> 00:01:17.576 A:middle
Later on in the presentation,

00:01:17.576 --> 00:01:18.866 A:middle
Gavin will talk to you about the

00:01:18.866 --> 00:01:22.286 A:middle
specifics of our platforms and

00:01:22.286 --> 00:01:23.916 A:middle
how we support these

00:01:23.916 --> 00:01:25.626 A:middle
technologies in hardware and in

00:01:25.626 --> 00:01:26.186 A:middle
software.

00:01:26.776 --> 00:01:32.096 A:middle
So we're going to be going over

00:01:32.966 --> 00:01:34.516 A:middle
the landscape of media as it is

00:01:34.566 --> 00:01:36.396 A:middle
today, why we need to change.

00:01:36.896 --> 00:01:38.956 A:middle
We'll talk about what are HEVC

00:01:38.956 --> 00:01:41.716 A:middle
and HEIF and why we decided to

00:01:41.716 --> 00:01:43.036 A:middle
adopt them here at Apple.

00:01:43.486 --> 00:01:45.676 A:middle
And then finally, we'll give an

00:01:45.676 --> 00:01:48.516 A:middle
overview of how we've adopted

00:01:48.516 --> 00:01:49.706 A:middle
these technologies within the

00:01:49.706 --> 00:01:52.226 A:middle
Apple ecosystem and then also

00:01:52.306 --> 00:01:54.026 A:middle
provide some guidance on how you

00:01:54.026 --> 00:01:55.326 A:middle
can take advantage of these

00:01:55.386 --> 00:01:57.196 A:middle
within your apps for your use

00:01:57.196 --> 00:01:57.576 A:middle
cases.

00:01:57.936 --> 00:02:03.386 A:middle
So let's talk about media today.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.936 --> 00:02:03.386 A:middle
So let's talk about media today.

00:02:04.066 --> 00:02:06.576 A:middle
The world is becoming more and

00:02:06.576 --> 00:02:07.386 A:middle
more visual.

00:02:07.876 --> 00:02:10.436 A:middle
And both consumers and producers

00:02:10.616 --> 00:02:12.866 A:middle
are generating more and more

00:02:13.366 --> 00:02:15.156 A:middle
video and media related content.

00:02:16.036 --> 00:02:18.006 A:middle
Not only that, the content is

00:02:18.076 --> 00:02:20.226 A:middle
taking new forms like high

00:02:20.226 --> 00:02:23.966 A:middle
resolution 4K video, HDR video,

00:02:24.296 --> 00:02:26.396 A:middle
wide color or wide gamut video

00:02:26.396 --> 00:02:26.976 A:middle
and so on.

00:02:28.386 --> 00:02:29.736 A:middle
The nature of media is also

00:02:29.736 --> 00:02:33.036 A:middle
changing with, you know, our

00:02:33.036 --> 00:02:34.156 A:middle
personal favorite being live

00:02:34.156 --> 00:02:35.446 A:middle
photos but there's lots of

00:02:35.446 --> 00:02:36.866 A:middle
content out there, short-form

00:02:36.866 --> 00:02:38.476 A:middle
video and so one.

00:02:39.496 --> 00:02:41.166 A:middle
Bandwidth continues to be at a

00:02:41.166 --> 00:02:41.846 A:middle
premium.

00:02:42.106 --> 00:02:43.916 A:middle
And certain applications and use

00:02:43.916 --> 00:02:45.786 A:middle
cases like over-the-top video

00:02:45.786 --> 00:02:48.216 A:middle
delivery and wireless networks

00:02:49.086 --> 00:02:50.626 A:middle
place a premium on the amount of

00:02:50.626 --> 00:02:51.176 A:middle
bandwidth.

00:02:51.176 --> 00:02:53.086 A:middle
And anything we can do to reduce

00:02:53.086 --> 00:02:54.166 A:middle
the bandwidth requirements

00:02:54.166 --> 00:02:55.286 A:middle
really helps out those use

00:02:55.336 --> 00:02:55.816 A:middle
cases.

00:02:57.236 --> 00:03:00.316 A:middle
So we've been using H.264 and

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.236 --> 00:03:00.316 A:middle
So we've been using H.264 and

00:03:00.316 --> 00:03:01.576 A:middle
JPEG for a while.

00:03:01.996 --> 00:03:03.496 A:middle
There are limits to what these

00:03:03.586 --> 00:03:06.326 A:middle
codecs can do in this evolving

00:03:06.326 --> 00:03:07.466 A:middle
landscape with these new

00:03:07.466 --> 00:03:08.166 A:middle
challenges.

00:03:08.676 --> 00:03:11.006 A:middle
And that leads us to HEVC.

00:03:11.036 --> 00:03:13.116 A:middle
We were looking for a

00:03:13.116 --> 00:03:15.286 A:middle
next-generation codec that we

00:03:15.286 --> 00:03:18.166 A:middle
could use both for movies and

00:03:18.166 --> 00:03:19.506 A:middle
for photos or images.

00:03:20.066 --> 00:03:21.036 A:middle
And we were looking for

00:03:21.036 --> 00:03:22.156 A:middle
something that was going to give

00:03:22.156 --> 00:03:24.556 A:middle
us significant benefits over

00:03:24.806 --> 00:03:27.926 A:middle
what exists today.

00:03:28.096 --> 00:03:30.966 A:middle
So having evaluated our options,

00:03:31.126 --> 00:03:33.096 A:middle
we decided to select HEVC.

00:03:33.096 --> 00:03:37.066 A:middle
HEVC stands for High Efficiency

00:03:37.066 --> 00:03:37.866 A:middle
Video Coding.

00:03:38.496 --> 00:03:39.746 A:middle
It is a state-of-the-art

00:03:40.446 --> 00:03:41.966 A:middle
industry standard that was

00:03:41.966 --> 00:03:44.106 A:middle
adopted and approved in 2013.

00:03:45.176 --> 00:03:48.176 A:middle
It was ratified by ISO as MPEG-H

00:03:48.176 --> 00:03:52.686 A:middle
Part 2 and by ITU as H.265.

00:03:53.806 --> 00:03:55.156 A:middle
We're going to be calling it and

00:03:55.416 --> 00:03:57.406 A:middle
referring to it as HEVC.

00:03:57.476 --> 00:04:00.436 A:middle
And Apple is adopting it as its

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.476 --> 00:04:00.436 A:middle
And Apple is adopting it as its

00:04:00.436 --> 00:04:02.546 A:middle
next-generation codec.

00:04:03.876 --> 00:04:05.296 A:middle
So we'll spend a couple of

00:04:05.296 --> 00:04:07.646 A:middle
minutes talking about what makes

00:04:07.646 --> 00:04:09.456 A:middle
HEVC such a great codec.

00:04:09.656 --> 00:04:13.526 A:middle
Now HEVC is similar to H.264 in

00:04:13.526 --> 00:04:15.036 A:middle
that it is a codec that

00:04:15.266 --> 00:04:18.696 A:middle
processes videos and frames in

00:04:18.696 --> 00:04:19.565 A:middle
blocks.

00:04:20.136 --> 00:04:23.106 A:middle
And it uses temporal and spatial

00:04:23.136 --> 00:04:24.986 A:middle
compression techniques to get

00:04:24.986 --> 00:04:26.176 A:middle
the compression benefits.

00:04:26.426 --> 00:04:29.766 A:middle
Now H.264 has a notion of macro

00:04:29.766 --> 00:04:32.866 A:middle
blocks, which are 16 by 16 size

00:04:32.866 --> 00:04:34.756 A:middle
blocks that are used within the

00:04:34.756 --> 00:04:36.246 A:middle
codec for processing.

00:04:36.926 --> 00:04:40.576 A:middle
HEVC introduces notion of CTUs

00:04:40.576 --> 00:04:41.646 A:middle
or coding tree units.

00:04:42.116 --> 00:04:43.526 A:middle
And these it start down at 4 by

00:04:43.526 --> 00:04:48.236 A:middle
4 and go all the way up to 64 by

00:04:48.236 --> 00:04:48.936 A:middle
64.

00:04:49.906 --> 00:04:51.836 A:middle
And it's when you can use these

00:04:51.926 --> 00:04:55.196 A:middle
larger sizes is when you realize

00:04:55.246 --> 00:04:56.536 A:middle
the greater compression benefit.

00:04:57.626 --> 00:05:00.136 A:middle
And this is especially true when

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.626 --> 00:05:00.136 A:middle
And this is especially true when

00:05:00.136 --> 00:05:01.156 A:middle
you're dealing with high

00:05:01.156 --> 00:05:04.036 A:middle
resolution videos and images.

00:05:04.036 --> 00:05:06.166 A:middle
You can really take advantage of

00:05:07.016 --> 00:05:07.126 A:middle
this.

00:05:07.316 --> 00:05:10.716 A:middle
Similarly, H.264 had 4 by 4 and

00:05:10.716 --> 00:05:13.946 A:middle
8 by 8 DCT or discrete cosine

00:05:13.946 --> 00:05:18.696 A:middle
transform, whereas HEVC not only

00:05:18.696 --> 00:05:20.026 A:middle
uses a discrete cosine

00:05:20.026 --> 00:05:21.706 A:middle
transform, it also uses a DST,

00:05:21.706 --> 00:05:23.286 A:middle
distribute sine transform.

00:05:23.796 --> 00:05:25.306 A:middle
And similarly, with the coding

00:05:25.306 --> 00:05:27.506 A:middle
block sizes for the transform

00:05:27.506 --> 00:05:30.406 A:middle
blocks, it also goes up to 32 by

00:05:30.406 --> 00:05:30.956 A:middle
32.

00:05:31.546 --> 00:05:34.326 A:middle
To get better spatial

00:05:34.326 --> 00:05:36.926 A:middle
compression, HEVC introduces

00:05:36.926 --> 00:05:38.476 A:middle
additional directional modes.

00:05:38.476 --> 00:05:41.696 A:middle
While H.264 had up to 9, HEVC

00:05:41.696 --> 00:05:43.586 A:middle
has up to 35.

00:05:44.306 --> 00:05:48.546 A:middle
A key part of being able to do a

00:05:48.756 --> 00:05:50.116 A:middle
high degree of compression

00:05:50.116 --> 00:05:51.786 A:middle
involves motion estimation or

00:05:51.786 --> 00:05:53.376 A:middle
motion compensation.

00:05:54.126 --> 00:05:56.876 A:middle
And this is where you try to

00:05:56.876 --> 00:05:59.016 A:middle
find -- you basically have a

00:05:59.016 --> 00:06:01.386 A:middle
block in your current image that

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.016 --> 00:06:01.386 A:middle
block in your current image that

00:06:01.386 --> 00:06:03.166 A:middle
you're trying to predict from a

00:06:03.226 --> 00:06:04.186 A:middle
previous image.

00:06:04.186 --> 00:06:05.346 A:middle
And what you can do is say, you

00:06:05.346 --> 00:06:05.696 A:middle
know what?

00:06:06.046 --> 00:06:08.036 A:middle
This block is that same block

00:06:08.036 --> 00:06:09.646 A:middle
from the past but moved over by

00:06:09.646 --> 00:06:10.916 A:middle
a certain number of pixels.

00:06:11.826 --> 00:06:15.176 A:middle
Sometimes you don't always land

00:06:15.176 --> 00:06:16.116 A:middle
in a pixel's boundary.

00:06:16.116 --> 00:06:17.326 A:middle
For example, you know, something

00:06:17.326 --> 00:06:18.516 A:middle
could have moved five pixels

00:06:18.516 --> 00:06:19.246 A:middle
over but it could have moved

00:06:19.246 --> 00:06:20.716 A:middle
five-and-a-half pixels over or

00:06:20.716 --> 00:06:22.196 A:middle
five-and-a-quarter pixels over.

00:06:23.266 --> 00:06:24.266 A:middle
When you need to do motion

00:06:24.266 --> 00:06:26.556 A:middle
estimation at that half pixel or

00:06:26.556 --> 00:06:28.486 A:middle
quarter pixel boundary, you need

00:06:28.486 --> 00:06:29.636 A:middle
to be able to generate those

00:06:29.636 --> 00:06:30.976 A:middle
pixels with accuracy and

00:06:30.976 --> 00:06:32.516 A:middle
precision because those don't

00:06:32.516 --> 00:06:32.856 A:middle
exist.

00:06:32.856 --> 00:06:33.876 A:middle
You just have to pixels at the

00:06:33.876 --> 00:06:34.496 A:middle
boundaries.

00:06:35.056 --> 00:06:37.916 A:middle
And so as you can see, HEVC has

00:06:37.916 --> 00:06:40.576 A:middle
advanced filtering which can be

00:06:40.576 --> 00:06:43.056 A:middle
used to generate those sub-pel

00:06:43.056 --> 00:06:45.086 A:middle
and quarter-pel pixels with much

00:06:45.086 --> 00:06:46.526 A:middle
more accuracy and precision.

00:06:46.806 --> 00:06:47.946 A:middle
And that leads to better motion

00:06:47.946 --> 00:06:49.876 A:middle
estimation compensation and,

00:06:49.876 --> 00:06:51.956 A:middle
hence, better compression.

00:06:53.166 --> 00:06:54.776 A:middle
Finally, if you're familiar with

00:06:55.056 --> 00:06:57.116 A:middle
block-based codecs, we talked

00:06:57.116 --> 00:06:59.986 A:middle
about H.264 having macro blocks,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.366 --> 00:07:01.896 A:middle
sometimes you can actually see

00:07:01.896 --> 00:07:04.816 A:middle
in the coded video, artifacts

00:07:04.816 --> 00:07:06.966 A:middle
around the edges of that block.

00:07:06.966 --> 00:07:07.786 A:middle
We call those blocking

00:07:07.786 --> 00:07:08.296 A:middle
artifacts.

00:07:08.296 --> 00:07:12.466 A:middle
H.264 introduced a loop filter

00:07:12.916 --> 00:07:15.316 A:middle
called the deblocking filter

00:07:15.656 --> 00:07:17.006 A:middle
that helps get rid of a lot of

00:07:17.006 --> 00:07:17.936 A:middle
those artifacts.

00:07:18.366 --> 00:07:20.016 A:middle
Now HEVC improves upon that

00:07:20.076 --> 00:07:22.256 A:middle
filter, but it takes it a step

00:07:22.336 --> 00:07:23.896 A:middle
further and introduces a second

00:07:23.896 --> 00:07:26.096 A:middle
sequential step where we run a

00:07:26.136 --> 00:07:27.986 A:middle
sample adaptive offset filter

00:07:28.226 --> 00:07:29.196 A:middle
which gives us even better

00:07:29.196 --> 00:07:29.736 A:middle
results.

00:07:30.266 --> 00:07:31.206 A:middle
So now these are some of the

00:07:31.206 --> 00:07:33.276 A:middle
highlights that give us a better

00:07:33.276 --> 00:07:35.746 A:middle
compression in HEVC.

00:07:35.746 --> 00:07:36.606 A:middle
And there is more.

00:07:37.406 --> 00:07:38.846 A:middle
So having said that, how much

00:07:38.846 --> 00:07:40.206 A:middle
improvement are we talking

00:07:40.206 --> 00:07:40.546 A:middle
about?

00:07:41.896 --> 00:07:42.976 A:middle
And this is why we're excited

00:07:42.976 --> 00:07:44.496 A:middle
about introducing this next

00:07:44.496 --> 00:07:45.756 A:middle
generation codec at Apple.

00:07:46.546 --> 00:07:47.956 A:middle
In the case of general video

00:07:47.956 --> 00:07:50.036 A:middle
content, we're seeing an up to

00:07:50.036 --> 00:07:52.206 A:middle
40 percent compression

00:07:52.206 --> 00:07:54.186 A:middle
improvement over H.264.

00:07:54.876 --> 00:07:56.336 A:middle
So you can generate the same

00:07:56.336 --> 00:07:57.836 A:middle
quality video as you were doing

00:07:57.836 --> 00:07:59.656 A:middle
previously but reduced 40

00:07:59.656 --> 00:08:00.896 A:middle
percent less bandwidth.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.656 --> 00:08:00.896 A:middle
percent less bandwidth.

00:08:01.256 --> 00:08:02.356 A:middle
Or you could keep the same

00:08:02.356 --> 00:08:03.686 A:middle
bandwidth and significantly

00:08:03.686 --> 00:08:05.646 A:middle
improve the video quality.

00:08:06.106 --> 00:08:07.436 A:middle
And we've done quite a bit of

00:08:07.436 --> 00:08:09.366 A:middle
subjective and objective testing

00:08:09.726 --> 00:08:11.036 A:middle
to fine-tune the video to

00:08:11.036 --> 00:08:12.086 A:middle
realize these benefits.

00:08:13.306 --> 00:08:15.016 A:middle
In some use cases, we're seeing

00:08:15.016 --> 00:08:16.196 A:middle
an even greater benefit.

00:08:16.836 --> 00:08:18.586 A:middle
So we've really optimized our

00:08:18.586 --> 00:08:20.316 A:middle
end-to-end pipeline with the iOS

00:08:20.396 --> 00:08:21.266 A:middle
Camera Capture.

00:08:21.706 --> 00:08:23.286 A:middle
And in this use case, we're

00:08:23.286 --> 00:08:25.546 A:middle
seeing an up to 2x improvement

00:08:25.546 --> 00:08:27.166 A:middle
over H.264.

00:08:27.906 --> 00:08:29.136 A:middle
What this means is you're able

00:08:29.136 --> 00:08:30.796 A:middle
to now store twice as many

00:08:30.796 --> 00:08:33.336 A:middle
movies as you could previously

00:08:33.336 --> 00:08:34.556 A:middle
with H.264.

00:08:35.106 --> 00:08:38.895 A:middle
Let's talk a little bit about

00:08:38.966 --> 00:08:40.756 A:middle
the specifics of what we are

00:08:40.756 --> 00:08:41.336 A:middle
supporting.

00:08:41.996 --> 00:08:45.976 A:middle
Like H.264, HEVC also has the

00:08:45.976 --> 00:08:47.096 A:middle
notion of profiles.

00:08:47.826 --> 00:08:49.906 A:middle
And in HEVC, we're supporting

00:08:49.906 --> 00:08:52.766 A:middle
the Main profile, the Main Still

00:08:52.766 --> 00:08:54.706 A:middle
Picture profile, and finally the

00:08:54.706 --> 00:08:56.066 A:middle
Main 10 profile.

00:08:56.656 --> 00:08:59.006 A:middle
So with the Main 10 profile, we

00:08:59.006 --> 00:09:01.176 A:middle
are now able to encode and

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.006 --> 00:09:01.176 A:middle
are now able to encode and

00:09:01.176 --> 00:09:03.416 A:middle
decode video with 10-bit

00:09:03.466 --> 00:09:04.076 A:middle
precision.

00:09:04.686 --> 00:09:05.616 A:middle
This means that you can

00:09:05.616 --> 00:09:07.436 A:middle
represent more gray scales and

00:09:07.436 --> 00:09:09.316 A:middle
more colors and increase the

00:09:09.316 --> 00:09:11.106 A:middle
overall quality of the video

00:09:11.476 --> 00:09:13.196 A:middle
end-to-end across our pipeline.

00:09:13.686 --> 00:09:20.336 A:middle
With HEVC, we are requiring the

00:09:20.336 --> 00:09:22.586 A:middle
hvc1 codec type for playback.

00:09:23.506 --> 00:09:25.046 A:middle
This means that the parameter

00:09:25.046 --> 00:09:26.566 A:middle
sets have to be stored in the

00:09:26.566 --> 00:09:28.966 A:middle
decoder configuration record as

00:09:28.966 --> 00:09:30.426 A:middle
opposed to within the samples or

00:09:30.426 --> 00:09:31.976 A:middle
the payload itself.

00:09:32.506 --> 00:09:33.916 A:middle
So make sure when you are

00:09:33.946 --> 00:09:36.416 A:middle
creating HEVC assets that they

00:09:36.416 --> 00:09:39.246 A:middle
are the hvc1 codec type to

00:09:39.246 --> 00:09:40.906 A:middle
enable playback within the Apple

00:09:40.906 --> 00:09:41.516 A:middle
ecosystem.

00:09:45.276 --> 00:09:47.916 A:middle
Finally, we're lucky in that we

00:09:47.916 --> 00:09:49.326 A:middle
can take advantage of the fact

00:09:49.326 --> 00:09:51.726 A:middle
that HEVC naturally fits into

00:09:51.726 --> 00:09:53.716 A:middle
the existing file formats.

00:09:54.166 --> 00:09:55.696 A:middle
So it fits in nicely within the

00:09:55.696 --> 00:09:57.616 A:middle
QuickTime movie file format as

00:09:57.616 --> 00:10:00.076 A:middle
well as the ISO MPEG-4 file

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:57.616 --> 00:10:00.076 A:middle
well as the ISO MPEG-4 file

00:10:00.136 --> 00:10:00.556 A:middle
format.

00:10:03.276 --> 00:10:05.586 A:middle
So we picked a technology that

00:10:05.586 --> 00:10:07.046 A:middle
is well supported within the

00:10:07.046 --> 00:10:08.926 A:middle
industry and within Apple's

00:10:08.926 --> 00:10:09.576 A:middle
ecosystem.

00:10:10.476 --> 00:10:11.466 A:middle
It has both hardware and

00:10:11.466 --> 00:10:12.336 A:middle
software support.

00:10:12.816 --> 00:10:13.596 A:middle
And later on in the

00:10:13.596 --> 00:10:15.296 A:middle
presentation, Gavin will go into

00:10:15.296 --> 00:10:18.706 A:middle
the details about where and how

00:10:18.706 --> 00:10:19.406 A:middle
that's supported.

00:10:22.456 --> 00:10:24.616 A:middle
It works already with the file

00:10:24.616 --> 00:10:26.136 A:middle
formats that we've talked about.

00:10:26.136 --> 00:10:27.556 A:middle
So it's supporting the QuickTime

00:10:27.556 --> 00:10:29.296 A:middle
movie file format and within the

00:10:29.296 --> 00:10:30.576 A:middle
MPEG-4 file format.

00:10:31.346 --> 00:10:33.246 A:middle
And finally, it's an ideal codec

00:10:33.616 --> 00:10:36.226 A:middle
for both movies as well as still

00:10:36.226 --> 00:10:38.466 A:middle
images, allowing us to use it in

00:10:38.466 --> 00:10:41.436 A:middle
place of H.264 and JPEG.

00:10:42.046 --> 00:10:43.756 A:middle
Now as I've mentioned, HEVC can

00:10:43.756 --> 00:10:45.676 A:middle
use the existing movie file

00:10:45.676 --> 00:10:46.286 A:middle
formats.

00:10:46.766 --> 00:10:49.006 A:middle
That's not the case for when we

00:10:49.006 --> 00:10:50.386 A:middle
want to use it for photos or

00:10:50.386 --> 00:10:50.926 A:middle
images.

00:10:51.336 --> 00:10:53.416 A:middle
So we needed to find a different

00:10:53.446 --> 00:10:54.796 A:middle
file format that we could use

00:10:54.796 --> 00:10:56.966 A:middle
for images that would allow us

00:10:57.056 --> 00:10:59.216 A:middle
to use HEVC as the codec and

00:10:59.626 --> 00:11:01.836 A:middle
that's where HEIF comes in.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.626 --> 00:11:01.836 A:middle
that's where HEIF comes in.

00:11:03.336 --> 00:11:05.646 A:middle
So before we get into HEIF,

00:11:05.786 --> 00:11:07.066 A:middle
let's talk a little bit about

00:11:07.066 --> 00:11:09.036 A:middle
the requirements that we wanted

00:11:09.146 --> 00:11:12.066 A:middle
satisfied when adopting a new

00:11:12.066 --> 00:11:13.986 A:middle
file format for images.

00:11:15.176 --> 00:11:16.196 A:middle
We wanted support for

00:11:16.196 --> 00:11:17.806 A:middle
state-of-the-art compression

00:11:17.806 --> 00:11:19.776 A:middle
technology with HEVC being the

00:11:19.776 --> 00:11:21.156 A:middle
primary consideration.

00:11:22.446 --> 00:11:24.666 A:middle
We wanted explicit support for

00:11:24.666 --> 00:11:26.386 A:middle
alpha and depth channels as

00:11:26.446 --> 00:11:27.986 A:middle
primary asset types.

00:11:29.026 --> 00:11:31.356 A:middle
We needed support for animation

00:11:31.726 --> 00:11:34.566 A:middle
with animated GIF or GIF and

00:11:34.566 --> 00:11:35.526 A:middle
Live Photo.

00:11:35.896 --> 00:11:39.356 A:middle
In addition to just still image

00:11:39.356 --> 00:11:41.696 A:middle
support, we wanted support for

00:11:41.696 --> 00:11:43.956 A:middle
image sequences, to be able to

00:11:43.956 --> 00:11:45.456 A:middle
compress and represent those in

00:11:45.456 --> 00:11:47.486 A:middle
a file format such as what

00:11:47.646 --> 00:11:49.086 A:middle
happens when you're dealing with

00:11:49.086 --> 00:11:49.966 A:middle
bursts of photos.

00:11:50.486 --> 00:11:53.536 A:middle
And finally, with images getting

00:11:53.536 --> 00:11:55.636 A:middle
larger and larger in size, it

00:11:55.636 --> 00:11:57.996 A:middle
was important for us to be able

00:11:57.996 --> 00:11:59.726 A:middle
to process these efficiently

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.116 --> 00:12:01.226 A:middle
with low latency and a

00:12:01.226 --> 00:12:02.646 A:middle
reasonable amount of

00:12:03.136 --> 00:12:03.946 A:middle
performance.

00:12:04.246 --> 00:12:05.376 A:middle
So when you've got a massive

00:12:05.376 --> 00:12:07.196 A:middle
image, you want to be able to

00:12:07.496 --> 00:12:09.616 A:middle
download it and start to preview

00:12:09.616 --> 00:12:10.596 A:middle
it immediately.

00:12:10.936 --> 00:12:12.296 A:middle
And if you're interested in a

00:12:12.336 --> 00:12:14.006 A:middle
particular smaller region in a

00:12:14.006 --> 00:12:16.366 A:middle
much wider image, you want to be

00:12:16.366 --> 00:12:18.626 A:middle
able to just decode and process

00:12:18.686 --> 00:12:20.316 A:middle
the relevant tiles.

00:12:20.836 --> 00:12:21.646 A:middle
And so we were looking for

00:12:21.646 --> 00:12:23.016 A:middle
something that would allow us to

00:12:23.016 --> 00:12:26.316 A:middle
take advantage of this kind of a

00:12:27.056 --> 00:12:27.906 A:middle
pipeline.

00:12:28.206 --> 00:12:29.856 A:middle
So with these requirements in

00:12:29.856 --> 00:12:31.446 A:middle
mind, we looked at a few options

00:12:31.716 --> 00:12:32.936 A:middle
and we selected HEIF.

00:12:34.076 --> 00:12:35.736 A:middle
HEIF stands for High Efficiency

00:12:35.736 --> 00:12:36.686 A:middle
Image File Format.

00:12:37.606 --> 00:12:40.566 A:middle
And like HEVC, it is also an

00:12:40.566 --> 00:12:42.246 A:middle
industry standard that was

00:12:42.246 --> 00:12:45.096 A:middle
ratified by ISO in 2015.

00:12:45.676 --> 00:12:49.036 A:middle
It's based on the familiar ISO

00:12:49.036 --> 00:12:50.696 A:middle
Base Media File Format.

00:12:51.316 --> 00:12:54.346 A:middle
It is extremely feature-rich.

00:12:55.476 --> 00:12:57.356 A:middle
And it supports both individual

00:12:57.356 --> 00:12:58.926 A:middle
images and sequences.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.076 --> 00:13:02.086 A:middle
There are many use cases in

00:13:02.086 --> 00:13:03.486 A:middle
addition to that, that are

00:13:03.486 --> 00:13:04.826 A:middle
supported by this file format

00:13:05.376 --> 00:13:06.406 A:middle
which allows for future

00:13:06.406 --> 00:13:07.296 A:middle
extensibility.

00:13:07.856 --> 00:13:12.966 A:middle
It typically uses HEVC for

00:13:12.966 --> 00:13:13.766 A:middle
compression.

00:13:13.806 --> 00:13:15.086 A:middle
It has the option where you can

00:13:15.086 --> 00:13:16.406 A:middle
use other encoders.

00:13:16.706 --> 00:13:18.256 A:middle
But at Apple, when we're

00:13:18.256 --> 00:13:20.716 A:middle
generating HEIF assets, they

00:13:20.716 --> 00:13:24.226 A:middle
will only be using the HEVC

00:13:25.156 --> 00:13:25.376 A:middle
encoder.

00:13:25.466 --> 00:13:26.926 A:middle
So why do all this for images?

00:13:28.176 --> 00:13:29.886 A:middle
We saw the benefits for movies

00:13:29.886 --> 00:13:30.746 A:middle
and videos.

00:13:31.266 --> 00:13:33.036 A:middle
And for images, we're also

00:13:33.036 --> 00:13:34.416 A:middle
seeing tremendous gains over

00:13:34.416 --> 00:13:34.906 A:middle
JPEG.

00:13:35.336 --> 00:13:38.386 A:middle
So now using HEVC within HEIF,

00:13:39.176 --> 00:13:41.136 A:middle
you're able to capture and store

00:13:41.236 --> 00:13:44.146 A:middle
twice as many images as you were

00:13:44.146 --> 00:13:46.196 A:middle
able to previously with JPEG.

00:13:46.706 --> 00:13:50.016 A:middle
Let's talk a little bit about

00:13:50.076 --> 00:13:52.676 A:middle
the different formats of HEIF

00:13:52.676 --> 00:13:53.586 A:middle
that we are supporting.

00:13:54.176 --> 00:13:57.186 A:middle
So as I mentioned from encode or

00:13:57.186 --> 00:13:58.776 A:middle
asset creation perspective,

00:13:59.246 --> 00:14:01.186 A:middle
we're going to be using the HEVC

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.246 --> 00:14:01.186 A:middle
we're going to be using the HEVC

00:14:01.186 --> 00:14:03.416 A:middle
encoder, which means we're going

00:14:03.416 --> 00:14:06.046 A:middle
to be generating the .heic file

00:14:06.046 --> 00:14:07.116 A:middle
extension or .heic.

00:14:07.116 --> 00:14:09.956 A:middle
So that's what we're doing from

00:14:10.006 --> 00:14:11.446 A:middle
asset generation perspective.

00:14:11.446 --> 00:14:13.516 A:middle
So we'll be able to create and

00:14:13.516 --> 00:14:14.626 A:middle
play back those files.

00:14:15.276 --> 00:14:17.306 A:middle
In terms of playback, we're also

00:14:17.306 --> 00:14:20.566 A:middle
going to support decoding H.264

00:14:20.696 --> 00:14:24.576 A:middle
HEIF images and, more generally,

00:14:24.916 --> 00:14:26.086 A:middle
if there's another codec that's

00:14:26.086 --> 00:14:27.566 A:middle
supported within our system,

00:14:27.936 --> 00:14:29.836 A:middle
we'll also be able to decode and

00:14:29.836 --> 00:14:31.986 A:middle
display those HEIF files.

00:14:36.716 --> 00:14:38.796 A:middle
There is a great video that one

00:14:38.866 --> 00:14:39.716 A:middle
of our colleagues [inaudible]

00:14:39.716 --> 00:14:42.016 A:middle
has done which will provide more

00:14:42.016 --> 00:14:44.636 A:middle
information into the HEIF file

00:14:44.636 --> 00:14:45.146 A:middle
format.

00:14:45.176 --> 00:14:46.186 A:middle
So -- and I think he'll be

00:14:46.186 --> 00:14:48.116 A:middle
posted sometime later today or

00:14:48.116 --> 00:14:48.596 A:middle
tomorrow.

00:14:49.006 --> 00:14:50.726 A:middle
So please be sure to check that

00:14:50.726 --> 00:14:52.726 A:middle
out if you want more details

00:14:53.186 --> 00:14:56.276 A:middle
about the HEIF file format, the

00:14:56.276 --> 00:14:57.816 A:middle
different atom types, and how to

00:14:57.816 --> 00:14:59.746 A:middle
parse the file and process it.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:01.396 --> 00:15:02.786 A:middle
So now that we've talked about

00:15:02.786 --> 00:15:04.256 A:middle
these new technologies, what

00:15:04.336 --> 00:15:06.546 A:middle
they are and why we decided to

00:15:06.546 --> 00:15:08.786 A:middle
select them at Apple, we'd like

00:15:08.786 --> 00:15:10.696 A:middle
to talk to you about how we are

00:15:10.696 --> 00:15:12.316 A:middle
using them within the Apple

00:15:12.316 --> 00:15:14.416 A:middle
ecosystem and then also provide

00:15:14.416 --> 00:15:16.626 A:middle
some guidance on what you can do

00:15:16.626 --> 00:15:17.486 A:middle
with these fantastic

00:15:17.486 --> 00:15:19.056 A:middle
technologies in your apps and

00:15:19.056 --> 00:15:19.696 A:middle
use cases.

00:15:20.656 --> 00:15:22.206 A:middle
And to talk you through that,

00:15:22.206 --> 00:15:23.896 A:middle
I'd like to hand things over to

00:15:23.896 --> 00:15:24.586 A:middle
Gavin Thomson.

00:15:25.516 --> 00:15:31.276 A:middle
[ Applause ]

00:15:31.776 --> 00:15:32.206 A:middle
&gt;&gt; Thanks Athar.

00:15:32.666 --> 00:15:34.176 A:middle
So my name is Gavin Thomson.

00:15:34.176 --> 00:15:35.466 A:middle
I'm one of the engineering

00:15:35.556 --> 00:15:36.886 A:middle
managers for the camera and

00:15:36.886 --> 00:15:38.186 A:middle
photo organization at Apple.

00:15:40.456 --> 00:15:46.966 A:middle
OK. So with -- we just learned a

00:15:47.176 --> 00:15:48.536 A:middle
lot of the great benefits of

00:15:48.536 --> 00:15:49.766 A:middle
HEIF and HEVC.

00:15:49.766 --> 00:15:51.266 A:middle
But what are the ecosystem

00:15:51.266 --> 00:15:52.016 A:middle
implications?

00:15:52.676 --> 00:15:54.606 A:middle
So at Apple, we've been working

00:15:54.606 --> 00:15:56.656 A:middle
over the last year to adopt HEIF

00:15:56.656 --> 00:15:57.966 A:middle
and HEVC into the Apple

00:15:57.966 --> 00:15:58.686 A:middle
ecosystem.

00:15:59.066 --> 00:16:01.856 A:middle
So today I would like to share,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.066 --> 00:16:01.856 A:middle
So today I would like to share,

00:16:01.936 --> 00:16:03.156 A:middle
talk about that adoption and

00:16:03.156 --> 00:16:04.356 A:middle
share the changes that were made

00:16:04.356 --> 00:16:05.786 A:middle
to help with that transition.

00:16:06.826 --> 00:16:07.976 A:middle
Our goal is to make the

00:16:07.976 --> 00:16:09.226 A:middle
introduction of these new

00:16:09.226 --> 00:16:10.906 A:middle
formats as transparent as

00:16:10.906 --> 00:16:11.346 A:middle
possible.

00:16:11.976 --> 00:16:13.986 A:middle
So there are three topics that I

00:16:13.986 --> 00:16:15.156 A:middle
would like to talk about.

00:16:16.366 --> 00:16:18.706 A:middle
First is creation: How and where

00:16:18.706 --> 00:16:20.026 A:middle
we can create HEIF image and

00:16:20.026 --> 00:16:21.106 A:middle
HEVC movie content.

00:16:22.556 --> 00:16:25.176 A:middle
There is access: How and where

00:16:25.176 --> 00:16:27.306 A:middle
to access HEIF and HEVC movie

00:16:27.306 --> 00:16:27.826 A:middle
content.

00:16:28.556 --> 00:16:31.136 A:middle
And finally transfer: So what

00:16:31.136 --> 00:16:32.116 A:middle
strategies do you need to

00:16:32.116 --> 00:16:33.846 A:middle
consider when you want to move

00:16:33.846 --> 00:16:36.046 A:middle
HEIF or HEVC content off a

00:16:36.046 --> 00:16:37.486 A:middle
capture or supported device?

00:16:37.486 --> 00:16:44.176 A:middle
So first I'd like to start with

00:16:44.176 --> 00:16:44.736 A:middle
access.

00:16:44.986 --> 00:16:46.696 A:middle
So we've discussed the

00:16:46.696 --> 00:16:48.316 A:middle
extensibility of the HEIF format

00:16:48.316 --> 00:16:48.946 A:middle
for images.

00:16:49.426 --> 00:16:49.926 A:middle
What are some of the

00:16:49.926 --> 00:16:51.276 A:middle
characteristics of the Apple

00:16:51.276 --> 00:16:52.436 A:middle
generated HEIF images?

00:16:52.436 --> 00:16:56.536 A:middle
So as we heard, the file format

00:16:56.536 --> 00:16:58.106 A:middle
is an ISO Base Media format.

00:16:58.796 --> 00:17:00.116 A:middle
So those of you that have look

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.796 --> 00:17:00.116 A:middle
So those of you that have look

00:17:00.116 --> 00:17:02.246 A:middle
at the internals of the MP4 or a

00:17:02.246 --> 00:17:04.056 A:middle
QuickTime movie file, be very

00:17:04.056 --> 00:17:04.955 A:middle
familiar with the internal

00:17:04.955 --> 00:17:06.256 A:middle
structure as they're based on

00:17:06.256 --> 00:17:07.096 A:middle
the same standard.

00:17:07.665 --> 00:17:08.986 A:middle
So I want to reiterate here,

00:17:09.286 --> 00:17:11.046 A:middle
HEIF is a container format.

00:17:11.806 --> 00:17:12.965 A:middle
Not too similar to the QuickTime

00:17:12.965 --> 00:17:14.195 A:middle
movie file format.

00:17:14.866 --> 00:17:16.236 A:middle
It's got many more options and a

00:17:16.236 --> 00:17:18.636 A:middle
lot more flexibility than a JPEG

00:17:18.685 --> 00:17:19.476 A:middle
file format.

00:17:21.586 --> 00:17:23.836 A:middle
Now, our image payload is

00:17:23.836 --> 00:17:25.576 A:middle
encoded using HEVC.

00:17:26.156 --> 00:17:27.116 A:middle
And as we've learned, that

00:17:27.116 --> 00:17:28.586 A:middle
provides great compression

00:17:28.586 --> 00:17:30.506 A:middle
improvements over JPEG, up to

00:17:33.056 --> 00:17:33.246 A:middle
2x.

00:17:33.376 --> 00:17:35.236 A:middle
We also encode the image payload

00:17:35.236 --> 00:17:38.066 A:middle
as 512 by 512 tiles.

00:17:38.066 --> 00:17:39.366 A:middle
And amongst other advantages,

00:17:39.366 --> 00:17:40.886 A:middle
that provides great flexibility

00:17:41.016 --> 00:17:42.746 A:middle
for fast incremental loading of

00:17:42.746 --> 00:17:44.116 A:middle
high resolution content.

00:17:44.556 --> 00:17:49.256 A:middle
We also have a 320 by 240

00:17:49.256 --> 00:17:51.406 A:middle
embedded thumbnail, which is

00:17:51.476 --> 00:17:53.246 A:middle
four times the resolution but

00:17:53.246 --> 00:17:55.196 A:middle
only twice the size of our

00:17:55.196 --> 00:17:58.216 A:middle
current 160 by 120 JPEG embedded

00:17:58.216 --> 00:17:58.786 A:middle
thumbnail.

00:17:59.266 --> 00:18:00.076 A:middle
Why can we do this?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.266 --> 00:18:00.076 A:middle
Why can we do this?

00:18:00.076 --> 00:18:01.486 A:middle
Because the thumbnail was also

00:18:01.656 --> 00:18:03.886 A:middle
encoded using HEVC.

00:18:05.276 --> 00:18:08.176 A:middle
We still support an image, Exif

00:18:08.176 --> 00:18:10.826 A:middle
metadata payload compatible with

00:18:10.826 --> 00:18:11.796 A:middle
the payload that we capture in

00:18:11.796 --> 00:18:12.726 A:middle
our JPEG format.

00:18:12.726 --> 00:18:18.826 A:middle
So HEIF with the HEVC encoded

00:18:18.826 --> 00:18:20.176 A:middle
image will be identified in the

00:18:20.176 --> 00:18:22.146 A:middle
file system with a new extension

00:18:22.146 --> 00:18:24.996 A:middle
.heic or .heic as we call it.

00:18:24.996 --> 00:18:27.466 A:middle
So some will know this is a

00:18:27.466 --> 00:18:30.136 A:middle
breakaway from the DCF 8.3

00:18:30.506 --> 00:18:31.606 A:middle
filenaming convention.

00:18:32.146 --> 00:18:33.346 A:middle
So if you have any assumptions

00:18:33.376 --> 00:18:34.936 A:middle
with your file name parses of

00:18:35.166 --> 00:18:35.776 A:middle
[inaudible] three character

00:18:35.776 --> 00:18:37.446 A:middle
extension, we now have the

00:18:37.446 --> 00:18:39.256 A:middle
default still capture format

00:18:39.296 --> 00:18:40.346 A:middle
that has four characters.

00:18:43.556 --> 00:18:45.846 A:middle
So where is HEIF decode

00:18:45.846 --> 00:18:46.426 A:middle
supported?

00:18:46.646 --> 00:18:50.146 A:middle
It's supported on all of our --

00:18:50.146 --> 00:18:50.976 A:middle
it's available on all of our

00:18:50.976 --> 00:18:52.676 A:middle
supported platforms that have

00:18:52.676 --> 00:18:55.526 A:middle
macOS 10.3 or iOS 11 installed

00:18:56.036 --> 00:18:56.816 A:middle
but there's a variety of

00:18:56.816 --> 00:18:59.546 A:middle
hardware and software support.

00:18:59.626 --> 00:19:01.906 A:middle
For iOS, we have hardware decode

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.626 --> 00:19:01.906 A:middle
For iOS, we have hardware decode

00:19:01.906 --> 00:19:03.756 A:middle
on the minimum config of the A9

00:19:03.756 --> 00:19:04.036 A:middle
chip.

00:19:04.606 --> 00:19:05.716 A:middle
An example, of which, is the

00:19:05.716 --> 00:19:07.766 A:middle
iPhone 6S or the iPad Pro.

00:19:08.996 --> 00:19:10.546 A:middle
On macOS, we have hardware

00:19:10.546 --> 00:19:11.506 A:middle
decode support on the

00:19:11.506 --> 00:19:13.266 A:middle
sixth-generation Intel Core,

00:19:13.266 --> 00:19:14.596 A:middle
which is the Skylake family of

00:19:14.596 --> 00:19:15.296 A:middle
processors.

00:19:16.016 --> 00:19:18.686 A:middle
An example of that machine is

00:19:18.726 --> 00:19:19.586 A:middle
the new MacBook with the

00:19:19.586 --> 00:19:22.286 A:middle
touchbar, but we have software

00:19:22.286 --> 00:19:23.776 A:middle
decode support on all of our

00:19:23.776 --> 00:19:26.096 A:middle
supported iOS and macOS devices.

00:19:26.706 --> 00:19:30.936 A:middle
So where do we have HEIF image

00:19:30.936 --> 00:19:31.446 A:middle
support?

00:19:33.036 --> 00:19:35.406 A:middle
ImageIO was Apple's lowest level

00:19:35.946 --> 00:19:36.806 A:middle
image framework.

00:19:36.976 --> 00:19:38.736 A:middle
And it supports HEIF as a source

00:19:38.736 --> 00:19:41.076 A:middle
for decode, incremental loading,

00:19:41.076 --> 00:19:42.646 A:middle
metadata, and thumbnail

00:19:42.646 --> 00:19:43.296 A:middle
abstraction.

00:19:43.726 --> 00:19:45.066 A:middle
This is in line for their other

00:19:45.066 --> 00:19:47.316 A:middle
supported image formats using

00:19:47.316 --> 00:19:50.796 A:middle
exactly the same APIs.

00:19:51.146 --> 00:19:52.846 A:middle
Core Image also supports HEIF as

00:19:52.846 --> 00:19:54.176 A:middle
a source for real-time image

00:19:54.176 --> 00:19:54.926 A:middle
manipulation.

00:19:55.506 --> 00:19:58.596 A:middle
And the PhotoKit APIs which

00:19:58.596 --> 00:20:00.116 A:middle
allow access to assets in the

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.596 --> 00:20:00.116 A:middle
allow access to assets in the

00:20:00.116 --> 00:20:01.506 A:middle
photo library also supports

00:20:01.506 --> 00:20:03.196 A:middle
direct access to HEIF, but I'll

00:20:03.196 --> 00:20:04.846 A:middle
talk about this framework in a

00:20:04.846 --> 00:20:05.946 A:middle
little more detail in the coming

00:20:05.946 --> 00:20:06.416 A:middle
slides.

00:20:09.276 --> 00:20:11.156 A:middle
Many of Apple's media-based

00:20:11.156 --> 00:20:12.626 A:middle
applications will also natively

00:20:12.626 --> 00:20:13.456 A:middle
work with HEIF.

00:20:13.566 --> 00:20:15.486 A:middle
Notable amongst those is photos,

00:20:15.546 --> 00:20:17.526 A:middle
preview, Quick Look but there

00:20:17.526 --> 00:20:18.386 A:middle
are also many others.

00:20:19.136 --> 00:20:22.196 A:middle
OK. Let's move to our movie

00:20:22.196 --> 00:20:23.446 A:middle
format and talk a little bit

00:20:23.446 --> 00:20:25.586 A:middle
about Apple captured HEVC

00:20:25.676 --> 00:20:26.306 A:middle
movies.

00:20:27.006 --> 00:20:29.866 A:middle
So the changes here aren't as

00:20:29.866 --> 00:20:31.776 A:middle
drastic as our newly supported

00:20:31.776 --> 00:20:32.506 A:middle
image format.

00:20:33.036 --> 00:20:34.496 A:middle
We're still capturing using the

00:20:34.496 --> 00:20:37.406 A:middle
QuickTime file format but with

00:20:37.456 --> 00:20:39.316 A:middle
HEVC coded video frames.

00:20:39.796 --> 00:20:41.086 A:middle
As we've learned for Apple

00:20:41.416 --> 00:20:42.776 A:middle
captured video, we're getting

00:20:42.806 --> 00:20:43.936 A:middle
twice the compression that we're

00:20:43.936 --> 00:20:45.666 A:middle
getting from H.264.

00:20:45.666 --> 00:20:47.336 A:middle
And, once again, just to call

00:20:47.336 --> 00:20:49.106 A:middle
out again, we're using HEVC to

00:20:49.286 --> 00:20:51.086 A:middle
encode both our images and our

00:20:51.086 --> 00:20:51.846 A:middle
video formats.

00:20:56.996 --> 00:20:59.836 A:middle
We also support both an 8- and a

00:20:59.836 --> 00:21:00.816 A:middle
10-bit encoding.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.836 --> 00:21:00.816 A:middle
10-bit encoding.

00:21:01.216 --> 00:21:02.606 A:middle
So those of you that really care

00:21:02.606 --> 00:21:04.156 A:middle
about image quality or deep

00:21:04.156 --> 00:21:06.376 A:middle
color, we have a non-real-time,

00:21:06.426 --> 00:21:07.996 A:middle
a 10-bit software encoder on

00:21:07.996 --> 00:21:09.606 A:middle
macOS to satisfy your needs.

00:21:10.226 --> 00:21:14.076 A:middle
You'll be happy to learn, with

00:21:14.186 --> 00:21:15.176 A:middle
this new format, we have

00:21:15.176 --> 00:21:16.786 A:middle
retained the three character

00:21:16.786 --> 00:21:18.486 A:middle
.mov extensions, so you won't

00:21:18.486 --> 00:21:19.586 A:middle
have to update any of your

00:21:19.866 --> 00:21:21.636 A:middle
filename parses for this media

00:21:21.636 --> 00:21:22.036 A:middle
format.

00:21:22.656 --> 00:21:28.086 A:middle
OK. So where do we have decode

00:21:28.186 --> 00:21:30.686 A:middle
support for HEVC movies?

00:21:30.946 --> 00:21:32.526 A:middle
So we have both 8- and 10-bit

00:21:32.666 --> 00:21:34.626 A:middle
decode which is available on all

00:21:34.626 --> 00:21:35.876 A:middle
our supported platforms with,

00:21:35.926 --> 00:21:38.276 A:middle
once again, macOS 10.13 and iOS

00:21:38.316 --> 00:21:40.026 A:middle
11, but there's a variety of

00:21:40.026 --> 00:21:42.406 A:middle
hardware and software support.

00:21:42.406 --> 00:21:44.646 A:middle
So in iOS, we have both 8- and

00:21:44.646 --> 00:21:46.126 A:middle
10-bit hardware decode on the

00:21:46.126 --> 00:21:47.586 A:middle
minimum config of the A9 chip.

00:21:48.436 --> 00:21:50.556 A:middle
Once again, the iPhone 6S is an

00:21:50.556 --> 00:21:51.366 A:middle
example there.

00:21:52.336 --> 00:21:53.866 A:middle
For macOS, we have 8-bit

00:21:53.866 --> 00:21:54.966 A:middle
hardware decode in

00:21:55.006 --> 00:21:56.416 A:middle
sixth-generation Intel Core

00:21:56.416 --> 00:21:57.966 A:middle
processor which is the Skylake

00:21:57.966 --> 00:21:59.116 A:middle
family of processors.

00:21:59.546 --> 00:22:01.396 A:middle
And we have 10-bit hardware

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.546 --> 00:22:01.396 A:middle
And we have 10-bit hardware

00:22:01.396 --> 00:22:02.746 A:middle
decode support on the

00:22:02.816 --> 00:22:04.386 A:middle
seventh-generation Intel Core

00:22:04.386 --> 00:22:06.096 A:middle
processors or the Kaby Lake

00:22:06.096 --> 00:22:07.306 A:middle
family of processors.

00:22:08.026 --> 00:22:10.236 A:middle
And we have both 8- and 10-bit

00:22:10.236 --> 00:22:12.006 A:middle
software decode across all of

00:22:12.006 --> 00:22:14.816 A:middle
our supported macOS and iOS

00:22:14.866 --> 00:22:15.366 A:middle
platforms.

00:22:16.016 --> 00:22:21.316 A:middle
OK. So where do we support HEVC

00:22:21.316 --> 00:22:22.146 A:middle
movies?

00:22:25.136 --> 00:22:27.066 A:middle
AVFoundation is the primary

00:22:27.066 --> 00:22:28.746 A:middle
framework to manage movies.

00:22:28.976 --> 00:22:30.506 A:middle
And it supports play, create,

00:22:30.506 --> 00:22:32.086 A:middle
and edit workflows for HEVC

00:22:32.086 --> 00:22:32.666 A:middle
content.

00:22:33.166 --> 00:22:36.456 A:middle
Once again, PhotoKit will vend

00:22:36.456 --> 00:22:39.146 A:middle
original HEVC movies.

00:22:39.276 --> 00:22:41.476 A:middle
WebKit will also playback HEVC

00:22:41.476 --> 00:22:45.066 A:middle
movies but only on devices that

00:22:45.066 --> 00:22:46.366 A:middle
have hardware acceleration

00:22:46.436 --> 00:22:48.846 A:middle
and/or macOS desktops.

00:22:49.556 --> 00:22:51.546 A:middle
There's also support to

00:22:51.546 --> 00:22:53.806 A:middle
encourage HLS streams using

00:22:53.806 --> 00:22:54.926 A:middle
HEVC.

00:22:55.016 --> 00:22:56.906 A:middle
This represents a great

00:22:56.906 --> 00:22:59.646 A:middle
opportunity to improve network

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.186 --> 00:23:00.806 A:middle
throughput.

00:23:01.706 --> 00:23:02.836 A:middle
And, in fact, the session

00:23:02.836 --> 00:23:04.136 A:middle
directly after this is going to

00:23:04.136 --> 00:23:06.166 A:middle
talk about this initiative in

00:23:06.166 --> 00:23:07.136 A:middle
much more detail.

00:23:09.456 --> 00:23:11.546 A:middle
Also, we have many Apple

00:23:11.546 --> 00:23:12.786 A:middle
applications that will natively

00:23:12.786 --> 00:23:14.666 A:middle
work with HEVC movies, you know,

00:23:14.666 --> 00:23:15.866 A:middle
QuickTime player, Quick Look

00:23:15.866 --> 00:23:18.226 A:middle
photos but also FaceTime.

00:23:18.386 --> 00:23:20.196 A:middle
This is a great example of HEVC

00:23:20.296 --> 00:23:22.186 A:middle
usage to greatly improve network

00:23:22.186 --> 00:23:22.696 A:middle
throughput.

00:23:23.466 --> 00:23:26.746 A:middle
So we have decode support for

00:23:27.086 --> 00:23:29.626 A:middle
HEVC across all of our devices.

00:23:30.076 --> 00:23:31.116 A:middle
What about playback?

00:23:31.676 --> 00:23:33.246 A:middle
This is where the distinction

00:23:33.246 --> 00:23:34.816 A:middle
between decodable and playable

00:23:34.816 --> 00:23:36.536 A:middle
is very important and

00:23:36.636 --> 00:23:38.566 A:middle
particularly so with HEVC.

00:23:39.276 --> 00:23:41.396 A:middle
This is unfamiliar territory for

00:23:41.396 --> 00:23:42.106 A:middle
many of us.

00:23:42.256 --> 00:23:43.546 A:middle
We don't have hardware

00:23:43.546 --> 00:23:45.086 A:middle
acceleration across all

00:23:45.086 --> 00:23:47.206 A:middle
supported devices for default

00:23:47.206 --> 00:23:47.956 A:middle
capture format.

00:23:48.746 --> 00:23:49.926 A:middle
And this is a problem we haven't

00:23:49.926 --> 00:23:51.526 A:middle
had to deal with for a long time

00:23:51.526 --> 00:23:54.846 A:middle
as H.264 hardware decode is

00:23:54.846 --> 00:23:58.616 A:middle
fairly ubiquitous at this point.

00:23:58.676 --> 00:24:00.046 A:middle
So all of our movie formats are

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.676 --> 00:24:00.046 A:middle
So all of our movie formats are

00:24:00.046 --> 00:24:02.136 A:middle
decodable but on some software

00:24:02.136 --> 00:24:03.576 A:middle
systems, there will be formats

00:24:03.576 --> 00:24:04.456 A:middle
that are much slower than

00:24:04.456 --> 00:24:05.756 A:middle
real-time and really only

00:24:05.796 --> 00:24:07.226 A:middle
supported for export or

00:24:07.226 --> 00:24:08.396 A:middle
transcode workflows.

00:24:08.396 --> 00:24:09.836 A:middle
So how do you make the

00:24:09.836 --> 00:24:12.306 A:middle
determination that a format is

00:24:12.986 --> 00:24:14.506 A:middle
suitable for playback on a given

00:24:14.506 --> 00:24:15.096 A:middle
device?

00:24:16.716 --> 00:24:19.326 A:middle
So AVFoundation, through its

00:24:19.326 --> 00:24:20.776 A:middle
API, supports the notion of

00:24:20.866 --> 00:24:21.616 A:middle
"isPlayable".

00:24:21.616 --> 00:24:23.466 A:middle
And this indicates whether a

00:24:23.466 --> 00:24:25.236 A:middle
device's video level supports

00:24:25.456 --> 00:24:27.266 A:middle
the movie for playback.

00:24:28.086 --> 00:24:29.536 A:middle
If true, you should experience

00:24:29.536 --> 00:24:31.066 A:middle
smooth playback without

00:24:31.066 --> 00:24:32.566 A:middle
incurring any significant power

00:24:32.676 --> 00:24:34.216 A:middle
or [inaudible] costs for videos

00:24:34.216 --> 00:24:35.616 A:middle
of extended durations.

00:24:38.016 --> 00:24:40.586 A:middle
For example, even though Apple

00:24:40.586 --> 00:24:42.386 A:middle
captured 4K30 is decodable

00:24:42.386 --> 00:24:43.456 A:middle
across all of our supported

00:24:43.456 --> 00:24:45.316 A:middle
systems, it's unlikely to be

00:24:45.316 --> 00:24:46.456 A:middle
mapped as playable on some of

00:24:46.456 --> 00:24:47.886 A:middle
our older hardware like the

00:24:47.886 --> 00:24:48.746 A:middle
iPhone 5S.

00:24:48.846 --> 00:24:50.376 A:middle
So this is a call out to

00:24:50.376 --> 00:24:51.056 A:middle
developers.

00:24:51.056 --> 00:24:52.456 A:middle
It's really, really important,

00:24:52.456 --> 00:24:53.906 A:middle
at this junction, for you to be

00:24:54.196 --> 00:24:55.826 A:middle
observing these playable state

00:24:56.256 --> 00:24:58.046 A:middle
to ensure we provide the best

00:24:58.046 --> 00:24:59.426 A:middle
possible user experience.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:03.096 --> 00:25:05.446 A:middle
OK. For many developers, their

00:25:05.446 --> 00:25:06.886 A:middle
first interaction with original

00:25:06.886 --> 00:25:08.546 A:middle
HEIF and HEVC content will be

00:25:08.546 --> 00:25:10.556 A:middle
through one of the public photo

00:25:11.376 --> 00:25:11.526 A:middle
APIs.

00:25:12.756 --> 00:25:14.646 A:middle
PhotoKit is the widely used

00:25:14.646 --> 00:25:16.146 A:middle
photos API on iOS.

00:25:16.866 --> 00:25:17.906 A:middle
And during his conference,

00:25:17.906 --> 00:25:18.946 A:middle
they'll be some announcements

00:25:18.946 --> 00:25:21.086 A:middle
about its availability on macOS.

00:25:21.086 --> 00:25:23.056 A:middle
So look to the what's new photo

00:25:23.056 --> 00:25:24.056 A:middle
session tomorrow for more

00:25:24.056 --> 00:25:26.016 A:middle
details on that, but it will

00:25:26.016 --> 00:25:27.996 A:middle
vend original HEIF and HEVC

00:25:28.686 --> 00:25:30.116 A:middle
movie content.

00:25:30.116 --> 00:25:31.426 A:middle
Also, the deprecated

00:25:31.426 --> 00:25:33.166 A:middle
AssetLibrary framework is still

00:25:33.166 --> 00:25:35.036 A:middle
very popular in the development

00:25:35.036 --> 00:25:35.436 A:middle
community.

00:25:35.436 --> 00:25:38.156 A:middle
And it will also vend HEIF and

00:25:39.096 --> 00:25:40.746 A:middle
HEVC content.

00:25:41.326 --> 00:25:42.806 A:middle
On macOS, there is also the

00:25:42.806 --> 00:25:43.826 A:middle
Media Library API.

00:25:44.506 --> 00:25:46.616 A:middle
For this release, it will only

00:25:46.616 --> 00:25:47.826 A:middle
be vending transcoded

00:25:47.826 --> 00:25:49.786 A:middle
representations of HEIF and HEVC

00:25:49.786 --> 00:25:52.586 A:middle
as JPEG and H.264 have been an

00:25:52.586 --> 00:25:53.596 A:middle
equivalent resolution.

00:25:54.086 --> 00:25:58.106 A:middle
Because of the popularity of

00:25:58.106 --> 00:25:59.616 A:middle
PhotoKit to access media on

00:25:59.616 --> 00:26:00.996 A:middle
Apple platforms, I wanted to

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.616 --> 00:26:00.996 A:middle
Apple platforms, I wanted to

00:26:00.996 --> 00:26:02.346 A:middle
highlight some of the classes

00:26:02.726 --> 00:26:03.836 A:middle
through which you can access

00:26:03.836 --> 00:26:05.506 A:middle
HEIF and HEVC content.

00:26:07.156 --> 00:26:09.216 A:middle
When requesting images, you use

00:26:09.216 --> 00:26:10.296 A:middle
the PHImageManager.

00:26:10.996 --> 00:26:12.376 A:middle
Through this class, you can

00:26:12.376 --> 00:26:14.336 A:middle
request original HEIF images.

00:26:15.296 --> 00:26:16.466 A:middle
Also, remember requesting video

00:26:16.466 --> 00:26:18.416 A:middle
objects, you can also use the

00:26:18.416 --> 00:26:20.756 A:middle
PHImageManager to request HEVC

00:26:20.756 --> 00:26:21.646 A:middle
movies.

00:26:23.436 --> 00:26:26.936 A:middle
For managing resources, we have

00:26:26.936 --> 00:26:29.386 A:middle
the PHAssetResourceManager which

00:26:29.386 --> 00:26:30.956 A:middle
allows you to manage all the

00:26:30.956 --> 00:26:32.266 A:middle
discrete resources in the photo

00:26:32.266 --> 00:26:32.756 A:middle
library.

00:26:33.036 --> 00:26:34.466 A:middle
Amongst those could be HEIF and

00:26:34.466 --> 00:26:35.506 A:middle
HEVC content.

00:26:36.026 --> 00:26:40.296 A:middle
And for edit workflows, we have

00:26:40.296 --> 00:26:42.336 A:middle
the PHContentEditinginput.

00:26:42.336 --> 00:26:44.506 A:middle
And it will support HEIF image

00:26:44.556 --> 00:26:46.856 A:middle
or HEVC movies as input to an

00:26:46.856 --> 00:26:47.426 A:middle
edit session.

00:26:47.426 --> 00:26:52.006 A:middle
So a point that I really want to

00:26:52.006 --> 00:26:53.256 A:middle
stress here is that if you're

00:26:53.256 --> 00:26:54.686 A:middle
already using Apple frameworks

00:26:54.686 --> 00:26:56.616 A:middle
to manage media, the transition

00:26:56.616 --> 00:26:58.546 A:middle
to HEIF or HEVC should be

00:26:58.546 --> 00:26:59.556 A:middle
transparent.

00:26:59.946 --> 00:27:01.256 A:middle
On the other hand, if you

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.946 --> 00:27:01.256 A:middle
On the other hand, if you

00:27:01.256 --> 00:27:02.876 A:middle
[inaudible] image or video

00:27:02.876 --> 00:27:04.976 A:middle
stack, you might need to revisit

00:27:04.976 --> 00:27:06.726 A:middle
that integration and possibly

00:27:06.726 --> 00:27:07.926 A:middle
consider adopting one of the

00:27:07.926 --> 00:27:09.656 A:middle
appropriate Apple frameworks.

00:27:10.286 --> 00:27:12.766 A:middle
Amongst those are ImageIO for

00:27:12.766 --> 00:27:15.666 A:middle
images, AVFoundation for videos,

00:27:17.096 --> 00:27:19.516 A:middle
Core Image for video frame or

00:27:19.676 --> 00:27:20.696 A:middle
image manipulation.

00:27:21.806 --> 00:27:23.676 A:middle
We have UIKit for presentation.

00:27:24.246 --> 00:27:27.866 A:middle
We have PhotoKit to access the

00:27:27.866 --> 00:27:29.116 A:middle
resources within the photo

00:27:29.116 --> 00:27:29.546 A:middle
library.

00:27:30.396 --> 00:27:32.126 A:middle
So usage of HEIF and HEVC

00:27:32.126 --> 00:27:33.786 A:middle
through these frameworks will be

00:27:33.786 --> 00:27:34.496 A:middle
transparent.

00:27:35.076 --> 00:27:38.216 A:middle
I'm going to make a second call

00:27:38.216 --> 00:27:39.496 A:middle
out to the session that we have

00:27:39.576 --> 00:27:41.556 A:middle
Friday at 11:00 a.m. working

00:27:41.556 --> 00:27:42.446 A:middle
with HEIF and HEVC.

00:27:42.536 --> 00:27:44.326 A:middle
There are lots of great code

00:27:44.326 --> 00:27:46.546 A:middle
examples of using HEIF and HEVC

00:27:46.666 --> 00:27:48.206 A:middle
with these frameworks.

00:27:48.936 --> 00:27:50.506 A:middle
I highly recommend it.

00:27:51.786 --> 00:27:53.876 A:middle
OK. That was access.

00:27:54.136 --> 00:27:55.606 A:middle
Let's move on to creation.

00:27:57.416 --> 00:27:59.296 A:middle
Where and how can we create HEIF

00:27:59.296 --> 00:28:01.426 A:middle
image and HEVC movie content?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.296 --> 00:28:01.426 A:middle
image and HEVC movie content?

00:28:02.636 --> 00:28:04.526 A:middle
So, as you can see, we currently

00:28:04.526 --> 00:28:06.876 A:middle
only have HEIF encode support

00:28:06.876 --> 00:28:09.386 A:middle
and hardware on iOS with minimum

00:28:09.386 --> 00:28:10.856 A:middle
configuration being the A10

00:28:10.856 --> 00:28:12.606 A:middle
Fusion chip, an example, of

00:28:12.606 --> 00:28:14.326 A:middle
which, is the iPhone 7 and the

00:28:14.326 --> 00:28:15.306 A:middle
iPhone 7 Plus.

00:28:15.816 --> 00:28:17.116 A:middle
So the notable exception at this

00:28:17.116 --> 00:28:18.556 A:middle
point in time is HEIF encode

00:28:18.556 --> 00:28:19.806 A:middle
support on macOS.

00:28:20.376 --> 00:28:25.156 A:middle
How do we create HEIF images?

00:28:26.146 --> 00:28:27.966 A:middle
ImageIO supports HEIF as a

00:28:27.966 --> 00:28:28.726 A:middle
destination.

00:28:29.286 --> 00:28:30.166 A:middle
So you could consider

00:28:30.166 --> 00:28:32.706 A:middle
transcoding your JPEG resources

00:28:32.706 --> 00:28:34.946 A:middle
to HEIF from great storage or

00:28:34.946 --> 00:28:35.976 A:middle
network benefits.

00:28:36.446 --> 00:28:39.866 A:middle
Also, the AVFoundation capture

00:28:39.866 --> 00:28:41.876 A:middle
APIs will support HEIF captured

00:28:41.876 --> 00:28:46.826 A:middle
directly from the camera.

00:28:46.906 --> 00:28:47.176 A:middle
That's [inaudible].

00:28:47.176 --> 00:28:49.486 A:middle
So all the Apple camera modes

00:28:49.486 --> 00:28:50.876 A:middle
will default to HEIF with the

00:28:50.876 --> 00:28:52.296 A:middle
bursts being the only exception.

00:28:52.616 --> 00:28:53.566 A:middle
So if you have installed the

00:28:53.566 --> 00:28:55.016 A:middle
seed builds on supported

00:28:55.016 --> 00:28:56.406 A:middle
hardware and you're taking

00:28:56.406 --> 00:28:58.846 A:middle
photos, you're capturing them in

00:28:58.846 --> 00:28:59.676 A:middle
the HEIF format.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.956 --> 00:29:02.786 A:middle
It's also worth reemphasizing

00:29:02.986 --> 00:29:04.716 A:middle
that only the HEIC variation of

00:29:04.716 --> 00:29:06.346 A:middle
HEIF is supported from code

00:29:06.346 --> 00:29:07.326 A:middle
through Apple frameworks.

00:29:07.796 --> 00:29:09.336 A:middle
So HEIF images with the .hvc

00:29:09.426 --> 00:29:10.666 A:middle
encoded image.

00:29:11.206 --> 00:29:15.436 A:middle
Let's move to movie creation.

00:29:15.716 --> 00:29:17.566 A:middle
Here are at the table showing

00:29:17.786 --> 00:29:19.346 A:middle
where we have HEVC encode

00:29:19.346 --> 00:29:19.816 A:middle
support.

00:29:20.696 --> 00:29:22.506 A:middle
So in iOS, we have 8-bit encode

00:29:22.506 --> 00:29:24.096 A:middle
support with minimum

00:29:24.096 --> 00:29:25.866 A:middle
configuration of the A10 Fusion

00:29:25.866 --> 00:29:27.536 A:middle
chip, the iPhone 7 for example.

00:29:28.326 --> 00:29:30.556 A:middle
On macOS, we have 8-bit hardware

00:29:30.556 --> 00:29:32.066 A:middle
encode on the sixth-generation

00:29:32.066 --> 00:29:33.386 A:middle
Intel Core processor or the

00:29:33.386 --> 00:29:35.046 A:middle
Skylake family of processors.

00:29:35.956 --> 00:29:38.016 A:middle
And also on macOS in software we

00:29:38.016 --> 00:29:40.346 A:middle
have a 10-bit encode support.

00:29:41.106 --> 00:29:43.426 A:middle
How do we create HEVC movies?

00:29:44.926 --> 00:29:46.886 A:middle
So AVFoundation is a framework

00:29:46.886 --> 00:29:48.016 A:middle
for movie creation.

00:29:48.536 --> 00:29:50.216 A:middle
And HEVC movies can be created

00:29:50.216 --> 00:29:51.786 A:middle
through an AVFoundation export

00:29:51.786 --> 00:29:52.226 A:middle
session.

00:29:52.766 --> 00:29:56.796 A:middle
So you could export H.264 to

00:29:56.796 --> 00:29:57.886 A:middle
HEVC for great storage or

00:29:57.886 --> 00:29:59.086 A:middle
network optimizations.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.916 --> 00:30:02.876 A:middle
You can also capture HEIF movies

00:30:02.876 --> 00:30:04.276 A:middle
directly through an AVFoundation

00:30:04.276 --> 00:30:08.166 A:middle
capture session with a camera.

00:30:08.286 --> 00:30:09.966 A:middle
Also, all the current movie

00:30:09.966 --> 00:30:11.986 A:middle
camera modes will default to

00:30:11.986 --> 00:30:13.676 A:middle
HEVC encoded movies.

00:30:13.676 --> 00:30:15.216 A:middle
So, once again, if you've

00:30:15.216 --> 00:30:17.056 A:middle
installed the seed builds and

00:30:17.056 --> 00:30:19.686 A:middle
you're taking movies, you're

00:30:19.686 --> 00:30:21.506 A:middle
capturing them as HEVC movies.

00:30:22.066 --> 00:30:25.476 A:middle
That was creation.

00:30:26.166 --> 00:30:27.726 A:middle
Next we come to transfer.

00:30:28.766 --> 00:30:30.496 A:middle
So what questions should we be

00:30:30.496 --> 00:30:31.436 A:middle
considering when we want to

00:30:31.436 --> 00:30:33.086 A:middle
transfer HEIF image of HEVC

00:30:33.086 --> 00:30:36.876 A:middle
movies from a creation device or

00:30:36.876 --> 00:30:38.246 A:middle
other supported devices?

00:30:38.846 --> 00:30:42.626 A:middle
When transferring HEIF or HEVC

00:30:42.626 --> 00:30:44.386 A:middle
off a supported device, you

00:30:44.386 --> 00:30:45.716 A:middle
don't have the same ecosystem to

00:30:45.716 --> 00:30:47.916 A:middle
code support that JPEG or H.264

00:30:47.916 --> 00:30:48.446 A:middle
provides.

00:30:49.066 --> 00:30:49.876 A:middle
You might want to consider

00:30:49.876 --> 00:30:50.686 A:middle
transcoding.

00:30:52.036 --> 00:30:53.596 A:middle
There are a few approaches you

00:30:53.596 --> 00:30:54.356 A:middle
might want to consider.

00:30:54.916 --> 00:30:56.616 A:middle
The first and the simplest would

00:30:56.616 --> 00:30:58.176 A:middle
be to always transcode.

00:30:59.326 --> 00:31:01.076 A:middle
Another option might be to

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.326 --> 00:31:01.076 A:middle
Another option might be to

00:31:01.076 --> 00:31:03.316 A:middle
support a capabilities exchange.

00:31:03.736 --> 00:31:07.056 A:middle
Let's start with looking at an

00:31:07.056 --> 00:31:08.336 A:middle
example for workflow where you

00:31:08.336 --> 00:31:09.756 A:middle
might always transcode.

00:31:10.316 --> 00:31:13.746 A:middle
In this example, you have your

00:31:13.746 --> 00:31:15.096 A:middle
own social networking client

00:31:15.216 --> 00:31:17.096 A:middle
that allows users to add HEIF or

00:31:17.096 --> 00:31:19.256 A:middle
HEVC content to a timeline.

00:31:20.616 --> 00:31:22.366 A:middle
So with this architecture, there

00:31:22.366 --> 00:31:23.566 A:middle
is really no opportunity to

00:31:23.566 --> 00:31:25.406 A:middle
evaluate the capabilities of all

00:31:25.406 --> 00:31:27.136 A:middle
the receiving devices and

00:31:27.136 --> 00:31:28.566 A:middle
possibly no server transcode

00:31:28.566 --> 00:31:29.016 A:middle
support.

00:31:30.326 --> 00:31:32.616 A:middle
So the option here is to always

00:31:32.616 --> 00:31:33.316 A:middle
transcode.

00:31:33.886 --> 00:31:38.636 A:middle
So for this scenario, both

00:31:38.826 --> 00:31:40.286 A:middle
supported and unsupported

00:31:40.286 --> 00:31:41.676 A:middle
devices would receive the

00:31:41.676 --> 00:31:43.546 A:middle
transcoded representation, for

00:31:43.546 --> 00:31:48.736 A:middle
example a JPEG or H.264.

00:31:48.736 --> 00:31:50.176 A:middle
Another approach that we might

00:31:50.176 --> 00:31:50.986 A:middle
want to consider is a

00:31:50.986 --> 00:31:52.426 A:middle
capabilities exchange.

00:31:53.376 --> 00:31:54.816 A:middle
Let's take a look at an example

00:31:54.866 --> 00:31:55.716 A:middle
of that workflow.

00:31:57.106 --> 00:31:58.186 A:middle
So here you might have a

00:31:58.756 --> 00:32:00.036 A:middle
application that is adopted,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.756 --> 00:32:00.036 A:middle
application that is adopted,

00:32:00.036 --> 00:32:01.706 A:middle
Apple's Multipeer Connectivity

00:32:01.706 --> 00:32:02.126 A:middle
APIs.

00:32:03.036 --> 00:32:04.586 A:middle
If you're exchanging media with

00:32:04.586 --> 00:32:06.326 A:middle
a supported device, you don't

00:32:06.326 --> 00:32:07.806 A:middle
want to incur the cost of

00:32:07.806 --> 00:32:09.306 A:middle
transcode and high network

00:32:09.306 --> 00:32:10.866 A:middle
latency of always sending a

00:32:10.866 --> 00:32:13.166 A:middle
transcoded JPEG or H.264.

00:32:13.166 --> 00:32:16.456 A:middle
So you could introduce your own

00:32:16.456 --> 00:32:17.836 A:middle
capabilities exchange in the

00:32:17.836 --> 00:32:18.786 A:middle
initial handshake.

00:32:21.056 --> 00:32:23.096 A:middle
The sending device would

00:32:23.096 --> 00:32:24.696 A:middle
evaluate the capabilities of the

00:32:24.696 --> 00:32:26.326 A:middle
receiving device and decide

00:32:26.326 --> 00:32:27.636 A:middle
whether to transcode or not.

00:32:28.396 --> 00:32:30.556 A:middle
So the hope, over time, is that

00:32:30.556 --> 00:32:31.946 A:middle
as the support for these formats

00:32:32.106 --> 00:32:35.516 A:middle
grows, the amount of times that

00:32:35.516 --> 00:32:37.936 A:middle
we need to transcode decreases.

00:32:38.796 --> 00:32:40.296 A:middle
So this strategy is really

00:32:40.296 --> 00:32:42.016 A:middle
suitable for both P2P and in

00:32:42.016 --> 00:32:43.396 A:middle
client/server architectures.

00:32:46.056 --> 00:32:47.946 A:middle
So how is Apple handling many

00:32:47.946 --> 00:32:48.986 A:middle
similar workflows?

00:32:49.376 --> 00:32:52.996 A:middle
Here are a couple of examples.

00:32:53.256 --> 00:32:54.786 A:middle
So it's mail.

00:32:54.876 --> 00:32:56.176 A:middle
It's not really possible to

00:32:56.176 --> 00:32:57.686 A:middle
evaluate the capabilities of all

00:32:57.686 --> 00:32:58.676 A:middle
the receiving clients.

00:32:58.676 --> 00:32:59.916 A:middle
And we don't have server

00:32:59.916 --> 00:33:02.056 A:middle
transcode support so before

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.916 --> 00:33:02.056 A:middle
transcode support so before

00:33:02.056 --> 00:33:05.136 A:middle
sending HEIF or HEVC as a mail

00:33:05.216 --> 00:33:07.426 A:middle
attachment, we always transcode.

00:33:07.966 --> 00:33:10.366 A:middle
Now for those developers that

00:33:10.366 --> 00:33:12.526 A:middle
have share extensions, we'll

00:33:12.526 --> 00:33:15.416 A:middle
also transcode before handing

00:33:15.416 --> 00:33:17.966 A:middle
off a HEIF or HEVC.

00:33:18.086 --> 00:33:20.056 A:middle
This simplifies that integration

00:33:20.126 --> 00:33:21.986 A:middle
for the time being anyway.

00:33:23.876 --> 00:33:25.986 A:middle
We've also adopted the

00:33:25.986 --> 00:33:27.106 A:middle
capabilities exchange for a

00:33:27.106 --> 00:33:28.116 A:middle
number of workflows.

00:33:28.416 --> 00:33:30.566 A:middle
Example of those, P2P and

00:33:30.756 --> 00:33:31.316 A:middle
AirDrop.

00:33:32.016 --> 00:33:34.596 A:middle
So with these integrations, we

00:33:34.596 --> 00:33:36.426 A:middle
always evaluate the capabilities

00:33:36.426 --> 00:33:38.756 A:middle
of the receiver before deciding

00:33:38.836 --> 00:33:40.966 A:middle
whether to transcode or not.

00:33:44.396 --> 00:33:46.216 A:middle
So in summary, there are a few

00:33:46.256 --> 00:33:48.636 A:middle
points with regards to HEIF and

00:33:48.636 --> 00:33:51.466 A:middle
HEVC that I'd really like to

00:33:51.576 --> 00:33:51.916 A:middle
highlight.

00:33:51.916 --> 00:33:54.056 A:middle
HEVC is Apple's next-generation

00:33:54.056 --> 00:33:55.756 A:middle
codec, which we're going to use

00:33:56.016 --> 00:33:58.216 A:middle
for both encoding images and

00:33:58.216 --> 00:33:59.946 A:middle
videos and is providing up to

00:33:59.946 --> 00:34:01.056 A:middle
two times the compression

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.946 --> 00:34:01.056 A:middle
two times the compression

00:34:01.056 --> 00:34:02.306 A:middle
improvement for Apple captured

00:34:02.306 --> 00:34:02.826 A:middle
content.

00:34:03.356 --> 00:34:07.256 A:middle
We're adopting HEIF as our image

00:34:07.256 --> 00:34:08.025 A:middle
file format.

00:34:09.226 --> 00:34:10.775 A:middle
This image container provides us

00:34:10.775 --> 00:34:12.376 A:middle
with a flexible format which we

00:34:12.376 --> 00:34:15.716 A:middle
can use well into the future.

00:34:16.286 --> 00:34:18.166 A:middle
If you're using Apple frameworks

00:34:18.166 --> 00:34:20.196 A:middle
within the Apple ecosystem, the

00:34:20.196 --> 00:34:22.446 A:middle
transition to HEIF and HEVC

00:34:22.446 --> 00:34:23.775 A:middle
should be mostly transparent.

00:34:24.426 --> 00:34:25.326 A:middle
But if you need to move that

00:34:25.326 --> 00:34:26.485 A:middle
content outside of that

00:34:26.485 --> 00:34:28.136 A:middle
ecosystem, you should consider

00:34:28.616 --> 00:34:30.286 A:middle
your transcoding options to

00:34:30.286 --> 00:34:31.335 A:middle
provide the best backwards

00:34:31.335 --> 00:34:34.335 A:middle
compatibility for our users.

00:34:34.976 --> 00:34:38.366 A:middle
And finally, we really want

00:34:38.366 --> 00:34:41.306 A:middle
developers to embrace HEIF and

00:34:41.306 --> 00:34:43.516 A:middle
HEVC for creation and access

00:34:43.565 --> 00:34:45.456 A:middle
workflows as we believe this

00:34:45.456 --> 00:34:47.056 A:middle
will provide great benefits to

00:34:47.056 --> 00:34:48.766 A:middle
not only developers but all of

00:34:48.766 --> 00:34:49.696 A:middle
our customers.

00:34:50.226 --> 00:34:52.065 A:middle
So for more details on this

00:34:52.065 --> 00:34:53.226 A:middle
particular session, you can go

00:34:53.226 --> 00:34:59.786 A:middle
to the following website, but we

00:34:59.786 --> 00:35:02.176 A:middle
also have a number of sessions

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.786 --> 00:35:02.176 A:middle
also have a number of sessions

00:35:02.176 --> 00:35:02.586 A:middle
and labs.

00:35:02.716 --> 00:35:04.196 A:middle
We can learn more about HEIF and

00:35:04.196 --> 00:35:04.636 A:middle
HEVC.

00:35:05.006 --> 00:35:06.006 A:middle
Just a few to highlight.

00:35:06.816 --> 00:35:08.006 A:middle
The session following this is

00:35:08.006 --> 00:35:10.436 A:middle
Advances in HTTP Live Streaming.

00:35:13.356 --> 00:35:15.246 A:middle
We also have Working with HEIF

00:35:15.246 --> 00:35:16.636 A:middle
and HEVC at 11:00 a.m. on

00:35:16.636 --> 00:35:17.176 A:middle
Friday.

00:35:18.686 --> 00:35:20.856 A:middle
We have a great video, which you

00:35:20.856 --> 00:35:22.566 A:middle
can learn more about the HEIF

00:35:23.016 --> 00:35:23.776 A:middle
image format.

00:35:24.666 --> 00:35:26.796 A:middle
Thanks for your time today.

00:35:26.796 --> 00:35:27.996 A:middle
And we look forward to answering

00:35:27.996 --> 00:35:29.536 A:middle
your questions at the labs and

00:35:29.536 --> 00:35:30.476 A:middle
sessions for the rest of the

00:35:30.476 --> 00:35:30.726 A:middle
week.

00:35:31.056 --> 00:35:31.376 A:middle
Thank you.

00:35:32.516 --> 00:35:35.500 A:middle
[ Applause ]

